/*
 * Copyright (c) 2010-2023 GraphDefined GmbH
 * This file is part of Vanaheimr Hermod <https://www.github.com/Vanaheimr/Hermod>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#region Usings

using System.Text;
using System.Drawing;
using System.Drawing.Imaging;
using System.Diagnostics;
using System.Security.Authentication;
using System.Security.Cryptography;
using System.Collections.Concurrent;
using System.Runtime.InteropServices;

using Newtonsoft.Json.Linq;

using Org.BouncyCastle.Asn1.Sec;
using Org.BouncyCastle.Asn1.X9;
using Org.BouncyCastle.Bcpg.OpenPgp;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.X509;

using org.GraphDefined.Vanaheimr.Illias;
using org.GraphDefined.Vanaheimr.Styx.Arrows;
using org.GraphDefined.Vanaheimr.Warden;
using org.GraphDefined.Vanaheimr.Aegir;
using org.GraphDefined.Vanaheimr.BouncyCastle;
using org.GraphDefined.Vanaheimr.Hermod;
using org.GraphDefined.Vanaheimr.Hermod.DNS;
using org.GraphDefined.Vanaheimr.Hermod.Mail;
using org.GraphDefined.Vanaheimr.Hermod.SMTP;
using org.GraphDefined.Vanaheimr.Hermod.HTTP;
using org.GraphDefined.Vanaheimr.Hermod.HTTP.Notifications;
using org.GraphDefined.Vanaheimr.Hermod.Sockets;
using org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP;
using org.GraphDefined.Vanaheimr.Hermod.Logging;

#endregion

namespace org.GraphDefined.Vanaheimr.Hermod.HTTP
{

    /// <summary>
    /// A password quality check delegate.
    /// </summary>
    /// <param name="Password">The password to check.</param>
    /// <returns>A quality metric for the given password.</returns>
    public delegate Single PasswordQualityCheckDelegate(String Password);


    /// <summary>
    /// Extension method for the HTTPExt API.
    /// </summary>
    public static class HTTPExtAPIExtensions
    {

        #region ParseUserId(this HTTPRequest, HTTPExtAPI, out UserId,           out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="HTTPExtAPI">The HTTPExt API.</param>
        /// <param name="UserId">The parsed unique user identification.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseUserId(this HTTPRequest           HTTPRequest,
                                          HTTPExtAPI                   HTTPExtAPI,
                                          out User_Id?               UserId,
                                          out HTTPResponse.Builder?  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest is null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (HTTPExtAPI    is null)
                throw new ArgumentNullException(nameof(HTTPExtAPI),     "The given HTTPExt API must not be null!");

            #endregion

            UserId        = null;
            HTTPResponse  = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            UserId = User_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!UserId.HasValue)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid UserId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }


        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="HTTPExtAPI">The HTTPExt API.</param>
        /// <param name="UserId">The parsed unique user identification.</param>
        /// <param name="HTTPResponseBuilder">A HTTP error response builder.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseUserId2(this HTTPRequest          HTTPRequest,
                                           HTTPExtAPI                HTTPExtAPI,
                                           out User_Id?              UserId,
                                           ref HTTPResponse.Builder  HTTPResponseBuilder)
        {

            if (HTTPRequest.ParsedURLParameters.Length < 1) {
                HTTPResponseBuilder.Content = @"{ ""description"": ""Missing user identification!"" }".ToUTF8Bytes();
                UserId = null;
                return false;
            }

            UserId = User_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!UserId.HasValue) {
                HTTPResponseBuilder.Content = @"{ ""description"": ""Invalid user identification!"" }".ToUTF8Bytes();
                UserId = null;
                return false;
            }

            return true;

        }

        #endregion

        #region ParseUser  (this HTTPRequest, HTTPExtAPI, out UserId, out User, out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="HTTPExtAPI">The HTTPExt API.</param>
        /// <param name="UserId">The parsed unique user identification.</param>
        /// <param name="User">The resolved user.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseUser(this HTTPRequest           HTTPRequest,
                                        HTTPExtAPI                   HTTPExtAPI,
                                        out User_Id?               UserId,
                                        out IUser?                 User,
                                        out HTTPResponse.Builder?  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest is null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (HTTPExtAPI    is null)
                throw new ArgumentNullException(nameof(HTTPExtAPI),     "The given HTTPExt API must not be null!");

            #endregion

            UserId        = null;
            User          = null;
            HTTPResponse  = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            UserId = User_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!UserId.HasValue) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid UserId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            if (!HTTPExtAPI.TryGetUser(UserId.Value, out User)) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.NotFound,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Unknown UserId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion


        #region ParseUserGroupId(this HTTPRequest, HTTPExtAPI, out HTTPExtAPI,                 out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="HTTPExtAPI">The HTTPExt API.</param>
        /// <param name="UserGroupId">The parsed unique user identification.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseUserGroupId(this HTTPRequest           HTTPRequest,
                                               HTTPExtAPI                   HTTPExtAPI,
                                               out UserGroup_Id?          UserGroupId,
                                               out HTTPResponse.Builder?  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest is null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (HTTPExtAPI    is null)
                throw new ArgumentNullException(nameof(HTTPExtAPI),     "The given HTTPExt API must not be null!");

            #endregion

            UserGroupId   = null;
            HTTPResponse  = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            UserGroupId = UserGroup_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!UserGroupId.HasValue)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid UserGroupId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion

        #region ParseUserGroup  (this HTTPRequest, HTTPExtAPI, out UserGroupId, out UserGroup, out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="HTTPExtAPI">The HTTPExt API.</param>
        /// <param name="UserGroupId">The parsed unique user identification.</param>
        /// <param name="UserGroup">The resolved user.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseUserGroup(this HTTPRequest           HTTPRequest,
                                             HTTPExtAPI                   HTTPExtAPI,
                                             out UserGroup_Id?          UserGroupId,
                                             out IUserGroup?            UserGroup,
                                             out HTTPResponse.Builder?  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest is null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (HTTPExtAPI    is null)
                throw new ArgumentNullException(nameof(HTTPExtAPI),     "The given HTTPExt API must not be null!");

            #endregion

            UserGroupId   = null;
            UserGroup     = null;
            HTTPResponse  = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            UserGroupId = UserGroup_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!UserGroupId.HasValue) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid UserGroupId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            if (!HTTPExtAPI.TryGetUserGroup(UserGroupId.Value, out UserGroup)) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.NotFound,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Unknown UserGroupId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion


        #region ParseOrganizationId(this HTTPRequest, HTTPExtAPI, out OrganizationId,                   out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="HTTPExtAPI">The Organizations API.</param>
        /// <param name="OrganizationId">The parsed unique user identification.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseOrganizationId(this HTTPRequest           HTTPRequest,
                                                  HTTPExtAPI                   HTTPExtAPI,
                                                  out Organization_Id?       OrganizationId,
                                                  out HTTPResponse.Builder?  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest is null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (HTTPExtAPI    is null)
                throw new ArgumentNullException(nameof(HTTPExtAPI),     "The given Organizations API must not be null!");

            #endregion

            OrganizationId  = null;
            HTTPResponse    = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            OrganizationId = Organization_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!OrganizationId.HasValue)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid OrganizationId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion

        #region ParseOrganization  (this HTTPRequest, HTTPExtAPI, out OrganizationId, out Organization, out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="HTTPExtAPI">The Organizations API.</param>
        /// <param name="OrganizationId">The parsed unique user identification.</param>
        /// <param name="Organization">The resolved user.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseOrganization(this HTTPRequest           HTTPRequest,
                                                HTTPExtAPI                   HTTPExtAPI,
                                                out Organization_Id?       OrganizationId,
                                                out IOrganization?         Organization,
                                                out HTTPResponse.Builder?  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest is null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (HTTPExtAPI    is null)
                throw new ArgumentNullException(nameof(HTTPExtAPI),     "The given Organizations API must not be null!");

            #endregion

            OrganizationId  = null;
            Organization    = null;
            HTTPResponse    = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            OrganizationId = Organization_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!OrganizationId.HasValue) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid OrganizationId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            if (!HTTPExtAPI.TryGetOrganization(OrganizationId.Value, out Organization)) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.NotFound,
                    Server          = HTTPExtAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Unknown OrganizationId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion


        #region CreateUser           (Id, Name, EMail,                            Password = null, Description = null, PublicKeyRing = null, SecretKeyRing = null, MobilePhone = null, IsPublic = true, IsDisabled = false, IsAuthenticated = false)

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <param name="HTTPExtAPI">The HTTPExt API.</param>
        /// <param name="Id">The unique identification of the user.</param>
        /// <param name="EMail">The primary e-mail of the user.</param>
        /// <param name="Password">An optional password of the user.</param>
        /// <param name="Name">An offical (multi-language) name of the user.</param>
        /// <param name="Description">An optional (multi-language) description of the user.</param>
        /// <param name="PublicKeyRing">An optional PGP/GPG public keyring of the user.</param>
        /// <param name="SecretKeyRing">An optional PGP/GPG secret keyring of the user.</param>
        /// <param name="UserLanguage">The language setting of the user.</param>
        /// <param name="Telephone">An optional telephone number of the user.</param>
        /// <param name="MobilePhone">An optional mobile telephone number of the user.</param>
        /// <param name="Use2AuthFactor">Whether to use a second authentication factor.</param>
        /// <param name="Telegram">An optional telegram account name of the user.</param>
        /// <param name="Homepage">The homepage of the user.</param>
        /// <param name="GeoLocation">An optional geographical location of the user.</param>
        /// <param name="Address">An optional address of the user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="AcceptedEULA">Timestamp when the user accepted the End-User-License-Agreement.</param>
        /// <param name="IsAuthenticated">The user will not be shown in user listings, as its primary e-mail address is not yet authenticated.</param>
        /// <param name="IsDisabled">The user will be shown in user listings.</param>
        /// 
        /// <param name="DataSource">The source of all this data, e.g. an automatic importer.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async static Task<IUser?> CreateUser(this HTTPExtAPI       HTTPExtAPI,
                                                    User_Id             Id,
                                                    I18NString          Name,
                                                    SimpleEMailAddress  EMail,
                                                    Password?           Password                   = null,
                                                    I18NString?         Description                = null,
                                                    PgpPublicKeyRing?   PublicKeyRing              = null,
                                                    PgpSecretKeyRing?   SecretKeyRing              = null,
                                                    Languages           UserLanguage               = Languages.en,
                                                    PhoneNumber?        Telephone                  = null,
                                                    PhoneNumber?        MobilePhone                = null,
                                                    Use2AuthFactor      Use2AuthFactor             = Use2AuthFactor.None,
                                                    String?             Telegram                   = null,
                                                    String?             Homepage                   = null,
                                                    GeoCoordinate?      GeoLocation                = null,
                                                    Address?            Address                    = null,
                                                    Boolean             SkipDefaultNotifications   = false,
                                                    Boolean             SkipNewUserEMail           = false,
                                                    Boolean             SkipNewUserNotifications   = false,
                                                    DateTime?           AcceptedEULA               = null,
                                                    Boolean             IsAuthenticated            = false,
                                                    Boolean             IsDisabled                 = false,

                                                    String              DataSource                 = "",
                                                    EventTracking_Id?   EventTrackingId            = null,
                                                    User_Id?            CurrentUserId              = null)
        {

            var addUserResult = await HTTPExtAPI.AddUser(new User(
                                                           Id,
                                                           Name,
                                                           EMail,
                                                           Description,
                                                           PublicKeyRing,
                                                           SecretKeyRing,
                                                           UserLanguage,
                                                           Telephone,
                                                           MobilePhone,
                                                           Use2AuthFactor,
                                                           Telegram,
                                                           Homepage,
                                                           GeoLocation,
                                                           Address,
                                                           AcceptedEULA,
                                                           IsAuthenticated,
                                                           IsDisabled,
                                                           DataSource: DataSource
                                                       ),

                                                       SkipDefaultNotifications,
                                                       SkipNewUserEMail,
                                                       SkipNewUserNotifications,

                                                       async (_timestamp, _user, _eventTrackingId, _currentUserId) => {
                                                           if (Password.HasValue && _user.API is not null) {
                                                               var result = await _user.API._ChangePassword(_user,
                                                                                                            Password.Value,
                                                                                                            null,
                                                                                                            SuppressNotifications:  true,
                                                                                                            EventTrackingId:        _eventTrackingId,
                                                                                                            CurrentUserId:          CurrentUserId);
                                                           }
                                                       },

                                                       EventTrackingId ?? EventTracking_Id.New,
                                                       CurrentUserId);

            return addUserResult.Result == CommandResult.Success
                       ? addUserResult.User
                       : null;

        }

        #endregion

        #region CreateUser           (Id, Name, EMail, AccessRight, Organization, Password = null, Description = null, PublicKeyRing = null, SecretKeyRing = null, MobilePhone = null, IsPublic = true, IsDisabled = false, IsAuthenticated = false)

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <param name="HTTPExtAPI">The HTTPExt API.</param>
        /// <param name="Id">The unique identification of the user.</param>
        /// <param name="EMail">The primary e-mail of the user.</param>
        /// <param name="AccessRight">The organization membership of the new user.</param>
        /// <param name="Organization">The organization of the new user.</param>
        /// <param name="Password">An optional password of the user.</param>
        /// <param name="Name">An offical (multi-language) name of the user.</param>
        /// <param name="Description">An optional (multi-language) description of the user.</param>
        /// <param name="PublicKeyRing">An optional PGP/GPG public keyring of the user.</param>
        /// <param name="SecretKeyRing">An optional PGP/GPG secret keyring of the user.</param>
        /// <param name="UserLanguage">The language setting of the user.</param>
        /// <param name="Telephone">An optional telephone number of the user.</param>
        /// <param name="MobilePhone">An optional mobile telephone number of the user.</param>
        /// <param name="Use2AuthFactor">Whether to use a second authentication factor.</param>
        /// <param name="Telegram">An optional telegram account name of the user.</param>
        /// <param name="Homepage">The homepage of the user.</param>
        /// <param name="GeoLocation">An optional geographical location of the user.</param>
        /// <param name="Address">An optional address of the user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="AcceptedEULA">Timestamp when the user accepted the End-User-License-Agreement.</param>
        /// <param name="IsAuthenticated">The user will not be shown in user listings, as its primary e-mail address is not yet authenticated.</param>
        /// <param name="IsDisabled">The user will be shown in user listings.</param>
        /// 
        /// <param name="DataSource">The source of all this data, e.g. an automatic importer.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async static Task<IUser?> CreateUser(this HTTPExtAPI               HTTPExtAPI,
                                                    User_Id                     Id,
                                                    I18NString                  Name,
                                                    SimpleEMailAddress          EMail,
                                                    User2OrganizationEdgeLabel  AccessRight,
                                                    Organization                Organization,
                                                    Password?                   Password                   = null,
                                                    I18NString?                 Description                = null,
                                                    PgpPublicKeyRing?           PublicKeyRing              = null,
                                                    PgpSecretKeyRing?           SecretKeyRing              = null,
                                                    Languages                   UserLanguage               = Languages.en,
                                                    PhoneNumber?                Telephone                  = null,
                                                    PhoneNumber?                MobilePhone                = null,
                                                    Use2AuthFactor              Use2AuthFactor             = Use2AuthFactor.None,
                                                    String?                     Telegram                   = null,
                                                    String?                     Homepage                   = null,
                                                    GeoCoordinate?              GeoLocation                = null,
                                                    Address?                    Address                    = null,
                                                    Boolean                     SkipDefaultNotifications   = false,
                                                    Boolean                     SkipNewUserEMail           = false,
                                                    Boolean                     SkipNewUserNotifications   = false,
                                                    DateTime?                   AcceptedEULA               = null,
                                                    Boolean                     IsAuthenticated            = false,
                                                    Boolean                     IsDisabled                 = false,

                                                    String                      DataSource                 = "",
                                                    EventTracking_Id?           EventTrackingId            = null,
                                                    User_Id?                    CurrentUserId              = null)
        {

            var addUserResult = await HTTPExtAPI.AddUser(new User(
                                                           Id,
                                                           Name,
                                                           EMail,
                                                           Description,
                                                           PublicKeyRing,
                                                           SecretKeyRing,
                                                           UserLanguage,
                                                           Telephone,
                                                           MobilePhone,
                                                           Use2AuthFactor,
                                                           Telegram,
                                                           Homepage,
                                                           GeoLocation,
                                                           Address,
                                                           AcceptedEULA,
                                                           IsAuthenticated,
                                                           IsDisabled,
                                                           DataSource: DataSource
                                                       ),

                                                       AccessRight,
                                                       Organization,

                                                       SkipDefaultNotifications,
                                                       SkipNewUserEMail,
                                                       SkipNewUserNotifications,

                                                       async (_timestamp, _user, _eventTrackingId, _currentUserId) => {
                                                           if (Password.HasValue && _user.API is not null) {
                                                               var result = await _user.API._ChangePassword(_user,
                                                                                                            Password.Value,
                                                                                                            null,
                                                                                                            SuppressNotifications:  true,
                                                                                                            EventTrackingId:        _eventTrackingId,
                                                                                                            CurrentUserId:          CurrentUserId);
                                                           }
                                                       },

                                                       EventTrackingId ?? EventTracking_Id.New,
                                                       CurrentUserId);

            return addUserResult.Result == CommandResult.Success
                       ? addUserResult.User
                       : null;

        }

        #endregion

        #region CreateUserIfNotExists(Id, EMail, Password, Name = null, Description = null, PublicKeyRing = null, SecretKeyRing = null, MobilePhone = null, IsPublic = true, IsDisabled = false, IsAuthenticated = false)

        /// <summary>
        /// Create a new user, if he/she does not already exist.
        /// </summary>
        /// <param name="HTTPExtAPI">The HTTPExt API.</param>
        /// <param name="Id">The unique identification of the user.</param>
        /// <param name="EMail">The primary e-mail of the user.</param>
        /// <param name="Password">An optional password of the user.</param>
        /// <param name="Name">An offical (multi-language) name of the user.</param>
        /// <param name="Description">An optional (multi-language) description of the user.</param>
        /// <param name="PublicKeyRing">An optional PGP/GPG public keyring of the user.</param>
        /// <param name="SecretKeyRing">An optional PGP/GPG secret keyring of the user.</param>
        /// <param name="UserLanguage">The language setting of the user.</param>
        /// <param name="Telephone">An optional telephone number of the user.</param>
        /// <param name="MobilePhone">An optional telephone number of the user.</param>
        /// <param name="Use2AuthFactor">Whether to use a second authentication factor.</param>
        /// <param name="Telegram">An optional telegram account name of the user.</param>
        /// <param name="Homepage">The homepage of the user.</param>
        /// <param name="GeoLocation">An optional geographical location of the user.</param>
        /// <param name="Address">An optional address of the user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="AcceptedEULA">Timestamp when the user accepted the End-User-License-Agreement.</param>
        /// <param name="IsAuthenticated">The user will not be shown in user listings, as its primary e-mail address is not yet authenticated.</param>
        /// <param name="IsDisabled">The user will be shown in user listings.</param>
        /// 
        /// <param name="DataSource">The source of all this data, e.g. an automatic importer.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async static Task<IUser?> CreateUserIfNotExists(this HTTPExtAPI      HTTPExtAPI,
                                                               User_Id              Id,
                                                               I18NString           Name,
                                                               SimpleEMailAddress   EMail,
                                                               Password?            Password                   = null,
                                                               I18NString?          Description                = null,
                                                               PgpPublicKeyRing?    PublicKeyRing              = null,
                                                               PgpSecretKeyRing?    SecretKeyRing              = null,
                                                               Languages            UserLanguage               = Languages.en,
                                                               PhoneNumber?         Telephone                  = null,
                                                               PhoneNumber?         MobilePhone                = null,
                                                               Use2AuthFactor       Use2AuthFactor             = Use2AuthFactor.None,
                                                               String?              Telegram                   = null,
                                                               String?              Homepage                   = null,
                                                               GeoCoordinate?       GeoLocation                = null,
                                                               Address?             Address                    = null,
                                                               Boolean              SkipDefaultNotifications   = false,
                                                               Boolean              SkipNewUserEMail           = false,
                                                               Boolean              SkipNewUserNotifications   = false,
                                                               DateTime?            AcceptedEULA               = null,
                                                               Boolean              IsAuthenticated            = false,
                                                               Boolean              IsDisabled                 = false,

                                                               String               DataSource                 = "",
                                                               EventTracking_Id?    EventTrackingId            = null,
                                                               User_Id?             CurrentUserId              = null)
        {

            var addUserResult = await HTTPExtAPI.AddUserIfNotExists(new User(
                                                                      Id,
                                                                      Name,
                                                                      EMail,
                                                                      Description,
                                                                      PublicKeyRing,
                                                                      SecretKeyRing,
                                                                      UserLanguage,
                                                                      Telephone,
                                                                      MobilePhone,
                                                                      Use2AuthFactor,
                                                                      Telegram,
                                                                      Homepage,
                                                                      GeoLocation,
                                                                      Address,
                                                                      AcceptedEULA,
                                                                      IsAuthenticated,
                                                                      IsDisabled,
                                                                      DataSource: DataSource
                                                                  ),

                                                                  SkipDefaultNotifications,
                                                                  SkipNewUserEMail,
                                                                  SkipNewUserNotifications,

                                                                  async (_timestamp, _user, _eventTrackingId, _currentUserId) => {
                                                                      if (Password.HasValue && _user.API is not null) {
                                                                          var result = await _user.API._ChangePassword(_user,
                                                                                                                       Password.Value,
                                                                                                                       null,
                                                                                                                       SuppressNotifications:  true,
                                                                                                                       EventTrackingId:        _eventTrackingId,
                                                                                                                       CurrentUserId:          CurrentUserId);
                                                                      }
                                                                  },

                                                                  EventTrackingId ?? EventTracking_Id.New,
                                                                  CurrentUserId);

            return addUserResult.Result == CommandResult.Success
                       ? addUserResult.User
                       : null;

        }

        #endregion

        #region CreateUserIfNotExists(Id, EMail, Password, Name = null, Description = null, PublicKeyRing = null, SecretKeyRing = null, MobilePhone = null, IsPublic = true, IsDisabled = false, IsAuthenticated = false)

        /// <summary>
        /// Create a new user, if he/she does not already exist.
        /// </summary>
        /// <param name="HTTPExtAPI">The HTTPExt API.</param>
        /// <param name="Id">The unique identification of the user.</param>
        /// <param name="EMail">The primary e-mail of the user.</param>
        /// <param name="AccessRight">The organization membership of the new user.</param>
        /// <param name="Organization">The organization of the new user.</param>
        /// <param name="Password">An optional password of the user.</param>
        /// <param name="Name">An offical (multi-language) name of the user.</param>
        /// <param name="Description">An optional (multi-language) description of the user.</param>
        /// <param name="PublicKeyRing">An optional PGP/GPG public keyring of the user.</param>
        /// <param name="SecretKeyRing">An optional PGP/GPG secret keyring of the user.</param>
        /// <param name="UserLanguage">The language setting of the user.</param>
        /// <param name="Telephone">An optional telephone number of the user.</param>
        /// <param name="MobilePhone">An optional telephone number of the user.</param>
        /// <param name="Use2AuthFactor">Whether to use a second authentication factor.</param>
        /// <param name="Telegram">An optional telegram account name of the user.</param>
        /// <param name="Homepage">The homepage of the user.</param>
        /// <param name="GeoLocation">An optional geographical location of the user.</param>
        /// <param name="Address">An optional address of the user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="AcceptedEULA">Timestamp when the user accepted the End-User-License-Agreement.</param>
        /// <param name="IsAuthenticated">The user will not be shown in user listings, as its primary e-mail address is not yet authenticated.</param>
        /// <param name="IsDisabled">The user will be shown in user listings.</param>
        /// 
        /// <param name="DataSource">The source of all this data, e.g. an automatic importer.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async static Task<IUser?> CreateUserIfNotExists(this HTTPExtAPI              HTTPExtAPI,
                                                               User_Id                      Id,
                                                               I18NString                   Name,
                                                               SimpleEMailAddress           EMail,
                                                               User2OrganizationEdgeLabel   AccessRight,
                                                               IOrganization                Organization,
                                                               Password?                    Password                   = null,
                                                               I18NString?                  Description                = null,
                                                               PgpPublicKeyRing?            PublicKeyRing              = null,
                                                               PgpSecretKeyRing?            SecretKeyRing              = null,
                                                               Languages                    UserLanguage               = Languages.en,
                                                               PhoneNumber?                 Telephone                  = null,
                                                               PhoneNumber?                 MobilePhone                = null,
                                                               Use2AuthFactor               Use2AuthFactor             = Use2AuthFactor.None,
                                                               String?                      Telegram                   = null,
                                                               String?                      Homepage                   = null,
                                                               GeoCoordinate?               GeoLocation                = null,
                                                               Address?                     Address                    = null,
                                                               Boolean                      SkipDefaultNotifications   = false,
                                                               Boolean                      SkipNewUserEMail           = false,
                                                               Boolean                      SkipNewUserNotifications   = false,
                                                               DateTime?                    AcceptedEULA               = null,
                                                               Boolean                      IsAuthenticated            = false,
                                                               Boolean                      IsDisabled                 = false,

                                                               String                       DataSource                 = "",
                                                               EventTracking_Id?            EventTrackingId            = null,
                                                               User_Id?                     CurrentUserId              = null)
        {

            var addUserResult = await HTTPExtAPI.AddUserIfNotExists(new User(
                                                                      Id,
                                                                      Name,
                                                                      EMail,
                                                                      Description,
                                                                      PublicKeyRing,
                                                                      SecretKeyRing,
                                                                      UserLanguage,
                                                                      Telephone,
                                                                      MobilePhone,
                                                                      Use2AuthFactor,
                                                                      Telegram,
                                                                      Homepage,
                                                                      GeoLocation,
                                                                      Address,
                                                                      AcceptedEULA,
                                                                      IsAuthenticated,
                                                                      IsDisabled,
                                                                      DataSource: DataSource
                                                                  ),

                                                                  AccessRight,
                                                                  Organization,

                                                                  SkipDefaultNotifications,
                                                                  SkipNewUserEMail,
                                                                  SkipNewUserNotifications,

                                                                  async (_timestamp, _user, _eventTrackingId, _currentUserId) => {
                                                                      if (Password.HasValue && _user.API is not null) {
                                                                          var result = await _user.API._ChangePassword(_user,
                                                                                                                       Password.Value,
                                                                                                                       null,
                                                                                                                       SuppressNotifications:  true,
                                                                                                                       EventTrackingId:        _eventTrackingId,
                                                                                                                       CurrentUserId:          CurrentUserId);
                                                                      }
                                                                  },

                                                                  EventTrackingId ?? EventTracking_Id.New,
                                                                  CurrentUserId);

            return addUserResult.Result == CommandResult.Success
                       ? addUserResult.User
                       : null;

        }

        #endregion


        #region CreateOrganization           (Id, Name = null, Description = null, ParentOrganization = null)

        public async static Task<IOrganization?> CreateOrganization(this HTTPExtAPI            HTTPExtAPI,

                                                                    Organization_Id            Id,
                                                                    I18NString?                Name                 = null,
                                                                    I18NString?                Description          = null,
                                                                    String?                    Website              = null,
                                                                    EMailAddress?              EMail                = null,
                                                                    PhoneNumber?               Telephone            = null,
                                                                    Address?                   Address              = null,
                                                                    GeoCoordinate?             GeoLocation          = null,
                                                                    Func<Tags.Builder, Tags>?  Tags                 = null,
                                                                    Boolean                    IsDisabled           = false,

                                                                    Organization?              ParentOrganization   = null,

                                                                    String                     DataSource           = "",
                                                                    EventTracking_Id?          EventTrackingId      = null,
                                                                    User_Id?                   CurrentUserId        = null)
        {

            var addOrganizationResult = await HTTPExtAPI.AddOrganization(new Organization(
                                                                           Id,
                                                                           Name,
                                                                           Description,
                                                                           Website,
                                                                           EMail,
                                                                           Telephone,
                                                                           Address,
                                                                           GeoLocation,
                                                                           Tags,
                                                                           IsDisabled,
                                                                           DataSource: DataSource
                                                                       ),
                                                                       ParentOrganization ?? HTTPExtAPI.NoOwner,
                                                                       null,
                                                                       EventTrackingId,
                                                                       CurrentUserId);

            return addOrganizationResult.Result == CommandResult.Success
                       ? addOrganizationResult.Organization
                       : null;

        }

        #endregion

        #region CreateOrganizationIfNotExists(Id, Name = null, Description = null, ParentOrganization = null)

        public async static Task<IOrganization?> CreateOrganizationIfNotExists(this HTTPExtAPI            HTTPExtAPI,

                                                                               Organization_Id            Id,
                                                                               I18NString?                Name                 = null,
                                                                               I18NString?                Description          = null,
                                                                               String?                    Website              = null,
                                                                               EMailAddress?              EMail                = null,
                                                                               PhoneNumber?               Telephone            = null,
                                                                               Address?                   Address              = null,
                                                                               GeoCoordinate?             GeoLocation          = null,
                                                                               Func<Tags.Builder, Tags>?  Tags                 = null,
                                                                               Boolean                    IsDisabled           = false,

                                                                               IOrganization?             ParentOrganization   = null,

                                                                               String                     DataSource           = "",
                                                                               EventTracking_Id?          EventTrackingId      = null,
                                                                               User_Id?                   CurrentUserId        = null)
        {

            var addOrganizationResult = await HTTPExtAPI.AddOrganizationIfNotExists(new Organization(
                                                                                      Id,
                                                                                      Name,
                                                                                      Description,
                                                                                      Website,
                                                                                      EMail,
                                                                                      Telephone,
                                                                                      Address,
                                                                                      GeoLocation,
                                                                                      Tags,
                                                                                      IsDisabled,
                                                                                      DataSource: DataSource
                                                                                  ),
                                                                                  ParentOrganization ?? HTTPExtAPI.NoOwner,
                                                                                  null,
                                                                                  EventTrackingId,
                                                                                  CurrentUserId);

            return addOrganizationResult.Result == CommandResult.Success
                       ? addOrganizationResult.Organization
                       : null;

        }

        #endregion

    }


    /// <summary>
    /// Managing users and organizations et al. within a HTTP API.
    /// </summary>
    public class HTTPExtAPI : HTTPAPI
    {

        #region Data

        /// <summary>
        /// The default HTTP server name.
        /// </summary>
        public new const           String         DefaultHTTPServerName                = "GraphDefined HTTPExt API";

        /// <summary>
        /// The default HTTP service name.
        /// </summary>
        public new const           String         DefaultHTTPServiceName               = "GraphDefined HTTPExt API";

        /// <summary>
        /// The default HTTP server port.
        /// </summary>
        public new static readonly IPPort         DefaultHTTPServerPort                = IPPort.Parse(2305);

        public const               String         DefaultHTTPExtAPI_DatabaseFileName   = "HTTPExtAPI.db";
        public const               String         DefaultHTTPExtAPI_LogfileName        = "HTTPExtAPI.log";
        public const               String         DefaultPasswordFile                  = "passwords.db";
        public const               String         DefaultHTTPCookiesFile               = "HTTPCookies.db";
        public const               String         DefaultPasswordResetsFile            = "passwordResets.db";

        protected static readonly  SemaphoreSlim  LogFileSemaphore                     = new (1, 1);
        protected static readonly  SemaphoreSlim  UsersSemaphore                       = new (1, 1);
        protected static readonly  SemaphoreSlim  UserGroupsSemaphore                  = new (1, 1);
        protected static readonly  SemaphoreSlim  APIKeysSemaphore                     = new (1, 1);
        protected static readonly  SemaphoreSlim  OrganizationsSemaphore               = new (1, 1);
        protected static readonly  SemaphoreSlim  OrganizationGroupsSemaphore          = new (1, 1);
        protected static readonly  SemaphoreSlim  NotificationMessagesSemaphore        = new (1, 1);

        /// <summary>
        /// The default language of the API.
        /// </summary>
        public  const             Languages                                     DefaultDefaultLanguage                  = Languages.en;

        public  const             Byte                                          DefaultMinUserIdLength                  = 4;
        public  const             Byte                                          DefaultMinRealmLength                   = 2;
        public  const             Byte                                          DefaultMinUserNameLength                = 4;
        public  const             Byte                                          DefaultMinUserGroupIdLength             = 4;
        public  const             UInt16                                        DefaultMinAPIKeyLength                  = 20;
        public  const             Byte                                          DefaultMinOrganizationIdLength          = 4;
        public  const             Byte                                          DefaultMinOrganizationGroupIdLength     = 4;
        public  const             Byte                                          DefaultMinNotificationMessageIdLength   = 8;

        public  static readonly   PasswordQualityCheckDelegate                  DefaultPasswordQualityCheck             = password => password.Length >= 8 ? 1.0f : 0;
        public  static readonly   TimeSpan                                      DefaultMaxSignInSessionLifetime         = TimeSpan.FromDays(30);

        public  const             String                                        SignUpContext                           = "";
        public  const             String                                        SignInOutContext                        = "";


        /// <summary>
        /// The name of the default HTTP cookie.
        /// </summary>
        public  static readonly   HTTPCookieName                                DefaultCookieName                       = HTTPCookieName.Parse("GraphDefinedHTTPAPI");

        public  static readonly   Organization_Id                               DefaultAdminOrganizationId              = Organization_Id.Parse("Admins");

        public  const             String                                        HTTPCookieDomain                        = "";


        protected static readonly String[]  Split1  = { "\r\n" };
        protected static readonly String[]  Split2  = { ": " };
        protected static readonly String[]  Split3  = { " " };
        protected static readonly Char[]    Split4  = { ',' };
        protected static readonly Char[]    Split5  = { '|' };

        public    static readonly User                                          Anonymous = new (User_Id.Parse("anonymous"),
                                                                                                 "Anonymous".ToI18NString(),
                                                                                                 SimpleEMailAddress.Parse("anonymous@example.com"),
                                                                                                 AcceptedEULA: Timestamp.Now);

        #endregion

        #region Properties

        /// <summary>
        /// The API database file.
        /// </summary>
        public String                         DatabaseFileName                   { get; }


        /// <summary>
        /// The API version hash (git commit hash value).
        /// </summary>
        public new String?                    APIVersionHash                     { get; }


        public Organization_Id                AdminOrganizationId                { get; }


        public String                         HTTPAPIPath                        { get; }
        public String                         NotificationsPath                  { get; }
        public String                         SMTPLoggingPath                    { get; }
        public String                         SMSLoggingPath                     { get; }


        /// <summary>
        /// The mother of all organizations.
        /// </summary>
        public Organization                   NoOwner                            { get; }

        /// <summary>
        /// The virtual 'robot' user.
        /// </summary>
        public User                           Robot                              { get; }

        /// <summary>
        /// The passphrase of the PGP/GPG secret key of the API.
        /// </summary>
        public String                         APIRobotGPGPassphrase              { get; }

        /// <summary>
        /// A SMTP client to be used by the API.
        /// </summary>
        public ISMTPClient                    SMTPClient                         { get; }

        public HTTPCookieName                 CookieName                         { get; }

        public HTTPCookieName                 SessionCookieName                  { get; }

        /// <summary>
        /// Force the web browser to send cookies only via HTTPS.
        /// </summary>
        public Boolean                        UseSecureCookies                   { get; }


        /// <summary>
        /// The default language used within this API.
        /// </summary>
        public Languages                      DefaultLanguage                    { get; }

        /// <summary>
        /// The maximum sign-in session lifetime.
        /// </summary>
        public TimeSpan                       MaxSignInSessionLifetime           { get; }

        /// <summary>
        /// The minimal user identification length.
        /// </summary>
        public Byte                           MinUserIdLength                    { get; }

        /// <summary>
        /// The minimal realm length.
        /// </summary>
        public Byte                           MinRealmLength                     { get; }

        /// <summary>
        /// A delegate to ensure a minimal password quality.
        /// </summary>
        public PasswordQualityCheckDelegate   PasswordQualityCheck               { get; }

        /// <summary>
        /// The minimal user name length.
        /// </summary>
        public Byte                           MinUserNameLength                  { get; }

        /// <summary>
        /// The minimal user group identification length.
        /// </summary>
        public Byte                           MinUserGroupIdLength               { get; }

        /// <summary>
        /// The minimal API key length.
        /// </summary>
        public UInt16                         MinAPIKeyLength                    { get; }

        /// <summary>
        /// The minimal message identification length.
        /// </summary>
        public Byte                           MinOrganizationIdLength            { get; }

        /// <summary>
        /// The minimal message identification length.
        /// </summary>
        public Byte                           MinOrganizationGroupIdLength       { get; }

        /// <summary>
        /// The minimal notification message identification length.
        /// </summary>
        public Byte                           MinNotificationMessageIdLength     { get; }


        /// <summary>
        /// The current hash value of the API.
        /// </summary>
        public String                         CurrentDatabaseHashValue           { get; protected set; }

        /// <summary>
        /// Disable external notifications.
        /// </summary>
        public Boolean                        DisableNotifications               { get; set; }


        private readonly HashSet<URLWithAPIKey>  remoteAuthServers;

        /// <summary>
        /// Servers for remote authorization.
        /// </summary>
        public IEnumerable<URLWithAPIKey>     RemoteAuthServers
            => remoteAuthServers;


        private readonly HashSet<APIKey_Id>  remoteAuthAPIKeys;

        /// <summary>
        /// API key for incoming remote authorizations.
        /// </summary>
        public IEnumerable<APIKey_Id>         RemoteAuthAPIKeys
            => remoteAuthAPIKeys;

        #endregion

        #region Events

        public delegate Task OnSendSMSDelegate (DateTime           LogTimestamp,
                                                HTTPExtAPI         HTTPAPI,
                                                EventTracking_Id   EventTrackingId,
                                                String             Command,
                                                JObject            Data,
                                                TimeSpan?          RequestTimeout);

        public event OnSendSMSDelegate? OnSendSMS;

        // ---------------------------------------------------------------

        #region (protected internal) AddUsersRequest (Request)

        /// <summary>
        /// An event sent whenever add users request was received.
        /// </summary>
        public HTTPRequestLogEvent OnAddUsersRequest = new();

        /// <summary>
        /// An event sent whenever add users request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task AddUsersHTTPRequest(DateTime     Timestamp,
                                                    HTTPAPI      HTTPAPI,
                                                    HTTPRequest  Request)

            => OnAddUsersRequest.WhenAll(Timestamp,
                                         HTTPAPI,
                                         Request);

        #endregion

        #region (protected internal) AddUsersResponse(Response)

        /// <summary>
        /// An event sent whenever a response on an add users request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnAddUsersResponse = new();

        /// <summary>
        /// An event sent whenever a response on an add users request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task AddUsersHTTPResponse(DateTime      Timestamp,
                                                     HTTPAPI       HTTPAPI,
                                                     HTTPRequest   Request,
                                                     HTTPResponse  Response)

            => OnAddUsersResponse.WhenAll(Timestamp,
                                          HTTPAPI,
                                          Request,
                                          Response);

        #endregion


        #region (protected internal) AddUserHTTPRequest (Request)

        /// <summary>
        /// An event sent whenever add user request was received.
        /// </summary>
        public HTTPRequestLogEvent OnAddUserHTTPRequest = new();

        /// <summary>
        /// An event sent whenever add user request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task AddUserHTTPRequest(DateTime     Timestamp,
                                                   HTTPAPI      HTTPAPI,
                                                   HTTPRequest  Request)

            => OnAddUserHTTPRequest.WhenAll(Timestamp,
                                            HTTPAPI,
                                            Request);

        #endregion

        #region (protected internal) AddUserHTTPResponse(Response)

        /// <summary>
        /// An event sent whenever a response on an add user request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnAddUserHTTPResponse = new();

        /// <summary>
        /// An event sent whenever a response on an add user request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task AddUserHTTPResponse(DateTime      Timestamp,
                                                    HTTPAPI       HTTPAPI,
                                                    HTTPRequest   Request,
                                                    HTTPResponse  Response)

            => OnAddUserHTTPResponse.WhenAll(Timestamp,
                                             HTTPAPI,
                                             Request,
                                             Response);

        #endregion


        #region (protected internal) SetUserHTTPRequest (Request)

        /// <summary>
        /// An event sent whenever set user request was received.
        /// </summary>
        public HTTPRequestLogEvent OnSetUserHTTPRequest = new();

        /// <summary>
        /// An event sent whenever set user request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task SetUserHTTPRequest(DateTime     Timestamp,
                                                   HTTPAPI      HTTPAPI,
                                                   HTTPRequest  Request)

            => OnSetUserHTTPRequest.WhenAll(Timestamp,
                                            HTTPAPI,
                                            Request);

        #endregion

        #region (protected internal) SetUserHTTPResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a set user request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnSetUserHTTPResponse = new();

        /// <summary>
        /// An event sent whenever a response on a set user request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task SetUserHTTPResponse(DateTime      Timestamp,
                                                    HTTPAPI       HTTPAPI,
                                                    HTTPRequest   Request,
                                                    HTTPResponse  Response)

            => OnSetUserHTTPResponse.WhenAll(Timestamp,
                                             HTTPAPI,
                                             Request,
                                             Response);

        #endregion


        #region (protected internal) ChangePasswordRequest (Request)

        /// <summary>
        /// An event sent whenever set user request was received.
        /// </summary>
        public HTTPRequestLogEvent OnChangePasswordRequest = new();

        /// <summary>
        /// An event sent whenever set user request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task ChangePasswordRequest(DateTime     Timestamp,
                                                      HTTPAPI      HTTPAPI,
                                                      HTTPRequest  Request)

            => OnChangePasswordRequest.WhenAll(Timestamp,
                                               HTTPAPI,
                                               Request);

        #endregion

        #region (protected internal) ChangePasswordResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a set user request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnChangePasswordResponse = new();

        /// <summary>
        /// An event sent whenever a response on a set user request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task ChangePasswordResponse(DateTime      Timestamp,
                                                       HTTPAPI       HTTPAPI,
                                                       HTTPRequest   Request,
                                                       HTTPResponse  Response)

            => OnChangePasswordResponse.WhenAll(Timestamp,
                                                HTTPAPI,
                                                Request,
                                                Response);

        #endregion


        #region (protected internal) ImpersonateUserRequest (Request)

        /// <summary>
        /// An event sent whenever an impersonate user request was received.
        /// </summary>
        public HTTPRequestLogEvent OnImpersonateUserRequest = new();

        /// <summary>
        /// An event sent whenever an impersonate user request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task ImpersonateUserRequest(DateTime     Timestamp,
                                                       HTTPAPI      HTTPAPI,
                                                       HTTPRequest  Request)

            => OnImpersonateUserRequest.WhenAll(Timestamp,
                                                HTTPAPI,
                                                Request);

        #endregion

        #region (protected internal) ImpersonateUserResponse(Response)

        /// <summary>
        /// An event sent whenever a response on an impersonate user request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnImpersonateUserResponse = new();

        /// <summary>
        /// An event sent whenever a response on an impersonate user request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task ImpersonateUserResponse(DateTime      Timestamp,
                                                        HTTPAPI       HTTPAPI,
                                                        HTTPRequest   Request,
                                                        HTTPResponse  Response)

            => OnImpersonateUserResponse.WhenAll(Timestamp,
                                                 HTTPAPI,
                                                 Request,
                                                 Response);

        #endregion


        #region (protected internal) SetUserNotificationsRequest    (Request)

        /// <summary>
        /// An event sent whenever set user notifications request was received.
        /// </summary>
        public HTTPRequestLogEvent OnSetUserNotificationsRequest = new();

        /// <summary>
        /// An event sent whenever set user notifications request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task SetUserNotificationsRequest(DateTime     Timestamp,
                                                            HTTPAPI      HTTPAPI,
                                                            HTTPRequest  Request)

            => OnSetUserNotificationsRequest.WhenAll(Timestamp,
                                                     HTTPAPI,
                                                     Request);

        #endregion

        #region (protected internal) SetUserNotificationsResponse   (Response)

        /// <summary>
        /// An event sent whenever a response on a set user notifications request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnSetUserNotificationsResponse = new();

        /// <summary>
        /// An event sent whenever a response on a set user notifications request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task SetUserNotificationsResponse(DateTime      Timestamp,
                                                             HTTPAPI       HTTPAPI,
                                                             HTTPRequest   Request,
                                                             HTTPResponse  Response)

            => OnSetUserNotificationsResponse.WhenAll(Timestamp,
                                                      HTTPAPI,
                                                      Request,
                                                      Response);

        #endregion


        #region (protected internal) DeleteUserNotificationsRequest (Request)

        /// <summary>
        /// An event sent whenever set user notifications request was received.
        /// </summary>
        public HTTPRequestLogEvent OnDeleteUserNotificationsRequest = new();

        /// <summary>
        /// An event sent whenever set user notifications request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task DeleteUserNotificationsRequest(DateTime     Timestamp,
                                                               HTTPAPI      HTTPAPI,
                                                               HTTPRequest  Request)

            => OnDeleteUserNotificationsRequest.WhenAll(Timestamp,
                                                        HTTPAPI,
                                                        Request);

        #endregion

        #region (protected internal) DeleteUserNotificationsResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a set user notifications request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnDeleteUserNotificationsResponse = new();

        /// <summary>
        /// An event sent whenever a response on a set user notifications request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task DeleteUserNotificationsResponse(DateTime      Timestamp,
                                                                HTTPAPI       HTTPAPI,
                                                                HTTPRequest   Request,
                                                                HTTPResponse  Response)

            => OnDeleteUserNotificationsResponse.WhenAll(Timestamp,
                                                         HTTPAPI,
                                                         Request,
                                                         Response);

        #endregion


        // ---------------------------------------------------------------


        #region (protected internal) OnAddOrganizationHTTPRequest (Request)

        /// <summary>
        /// An event sent whenever add organization request was received.
        /// </summary>
        public HTTPRequestLogEvent OnAddOrganizationHTTPRequest = new();

        /// <summary>
        /// An event sent whenever add organization request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task AddOrganizationHTTPRequest(DateTime     Timestamp,
                                                           HTTPAPI      HTTPAPI,
                                                           HTTPRequest  Request)

            => OnAddOrganizationHTTPRequest.WhenAll(Timestamp,
                                                    HTTPAPI,
                                                    Request);

        #endregion

        #region (protected internal) OnAddOrganizationHTTPResponse(Response)

        /// <summary>
        /// An event sent whenever a response on an add organization request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnAddOrganizationHTTPResponse = new();

        /// <summary>
        /// An event sent whenever a response on an add organization request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task AddOrganizationHTTPResponse(DateTime      Timestamp,
                                                            HTTPAPI       HTTPAPI,
                                                            HTTPRequest   Request,
                                                            HTTPResponse  Response)

            => OnAddOrganizationHTTPResponse.WhenAll(Timestamp,
                                                     HTTPAPI,
                                                     Request,
                                                     Response);

        #endregion


        #region (protected internal) SetOrganizationHTTPRequest (Request)

        /// <summary>
        /// An event sent whenever Set organization request was received.
        /// </summary>
        public HTTPRequestLogEvent OnSetOrganizationHTTPRequest = new();

        /// <summary>
        /// An event sent whenever Set organization request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task SetOrganizationHTTPRequest(DateTime     Timestamp,
                                                           HTTPAPI      HTTPAPI,
                                                           HTTPRequest  Request)

            => OnSetOrganizationHTTPRequest.WhenAll(Timestamp,
                                                    HTTPAPI,
                                                    Request);

        #endregion

        #region (protected internal) SetOrganizationHTTPResponse(Response)

        /// <summary>
        /// An event sent whenever a response on an Set organization request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnSetOrganizationHTTPResponse = new();

        /// <summary>
        /// An event sent whenever a response on an Set organization request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task SetOrganizationHTTPResponse(DateTime      Timestamp,
                                                            HTTPAPI       HTTPAPI,
                                                            HTTPRequest   Request,
                                                            HTTPResponse  Response)

            => OnSetOrganizationHTTPResponse.WhenAll(Timestamp,
                                                     HTTPAPI,
                                                     Request,
                                                     Response);

        #endregion


        #region (protected internal) DeleteOrganizationHTTPRequest (Request)

        /// <summary>
        /// An event sent whenever delete organization request was received.
        /// </summary>
        public HTTPRequestLogEvent OnDeleteOrganizationHTTPRequest = new();

        /// <summary>
        /// An event sent whenever delete organization request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task DeleteOrganizationHTTPRequest(DateTime     Timestamp,
                                                              HTTPAPI      HTTPAPI,
                                                              HTTPRequest  Request)

            => OnDeleteOrganizationHTTPRequest.WhenAll(Timestamp,
                                                       HTTPAPI,
                                                       Request);

        #endregion

        #region (protected internal) DeleteOrganizationHTTPResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a delete organization request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnDeleteOrganizationHTTPResponse = new();

        /// <summary>
        /// An event sent whenever a response on a delete organization request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task DeleteOrganizationHTTPResponse(DateTime      Timestamp,
                                                               HTTPAPI       HTTPAPI,
                                                               HTTPRequest   Request,
                                                               HTTPResponse  Response)

            => OnDeleteOrganizationHTTPResponse.WhenAll(Timestamp,
                                                        HTTPAPI,
                                                        Request,
                                                        Response);

        #endregion



        #region (protected internal) SetOrganizationNotificationsRequest    (Request)

        /// <summary>
        /// An event sent whenever set organization notifications request was received.
        /// </summary>
        public HTTPRequestLogEvent OnSetOrganizationNotificationsRequest = new();

        /// <summary>
        /// An event sent whenever set organization notifications request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task SetOrganizationNotificationsRequest(DateTime     Timestamp,
                                                                    HTTPAPI      HTTPAPI,
                                                                    HTTPRequest  Request)

            => OnSetOrganizationNotificationsRequest.WhenAll(Timestamp,
                                                              HTTPAPI,
                                                              Request);

        #endregion

        #region (protected internal) SetOrganizationNotificationsResponse   (Response)

        /// <summary>
        /// An event sent whenever a response on a set organization notifications request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnSetOrganizationNotificationsResponse = new();

        /// <summary>
        /// An event sent whenever a response on a set organization notifications request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task SetOrganizationNotificationsResponse(DateTime      Timestamp,
                                                                     HTTPAPI       HTTPAPI,
                                                                     HTTPRequest   Request,
                                                                     HTTPResponse  Response)

            => OnSetOrganizationNotificationsResponse.WhenAll(Timestamp,
                                                               HTTPAPI,
                                                               Request,
                                                               Response);

        #endregion


        #region (protected internal) DeleteOrganizationNotificationsRequest (Request)

        /// <summary>
        /// An event sent whenever set organization notifications request was received.
        /// </summary>
        public HTTPRequestLogEvent OnDeleteOrganizationNotificationsRequest = new();

        /// <summary>
        /// An event sent whenever set organization notifications request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task DeleteOrganizationNotificationsRequest(DateTime     Timestamp,
                                                                       HTTPAPI      HTTPAPI,
                                                                       HTTPRequest  Request)

            => OnDeleteOrganizationNotificationsRequest.WhenAll(Timestamp,
                                                                 HTTPAPI,
                                                                 Request);

        #endregion

        #region (protected internal) DeleteOrganizationNotificationsResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a set organization notifications request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnDeleteOrganizationNotificationsResponse = new();

        /// <summary>
        /// An event sent whenever a response on a set organization notifications request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task DeleteOrganizationNotificationsResponse(DateTime      Timestamp,
                                                                        HTTPAPI       HTTPAPI,
                                                                        HTTPRequest   Request,
                                                                        HTTPResponse  Response)

            => OnDeleteOrganizationNotificationsResponse.WhenAll(Timestamp,
                                                                  HTTPAPI,
                                                                  Request,
                                                                  Response);

        #endregion


        // ---------------------------------------------------------------------


        #region (protected internal) RestartRequest (Request)

        /// <summary>
        /// An event sent whenever a restart request was received.
        /// </summary>
        public HTTPRequestLogEvent OnRestartHTTPRequest = new();

        /// <summary>
        /// An event sent whenever a restart request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task RestartRequest(DateTime     Timestamp,
                                               HTTPAPI      HTTPAPI,
                                               HTTPRequest  Request)

            => OnRestartHTTPRequest.WhenAll(Timestamp,
                                            HTTPAPI,
                                            Request);

        #endregion

        #region (protected internal) RestartResponse(Response)

        /// <summary>
        /// An event sent whenever a restart response was sent.
        /// </summary>
        public HTTPResponseLogEvent OnRestartHTTPResponse = new();

        /// <summary>
        /// An event sent whenever a restart response was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task RestartResponse(DateTime      Timestamp,
                                                HTTPAPI       HTTPAPI,
                                                HTTPRequest   Request,
                                                HTTPResponse  Response)

            => OnRestartHTTPResponse.WhenAll(Timestamp,
                                             HTTPAPI,
                                             Request,
                                             Response);

        #endregion


        #region (protected internal) StopRequest (Request)

        /// <summary>
        /// An event sent whenever a stop request was received.
        /// </summary>
        public HTTPRequestLogEvent OnStopHTTPRequest = new();

        /// <summary>
        /// An event sent whenever a stop request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task StopRequest(DateTime     Timestamp,
                                            HTTPAPI      HTTPAPI,
                                            HTTPRequest  Request)

            => OnStopHTTPRequest.WhenAll(Timestamp,
                                         HTTPAPI,
                                         Request);

        #endregion

        #region (protected internal) StopResponse(Response)

        /// <summary>
        /// An event sent whenever a stop response was sent.
        /// </summary>
        public HTTPResponseLogEvent OnStopHTTPResponse = new();

        /// <summary>
        /// An event sent whenever a stop response was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="HTTPAPI">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task StopResponse(DateTime      Timestamp,
                                             HTTPAPI       HTTPAPI,
                                             HTTPRequest   Request,
                                             HTTPResponse  Response)

            => OnStopHTTPResponse.WhenAll(Timestamp,
                                          HTTPAPI,
                                          Request,
                                          Response);

        #endregion

        #endregion

        #region Custom JSON parsers

        #endregion

        #region Custom JSON serializers

        public CustomJObjectSerializerDelegate<IResult>?  CustomResultSerializer    { get; set; }

        #endregion

        #region Constructor(s)

        #region HTTPExtAPI(HTTPServerName, ...)

        /// <summary>
        /// Create a new HTTP server and attach this Open Data HTTP API to it.
        /// </summary>
        /// <param name="HTTPHostname">The HTTP hostname for all URLs within this API.</param>
        /// <param name="ExternalDNSName">The offical URL/DNS name of this service, e.g. for sending e-mails.</param>
        /// <param name="HTTPServerPort">A TCP port to listen on.</param>
        /// <param name="BasePath">When the API is served from an optional subdirectory path.</param>
        /// <param name="HTTPServerName">The default HTTP servername, used whenever no HTTP Host-header has been given.</param>
        /// 
        /// <param name="URLPathPrefix">A common prefix for all URLs.</param>
        /// <param name="HTTPServiceName">The name of the HTTP service.</param>
        /// <param name="HTMLTemplate">An optional HTML template.</param>
        /// <param name="APIVersionHashes">The API version hashes (git commit hash values).</param>
        /// 
        /// <param name="ServerCertificateSelector">An optional delegate to select a TLS server certificate.</param>
        /// <param name="ClientCertificateValidator">An optional delegate to verify the TLS client certificate used for authentication.</param>
        /// <param name="ClientCertificateSelector">An optional delegate to select the TLS client certificate used for authentication.</param>
        /// <param name="AllowedTLSProtocols">The TLS protocol(s) allowed for this connection.</param>
        /// 
        /// <param name="ServerThreadName">The optional name of the TCP server thread.</param>
        /// <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
        /// <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
        /// <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
        /// <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
        /// <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
        /// 
        /// <param name="AdminOrganizationId">The admins' organization identification.</param>
        /// <param name="APIRobotEMailAddress">An e-mail address for this API.</param>
        /// <param name="APIRobotGPGPassphrase">A GPG passphrase for this API.</param>
        /// <param name="SMTPClient">A SMTP client for sending e-mails.</param>
        /// 
        /// <param name="PasswordQualityCheck">A delegate to ensure a minimal password quality.</param>
        /// <param name="CookieName">The name of the HTTP Cookie for authentication.</param>
        /// <param name="UseSecureCookies">Force the web browser to send cookies only via HTTPS.</param>
        /// <param name="MaxSignInSessionLifetime">The maximum sign-in session lifetime.</param>
        /// <param name="DefaultLanguage">The default language of the API.</param>
        /// <param name="MinUserIdLength">The minimal user identification length.</param>
        /// <param name="MinUserNameLength">The minimal user name length.</param>
        /// <param name="MinRealmLength">The minimal realm length.</param>
        /// <param name="MinUserGroupIdLength">The minimal user group identification length.</param>
        /// <param name="MinAPIKeyLength">The minimal API key length.</param>
        /// 
        /// <param name="DisableMaintenanceTasks">Disable all maintenance tasks.</param>
        /// <param name="MaintenanceInitialDelay">The initial delay of the maintenance tasks.</param>
        /// <param name="MaintenanceEvery">The maintenance intervall.</param>
        /// 
        /// <param name="DisableWardenTasks">Disable all warden tasks.</param>
        /// <param name="WardenInitialDelay">The initial delay of the warden tasks.</param>
        /// <param name="WardenCheckEvery">The warden intervall.</param>
        /// 
        /// <param name="RemoteAuthServers">Servers for remote authorization.</param>
        /// <param name="RemoteAuthAPIKeys">API keys for incoming remote authorizations.</param>
        /// 
        /// <param name="IsDevelopment">This HTTP API runs in development mode.</param>
        /// <param name="DevelopmentServers">An enumeration of server names which will imply to run this service in development mode.</param>
        /// <param name="SkipURLTemplates">Skip URL templates.</param>
        /// <param name="DatabaseFileName">The name of the database file for this API.</param>
        /// <param name="DisableNotifications">Disable external notifications.</param>
        /// <param name="DisableLogging">Disable the log file.</param>
        /// <param name="LoggingPath">The path for all logfiles.</param>
        /// <param name="LogfileName">The name of the logfile.</param>
        /// <param name="LogfileCreator">A delegate for creating the name of the logfile for this API.</param>
        /// <param name="DNSClient">The DNS client of the API.</param>
        /// <param name="AutoStart">Whether to start the API automatically.</param>
        public HTTPExtAPI(HTTPHostname?                        HTTPHostname                     = null,
                          String?                              ExternalDNSName                  = null,
                          IPPort?                              HTTPServerPort                   = null,
                          HTTPPath?                            BasePath                         = null,
                          String?                              HTTPServerName                   = DefaultHTTPServerName,

                          HTTPPath?                            URLPathPrefix                    = null,
                          String?                              HTTPServiceName                  = DefaultHTTPServiceName,
                          String?                              HTMLTemplate                     = null,
                          JObject?                             APIVersionHashes                 = null,

                          ServerCertificateSelectorDelegate?   ServerCertificateSelector        = null,
                          RemoteCertificateValidationHandler?  ClientCertificateValidator       = null,
                          LocalCertificateSelectionHandler?    ClientCertificateSelector        = null,
                          SslProtocols?                        AllowedTLSProtocols              = null,
                          Boolean?                             ClientCertificateRequired        = null,
                          Boolean?                             CheckCertificateRevocation       = null,

                          ServerThreadNameCreatorDelegate?     ServerThreadNameCreator          = null,
                          ServerThreadPriorityDelegate?        ServerThreadPrioritySetter       = null,
                          Boolean?                             ServerThreadIsBackground         = null,
                          ConnectionIdBuilder?                 ConnectionIdBuilder              = null,
                          TimeSpan?                            ConnectionTimeout                = null,
                          UInt32?                              MaxClientConnections             = null,

                          Organization_Id?                     AdminOrganizationId              = null,
                          EMailAddress?                        APIRobotEMailAddress             = null,
                          String?                              APIRobotGPGPassphrase            = null,
                          ISMTPClient?                         SMTPClient                       = null,

                          PasswordQualityCheckDelegate?        PasswordQualityCheck             = null,
                          HTTPCookieName?                      CookieName                       = null,
                          Boolean                              UseSecureCookies                 = true,
                          TimeSpan?                            MaxSignInSessionLifetime         = null,
                          Languages?                           DefaultLanguage                  = null,
                          Byte?                                MinUserIdLength                  = null,
                          Byte?                                MinRealmLength                   = null,
                          Byte?                                MinUserNameLength                = null,
                          Byte?                                MinUserGroupIdLength             = null,
                          UInt16?                              MinAPIKeyLength                  = null,
                          Byte?                                MinMessageIdLength               = null,
                          Byte?                                MinOrganizationIdLength          = null,
                          Byte?                                MinOrganizationGroupIdLength     = null,
                          Byte?                                MinNotificationMessageIdLength   = null,
                          Byte?                                MinNewsPostingIdLength           = null,
                          Byte?                                MinNewsBannerIdLength            = null,
                          Byte?                                MinFAQIdLength                   = null,

                          Boolean?                             DisableMaintenanceTasks          = null,
                          TimeSpan?                            MaintenanceInitialDelay          = null,
                          TimeSpan?                            MaintenanceEvery                 = null,

                          Boolean?                             DisableWardenTasks               = null,
                          TimeSpan?                            WardenInitialDelay               = null,
                          TimeSpan?                            WardenCheckEvery                 = null,

                          IEnumerable<URLWithAPIKey>?          RemoteAuthServers                = null,
                          IEnumerable<APIKey_Id>?              RemoteAuthAPIKeys                = null,

                          Boolean?                             IsDevelopment                    = null,
                          IEnumerable<String>?                 DevelopmentServers               = null,
                          Boolean                              SkipURLTemplates                 = false,
                          String?                              DatabaseFileName                 = DefaultHTTPExtAPI_DatabaseFileName,
                          Boolean                              DisableNotifications             = false,
                          Boolean                              DisableLogging                   = false,
                          String?                              LoggingPath                      = null,
                          String?                              LogfileName                      = DefaultHTTPExtAPI_LogfileName,
                          LogfileCreatorDelegate?              LogfileCreator                   = null,
                          DNSClient?                           DNSClient                        = null,
                          Boolean                              AutoStart                        = false)

            : base(HTTPHostname,
                   ExternalDNSName,
                   HTTPServerPort,
                   BasePath,
                   HTTPServerName  ?? DefaultHTTPServerName,

                   URLPathPrefix,
                   HTTPServiceName ?? DefaultHTTPServiceName,
                   HTMLTemplate,
                   APIVersionHashes,

                   ServerCertificateSelector,
                   ClientCertificateValidator,
                   ClientCertificateSelector,
                   AllowedTLSProtocols,
                   ClientCertificateRequired,
                   CheckCertificateRevocation,

                   ServerThreadNameCreator,
                   ServerThreadPrioritySetter,
                   ServerThreadIsBackground,
                   ConnectionIdBuilder,
                   ConnectionTimeout,
                   MaxClientConnections,

                   DisableMaintenanceTasks,
                   MaintenanceInitialDelay,
                   MaintenanceEvery,

                   DisableWardenTasks,
                   WardenInitialDelay,
                   WardenCheckEvery,

                   IsDevelopment,
                   DevelopmentServers,
                   DisableLogging,
                   LoggingPath ?? Path.Combine(AppContext.BaseDirectory, DefaultHTTPAPI_LoggingPath),
                   LogfileName ?? DefaultHTTPExtAPI_LogfileName,
                   LogfileCreator,
                   DNSClient,
                   false) // AutoStart

        {

            #region Inital checks

            if (APIRobotEMailAddress is null)
                throw new ArgumentNullException(nameof(APIRobotEMailAddress),   "The given API robot e-mail address must not be null!");

            //if (APIRobotGPGPassphrase is null)
            //    throw new ArgumentNullException(nameof(APIRobotGPGPassphrase),  "The given API robot PGP/GPG passphrase must not be null!");

            #endregion

            #region Init data

            this.APIVersionHash                  = APIVersionHashes?[nameof(HTTPExtAPI)]?.Value<String>()?.Trim();

            if (this.APIVersionHash.IsNullOrEmpty())
                this.APIVersionHash              = "unknown";

            this.DatabaseFileName                = this.LoggingPath + (DatabaseFileName ?? DefaultHTTPExtAPI_DatabaseFileName);

            this.HTTPAPIPath                     = this.LoggingPath + "UsersAPI"       + Path.DirectorySeparatorChar;
            this.NotificationsPath               = this.LoggingPath + "Notifications"  + Path.DirectorySeparatorChar;
            this.SMTPLoggingPath                 = this.LoggingPath + "SMTPClient"     + Path.DirectorySeparatorChar;

            this.DisableNotifications            = DisableNotifications;

            if (!DisableLogging) {
                Directory.CreateDirectory(this.HTTPAPIPath);
                Directory.CreateDirectory(this.NotificationsPath);
                Directory.CreateDirectory(this.SMTPLoggingPath);
            }

            this.Robot                           = new User(
                                                       Id:               User_Id.Parse("robot"),
                                                       EMail:            APIRobotEMailAddress.Address,
                                                       Name:            (APIRobotEMailAddress.OwnerName ?? "Robot").ToI18NString(),
                                                       PublicKeyRing:    APIRobotEMailAddress.PublicKeyRing,
                                                       SecretKeyRing:    APIRobotEMailAddress.SecretKeyRing,
                                                       Description:      "The HTTP API robot".ToI18NString(),
                                                       IsAuthenticated:  true
                                                   );

            CurrentAsyncLocalUserId.Value        = Robot.Id;

            this.AdminOrganizationId             = AdminOrganizationId            ?? DefaultAdminOrganizationId;
            this.APIRobotGPGPassphrase           = APIRobotGPGPassphrase;
            this.SMTPClient                      = SMTPClient                     ?? throw new ArgumentNullException(nameof(SMTPClient), "The given API SMTP client must not be null!");

            this.CookieName                      = CookieName                     ?? DefaultCookieName;
            this.SessionCookieName               = this.CookieName + "Session";
            this.UseSecureCookies                = UseSecureCookies;
            this.DefaultLanguage                 = DefaultLanguage                ?? DefaultDefaultLanguage;

            this.MinUserIdLength                 = MinUserIdLength                ?? DefaultMinUserIdLength;
            this.MinRealmLength                  = MinRealmLength                 ?? DefaultMinRealmLength;
            this.MinUserNameLength               = MinUserNameLength              ?? DefaultMinUserNameLength;
            this.MinUserGroupIdLength            = MinUserGroupIdLength           ?? DefaultMinUserGroupIdLength;
            this.MinAPIKeyLength                 = MinAPIKeyLength                ?? DefaultMinAPIKeyLength;
            this.MinOrganizationIdLength         = MinOrganizationIdLength        ?? DefaultMinOrganizationIdLength;
            this.MinOrganizationGroupIdLength    = MinOrganizationGroupIdLength   ?? DefaultMinOrganizationGroupIdLength;
            this.MinNotificationMessageIdLength  = MinNotificationMessageIdLength ?? DefaultMinNotificationMessageIdLength;

            this.PasswordQualityCheck            = PasswordQualityCheck           ?? DefaultPasswordQualityCheck;
            this.MaxSignInSessionLifetime        = MaxSignInSessionLifetime       ?? DefaultMaxSignInSessionLifetime;

            this.CurrentDatabaseHashValue        = "";

            this.remoteAuthServers               = RemoteAuthServers is not null   ? new HashSet<URLWithAPIKey>(RemoteAuthServers) : new HashSet<URLWithAPIKey>();
            this.remoteAuthAPIKeys               = RemoteAuthAPIKeys is not null   ? new HashSet<APIKey_Id>    (RemoteAuthAPIKeys) : new HashSet<APIKey_Id>();

            #endregion

            #region Reflect data licenses

            foreach (var dataLicense in typeof(OpenDataLicense).GetFields(System.Reflection.BindingFlags.Public |
                                                                      System.Reflection.BindingFlags.Static).
                                                            Where (fieldinfo => fieldinfo.ReflectedType == typeof(OpenDataLicense) &&
                                                                                fieldinfo.FieldType     == typeof(OpenDataLicense)).
                                                            Select(fieldinfo => fieldinfo.GetValue(OpenDataLicense.None)).
                                                            Cast<OpenDataLicense>())
            {

                dataLicenses.TryAdd(dataLicense.Id,
                                    dataLicense);

            }

            #endregion


            #region Create default organizations/user groups

            this.NoOwner = new Organization(
                               Organization_Id.Parse("NoOwner"),
                               "No owner".ToI18NString()
                           );

            organizations.TryAdd(this.NoOwner.Id,
                                 this.NoOwner);

            #endregion


            #region Warden: Observe CPU/RAM => Send admin e-mails...

            Warden.EveryMinutes(15,
                                Environment.OSVersion.Platform == PlatformID.Unix
                                    ? new DriveInfo("/")
                                    : new DriveInfo(Directory.GetCurrentDirectory()),
                                async (timestamp, driveInfo, ct) => {

                                    var MBytesFree       = driveInfo.AvailableFreeSpace / 1024 / 1024;
                                    var HDPercentageFree = 100 * driveInfo.AvailableFreeSpace / driveInfo.TotalSize;

                                    if (HDPercentageFree < 3 &&
                                        TryGetOrganization(this.AdminOrganizationId, out var adminOrganization) &&
                                        adminOrganization is not null)
                                    {

                                        // lowStorage_MessageType
                                        await SMTPClient.Send(new HTMLEMailBuilder {
                                                                     From           = Robot.EMail,
                                                                     To             = EMailAddressList.Create(adminOrganization.Admins.Select(admin => admin.EMail)),
                                                                     Passphrase     = APIRobotGPGPassphrase,
                                                                     Subject        = HTTPServiceName + " is low on disc (<" + HDPercentageFree + "%, " + MBytesFree + " MB free)",
                                                                     HTMLText       = HTTPServiceName + " is low on disc (<" + HDPercentageFree + "%, " + MBytesFree + " MB free)" + Environment.NewLine + Environment.NewLine,
                                                                     PlainText      = HTTPServiceName + " is low on disc (<" + HDPercentageFree + "%, " + MBytesFree + " MB free)" + Environment.NewLine + Environment.NewLine,
                                                                     SecurityLevel  = EMailSecurity.autosign
                                                                 }).ConfigureAwait(false);

                                    }

                                });

            #endregion

            //RegisterNotifications().Wait();

            if (!SkipURLTemplates)
                RegisterURLTemplates();

            DebugX.Log(nameof(HTTPExtAPI) + " version '" + APIVersionHash + "' initialized...");

            if (AutoStart)
                Start();

        }

        #endregion

        #region HTTPAPI(HTTPServer, HTTPHostname = null, ...)

        /// <summary>
        /// Create a new HTTP API.
        /// </summary>
        /// <param name="HTTPServer">A HTTP server.</param>
        /// <param name="HTTPHostname">An optional HTTP hostname.</param>
        /// <param name="ExternalDNSName">The offical URL/DNS name of this service, e.g. for sending e-mails.</param>
        /// <param name="HTTPServiceName">An optional name of the HTTP API service.</param>
        /// <param name="BasePath">When the API is served from an optional subdirectory path.</param>
        /// 
        /// <param name="URLPathPrefix">An optional URL path prefix, used when defining URL templates.</param>
        /// <param name="HTMLTemplate">An optional HTML template.</param>
        /// <param name="APIVersionHashes">The API version hashes (git commit hash values).</param>
        /// 
        /// <param name="DisableMaintenanceTasks">Disable all maintenance tasks.</param>
        /// <param name="MaintenanceInitialDelay">The initial delay of the maintenance tasks.</param>
        /// <param name="MaintenanceEvery">The maintenance intervall.</param>
        /// 
        /// <param name="DisableWardenTasks">Disable all warden tasks.</param>
        /// <param name="WardenInitialDelay">The initial delay of the warden tasks.</param>
        /// <param name="WardenCheckEvery">The warden intervall.</param>
        /// 
        /// <param name="IsDevelopment">This HTTP API runs in development mode.</param>
        /// <param name="DevelopmentServers">An enumeration of server names which will imply to run this service in development mode.</param>
        /// <param name="DisableLogging">Disable the log file.</param>
        /// <param name="LoggingPath">The path for all logfiles.</param>
        /// <param name="LogfileName">The name of the logfile.</param>
        /// <param name="LogfileCreator">A delegate for creating the name of the logfile for this API.</param>
        /// <param name="AutoStart">Whether to start the API automatically.</param>
        public HTTPExtAPI(HTTPServer               HTTPServer,
                          HTTPHostname?            HTTPHostname              = null,
                          String?                  ExternalDNSName           = "",
                          String?                  HTTPServiceName           = DefaultHTTPServiceName,
                          HTTPPath?                BasePath                  = null,

                          HTTPPath?                URLPathPrefix             = null,
                          String?                  HTMLTemplate              = null,
                          JObject?                 APIVersionHashes          = null,

                          Organization_Id?                     AdminOrganizationId              = null,
                          EMailAddress?                        APIRobotEMailAddress             = null,
                          String?                              APIRobotGPGPassphrase            = null,
                          ISMTPClient?                         SMTPClient                       = null,

                          PasswordQualityCheckDelegate?        PasswordQualityCheck             = null,
                          HTTPCookieName?                      CookieName                       = null,
                          Boolean                              UseSecureCookies                 = true,
                          TimeSpan?                            MaxSignInSessionLifetime         = null,
                          Languages?                           DefaultLanguage                  = null,
                          Byte?                                MinUserIdLength                  = null,
                          Byte?                                MinRealmLength                   = null,
                          Byte?                                MinUserNameLength                = null,
                          Byte?                                MinUserGroupIdLength             = null,
                          UInt16?                              MinAPIKeyLength                  = null,
                          Byte?                                MinMessageIdLength               = null,
                          Byte?                                MinOrganizationIdLength          = null,
                          Byte?                                MinOrganizationGroupIdLength     = null,
                          Byte?                                MinNotificationMessageIdLength   = null,
                          Byte?                                MinNewsPostingIdLength           = null,
                          Byte?                                MinNewsBannerIdLength            = null,
                          Byte?                                MinFAQIdLength                   = null,

                          Boolean?                 DisableMaintenanceTasks   = false,
                          TimeSpan?                MaintenanceInitialDelay   = null,
                          TimeSpan?                MaintenanceEvery          = null,

                          Boolean?                 DisableWardenTasks        = false,
                          TimeSpan?                WardenInitialDelay        = null,
                          TimeSpan?                WardenCheckEvery          = null,

                          Boolean?                 IsDevelopment             = false,
                          IEnumerable<String>?     DevelopmentServers        = null,
                          Boolean                  SkipURLTemplates          = false,
                          Boolean?                 DisableLogging            = false,
                          String?                  LoggingPath               = null,
                          String?                  LogfileName               = DefaultHTTPAPI_LogfileName,
                          LogfileCreatorDelegate?  LogfileCreator            = null,
                          Boolean                  AutoStart                 = false)

        {

            #region Inital checks

            if (APIRobotEMailAddress is null)
                throw new ArgumentNullException(nameof(APIRobotEMailAddress),   "The given API robot e-mail address must not be null!");

            if (APIRobotGPGPassphrase is null)
                throw new ArgumentNullException(nameof(APIRobotGPGPassphrase),  "The given API robot PGP/GPG passphrase must not be null!");

            #endregion

            #region Init data

            this.APIVersionHash                  = APIVersionHashes?[nameof(HTTPExtAPI)]?.Value<String>()?.Trim();

            if (this.APIVersionHash.IsNullOrEmpty())
                this.APIVersionHash              = "unknown";

            this.DatabaseFileName                = this.LoggingPath + (DatabaseFileName ?? DefaultHTTPExtAPI_DatabaseFileName);

            this.HTTPAPIPath                     = this.LoggingPath + "UsersAPI"       + Path.DirectorySeparatorChar;
            this.NotificationsPath               = this.LoggingPath + "Notifications"  + Path.DirectorySeparatorChar;
            this.SMTPLoggingPath                 = this.LoggingPath + "SMTPClient"     + Path.DirectorySeparatorChar;

            this.DisableNotifications            = DisableNotifications;

            if (DisableLogging == true) {
                Directory.CreateDirectory(this.HTTPAPIPath);
                Directory.CreateDirectory(this.NotificationsPath);
                Directory.CreateDirectory(this.SMTPLoggingPath);
            }

            this.Robot                           = new User(
                                                       Id:               User_Id.Parse("robot"),
                                                       EMail:            APIRobotEMailAddress.Address,
                                                       Name:            (APIRobotEMailAddress.OwnerName ?? "Robot").ToI18NString(),
                                                       PublicKeyRing:    APIRobotEMailAddress.PublicKeyRing,
                                                       SecretKeyRing:    APIRobotEMailAddress.SecretKeyRing,
                                                       Description:      "The HTTP API robot".ToI18NString(),
                                                       IsAuthenticated:  true
                                                   );

            CurrentAsyncLocalUserId.Value        = Robot.Id;

            this.AdminOrganizationId             = AdminOrganizationId            ?? DefaultAdminOrganizationId;
            this.APIRobotGPGPassphrase           = APIRobotGPGPassphrase;
            this.SMTPClient                      = SMTPClient                     ?? throw new ArgumentNullException(nameof(SMTPClient), "The given API SMTP client must not be null!");

            this.CookieName                      = CookieName                     ?? DefaultCookieName;
            this.SessionCookieName               = this.CookieName + "Session";
            this.UseSecureCookies                = UseSecureCookies;
            this.DefaultLanguage                 = DefaultLanguage                ?? DefaultDefaultLanguage;

            this.MinUserIdLength                 = MinUserIdLength                ?? DefaultMinUserIdLength;
            this.MinRealmLength                  = MinRealmLength                 ?? DefaultMinRealmLength;
            this.MinUserNameLength               = MinUserNameLength              ?? DefaultMinUserNameLength;
            this.MinUserGroupIdLength            = MinUserGroupIdLength           ?? DefaultMinUserGroupIdLength;
            this.MinAPIKeyLength                 = MinAPIKeyLength                ?? DefaultMinAPIKeyLength;
            this.MinOrganizationIdLength         = MinOrganizationIdLength        ?? DefaultMinOrganizationIdLength;
            this.MinOrganizationGroupIdLength    = MinOrganizationGroupIdLength   ?? DefaultMinOrganizationGroupIdLength;
            this.MinNotificationMessageIdLength  = MinNotificationMessageIdLength ?? DefaultMinNotificationMessageIdLength;

            this.PasswordQualityCheck            = PasswordQualityCheck           ?? DefaultPasswordQualityCheck;
            this.MaxSignInSessionLifetime        = MaxSignInSessionLifetime       ?? DefaultMaxSignInSessionLifetime;

            this.CurrentDatabaseHashValue        = "";

            this.remoteAuthServers               = RemoteAuthServers is not null   ? new HashSet<URLWithAPIKey>(RemoteAuthServers) : new HashSet<URLWithAPIKey>();
            this.remoteAuthAPIKeys               = RemoteAuthAPIKeys is not null   ? new HashSet<APIKey_Id>    (RemoteAuthAPIKeys) : new HashSet<APIKey_Id>();

            #endregion

            #region Reflect data licenses

            foreach (var dataLicense in typeof(OpenDataLicense).GetFields(System.Reflection.BindingFlags.Public |
                                                                      System.Reflection.BindingFlags.Static).
                                                            Where (fieldinfo => fieldinfo.ReflectedType == typeof(OpenDataLicense) &&
                                                                                fieldinfo.FieldType     == typeof(OpenDataLicense)).
                                                            Select(fieldinfo => fieldinfo.GetValue(OpenDataLicense.None)).
                                                            Cast<OpenDataLicense>())
            {

                dataLicenses.TryAdd(dataLicense.Id,
                                    dataLicense);

            }

            #endregion


            #region Create default organizations/user groups

            this.NoOwner = new Organization(
                               Organization_Id.Parse("NoOwner"),
                               "No owner".ToI18NString()
                           );

            organizations.TryAdd(this.NoOwner.Id,
                                 this.NoOwner);

            #endregion


            #region Warden: Observe CPU/RAM => Send admin e-mails...

            //Warden.EveryMinutes(15,
            //                    Environment.OSVersion.Platform == PlatformID.Unix
            //                        ? new DriveInfo("/")
            //                        : new DriveInfo(Directory.GetCurrentDirectory()),
            //                    async (timestamp, driveInfo, ct) => {

            //                        var MBytesFree       = driveInfo.AvailableFreeSpace / 1024 / 1024;
            //                        var HDPercentageFree = 100 * driveInfo.AvailableFreeSpace / driveInfo.TotalSize;

            //                        if (HDPercentageFree < 3 &&
            //                            TryGetOrganization(this.AdminOrganizationId, out var adminOrganization) &&
            //                            adminOrganization is not null)
            //                        {

            //                            // lowStorage_MessageType
            //                            await SMTPClient.Send(new HTMLEMailBuilder {
            //                                                         From           = Robot.EMail,
            //                                                         To             = EMailAddressList.Create(adminOrganization.Admins.Select(admin => admin.EMail)),
            //                                                         Passphrase     = APIRobotGPGPassphrase,
            //                                                         Subject        = ServiceName + " is low on disc (<" + HDPercentageFree + "%, " + MBytesFree + " MB free)",
            //                                                         HTMLText       = ServiceName + " is low on disc (<" + HDPercentageFree + "%, " + MBytesFree + " MB free)" + Environment.NewLine + Environment.NewLine,
            //                                                         PlainText      = ServiceName + " is low on disc (<" + HDPercentageFree + "%, " + MBytesFree + " MB free)" + Environment.NewLine + Environment.NewLine,
            //                                                         SecurityLevel  = EMailSecurity.autosign
            //                                                     }).ConfigureAwait(false);

            //                        }

            //                    });

            #endregion

            //RegisterNotifications().Wait();

            if (!SkipURLTemplates)
                RegisterURLTemplates();

            DebugX.Log(nameof(HTTPExtAPI) + " version '" + APIVersionHash + "' initialized...");

            if (AutoStart)
                Start();


        }

        #endregion

        #endregion

        #region (static) AttachToHTTPAPI(HTTPServer, URLPrefix = "/", ...)

        ///// <summary>
        ///// Attach this Open Data HTTP API to the given HTTP server.
        ///// </summary>
        ///// <param name="HTTPServer">An existing HTTP server.</param>
        ///// <param name="HTTPHostname">The HTTP hostname for all URLs within this API.</param>
        ///// <param name="ServiceName">The name of the service.</param>
        ///// <param name="ExternalDNSName">The offical URL/DNS name of this service, e.g. for sending e-mails.</param>
        ///// <param name="URLPathPrefix">A common prefix for all URLs.</param>
        ///// <param name="HTMLTemplate">An optional HTML template.</param>
        ///// <param name="APIVersionHashes">The API version hashes (git commit hash values).</param>
        ///// 
        ///// <param name="AdminOrganizationId">The API admin organization identification.</param>
        ///// <param name="APIRobotEMailAddress">An e-mail address for this API.</param>
        ///// <param name="APIRobotGPGPassphrase">A GPG passphrase for this API.</param>
        ///// <param name="SMTPClient">A SMTP client for sending e-mails.</param>
        ///// <param name="SMSClient">A SMS client for sending SMS.</param>
        ///// <param name="SMSSenderName">The (default) SMS sender name.</param>
        ///// <param name="TelegramBotToken">The Telegram API access token of the bot.</param>
        ///// 
        ///// <param name="PasswordQualityCheck">A delegate to ensure a minimal password quality.</param>
        ///// <param name="CookieName">The name of the HTTP Cookie for authentication.</param>
        ///// <param name="UseSecureCookies">Force the web browser to send cookies only via HTTPS.</param>
        ///// <param name="MaxSignInSessionLifetime">The maximum sign-in session lifetime.</param>
        ///// <param name="DefaultLanguage">The default language of the API.</param>
        ///// <param name="MinUserNameLength">The minimal user name length.</param>
        ///// <param name="MinRealmLength">The minimal realm length.</param>
        ///// 
        ///// <param name="DisableMaintenanceTasks">Disable all maintenance tasks.</param>
        ///// <param name="MaintenanceInitialDelay">The initial delay of the maintenance tasks.</param>
        ///// <param name="MaintenanceEvery">The maintenance intervall.</param>
        ///// <param name="DisableWardenTasks">Disable all warden tasks.</param>
        ///// <param name="WardenInitialDelay">The initial delay of the warden tasks.</param>
        ///// <param name="WardenCheckEvery">The warden intervall.</param>
        ///// 
        ///// <param name="SkipURLTemplates">Skip URL templates.</param>
        ///// <param name="DisableNotifications">Disable external notifications.</param>
        ///// <param name="DisableLogfile">Disable the log file.</param>
        ///// <param name="LogfileName">The name of the logfile for this API.</param>
        //public static HTTPExtAPI AttachToHTTPAPI(HTTPServer                           HTTPServer,
        //                                       HTTPHostname?                        HTTPHostname                     = null,
        //                                       String                               ServiceName                      = "GraphDefined HTTPExt API",
        //                                       String                               ExternalDNSName                  = null,
        //                                       HTTPPath?                            URLPathPrefix                    = null,
        //                                       HTTPPath?                            BasePath                         = null,
        //                                       String                               HTMLTemplate                     = null,
        //                                       JObject                              APIVersionHashes                 = null,

        //                                       Organization_Id?                     AdminOrganizationId              = null,
        //                                       EMailAddress                         APIRobotEMailAddress             = null,
        //                                       String                               APIRobotGPGPassphrase            = null,
        //                                       ISMTPClient                          SMTPClient                       = null,
        //                                       ISMSClient                           SMSClient                        = null,
        //                                       String                               SMSSenderName                    = null,
        //                                       String                               TelegramBotToken                 = null,

        //                                       PasswordQualityCheckDelegate         PasswordQualityCheck             = null,
        //                                       HTTPCookieName?                      CookieName                       = null,
        //                                       Boolean                              UseSecureCookies                 = true,
        //                                       TimeSpan?                            MaxSignInSessionLifetime         = null,
        //                                       Languages                            DefaultLanguage                  = Languages.en,
        //                                       Byte?                                MinUserIdLength                  = null,
        //                                       Byte?                                MinRealmLength                   = null,
        //                                       Byte?                                MinUserNameLength                = null,
        //                                       Byte?                                MinUserGroupIdLength             = null,
        //                                       UInt16?                              MinAPIKeyLength                  = null,
        //                                       Byte?                                MinMessageIdLength               = null,
        //                                       Byte?                                MinOrganizationIdLength          = null,
        //                                       Byte?                                MinOrganizationGroupIdLength     = null,
        //                                       Byte?                                MinNotificationMessageIdLength   = null,
        //                                       Byte?                                MinNewsPostingIdLength           = null,
        //                                       Byte?                                MinNewsBannerIdLength            = null,
        //                                       Byte?                                MinFAQIdLength                   = null,

        //                                       Boolean                              DisableMaintenanceTasks          = false,
        //                                       TimeSpan?                            MaintenanceInitialDelay          = null,
        //                                       TimeSpan?                            MaintenanceEvery                 = null,
        //                                       Boolean                              DisableWardenTasks               = false,
        //                                       TimeSpan?                            WardenInitialDelay               = null,
        //                                       TimeSpan?                            WardenCheckEvery                 = null,

        //                                       Boolean                              SkipURLTemplates                 = false,
        //                                       Boolean                              DisableNotifications             = false,
        //                                       Boolean                              DisableLogfile                   = false,
        //                                       String                               LogfileName                      = DefaultLogfileName)


        //    => new HTTPExtAPI(HTTPServer,
        //                    HTTPHostname,
        //                    ServiceName,
        //                    ExternalDNSName,
        //                    URLPathPrefix,
        //                    BasePath,
        //                    HTMLTemplate,
        //                    APIVersionHashes,

        //                    AdminOrganizationId,
        //                    APIRobotEMailAddress,
        //                    APIRobotGPGPassphrase,
        //                    SMTPClient,
        //                    SMSClient,
        //                    SMSSenderName,
        //                    TelegramBotToken,

        //                    PasswordQualityCheck,
        //                    CookieName,
        //                    UseSecureCookies,
        //                    MaxSignInSessionLifetime,
        //                    DefaultLanguage,
        //                    MinUserIdLength,
        //                    MinRealmLength,
        //                    MinUserNameLength,
        //                    MinUserGroupIdLength,
        //                    MinAPIKeyLength,
        //                    MinMessageIdLength,
        //                    MinOrganizationIdLength,
        //                    MinOrganizationGroupIdLength,
        //                    MinNotificationMessageIdLength,
        //                    MinNewsPostingIdLength,
        //                    MinNewsBannerIdLength,
        //                    MinFAQIdLength,

        //                    DisableMaintenanceTasks,
        //                    MaintenanceInitialDelay,
        //                    MaintenanceEvery,
        //                    DisableWardenTasks,
        //                    WardenInitialDelay,
        //                    WardenCheckEvery,

        //                    SkipURLTemplates,
        //                    DisableNotifications,
        //                    DisableLogfile,
        //                    LogfileName);

        #endregion


        #region E-Mail templates

        #region (enum) E-Mail type

        /// <summary>
        /// The type of e-mails send.
        /// This might influence the content of the common e-mail headers and footers.
        /// </summary>
        public enum EMailType
        {

            /// <summary>
            /// A normal e-mail.
            /// </summary>
            Normal,

            /// <summary>
            /// A system e-mail.
            /// </summary>
            System,

            /// <summary>
            /// A notification e-mail.
            /// </summary>
            Notification

        }

        #endregion


        #region HTML e-mail header

        /// <summary>
        /// The common header of HTML notification e-mails.
        /// </summary>
        public virtual String HTMLEMailHeader(String     ExternalDNSName,
                                              HTTPPath?  BasePath,
                                              EMailType  EMailType)

            => String.Concat("<!DOCTYPE html>\r\n",
                             "<html>\r\n",
                               "<head>\r\n",
                                   "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n",
                               "</head>\r\n",
                               "<body style=\"background-color: #ececec\">\r\n",
                                 "<div style=\"width: 600px\">\r\n",
                                   "<div style=\"border-bottom: 1px solid #AAAAAA; margin-bottom: 20px\">\r\n",
                                       "<img src=\"", ExternalDNSName, (BasePath?.ToString() ?? ""), "\" style=\"width: 250px; padding-right: 10px\" alt=\"Organization\">\r\n",
                                   "</div>\r\n",
                                   "<div style=\"border-bottom: 1px solid #AAAAAA; padding-left: 6px; padding-bottom: 40px; margin-bottom: 10px;\">\r\n");

        #endregion

        #region HTML e-mail footer

        /// <summary>
        /// The common footer of HTML notification e-mails.
        /// </summary>
        public virtual String HTMLEMailFooter(String     ExternalDNSName,
                                              HTTPPath?  BasePath,
                                              EMailType  EMailType)

            => String.Concat(      "</div>\r\n",
                                   EMailType == EMailType.Notification
                                       ? "<div style=\"color: #AAAAAA; font-size: 80%; padding-bottom: 10px\">\r\n" +
                                             "If you no longer wish to receive this kind of notification e-mails you can unsubscribe <a href=\"https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/notifications\">here</a>.<br />\r\n" +
                                         "</div>\r\n"
                                       : "",
                                   "<div style=\"color: #AAAAAA; font-size: 70%\">\r\n",
                                       "(c) GraphDefined GmbH<br />\r\n",
                                   "</div>\r\n",
                                 "</div>\r\n",
                               "</body>\r\n",
                             "</html>\r\n\r\n");

        #endregion

        #region Text e-mail header

        /// <summary>
        /// The common header of plain text notification e-mails.
        /// </summary>
        public virtual String TextEMailHeader(String     ExternalDNSName,
                                              HTTPPath?  BasePath,
                                              EMailType  EMailType)

            => String.Concat("GraphDefined HTTPExt API\r\n",
                             "----------------------\r\n\r\n");

        #endregion

        #region Text e-mail footer

        /// <summary>
        /// The common footer of plain text notification e-mails.
        /// </summary>
        public virtual String TextEMailFooter(String     ExternalDNSName,
                                              HTTPPath?  BasePath,
                                              EMailType  EMailType)

            => String.Concat("\r\n\r\n---------------------------------------------------------------\r\n",
                             EMailType == EMailType.Notification
                                 ? "If you no longer wish to receive this kind of notification e-mails you can unsubscribe here: https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/notifications.\r\n\r\n"
                                 : "",
                             "HTTPExt API\r\n",
                             "(c) GraphDefined GmbH\r\n\r\n");

        #endregion


        #region 'New User Sign Up' e-mail creator

        /// <summary>
        /// A delegate for sending a sign-up e-mail to a new user.
        /// </summary>
        public virtual EMail NewUserSignUpEMailCreator(IUser              User,
                                                       EMailAddressList   EMailRecipients,
                                                       SecurityToken_Id   SecurityToken,
                                                       Boolean            Use2FactorAuth,
                                                       Languages          Language,
                                                       EventTracking_Id?  EventTrackingId)

            =>  new HTMLEMailBuilder() {

                    From           = Robot.EMail,
                    To             = EMailRecipients,
                    Passphrase     = APIRobotGPGPassphrase,
                    Subject        = "Your " + HTTPServiceName + " account has been created",

                    HTMLText       = String.Concat(
                                         HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.System),
                                             "Dear ", User.Name, ",<br /><br />" + Environment.NewLine,
                                             "your " + HTTPServiceName + " account has been created!<br /><br />" + Environment.NewLine,
                                             "Please click the following link to set a new password for your account" + (Use2FactorAuth ? " and check your mobile phone for an additional security token" : "") + "...<br /><br />" + Environment.NewLine,
                                             "<a href=\"https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/setPassword?" + SecurityToken + (Use2FactorAuth ? "&2factor" : "") + "\" style=\"text-decoration: none; color: #FFFFFF; background-color: #ff7300; Border: solid #ff7300; border-width: 10px 20px; line-height: 2; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 4px; margin-top: 20px; font-size: 70%\">Set a new password</a>" + Environment.NewLine,
                                         HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                     ),

                    PlainText      = String.Concat(
                                         TextEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                             "Dear ", User.Name, ", " + Environment.NewLine +
                                             "your " + HTTPServiceName + " account has been created!" + Environment.NewLine + Environment.NewLine +
                                             "Please click the following link to set a new password for your account" + (Use2FactorAuth ? " and check your mobile phone for an additional security token" : "") + "..." + Environment.NewLine + Environment.NewLine +
                                             "https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/setPassword?" + SecurityToken + (Use2FactorAuth ? "&2factor" : "") +
                                         TextEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                    SecurityLevel  = EMailSecurity.autosign

                }.AsImmutable;

        #endregion

        #region 'New User Welcome' e-mail creator

        /// <summary>
        /// A delegate for sending a welcome e-mail to a new user.
        /// </summary>
        public virtual EMail NewUserWelcomeEMailCreator(IUser              User,
                                                        EMailAddressList   EMailRecipients,
                                                        Languages          Language,
                                                        EventTracking_Id?  EventTrackingId)

            => new HTMLEMailBuilder() {

                   From           = Robot.EMail,
                   To             = EMailRecipients,
                   Passphrase     = APIRobotGPGPassphrase,
                   Subject        = "Welcome to " + HTTPServiceName + "...",

                   HTMLText       = String.Concat(
                                        HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + ",<br /><br />" + Environment.NewLine +
                                            "welcome to your new " + HTTPServiceName + " account!<br /><br />" + Environment.NewLine +
                                            "<a href=\"https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/login\" style=\"text-decoration: none; color: #FFFFFF; background-color: #ff7300; Border: solid #ff7300; border-width: 10px 20px; line-height: 2; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 4px; margin-top: 20px; font-size: 70%\">Login</a>" + Environment.NewLine +
                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   PlainText      = String.Concat(
                                        TextEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + "," + Environment.NewLine +
                                            "welcome to your new " + HTTPServiceName + " account!" + Environment.NewLine + Environment.NewLine +
                                            "Please login via: https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/login" + Environment.NewLine + Environment.NewLine +
                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   SecurityLevel  = EMailSecurity.autosign

               }.//AddAttachment("Hi there!".ToUTF8Bytes(), "welcome.txt", MailContentTypes.text_plain).
                 AsImmutable;

        #endregion

        #region 'Reset Password'   e-mail creator

        /// <summary>
        /// A delegate for sending a reset password e-mail to a user.
        /// </summary>
        public virtual EMail ResetPasswordEMailCreator(IUser              User,
                                                       EMailAddressList   EMailRecipients,
                                                       SecurityToken_Id   SecurityToken,
                                                       Boolean            Use2FactorAuth,
                                                       Languages          Language,
                                                       EventTracking_Id?  EventTrackingId)

            => new HTMLEMailBuilder() {

                   From           = Robot.EMail,
                   To             = EMailRecipients,
                   Passphrase     = APIRobotGPGPassphrase,
                   Subject        = HTTPServiceName + " password reset...",

                   HTMLText       = String.Concat(
                                        HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + ",<br /><br />" + Environment.NewLine +
                                            "someone - hopefully you - requested us to change your password!<br />" + Environment.NewLine +
                                            "If this request was your intention, please click the following link to set a new password...<br /><br />" + Environment.NewLine +
                                            "<a href=\"https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/setPassword?" + SecurityToken + (Use2FactorAuth ? "&2factor" : "") + "\" style=\"text-decoration: none; color: #FFFFFF; background-color: #ff7300; Border: solid #ff7300; border-width: 10px 20px; line-height: 2; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 4px; margin-top: 20px; font-size: 70%\">Set a new password</a>" + Environment.NewLine +
                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   PlainText      = String.Concat(
                                        TextEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + "," + Environment.NewLine +
                                            "someone - hopefully you - requested us to change your password!" + Environment.NewLine +
                                            "If this request was your intention, please click the following link to set a new password..." + Environment.NewLine + Environment.NewLine +
                                            "https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/setPassword?" + SecurityToken + (Use2FactorAuth ? "&2factor" : "") +
                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   SecurityLevel  = EMailSecurity.autosign

               }.AsImmutable;

        #endregion

        #region 'Password Changed' e-mail creator

        /// <summary>
        /// A delegate for sending a reset password e-mail to a user.
        /// </summary>
        public virtual EMail PasswordChangedEMailCreator(IUser              User,
                                                         EMailAddressList   EMailRecipients,
                                                         Languages          Language,
                                                         EventTracking_Id?  EventTrackingId)

            => new HTMLEMailBuilder() {

                   From           = Robot.EMail,
                   To             = EMailRecipients,
                   Passphrase     = APIRobotGPGPassphrase,
                   Subject        = "Your " + HTTPServiceName + " password changed...",

                   HTMLText       = String.Concat(
                                        HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + ",<br /><br />" + Environment.NewLine +
                                            "your password has successfully been changed!<br />" + Environment.NewLine +
                                            "<a href=\"https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/login?" + User.Id + "\" style=\"text-decoration: none; color: #FFFFFF; background-color: #ff7300; Border: solid #ff7300; border-width: 10px 20px; line-height: 2; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 4px; margin-top: 20px; font-size: 70%\">Login</a>" + Environment.NewLine +
                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   PlainText      = String.Concat(
                                        TextEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + "," + Environment.NewLine +
                                            "your password has successfully been changed!" + Environment.NewLine +
                                            "https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/login?" + User.Id +
                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   SecurityLevel  = EMailSecurity.autosign

               }.AsImmutable;

        #endregion

        #endregion


        #region Notifications...

        #region (static) NotificationMessageTypes

        public static NotificationMessageType lowStorage_MessageType                          = NotificationMessageType.Parse("lowStorage");

        public static NotificationMessageType addUser_MessageType                             = NotificationMessageType.Parse("addUser");
        public static NotificationMessageType addUserIfNotExists_MessageType                  = NotificationMessageType.Parse("addUserIfNotExists");
        public static NotificationMessageType addOrUpdateUser_MessageType                     = NotificationMessageType.Parse("addOrUpdateUser");
        public static NotificationMessageType updateUser_MessageType                          = NotificationMessageType.Parse("updateUser");
        public static NotificationMessageType deleteUser_MessageType                          = NotificationMessageType.Parse("deleteUser");

        public static NotificationMessageType addPassword_MessageType                         = NotificationMessageType.Parse("addPassword");
        public static NotificationMessageType changePassword_MessageType                      = NotificationMessageType.Parse("changePassword");
        public static NotificationMessageType resetPassword_MessageType                       = NotificationMessageType.Parse("resetPassword");
        public static NotificationMessageType addToPasswordFile                               = NotificationMessageType.Parse("add");
        public static NotificationMessageType removeFromPasswordFile                          = NotificationMessageType.Parse("remove");

        public static NotificationMessageType addUserGroup_MessageType                        = NotificationMessageType.Parse("addUserGroup");
        public static NotificationMessageType addUserGroupIfNotExists_MessageType             = NotificationMessageType.Parse("addUserGroupIfNotExists");
        public static NotificationMessageType addOrUpdateUserGroup_MessageType                = NotificationMessageType.Parse("addOrUpdateUserGroup");
        public static NotificationMessageType updateUserGroup_MessageType                     = NotificationMessageType.Parse("updateUserGroup");
        public static NotificationMessageType deleteUserGroup_MessageType                     = NotificationMessageType.Parse("deleteUserGroup");

        public static NotificationMessageType addUserToUserGroup_MessageType                  = NotificationMessageType.Parse("addUserToUserGroup");
        public static NotificationMessageType removeUserFromUserGroup_MessageType             = NotificationMessageType.Parse("removeUserFromUserGroup");

        public static NotificationMessageType addAPIKey_MessageType                           = NotificationMessageType.Parse("addAPIKey");
        public static NotificationMessageType addAPIKeyIfNotExists_MessageType                = NotificationMessageType.Parse("addAPIKeyIfNotExists");
        public static NotificationMessageType addOrUpdateAPIKey_MessageType                   = NotificationMessageType.Parse("addOrUpdateAPIKey");
        public static NotificationMessageType updateAPIKey_MessageType                        = NotificationMessageType.Parse("updateAPIKey");
        public static NotificationMessageType removeAPIKey_MessageType                        = NotificationMessageType.Parse("removeAPIKey");

        public static NotificationMessageType addMessage_MessageType                          = NotificationMessageType.Parse("addMessage");
        public static NotificationMessageType addMessageIfNotExists_MessageType               = NotificationMessageType.Parse("addMessageIfNotExists");
        public static NotificationMessageType addOrUpdateMessage_MessageType                  = NotificationMessageType.Parse("addOrUpdateMessage");
        public static NotificationMessageType updateMessage_MessageType                       = NotificationMessageType.Parse("updateMessage");
        public static NotificationMessageType removeMessage_MessageType                       = NotificationMessageType.Parse("removeMessage");

        public static NotificationMessageType addNotificationMessage_MessageType              = NotificationMessageType.Parse("addNotificationMessage");
        public static NotificationMessageType addNotificationMessageIfNotExists_MessageType   = NotificationMessageType.Parse("addNotificationMessageIfNotExists");
        public static NotificationMessageType addOrUpdateNotificationMessage_MessageType      = NotificationMessageType.Parse("addOrUpdateNotificationMessage");
        public static NotificationMessageType updateNotificationMessage_MessageType           = NotificationMessageType.Parse("updateNotificationMessage");
        public static NotificationMessageType removeNotificationMessage_MessageType           = NotificationMessageType.Parse("removeNotificationMessage");

        public static NotificationMessageType addOrganization_MessageType                     = NotificationMessageType.Parse("addOrganization");
        public static NotificationMessageType addOrganizationIfNotExists_MessageType          = NotificationMessageType.Parse("addOrganizationIfNotExists");
        public static NotificationMessageType addOrUpdateOrganization_MessageType             = NotificationMessageType.Parse("addOrUpdateOrganization");
        public static NotificationMessageType updateOrganization_MessageType                  = NotificationMessageType.Parse("updateOrganization");
        public static NotificationMessageType deleteOrganization_MessageType                  = NotificationMessageType.Parse("deleteOrganization");

        public static NotificationMessageType addUserToOrganization_MessageType               = NotificationMessageType.Parse("addUserToOrganization");
        public static NotificationMessageType removeUserFromOrganization_MessageType          = NotificationMessageType.Parse("removeUserFromOrganization");

        public static NotificationMessageType linkOrganizations_MessageType                   = NotificationMessageType.Parse("linkOrganizations");
        public static NotificationMessageType unlinkOrganizations_MessageType                 = NotificationMessageType.Parse("unlinkOrganizations");

        public static NotificationMessageType addOrganizationGroup_MessageType                = NotificationMessageType.Parse("addOrganizationGroup");
        public static NotificationMessageType addOrganizationGroupIfNotExists_MessageType     = NotificationMessageType.Parse("addOrganizationGroupIfNotExists");
        public static NotificationMessageType addOrUpdateOrganizationGroup_MessageType        = NotificationMessageType.Parse("addOrUpdateOrganizationGroup");
        public static NotificationMessageType updateOrganizationGroup_MessageType             = NotificationMessageType.Parse("updateOrganizationGroup");
        public static NotificationMessageType removeOrganizationGroup_MessageType             = NotificationMessageType.Parse("removeOrganizationGroup");

        public static NotificationMessageType addNotification_MessageType                     = NotificationMessageType.Parse("addNotification");
        public static NotificationMessageType removeNotification_MessageType                  = NotificationMessageType.Parse("removeNotification");

        #endregion


        #region (protected) SendSMS(Text, To, Sender = null)

        ///// <summary>
        ///// Send a SMS to the given phone number.
        ///// </summary>
        ///// <param name="Text">The text of the SMS.</param>
        ///// <param name="To">The phone number of the recipient.</param>
        ///// <param name="Sender">An optional sender name.</param>
        //protected virtual SMSAPIResponseStatus SendSMS(String   Text,
        //                                               String   To,
        //                                               String?  Sender  = null)
        //{

        //    if (SMSClient is not null)
        //    {

        //        var smsSend = SMSClient.Send(Text, To);

        //        if (smsSend != null)
        //            return smsSend.SetSender(Sender ?? SMSSenderName).Execute();

        //    }

        //    return SMSAPIResponseStatus.Failed("No SMSAPI defined!");

        //}

        ///// <summary>
        ///// Send a SMS to the given phone number.
        ///// </summary>
        ///// <param name="Text">The text of the SMS.</param>
        ///// <param name="To">The phone numbers of the recipients.</param>
        ///// <param name="Sender">An optional sender name.</param>
        //protected SMSAPIResponseStatus SendSMS(String    Text,
        //                                       String[]  To,
        //                                       String?   Sender  = null)
        //{

        //    if (SMSClient is not null)
        //    {

        //        var smsSend = SMSClient.Send(Text, To);

        //        if (smsSend is not null)
        //            return smsSend.SetSender(Sender ?? SMSSenderName).Execute();

        //    }

        //    return SMSAPIResponseStatus.Failed("No SMSAPI defined!");

        //}

        #endregion

        #region (protected) SendHTTPSNotifications(AllNotificationURLs, JSONNotification)

        #region (protected) LogRequest(...)

        protected Task LogRequest(DateTime     Timestamp,
                                  IHTTPClient  Client,
                                  String       RemoteHost,
                                  HTTPRequest  Request)
        {

            return Task.Run(() => {

                using (var Logfile = File.AppendText(this.NotificationsPath +
                                                     RemoteHost + "-Requests-" + Request.Timestamp.ToString("yyyy-MM") + ".log"))
                {

                    Logfile.WriteLine(
                        String.Concat(Request.HTTPSource.ToString(), Environment.NewLine,
                                      Request.Timestamp.ToIso8601(), Environment.NewLine,
                                      Request.EventTrackingId, Environment.NewLine,
                                      Request.EntirePDU, Environment.NewLine,
                                      "======================================================================================"));

                }

            });

        }

        #endregion

        #region (protected) LogResponse(...)

        protected Task LogResponse(DateTime      Timestamp,
                                   IHTTPClient   Client,
                                   String        RemoteHost,
                                   HTTPRequest   Request,
                                   HTTPResponse  Response)
        {

            return Task.Run(() => {

                Response.AppendToLogfile(this.NotificationsPath +
                                         RemoteHost + "-Responses-" + Request.Timestamp.ToString("yyyy-MM") + ".log");

            });

        }

        #endregion

        protected async Task SendHTTPSNotifications(IEnumerable<HTTPSNotification>  AllNotifications,
                                                    JObject                         JSONNotification)
        {

            if (!DisableNotifications)
            {

                try
                {

                    foreach (var notification in AllNotifications)
                    {

                        HTTPRequest? request     = null;
                        HTTPResponse result      = HTTPResponse.ClientError(request);
                        Byte TransmissionRetry   = 0;
                        Byte MaxNumberOfRetries  = 3;

                        do
                        {

                            try
                            {

                                using (var httpsClient = new HTTPSClient(
                                                             notification.RemoteURL,
                                                             RemoteCertificateValidator:  notification.RemoteURL.Protocol == URLProtocols.https
                                                                                              ? (sender, certificate, chain, policyErrors) => (true, Array.Empty<String>())
                                                                                              : null,
                                                             ClientCertificateSelector:   null,
                                                             ClientCert:                  null,
                                                             HTTPUserAgent:               null,
                                                             RequestTimeout:              null,
                                                             DNSClient:                   DNSClient
                                                         ))
                                {

                                    DebugX.Log("Sending HTTPS-notification to: " + notification.RemoteURL);

                                    request  = new HTTPRequest.Builder(httpsClient) {
                                                   HTTPMethod     = notification.Method,
                                                   Host           = notification.RemoteURL.Hostname,
                                                   Path           = notification.RemoteURL.Path,
                                                   Content        = new JArray(JSONNotification).ToUTF8Bytes(),
                                                   ContentType    = HTTPContentType.JSON_UTF8,
                                                   UserAgent      = "HTTPExtAPI Notification API",
                                                   API_Key        = notification.APIKey.HasValue
                                                                        ? notification.APIKey
                                                                        : null,
                                                   Authorization  = notification.BasicAuthenticationLogin.IsNotNullOrEmpty()
                                                                        ? HTTPBasicAuthentication.Create(
                                                                              notification.BasicAuthenticationLogin,
                                                                              notification.BasicAuthenticationPassword
                                                                          )
                                                                        : null
                                    };

                                    result  = await httpsClient.Execute(Request:              request,
                                                                        RequestLogDelegate:   (timestamp, client, req)       => LogRequest (timestamp, client, notification.RemoteURL.Hostname.ToString(), req),
                                                                        ResponseLogDelegate:  (timestamp, client, req, resp) => LogResponse(timestamp, client, notification.RemoteURL.Hostname.ToString(), req, resp),
                                                                        CancellationToken:    default,
                                                                        EventTrackingId:      EventTracking_Id.New,
                                                                        RequestTimeout:       notification.RequestTimeout,
                                                                        NumberOfRetry:        TransmissionRetry++);

                                }

                                result ??= HTTPResponse.ClientError(request);

                            }
                            catch (Exception e)
                            {
                                DebugX.LogException(e, "SendHTTPSNotification");
                            }

                        }
                        // Try to resend the HTTP message, when there had been networking errors...
                        while (result.HTTPStatusCode == HTTPStatusCode.RequestTimeout &&
                               TransmissionRetry++ < MaxNumberOfRetries);

                        // If it failed: Write entire message on disc/logfile
                        //               Reread the logfile later and try to resend the message!

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e, "SendHTTPSNotifications");
                }

            }

        }

        #endregion

        #region ReceiveTelegramMessage(Sender, e)

        //async void ReceiveTelegramMessage(Object Sender, Telegram.Bot.Args.MessageEventArgs e)
        //{

        //    var messageText = e?.Message?.Text;

        //    if (messageText.IsNeitherNullNorEmpty())
        //        messageText.Trim();

        //    if (messageText.IsNotNullOrEmpty())
        //    {

        //        var command = messageText.Split(' ');

        //        switch (command[0])
        //        {

        //            case "/system":
        //                await this.TelegramClient.SendTextMessageAsync(
        //                    ChatId:  e.Message.Chat,
        //                    Text:    "I'm running on: " + Environment.MachineName + " and use " + (Environment.WorkingSet / 1024 /1024) + " MBytes RAM"
        //                );
        //                break;

        //            case "/echo":
        //                await this.TelegramClient.SendTextMessageAsync(
        //                    ChatId:  e.Message.Chat,
        //                    Text:    "Hello " + e.Message.From.FirstName + " " + e.Message.From.LastName + "!\nYou said:\n" + e.Message.Text
        //                );
        //                break;

        //        }

        //    }
        //}

        #endregion

        #endregion

        #region (private/protected) Get user from HTTP request

        #region (private)   GenerateCookieUserData(ValidUser, Astronaut = null)

        private String GenerateCookieUserData(IUser   User,
                                              IUser?  Astronaut  = null)

            => String.Concat("=login=",            User.     Id.      ToString().ToBase64(),
                             Astronaut is not null
                                 ? ":astronaut=" + Astronaut.Id.      ToString().ToBase64()
                                 : "",
                             ":username=",         User.Name.FirstText().ToBase64(),
                             ":email=",            User.EMail.Address.ToString().ToBase64(),
                             ":language=",         User.UserLanguage. AsText().  ToBase64(),
                             IsAdmin(User) == Access_Levels.ReadOnly  ? ":isAdminRO" : "",
                             IsAdmin(User) == Access_Levels.ReadWrite ? ":isAdminRW" : "");


        #endregion

        #region (private)   GenerateCookieSettings(Expires)

        private String GenerateCookieSettings(DateTime Expires)

            => String.Concat("; Expires=",  Expires.ToRfc1123(),
                             HTTPCookieDomain.IsNotNullOrEmpty()
                                 ? "; Domain=" + HTTPCookieDomain
                                 : "",
                             "; Path=",     URLPathPrefix.ToString(),
                             "; SameSite=strict",
                             UseSecureCookies
                                 ? "; secure"
                                 : "");

        #endregion

        #region (protected) TryGetSecurityTokenFromCookie(Request)

        protected SecurityToken_Id? TryGetSecurityTokenFromCookie(HTTPRequest Request)
        {

            if (Request.Cookies is null)
                return null;

            if (Request.Cookies. TryGet  (SessionCookieName,  out var cookie) &&
                cookie is not null &&
                cookie.Any() &&
                SecurityToken_Id.TryParse(cookie.First().Key, out var securityTokenId))
            {
                return securityTokenId;
            }

            return null;

        }

        #endregion

        #region (protected) TryGetSecurityTokenFromCookie(Request, SecurityTokenId)

        protected Boolean TryGetSecurityTokenFromCookie(HTTPRequest Request, out SecurityToken_Id SecurityTokenId)
        {

            if (Request.Cookies  is not null &&
                Request.Cookies. TryGet  (SessionCookieName,           out var cookie) &&
                cookie is not null &&
                SecurityToken_Id.TryParse(cookie.FirstOrDefault().Key, out     SecurityTokenId))
            {
                return true;
            }

            SecurityTokenId = default;
            return false;

        }

        #endregion

        #region (protected) TryGetHTTPUser (Request, out User)

        protected Boolean TryGetHTTPUser(HTTPRequest Request, out IUser? User)
        {

            #region Get user from cookie...

            if (Request.Cookies is not null                                                            &&
                Request.Cookies. TryGet     (SessionCookieName,           out var cookie)              &&
                cookie is not null &&
                SecurityToken_Id.TryParse   (cookie.FirstOrDefault().Key, out var securityTokenId)     &&
                httpCookies.    TryGetValue(securityTokenId,             out var securityInformation) &&
                Timestamp.Now < securityInformation.Expires                                            &&
                TryGetUser(securityInformation.UserId, out User))
            {
                return true;
            }

            #endregion

            #region Get user from Basic-Auth...

            if (Request.Authorization is HTTPBasicAuthentication basicAuth)
            {

                #region Find username or e-mail addresses...

                var possibleUsers = new HashSet<IUser>();
                var validUsers    = new HashSet<IUser>();

                if (User_Id.TryParse   (basicAuth.Username, out var _UserId) &&
                    users.  TryGetValue(_UserId,            out var _User))
                {
                    possibleUsers.Add(_User);
                }

                if (possibleUsers.Count == 0)
                {
                    foreach (var user2 in users.Values)
                    {
                        if (String.Equals(basicAuth.Username,
                                          user2.EMail.Address.ToString(),
                                          StringComparison.OrdinalIgnoreCase))
                        {
                            possibleUsers.Add(user2);
                        }
                    }
                }

                if (possibleUsers.Count > 0)
                {
                    foreach (var possibleUser in possibleUsers)
                    {
                        if (loginPasswords.TryGetValue(possibleUser.Id, out var loginPassword) &&
                            loginPassword.VerifyPassword(basicAuth.Password))
                        {
                            validUsers.Add(possibleUser);
                        }
                    }
                }

                #endregion

                #region HTTP Basic Auth is ok!

                var user = validUsers.FirstOrDefault();

                if (user is not null &&
                    user.AcceptedEULA.HasValue &&
                    user.AcceptedEULA.Value < Timestamp.Now)
                {
                    User = user;
                    return true;
                }

                #endregion

            }

            #endregion

            #region Get user from API Key...

            if (TryGetValidAPIKey(Request.API_Key, out var apiKey) &&
                apiKey is not null &&
                TryGetUser(apiKey.UserId, out User))
            {
                return true;
            }

            #endregion

            User = null;
            return false;

        }

        #endregion

        #region (protected) TryGetSuperUser(Request, out User)

        protected Boolean TryGetSuperUser(HTTPRequest Request, out IUser? User)
        {

            // Get user from cookie...
            if (Request.Cookies is not null                                                            &&
                Request.Cookies. TryGet     (SessionCookieName,           out var cookie)              &&
                cookie is not null &&
                SecurityToken_Id.TryParse   (cookie.FirstOrDefault().Key, out var securityTokenId)     &&
                httpCookies.     TryGetValue(securityTokenId,             out var securityInformation) &&
                Timestamp.Now < securityInformation.Expires                                            &&
                TryGetUser(securityInformation.SuperUserId ?? securityInformation.UserId, out User))
            {
                return true;
            }

            User = null;
            return false;

        }

        #endregion

        #region (protected) TryGetHTTPUser (Request, User, Organizations, ErrorResponseBuilder, AccessLevel = ReadOnly, Recursive = false)

        protected Boolean TryGetHTTPUser(HTTPRequest                 Request,
                                         out IUser?                  User,
                                         out HashSet<IOrganization>  Organizations,
                                         out HTTPResponse.Builder?   ErrorResponseBuilder,
                                         Access_Levels               AccessLevel  = Access_Levels.ReadOnly,
                                         Boolean                     Recursive    = false)
        {

            Organizations         = TryGetHTTPUser(Request, out User) && User is not null
                                        ? new HashSet<IOrganization>(User.Organizations(AccessLevel, Recursive))
                                        : new HashSet<IOrganization>();

            ErrorResponseBuilder  = Organizations.Any()
                                        ? null
                                        : new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode      = HTTPStatusCode.Unauthorized,
                                              Location            = Location.From(URLPathPrefix + "login?redirect=" + Request.Path.ToString()),
                                              Date                = Timestamp.Now,
                                              Server              = HTTPServer.DefaultServerName,
                                              CacheControl        = "private, max-age=0, no-cache",
                                              XLocationAfterAuth  = Request.Path,
                                              Connection          = "close"
                                          };

            return Organizations.Any();

        }


        protected Boolean TryGetHTTPUser2(HTTPRequest                 Request,
                                          out IUser?                  User,
                                          out HashSet<IOrganization>  Organizations,
                                          ref HTTPResponse.Builder    ResponseBuilder,
                                          Access_Levels               AccessLevel  = Access_Levels.ReadOnly,
                                          Boolean                     Recursive    = false)
        {

            Organizations         = TryGetHTTPUser(Request, out User) && User is not null
                                        ? new HashSet<IOrganization>(User.Organizations(AccessLevel, Recursive))
                                        : new HashSet<IOrganization>();

            if (!Organizations.Any())
            {

                ResponseBuilder.HTTPStatusCode      = HTTPStatusCode.Unauthorized;
                ResponseBuilder.Location            = Location.From(URLPathPrefix + "login?redirect=" + Request.Path.ToString());
                ResponseBuilder.Date                = Timestamp.Now;
                ResponseBuilder.CacheControl        = "private, max-age=0, no-cache";
                ResponseBuilder.XLocationAfterAuth  = Request.Path;
                ResponseBuilder.Connection          = "close";

                return false;

            }

            return true;

        }

        #endregion

        #region (protected) TryGetSuperUser(Request, User, Organizations, ErrorResponseBuilder, AccessLevel = ReadOnly, Recursive = false)

        protected Boolean TryGetSuperUser(HTTPRequest                 Request,
                                          out IUser?                  User,
                                          out HashSet<IOrganization>  Organizations,
                                          out HTTPResponse.Builder?   ErrorResponseBuilder,
                                          Access_Levels               AccessLevel  = Access_Levels.ReadOnly,
                                          Boolean                     Recursive    = false)
        {

            if (!TryGetSuperUser(Request, out User))
            {

                //if (Request.RemoteSocket.IPAddress.IsIPv4 &&
                //    Request.RemoteSocket.IPAddress.IsLocalhost)
                //{
                //    User           = Admins.User2GroupInEdges(edgelabel => edgelabel == User2GroupEdges.IsAdmin).FirstOrDefault()?.Source;
                //    Organizations  = User.Organizations(RequireReadWriteAccess, Recursive);
                //    Response       = null;
                //    return true;
                //}

                Organizations  = new HashSet<IOrganization>();
                ErrorResponseBuilder       = new HTTPResponse.Builder(Request) {
                                     HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                     Location        = Location.From(URLPathPrefix + "login"),
                                     Date            = Timestamp.Now,
                                     Server          = HTTPServer.DefaultServerName,
                                     CacheControl    = "private, max-age=0, no-cache",
                                     Connection      = "close"
                                 };

                return false;

            }

            Organizations  = User is not null
                                 ? new HashSet<IOrganization>(User.Organizations(AccessLevel, Recursive))
                                 : new HashSet<IOrganization>();

            ErrorResponseBuilder       = null;

            return true;

        }

        #endregion

        #endregion


        #region (private) RegisterURLTemplates()

        #region AddEventSource(HTTPEventSourceId, URLTemplate, IncludeFilterAtRuntime, CreateState, ...)

        public void AddEventSource<TData, TState>(HTTPEventSource_Id                               HTTPEventSourceId,
                                                  HTTPAPI                                          HTTPAPI,
                                                  HTTPPath                                         URLTemplate,

                                                  Func<TState?, IUser, HTTPEvent<TData>, Boolean>  IncludeFilterAtRuntime,
                                                  Func<TState>                                     CreatePerRequestState,

                                                  HTTPHostname?                                    Hostname                   = null,
                                                  HTTPMethod?                                      HttpMethod                 = null,
                                                  HTTPContentType?                                 HTTPContentType            = null,

                                                  HTTPAuthentication?                              URLAuthentication          = null,
                                                  HTTPAuthentication?                              HTTPMethodAuthentication   = null,

                                                  HTTPDelegate?                                    DefaultErrorHandler        = null)
        {

            IncludeFilterAtRuntime ??= (s, u, e) => true;

            if (TryGet(HTTPEventSourceId, out IHTTPEventSource<TData> eventSource))
            {

                AddMethodCallback(Hostname        ?? HTTPHostname.Any,
                                  HttpMethod      ?? HTTPMethod.GET,
                                  URLTemplate,
                                  HTTPContentType ?? HTTPContentType.EVENTSTREAM,
                                  URLAuthentication:         URLAuthentication,
                                  HTTPMethodAuthentication:  HTTPMethodAuthentication,
                                  DefaultErrorHandler:       DefaultErrorHandler,
                                  HTTPDelegate:              Request => {

                                      #region Get HTTP user and its organizations

                                      // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                      if (!TryGetHTTPUser(Request,
                                                          out var httpUser,
                                                          out var httpOrganizations,
                                                          out var httpResponseBuilder,
                                                          AccessLevel: Access_Levels.ReadWrite,
                                                          Recursive: true) ||
                                          httpUser is null)
                                      {
                                          return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                      }

                                      #endregion

                                      var state       = CreatePerRequestState is not null ? CreatePerRequestState() : default;
                                      var httpEvents  = eventSource.GetAllEventsGreater(Request.GetHeaderField(HTTPRequestHeaderField.LastEventId)).
                                                                    Where  (httpEvent => IncludeFilterAtRuntime(state,
                                                                                                                httpUser,
                                                                                                                httpEvent)).
                                                                    Reverse().
                                                                    Skip   (Request.QueryString.GetUInt64("skip")).
                                                                    Take   (Request.QueryString.GetUInt64("take")).
                                                                    Reverse().
                                                                    Aggregate(new StringBuilder(),
                                                                              (stringBuilder, httpEvent) => stringBuilder.Append(httpEvent.SerializedHeader).
                                                                                                                          AppendLine(httpEvent.SerializedData).
                                                                                                                          AppendLine()).
                                                                    Append(Environment.NewLine).
                                                                    Append("retry: ").Append((UInt32) eventSource.RetryIntervall.TotalMilliseconds).
                                                                    Append(Environment.NewLine).
                                                                    Append(Environment.NewLine).
                                                                    ToString();

                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.OK,
                                              Server          = HTTPServer.DefaultHTTPServerName,
                                              ContentType     = HTTPContentType.EVENTSTREAM,
                                              CacheControl    = "no-cache",
                                              Connection      = "keep-alive",
                                              KeepAlive       = new KeepAliveType(TimeSpan.FromSeconds(2 * eventSource.RetryIntervall.TotalSeconds)),
                                              Content         = httpEvents.ToUTF8Bytes()
                                          }.AsImmutable);

                                  });


                AddMethodCallback(Hostname        ?? HTTPHostname.Any,
                                  HttpMethod      ?? HTTPMethod.GET,
                                  URLTemplate,
                                  HTTPContentType ?? HTTPContentType.JSON_UTF8,
                                  URLAuthentication:         URLAuthentication,
                                  HTTPMethodAuthentication:  HTTPMethodAuthentication,
                                  DefaultErrorHandler:       DefaultErrorHandler,
                                  HTTPDelegate:              Request => {

                                      #region Get HTTP user and its organizations

                                      // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                      if (!TryGetHTTPUser(Request,
                                                          out var httpUser,
                                                          out var httpOrganizations,
                                                          out var httpResponseBuilder,
                                                          Access_Levels.ReadWrite,
                                                          Recursive: true) ||
                                          httpUser is null)
                                      {
                                          return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                      }

                                      #endregion

                                      var state       = CreatePerRequestState is not null ? CreatePerRequestState() : default;
                                      var httpEvents  = eventSource.Where(httpEvent => IncludeFilterAtRuntime(state,
                                                                                                              httpUser,
                                                                                                              httpEvent)).
                                                                    Skip (Request.QueryString.GetUInt64("skip")).
                                                                    Take (Request.QueryString.GetUInt64("take")).
                                                                    Aggregate(new StringBuilder().AppendLine("["),
                                                                              (stringBuilder, httpEvent) => stringBuilder.Append    (@"[""").
                                                                                                                          Append    (httpEvent.Subevent ?? "").
                                                                                                                          Append    (@""",").
                                                                                                                          Append    (httpEvent.SerializedData).
                                                                                                                          AppendLine("],")).
                                                                    ToString().
                                                                    TrimEnd();


                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.OK,
                                              Server          = HTTPServer.DefaultHTTPServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              CacheControl    = "no-cache",
                                              Connection      = "keep-alive",
                                              KeepAlive       = new KeepAliveType(TimeSpan.FromSeconds(2 * eventSource.RetryIntervall.TotalSeconds)),
                                              Content         = (httpEvents.Length > 1
                                                                     ? httpEvents.Remove(httpEvents.Length - 1, 1) + Environment.NewLine + "]"
                                                                     : "]").ToUTF8Bytes()
                                          }.AsImmutable);

                                  });

            }

            else
                throw new ArgumentException("Event source '" + HTTPEventSourceId + "' could not be found!", nameof(HTTPEventSourceId));

        }

        #endregion

        #region AddEventSource(HTTPEventSourceId, URLTemplate, IncludeFilterAtRuntime, CreateState, ...)

        public void AddEventSource<TData, TState>(HTTPEventSource_Id                                                           HTTPEventSourceId,
                                                  HTTPAPI                                                                      HTTPAPI,
                                                  HTTPPath                                                                     URLTemplate,

                                                  Func<TState?, IUser, IEnumerable<IOrganization>, HTTPEvent<TData>, Boolean>  IncludeFilterAtRuntime,
                                                  Func<TState>                                                                 CreatePerRequestState,

                                                  HTTPHostname?                                                                Hostname                   = null,
                                                  HTTPMethod?                                                                  HttpMethod                 = null,
                                                  HTTPContentType?                                                             HTTPContentType            = null,

                                                  HTTPAuthentication?                                                          URLAuthentication          = null,
                                                  HTTPAuthentication?                                                          HTTPMethodAuthentication   = null,

                                                  HTTPDelegate?                                                                DefaultErrorHandler        = null)
        {

            IncludeFilterAtRuntime ??= (s, u, o, e) => true;

            if (TryGet<TData>(HTTPEventSourceId, out var eventSource))
            {

                AddMethodCallback(Hostname        ?? HTTPHostname.Any,
                                  HttpMethod      ?? HTTPMethod.GET,
                                  URLTemplate,
                                  HTTPContentType ?? HTTPContentType.EVENTSTREAM,
                                  URLAuthentication:         URLAuthentication,
                                  HTTPMethodAuthentication:  HTTPMethodAuthentication,
                                  DefaultErrorHandler:       DefaultErrorHandler,
                                  HTTPDelegate:              Request => {

                                      #region Get HTTP user and its organizations

                                      // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                      if (!TryGetHTTPUser(Request,
                                                          out var httpUser,
                                                          out var httpOrganizations,
                                                          out var httpResponseBuilder,
                                                          Access_Levels.ReadWrite,
                                                          Recursive: true) ||
                                          httpUser is null)
                                      {
                                          return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                      }

                                      #endregion

                                      var state       = CreatePerRequestState is not null ? CreatePerRequestState() : default;
                                      var httpEvents  = eventSource.GetAllEventsGreater(Request.GetHeaderField(HTTPRequestHeaderField.LastEventId)).
                                                                    Where  (httpEvent => IncludeFilterAtRuntime(state,
                                                                                                                httpUser,
                                                                                                                httpOrganizations,
                                                                                                                httpEvent)).
                                                                    Reverse().
                                                                    Skip   (Request.QueryString.GetUInt64("skip")).
                                                                    Take   (Request.QueryString.GetUInt64("take")).
                                                                    Reverse().
                                                                    Aggregate(new StringBuilder(),
                                                                              (stringBuilder, httpEvent) => stringBuilder.Append(httpEvent.SerializedHeader).
                                                                                                                          AppendLine(httpEvent.SerializedData).
                                                                                                                          AppendLine()).
                                                                    Append(Environment.NewLine).
                                                                    Append("retry: ").Append((UInt32) eventSource.RetryIntervall.TotalMilliseconds).
                                                                    Append(Environment.NewLine).
                                                                    Append(Environment.NewLine).
                                                                    ToString();

                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.OK,
                                              Server          = HTTPServer.DefaultHTTPServerName,
                                              ContentType     = HTTPContentType.EVENTSTREAM,
                                              CacheControl    = "no-cache",
                                              Connection      = "keep-alive",
                                              KeepAlive       = new KeepAliveType(TimeSpan.FromSeconds(2 * eventSource.RetryIntervall.TotalSeconds)),
                                              Content         = httpEvents.ToUTF8Bytes()
                                          }.AsImmutable);

                                  });


                AddMethodCallback(Hostname        ?? HTTPHostname.Any,
                                  HttpMethod      ?? HTTPMethod.GET,
                                  URLTemplate,
                                  HTTPContentType ?? HTTPContentType.JSON_UTF8,
                                  URLAuthentication:         URLAuthentication,
                                  HTTPMethodAuthentication:  HTTPMethodAuthentication,
                                  DefaultErrorHandler:       DefaultErrorHandler,
                                  HTTPDelegate:              Request => {

                                      #region Get HTTP user and its organizations

                                      // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                      if (!TryGetHTTPUser(Request,
                                                          out var httpUser,
                                                          out var httpOrganizations,
                                                          out var httpResponseBuilder,
                                                          Access_Levels.ReadWrite,
                                                          Recursive: true) ||
                                          httpUser is null)
                                      {
                                          return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                      }

                                      #endregion

                                      var state       = CreatePerRequestState is not null ? CreatePerRequestState() : default;
                                      var httpEvents  = eventSource.Where(httpEvent => IncludeFilterAtRuntime(state,
                                                                                                              httpUser,
                                                                                                              httpOrganizations,
                                                                                                              httpEvent)).
                                                                    Skip (Request.QueryString.GetUInt64("skip")).
                                                                    Take (Request.QueryString.GetUInt64("take")).
                                                                    Aggregate(new StringBuilder().AppendLine("["),
                                                                              (stringBuilder, httpEvent) => stringBuilder.Append(@"[""").
                                                                                                                          Append(httpEvent.Subevent ?? "").
                                                                                                                          Append(@""",").
                                                                                                                          Append(httpEvent.SerializedData).
                                                                                                                          AppendLine("],")).
                                                                    ToString().
                                                                    TrimEnd();


                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.OK,
                                              Server          = HTTPServer.DefaultHTTPServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              CacheControl    = "no-cache",
                                              Connection      = "keep-alive",
                                              KeepAlive       = new KeepAliveType(TimeSpan.FromSeconds(2 * eventSource.RetryIntervall.TotalSeconds)),
                                              Content         = (httpEvents.Length > 1
                                                                     ? httpEvents.Remove(httpEvents.Length - 1, 1) + Environment.NewLine + "]"
                                                                     : "]").ToUTF8Bytes()
                                          }.AsImmutable);

                                  });

            }

            else
                throw new ArgumentException("Event source '" + HTTPEventSourceId + "' could not be found!", nameof(HTTPEventSourceId));

        }

        #endregion


        #region Manage HTTP Resources

        #region (protected override) GetResourceStream      (ResourceName)

        protected override Stream? GetResourceStream(String ResourceName)

            => GetResourceStream(ResourceName,
                                 new Tuple<String, System.Reflection.Assembly>(HTTPExtAPI.HTTPRoot, typeof(HTTPExtAPI).Assembly),
                                 new Tuple<String, System.Reflection.Assembly>(HTTPAPI.   HTTPRoot, typeof(HTTPAPI).   Assembly));

        #endregion

        #region (protected override) GetResourceMemoryStream(ResourceName)

        protected override MemoryStream? GetResourceMemoryStream(String ResourceName)

            => GetResourceMemoryStream(ResourceName,
                                       new Tuple<String, System.Reflection.Assembly>(HTTPExtAPI.HTTPRoot, typeof(HTTPExtAPI).Assembly),
                                       new Tuple<String, System.Reflection.Assembly>(HTTPAPI.   HTTPRoot, typeof(HTTPAPI).   Assembly));

        #endregion

        #region (protected override) GetResourceString      (ResourceName)

        protected override String GetResourceString(String ResourceName)

            => GetResourceString(ResourceName,
                                 new Tuple<String, System.Reflection.Assembly>(HTTPExtAPI.HTTPRoot, typeof(HTTPExtAPI).Assembly),
                                 new Tuple<String, System.Reflection.Assembly>(HTTPAPI.   HTTPRoot, typeof(HTTPAPI).   Assembly));

        #endregion

        #region (protected override) GetResourceBytes       (ResourceName)

        protected override Byte[] GetResourceBytes(String ResourceName)

            => GetResourceBytes(ResourceName,
                                new Tuple<String, System.Reflection.Assembly>(HTTPExtAPI.HTTPRoot, typeof(HTTPExtAPI).Assembly),
                                new Tuple<String, System.Reflection.Assembly>(HTTPAPI.   HTTPRoot, typeof(HTTPAPI).   Assembly));

        #endregion

        #region (protected override) MixWithHTMLTemplate    (ResourceName)

        protected override String MixWithHTMLTemplate(String ResourceName)

            => MixWithHTMLTemplate(ResourceName,
                                   new Tuple<String, System.Reflection.Assembly>(HTTPExtAPI.HTTPRoot, typeof(HTTPExtAPI).Assembly),
                                   new Tuple<String, System.Reflection.Assembly>(HTTPAPI.   HTTPRoot, typeof(HTTPAPI).   Assembly));

        #endregion

        #endregion

        private void RegisterURLTemplates()
        {

            HTTPServer.AddAuth  (request => {

                // Allow OPTIONS requests / call pre-flight requests in cross-origin resource sharing (CORS)
                if (request.HTTPMethod == HTTPMethod.OPTIONS)
                    return Anonymous;

                var user = CheckHTTPCookie   (request, RemoteAuthServersMaxHopCount: 1).Result ??
                           CheckHTTPAPIKey   (request) ??
                           CheckHTTPBasicAuth(request);

                if (user is not null)
                    return user;

                #region Allow some URLs for anonymous access...

                if (request.Path.StartsWith(URLPathPrefix + "/shared/HTTPExtAPI/defaults") ||
                    request.Path.StartsWith(URLPathPrefix + "/shared/HTTPExtAPI/webfonts") ||
                    request.Path.StartsWith(URLPathPrefix + "/shared/HTTPExtAPI/login")    ||
                    request.Path.StartsWith(URLPathPrefix + "/shared/HTTPExtAPI/js")       ||
                    request.Path.StartsWith(URLPathPrefix + "/defaults")                 ||
                    request.Path.StartsWith(URLPathPrefix + "/favicon.ico")              ||

                    request.Path.StartsWith(URLPathPrefix + "/login")                                              ||
                    request.Path.StartsWith(URLPathPrefix + "/css")                                                ||
                    request.Path.StartsWith(URLPathPrefix + "/webfonts")                                           ||
                    request.Path.StartsWith(URLPathPrefix + "/images")                                             ||
                    request.Path.StartsWith(URLPathPrefix + "/lostPassword")                                       ||
                    request.Path.StartsWith(URLPathPrefix + "/resetPassword")                                      ||
                    request.Path.StartsWith(URLPathPrefix + "/setPassword")                                        ||
                    request.Path.StartsWith(URLPathPrefix + "/newsletters")                                        ||
                   (request.Path.StartsWith(URLPathPrefix + "/users/") && request.HTTPMethod.ToString() == "AUTH") ||

                    // Special API keys!
                    request.Path == (URLPathPrefix + "/changeSets")    ||
                    request.Path == (URLPathPrefix + "/securityToken") ||

                   (request.Path == (URLPathPrefix + "/serviceCheck")  && request.HTTPMethod.ToString() == "GET") ||
                   (request.Path == (URLPathPrefix + "/serviceCheck")  && request.HTTPMethod.ToString() == "POST"))
                {

                    return Anonymous;

                }

                #endregion

                return null;

            });

            HTTPServer.AddFilter(request => {

                #region Check EULA

                if (request.User is User user &&
                    (!user.AcceptedEULA.HasValue ||
                      user.AcceptedEULA.Value > Timestamp.Now))
                {
                    return new HTTPResponse.Builder(request) {
                        HTTPStatusCode            = HTTPStatusCode.FailedDependency,
                        Date                      = Timestamp.Now,
                        Server                    = HTTPServer.DefaultServerName,
                        AccessControlAllowOrigin  = "*",
                        AccessControlMaxAge       = 3600,
                        CacheControl              = "private, max-age=0, no-cache",
                        ContentType               = HTTPContentType.JSON_UTF8,
                        Content                   = JSONObject.Create(new JProperty("message", "Please accept the EULA within the portal!")).ToUTF8Bytes(),
                        Connection                = "close"
                    };
                }

                #endregion

                #region Failed/TryNextMethod... redirect web browsers to /login

                if (request.User is null)
                {

                    if (request.HTTPMethod == HTTPMethod.AUTH)
                        return null;

                    if (request.HTTPMethod == HTTPMethod.GET &&
                        request.Accept.BestMatchingContentType(HTTPContentType.HTML_UTF8) == HTTPContentType.HTML_UTF8)
                    {
                        return new HTTPResponse.Builder(request) {
                            HTTPStatusCode      = HTTPStatusCode.TemporaryRedirect,
                            Location            = Location.From(URLPathPrefix + ("/login?redirect=" + request.Path.ToString())),
                            Date                = Timestamp.Now,
                            Server              = HTTPServer.DefaultServerName,
                            //SetCookie           = String.Concat(CookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                            //                                    HTTPCookieDomain.IsNotNullOrEmpty()
                            //                                        ? "; Domain=" + HTTPCookieDomain
                            //                                        : "",
                            //                                    "; Path=", URLPathPrefix),
                            XLocationAfterAuth  = request.Path,
                            CacheControl        = "private, max-age=0, no-cache",
                            Connection          = "close"
                        };
                    }

                    else
                        return new HTTPResponse.Builder(request) {
                            HTTPStatusCode            = HTTPStatusCode.Unauthorized,
                            Date                      = Timestamp.Now,
                            Server                    = HTTPServer.DefaultServerName,
                            AccessControlAllowOrigin  = "*",
                            AccessControlMaxAge       = 3600,
                            CacheControl              = "private, max-age=0, no-cache",
                            ContentType               = HTTPContentType.JSON_UTF8,
                            Content                   = JSONObject.Create(new JProperty("message", "Invalid login!")).ToUTF8Bytes(),
                            Connection                = "close"
                        };

                }

                #endregion

                return null;

            });


            #region /shared/HTTPExtAPI

            HTTPServer.RegisterResourcesFolder(this,
                                               HTTPHostname.Any,
                                               URLPathPrefix + "shared/HTTPExtAPI",
                                               HTTPRoot[..^1],
                                               typeof(HTTPExtAPI).Assembly);

            #endregion


            #region POST        ~/login

            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.POST,
                              URLPathPrefix + "/login",
                              HTTPContentType.XWWWFormUrlEncoded,
                              HTTPDelegate: Request => {

                                  //Note: Add LoginRequest event!

                                  #region Check UTF8 text body...

                                  if (!Request.TryParseUTF8StringRequestBody(HTTPContentType.XWWWFormUrlEncoded,
                                                                             out var loginText,
                                                                             out var httpResponse,
                                                                             AllowEmptyHTTPBody: false) ||
                                       loginText is null)
                                  {
                                      return Task.FromResult(httpResponse!);
                                  }

                                  #endregion

                                  var loginData = loginText.DoubleSplit('&', '=');

                                  #region Verify the login

                                  if (!loginData.TryGetValue("login", out var login) ||
                                       login.    IsNullOrEmpty())
                                  {

                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",     SignInOutContext),
                                                                    new JProperty("statuscode",   400),
                                                                    new JProperty("property",     "login"),
                                                                    new JProperty("description",  "The login must not be empty!")
                                                                ).ToString().ToUTF8Bytes(),
                                              CacheControl     = "private",
                                              Connection       = "close"
                                          }.AsImmutable);

                                  }

                                  login = HTTPTools.URLDecode(login);

                                  if (login.Length < MinUserIdLength)
                                  {

                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",     SignInOutContext),
                                                                    new JProperty("statuscode",   400),
                                                                    new JProperty("property",     "login"),
                                                                    new JProperty("description",  "The login is too short!")
                                                                ).ToString().ToUTF8Bytes(),
                                              CacheControl    = "private",
                                              Connection      = "close"
                                          }.AsImmutable);

                                  }

                                  #endregion

                                  #region Verify the password

                                  if (!loginData.TryGetValue("password", out var password) ||
                                      password.  IsNullOrEmpty())
                                  {

                                     return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",     SignInOutContext),
                                                                    new JProperty("statuscode",   400),
                                                                    new JProperty("property",     "password"),
                                                                    new JProperty("description",  "The password must not be empty!")
                                                               ).ToString().ToUTF8Bytes(),
                                              CacheControl    = "private",
                                              Connection      = "close"
                                          }.AsImmutable);

                                  }

                                  password = HTTPTools.URLDecode(password);

                                  if (PasswordQualityCheck(password) < 1.0)
                                  {

                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",     SignInOutContext),
                                                                    new JProperty("statuscode",   400),
                                                                    new JProperty("property",     "password"),
                                                                    new JProperty("description",  "The password does not match the password quality criteria!")
                                                               ).ToString().ToUTF8Bytes(),
                                              CacheControl    = "private",
                                              Connection      = "close"
                                          }.AsImmutable);

                                  }

                                  #endregion

                                  #region Get RedirectURL

                                  loginData.TryGetValue("redirect", out var redirectURL);

                                  if (redirectURL is not null && redirectURL.IsNotNullOrEmpty())
                                     redirectURL = HTTPTools.URLDecode(redirectURL);

                                  else
                                     redirectURL = "/";

                                  #endregion

                                  #region Check login or e-mail address and password(s)

                                  var possibleUsers = new HashSet<IUser>();

                                  if (User_Id.       TryParse   (login,  out var userId) &&
                                      users.         TryGetValue(userId, out var user)   &&
                                      loginPasswords.TryGetValue(userId, out var loginPassword))
                                  {
                                      possibleUsers.Add(user);
                                  }

                                  if (possibleUsers.Count == 0)
                                  {
                                      foreach (var user2 in users.Values)
                                      {
                                          if (String.Equals(login,
                                                            user2.EMail.Address.ToString(),
                                                            StringComparison.OrdinalIgnoreCase))
                                          {
                                              possibleUsers.Add(user2);
                                          }
                                      }
                                  }

                                  if (possibleUsers.Count == 0)
                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.NotFound,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",     SignInOutContext),
                                                                    new JProperty("property",     "login"),
                                                                    new JProperty("description",  "Unknown login!")
                                                                ).ToString().ToUTF8Bytes(),
                                              CacheControl    = "private",
                                              Connection      = "close"
                                          }.AsImmutable);


                                  var validUsers = new HashSet<IUser>();

                                  foreach (var possibleUser in possibleUsers)
                                  {
                                      if (loginPasswords.TryGetValue(possibleUser.Id, out var _loginPassword) &&
                                          _loginPassword.VerifyPassword(password))
                                      {
                                          validUsers.Add(possibleUser);
                                      }
                                  }

                                  if (validUsers.Count == 0)
                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",     SignInOutContext),
                                                                    new JProperty("property",     "login"),
                                                                    new JProperty("description",  "Invalid password!")
                                                                ).ToString().ToUTF8Bytes(),
                                              CacheControl    = "private",
                                              Connection      = "close"
                                          }.AsImmutable);


                                  if (validUsers.Count > 1)
                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.MultipleChoices,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",     SignInOutContext),
                                                                    new JProperty("property",     "login"),
                                                                    new JProperty("description",  "Multiple matching user accounts found: Please use your login name!")
                                                                ).ToString().ToUTF8Bytes(),
                                              CacheControl    = "private",
                                              Connection      = "close"
                                          }.AsImmutable);

                                  #endregion

                                  #region Check whether the user has access to at least one organization

                                  if (!possibleUsers.First().Organizations(Access_Levels.ReadOnly).Any())
                                      return Task.FromResult(
                                          new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",    SignInOutContext),
                                                                    new JProperty("description", "You do not have access to any organization!")
                                                                ).ToString().ToUTF8Bytes(),
                                              CacheControl    = "private",
                                              Connection      = "close"
                                          }.AsImmutable);

                                  #endregion


                                  #region Register security token

                                  var validUser        = possibleUsers.First();
                                  var securityTokenId  = SecurityToken_Id.Parse(SHA256.HashData(
                                                                                    String.Concat(Guid.NewGuid().ToString(),
                                                                                                  validUser.Id).
                                                                                    ToUTF8Bytes()
                                                                                ).ToHexString());

                                  var expires          = Timestamp.Now.Add(MaxSignInSessionLifetime);

                                  lock (httpCookies)
                                  {

                                      httpCookies.TryAdd(securityTokenId,
                                                         new SecurityToken(validUser.Id,
                                                                           expires));

                                      File.AppendAllText(HTTPAPIPath + DefaultHTTPCookiesFile,
                                                         securityTokenId + ";" + validUser.Id + ";" + expires.ToIso8601() + Environment.NewLine);

                                  }

                                  #endregion


                                  //Note: Add LoginResponse event!

                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode  = HTTPStatusCode.Created,
                                          ContentType     = HTTPContentType.HTML_UTF8,
                                          Content         = String.Concat(
                                                                "<!DOCTYPE html>", Environment.NewLine,
                                                                @"<html><head><meta http-equiv=""refresh"" content=""0; url=" + redirectURL + @""" /></head></html>",
                                                                Environment.NewLine
                                                            ).ToUTF8Bytes(),
                                          CacheControl    = "private",
                                          SetCookie       = HTTPCookies.Parse(

                                                                String.Concat(CookieName,
                                                                              GenerateCookieUserData(validUser),
                                                                              GenerateCookieSettings(expires)),

                                                                String.Concat(SessionCookieName, "=", securityTokenId.ToString(),
                                                                              GenerateCookieSettings(expires),
                                                                              "; HttpOnly")

                                                            ),
                                          Connection      = "close",
                                          X_FrameOptions  = "DENY"
                                      }.AsImmutable);

                              });

            #endregion

            #region RESET       ~/resetPassword

            // --------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/resetPassword
            // --------------------------------------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.RESET,
                              URLPathPrefix + "resetPassword",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Parse JSON

                                  if (!Request.TryParseJSONObjectRequestBody(out var json,
                                                                             out var errorResponseBuilder) || json is null)
                                  {

                                      // Slow down attackers!
                                      Thread.Sleep(5000);

                                      return errorResponseBuilder!;

                                  }

                                  #endregion

                                  #region Check user "userId" field

                                  var userIdOrEMail = json["userId"]?.Value<String>()?.Trim() ?? "";
                                  if (userIdOrEMail.IsNullOrEmpty() || userIdOrEMail.Length < 4)
                                  {

                                      // Slow down attackers!
                                      Thread.Sleep(5000);

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                 = "close"
                                             };

                                  }

                                  #endregion

                                  #region Find user(s)...

                                  var users = new HashSet<IUser>();

                                  if (User_Id.TryParse(userIdOrEMail, out var userId) &&
                                      TryGetUser(userId, out var user) &&
                                      user is not null)
                                  {
                                      users.Add(user);
                                  }

                                  if (SimpleEMailAddress.TryParse(userIdOrEMail, out var eMailAddress))
                                  {
                                      foreach (var eMailUser in this.users.Values)
                                      {
                                          if (eMailUser.EMail.Address == eMailAddress)
                                              users.Add(eMailUser);
                                      }
                                  }

                                  #endregion

                                  #region No users found!

                                  if (users.Count == 0)
                                  {

                                      // Slow down attackers!
                                      Thread.Sleep(5000);

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.NotFound,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                 = "close"
                                             };

                                  }

                                  #endregion


                                  var result = await ResetPassword(users,
                                                                   EventTrackingId: Request.EventTrackingId);


                                  return result.Result == CommandResult.Success

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode             = HTTPStatusCode.OK,
                                                   Server                     = HTTPServer.DefaultServerName,
                                                   Date                       = Timestamp.Now,
                                                   AccessControlAllowOrigin   = "*",
                                                   AccessControlAllowMethods  = new[] { "SET" },
                                                   AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                = HTTPContentType.JSON_UTF8,
                                                   Content                    = JSONObject.Create(
                                                                                    new JProperty("numberOfAccountsFound", users.Count)
                                                                                ).ToUTF8Bytes(),
                                                   Connection                 = "close"
                                               }

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                   Server                     = HTTPServer.DefaultServerName,
                                                   Date                       = Timestamp.Now,
                                                   AccessControlAllowOrigin   = "*",
                                                   AccessControlAllowMethods  = new[] { "SET" },
                                                   AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                = HTTPContentType.JSON_UTF8,
                                                   Content                    = JSONObject.Create(

                                                                                    result.Description.IsNotNullOrEmpty()
                                                                                        ? new JProperty("description",  result.Description.ToJSON())
                                                                                        : null,

                                                                                    new JProperty("numberOfAccountsFound",  users.Count)

                                                                                ).ToUTF8Bytes(),
                                                   Connection                 = "close"
                                               };

                              },

                              AllowReplacement: URLReplacement.Allow);

            #endregion

            #region SET         ~/setPassword

            // ------------------------------------------------------------------
            // curl -v -X SET \
            //      -H 'Accept:       application/json; charset=UTF-8' \
            //      -H 'Content-Type: application/json; charset=UTF-8' \
            //      -d "{ \
            //            \"securityToken1\": \"4tf7M62p5C92tE2d5CY74UWfx2S4jxSp2z5S3jM3\", \
            //            \"newPassword\":    \"bguf7tf8g\" \
            //          }" \
            //      http://127.0.0.1:2001/setPassword
            // ------------------------------------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.SET,
                              URLPathPrefix + "setPassword",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Parse JSON

                                  if (!Request.TryParseJSONObjectRequestBody(out var json,
                                                                          out var errorResponseBuilder) || json is null)
                                  {

                                      // Slow down attackers!
                                      Thread.Sleep(5000);

                                      return errorResponseBuilder!;

                                  }

                                  #endregion

                                  #region Parse SecurityTokenId1    [mandatory]

                                  if (!json.ParseMandatory("securityToken1",
                                                           "security token #1",
                                                           HTTPServer.DefaultServerName,
                                                           SecurityToken_Id.TryParse,
                                                           out SecurityToken_Id SecurityTokenId1,
                                                           Request,
                                                           out errorResponseBuilder))
                                  {
                                      return errorResponseBuilder;
                                  }

                                  #endregion

                                  #region Parse NewPassword         [mandatory]

                                  if (!json.ParseMandatory("newPassword",
                                                           "new user password",
                                                           HTTPServer.DefaultServerName,
                                                           Password.TryParse,
                                                           out Password NewPassword,
                                                           Request,
                                                           out errorResponseBuilder))
                                  {
                                      return errorResponseBuilder;
                                  }

                                  if (PasswordQualityCheck(NewPassword.UnsecureString) < 1.0)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 ContentType     = HTTPContentType.JSON_UTF8,
                                                 Content         = JSONObject.Create(
                                                                       new JProperty("@context",      SignInOutContext),
                                                                       new JProperty("statuscode",    400),
                                                                       new JProperty("property",     "password"),
                                                                       new JProperty("description",  "The choosen password does not match the password quality criteria!")
                                                                   ).ToString().ToUTF8Bytes(),
                                                 CacheControl    = "private",
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion

                                  #region Parse SecurityTokenId2    [optional]

                                  if (json.ParseOptional("securityToken2",
                                                         "security token #2",
                                                         HTTPServer.DefaultServerName,
                                                         SecurityToken_Id.TryParse,
                                                         out SecurityToken_Id? SecurityTokenId2,
                                                         Request,
                                                         out errorResponseBuilder))
                                  {
                                      if (errorResponseBuilder is not null)
                                         return errorResponseBuilder;
                                  }

                                  #endregion


                                  #region Verify token/password lengths...

                                  if (SecurityTokenId1.Length != 40)
                                  {

                                      // Slow down attackers!
                                      Thread.Sleep(5000);

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                 = "close"
                                             }.AsImmutable;

                                  }

                                  #endregion


                                  var result = await ResetPassword(SecurityTokenId1,
                                                                   NewPassword,
                                                                   SecurityTokenId2,
                                                                   Request.EventTrackingId,
                                                                   Robot.Id);


                                  return result.Result == CommandResult.Success

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode             = HTTPStatusCode.OK,
                                                   Server                     = HTTPServer.DefaultServerName,
                                                   Date                       = Timestamp.Now,
                                                   AccessControlAllowOrigin   = "*",
                                                   AccessControlAllowMethods  = new[] { "SET" },
                                                   AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                = HTTPContentType.JSON_UTF8,
                                                   Content                    = JSONObject.Create(
                                                                                    new JProperty("numberOfAccountsFound", Users.Count())
                                                                                ).ToUTF8Bytes(),
                                                   SetCookie                  = new HTTPCookies(
                                                                                    HTTPCookie.Parse(
                                                                                        String.Concat(CookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                                                  HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                                      ? "; Domain=" + HTTPCookieDomain
                                                                                                      : "",
                                                                                                  "; Path=", URLPathPrefix)
                                                                                    )
                                                                                ),
                                                   Connection                 = "close"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                   Server                     = HTTPServer.DefaultServerName,
                                                   Date                       = Timestamp.Now,
                                                   AccessControlAllowOrigin   = "*",
                                                   AccessControlAllowMethods  = new[] { "SET" },
                                                   AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                = HTTPContentType.JSONLD_UTF8,
                                                   Content                    = JSONObject.Create(
                                                                                    new JProperty("description", result?.Description?.ToJSON())
                                                                                ).ToUTF8Bytes(),
                                                   SetCookie                  = new HTTPCookies(
                                                                                    HTTPCookie.Parse(
                                                                                        String.Concat(CookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                                                      HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                                          ? "; Domain=" + HTTPCookieDomain
                                                                                                          : "",
                                                                                                      "; Path=", URLPathPrefix)
                                                                                    )
                                                                                ),
                                                   Connection                 = "close"
                                               }.AsImmutable;

                              },

                              AllowReplacement: URLReplacement.Allow);

            #endregion


            #region ~/securityToken

            // Used by distributed HTTP APIs to check whether a security token is valid.

            #region OPTIONS     ~/securityToken

            // --------------------------------------------------------
            // curl -X OPTIONS -v http://127.0.0.1:3004/securityToken
            // --------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.OPTIONS,
                              URLPathPrefix + "securityToken",
                              HTTPDelegate: Request => {

                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode             = HTTPStatusCode.OK,
                                          Server                     = HTTPServer.DefaultServerName,
                                          Date                       = Timestamp.Now,
                                          AccessControlAllowOrigin   = "*",
                                          AccessControlAllowMethods  = new[] { "CHECK", "OPTIONS" },
                                          AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization", "X-App-Version" },
                                          Connection                 = "close"
                                      }.AsImmutable);

                              });

            #endregion

            #region CHECK       ~/securityToken

            // ------------------------------------------------------------------------------------------------------------------------
            // curl -v -X CHECK -H "Content-type: application/json" -H "Accept: application/json" http://127.0.0.1:3004/securityToken
            // ------------------------------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.CHECK,
                              URLPathPrefix + "securityToken",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Check API Key...

                                  if (Request.API_Key is null || !remoteAuthAPIKeys.Contains(Request.API_Key.Value))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.Forbidden,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "CHECK", "OPTIONS" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(

                                                                                  Request.API_Key.HasValue
                                                                                      ? new JProperty("apiKey",  Request.API_Key?.ToString() ?? "")
                                                                                      : null,

                                                                                  new JProperty("description",  "Please use a valid API key!")

                                                                              ).ToUTF8Bytes(),
                                                 Connection                 = "close"
                                             }.AsImmutable;

                                  #endregion


                                  #region Parse JSON HTTP body...

                                  if (!Request.TryParseJSONObjectRequestBody(out var json, out var errorResponseBuilder) || json is null)
                                      return errorResponseBuilder!;

                                  #endregion

                                  #region Parse securityTokenId    [mandatory]

                                  if (!json.ParseMandatory("securityTokenId",
                                                           "security token identification",
                                                           SecurityToken_Id.TryParse,
                                                           out SecurityToken_Id  securityTokenId,
                                                           out var               errorDescription))
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "CHECK" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", errorDescription)
                                                                              ).ToUTF8Bytes(),
                                                 Connection                 = "close"
                                             }.AsImmutable;

                                  }

                                  #endregion

                                  #region Parse maxHopCount        [optional]

                                  if (json.ParseOptional("maxHopCount",
                                                         "remote auth server max hop count",
                                                         out Byte? maxHopCount,
                                                         out       errorDescription))
                                  {

                                      if (errorDescription != null)
                                          return new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = new[] { "CHECK" },
                                                     AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                     ContentType                = HTTPContentType.JSON_UTF8,
                                                     Content                    = JSONObject.Create(
                                                                                      new JProperty("description", errorDescription)
                                                                                  ).ToUTF8Bytes(),
                                                     Connection                 = "close"
                                                 }.AsImmutable;

                                  }

                                  #endregion


                                  var securityToken = await CheckHTTPCookie(securityTokenId,
                                                                            maxHopCount ?? 0);


                                  if (securityToken is not null)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.OK,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "CHECK" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                 = HTTPContentType.JSON_UTF8,
                                                 Content                     = JSONObject.Create(

                                                                                   new JProperty("userId",   securityToken.UserId. ToString()),
                                                                                   new JProperty("expires",  securityToken.Expires.ToIso8601()),

                                                                                   securityToken.SuperUserId.HasValue
                                                                                       ? new JProperty("superUserId", securityToken.SuperUserId.Value.ToString())
                                                                                       : null

                                                                               ).ToUTF8Bytes(),
                                                 Connection                  = "close"
                                             }.AsImmutable;


                                  return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.NotFound,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "CHECK" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                              });

            #endregion

            #endregion


            #region ~/users

            #region OPTIONS     ~/users

            // ------------------------------------------------------------------------------
            // curl -X OPTIONS -v -H "Accept: application/json" http://127.0.0.1:2100/users
            // ------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.OPTIONS,
                              URLPathPrefix + "users",
                              HTTPDelegate: Request => {

                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode             = HTTPStatusCode.OK,
                                          Server                     = HTTPServer.DefaultServerName,
                                          Date                       = Timestamp.Now,
                                          AccessControlAllowOrigin   = "*",
                                          AccessControlAllowMethods  = new[] { "ADD", "SET", "GET" },
                                          AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                          AccessControlMaxAge        = 3600,
                                          CacheControl               = "public",
                                          Connection                 = "close"
                                      }.AsImmutable);

                              });

            #endregion

            #region ADD         ~/users

            // --------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:2100/users
            // --------------------------------------------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.ADD,
                              HTTPPath.Parse("/users"),
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:   AddUsersHTTPRequest,
                              HTTPResponseLogger:  AddUsersHTTPResponse,
                              HTTPDelegate:        async Request => {

                                  #region Create HTTP response template

                                  var responseBuilder = new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.BadRequest,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = new[] { "ADD", "SET", "GET" },
                                                            AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                            ContentType                 = HTTPContentType.JSON_UTF8,
                                                            Connection                  = "close"
                                                        };

                                  #endregion

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser2(Request,
                                                       out var httpUser,
                                                       out var httpOrganizations,
                                                       ref responseBuilder,
                                                       AccessLevel: Access_Levels.ReadWrite,
                                                       Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return responseBuilder;
                                  }

                                  #endregion


                                  var userDetails = Request.QueryString.GetBoolean("userDetails", false);


                                  #region Parse JSON HTTP body...

                                  #region Try to parse JSON array or object HTTP body...

                                  if (!Request.TryParseJSONRequestBody(out var jsonArray,
                                                                       out var jsonObject,
                                                                       ref responseBuilder,
                                                                       AllowEmptyHTTPBody: false))
                                  {
                                      return responseBuilder;
                                  }

                                  #endregion

                                  #region Validate JSON array

                                  jsonArray ??= new JArray();

                                  if (jsonObject is not null)
                                      jsonArray.Add(jsonObject);

                                  if (!jsonArray.Any())
                                  {

                                      responseBuilder.Content = JSONObject.Create(
                                                                    new JProperty("description",  $"An empty HTTP request body is not allowed!")
                                                                ).ToUTF8Bytes();

                                      return responseBuilder;

                                  }

                                  #endregion


                                  var newUsers                  = new List<User>();
                                  var newUsersWithAccessRights  = new List<User2OrganizationEdge>();

                                  foreach (var jsonToken in jsonArray)
                                  {

                                      if (jsonToken is JObject json)
                                      {

                                          #region Parse UserId               [optional]

                                          // It is valid to omitt the user identification!

                                          if (json.ParseOptional("@id",
                                                                 "user identification",
                                                                 User_Id.TryParse,
                                                                 out User_Id? userIdBody,
                                                                 out var errorResponse))
                                          {

                                              if (errorResponse is not null)
                                                  return new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = new[] { "GET", "ADD" },
                                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = JSONObject.Create(
                                                                                              new JProperty("data",         json["@id"]),
                                                                                              new JProperty("description",  $"The given user identification is invalid: {errorResponse}")
                                                                                          ).ToUTF8Bytes(),
                                                             Connection                 = "close"
                                                         };

                                          }

                                          #endregion

                                          #region Parse NewUser              [mandatory]

                                          if (!User.TryParseJSON(json,
                                                                 out var newUser,
                                                                 out errorResponse,
                                                                 userIdBody ?? User_Id.Random(), // It is valid to omitt the user identification!
                                                                 MinUserIdLength,
                                                                 MinUserNameLength) || newUser is null)
                                          {

                                              return new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = new[] { "GET", "ADD" },
                                                         AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                         ContentType                = HTTPContentType.JSON_UTF8,
                                                         Content                    = JSONObject.Create(
                                                                                          new JProperty("data",         json),
                                                                                          new JProperty("description",  errorResponse)
                                                                                      ).ToUTF8Bytes(),
                                                         Connection                 = "close"
                                                     };

                                          }

                                          #endregion

                                          #region Parse AccessRightsArray    [optional]

                                          if (json.ParseOptional("accessRights",
                                                                 "access rights",
                                                                 out JArray accessRightsJSONArray,
                                                                 out errorResponse))
                                          {

                                              if (errorResponse is not null)
                                                  return new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = new[] { "GET", "ADD" },
                                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = JSONObject.Create(
                                                                                              new JProperty("data",         json["accessRights"]),
                                                                                              new JProperty("description",  errorResponse)
                                                                                          ).ToUTF8Bytes(),
                                                             Connection                 = "close"
                                                         };

                                          }

                                          #endregion


                                          if (!accessRightsJSONArray.Any())
                                              newUsers.Add(newUser);

                                          foreach (var accessRightJSON in accessRightsJSONArray)
                                          {

                                              #region Validate access right JSON object

                                              if (accessRightJSON is not JObject accessRightObject)
                                                  return new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = new[] { "GET", "ADD" },
                                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = JSONObject.Create(
                                                                                              new JProperty("data",         accessRightJSON),
                                                                                              new JProperty("description",  "Invalid 'accessRight' JSON object!")
                                                                                          ).ToUTF8Bytes(),
                                                             Connection                 = "close"
                                                         };

                                              #endregion

                                              #region Parse AccessRight     [mandatory]

                                              if (!accessRightObject.ParseMandatoryEnum("accessRight",
                                                                                        "access right",
                                                                                        out User2OrganizationEdgeLabel accessRight,
                                                                                        out errorResponse))
                                              {

                                                  return new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = new[] { "GET", "ADD" },
                                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = JSONObject.Create(
                                                                                              new JProperty("data",         accessRightObject["accessRight"]),
                                                                                              new JProperty("description",  $"Invalid 'access right': {errorResponse}")
                                                                                          ).ToUTF8Bytes(),
                                                             Connection                 = "close"
                                                         };

                                              }

                                              #endregion

                                              #region Parse Organization    [mandatory]

                                              if (!accessRightObject.ParseMandatory("organizationId",
                                                                                    "organization identification",
                                                                                    Organization_Id.TryParse,
                                                                                    out Organization_Id organizationId,
                                                                                    out errorResponse))
                                              {

                                                  return new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = new[] { "GET", "ADD" },
                                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = JSONObject.Create(
                                                                                              new JProperty("data",         accessRightObject["organizationId"]),
                                                                                              new JProperty("description",  $"Invalid organization identification: {errorResponse}")
                                                                                          ).ToUTF8Bytes(),
                                                             Connection                 = "close"
                                                         };

                                              }

                                              if (!organizations.TryGetValue(organizationId, out var organization))
                                              {

                                                  return new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = new[] { "GET", "ADD" },
                                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = JSONObject.Create(
                                                                                              new JProperty("data",         organizationId.ToString()),
                                                                                              new JProperty("description",  $"Unkown organization identification '{organizationId}'!")
                                                                                          ).ToUTF8Bytes()
                                                         };

                                              }

                                              #endregion

                                              newUsersWithAccessRights.Add(new User2OrganizationEdge(newUser,
                                                                                                     accessRight,
                                                                                                     organization));

                                          }

                                      }

                                      #region ...or invalid JSON token found!

                                      else
                                      {

                                          responseBuilder.Content = JSONObject.Create(
                                                                        new JProperty("data",         jsonToken),
                                                                        new JProperty("description",  $"Invalid JSON token: '{jsonToken}'!")
                                                                    ).ToUTF8Bytes();

                                          return responseBuilder;

                                      }

                                      #endregion

                                  }

                                  #endregion


                                  #region Add new user(s) without access rights

                                  var results = new List<AddUserResult>();

                                  foreach (var newUser in newUsers)
                                  {

                                      results.Add(await AddUser(newUser,
                                                                EventTrackingId: Request.EventTrackingId,
                                                                CurrentUserId:   httpUser.Id));

                                  }

                                  #endregion

                                  #region Add new user(s) with access rights

                                  foreach (var newUserGrouped in newUsersWithAccessRights.GroupBy(edge => edge.Source))
                                  {

                                      results.Add(await AddUser(newUserGrouped.Key,
                                                                newUserGrouped.Select(edge => new Tuple<User2OrganizationEdgeLabel, IOrganization>(
                                                                                                  edge.EdgeLabel,
                                                                                                  edge.Target
                                                                                              )),
                                                                EventTrackingId: Request.EventTrackingId,
                                                                CurrentUserId:   httpUser.Id));

                                  }

                                  #endregion


                                  #region No processable user data found!

                                  if (!results.Any())
                                  {

                                      responseBuilder.Content = JSONObject.Create(
                                                                    new JProperty("description",  $"No processable user data found!")
                                                                ).ToUTF8Bytes();

                                      return responseBuilder;

                                  }

                                  #endregion


                                  #region User(s) created

                                  responseBuilder.HTTPStatusCode  = results.All(result => result.Result == CommandResult.Success)
                                                                        ? HTTPStatusCode.Created
                                                                        : HTTPStatusCode.BadRequest;

                                  responseBuilder.Content         = results.ToJSON(addUserResult => JSONProperties.Create(

                                                                                                        userDetails
                                                                                                            ? new JProperty("user",           addUserResult.Entity!.   ToJSON(true))
                                                                                                            : new JProperty("userId",         addUserResult.Entity!.Id.ToString()),

                                                                                                              new JProperty("accessRights",   new JArray(
                                                                                                                                                  addUserResult.Entity!.User2Organization_OutEdges.Select(
                                                                                                                                                      edge => new JArray(
                                                                                                                                                                  edge.EdgeLabel.ToString(),
                                                                                                                                                                  edge.Target.Id.ToString()
                                                                                                                                                              )
                                                                                                                                                  )
                                                                                                                                              ))
                                                                                                    ),
                                                                                   CustomResultSerializer).ToUTF8Bytes();

                                  return responseBuilder;

                                  #endregion

                              });

            #endregion

            #region GET         ~/users

            // -------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/users
            // -------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "users",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Create HTTP response template

                                  var responseBuilder = new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = new[] { "GET", "COUNT", "OPTIONS" },
                                                            AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Connection                 = "close",
                                                            Vary                       = "Accept"
                                                        };

                                  #endregion

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser2(Request,
                                                       out var httpUser,
                                                       out var httpOrganizations,
                                                       ref responseBuilder,
                                                       AccessLevel: Access_Levels.ReadOnly,
                                                       Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return Task.FromResult(responseBuilder.AsImmutable);
                                  }

                                  #endregion


                                  var withMetadata         = Request.QueryString.GetBoolean("withMetadata", false);
                                  var includeFilter        = Request.QueryString.CreateStringFilter<IUser>("match",
                                                                                                           (user, include) => user.Id.   ToString().Contains(include, StringComparison.OrdinalIgnoreCase) ||
                                                                                                                              user.Name.FirstText().Contains(include, StringComparison.OrdinalIgnoreCase) ||
                                                                                                                              user.Description.     Matches (include, IgnoreCase: true));

                                  var skip                 = Request.QueryString.GetUInt64 ("skip");
                                  var take                 = Request.QueryString.GetUInt64 ("take");

                                  var expand               = Request.QueryString.GetStrings("expand");
                                  var expandAccessRights   = expand.ContainsIgnoreCase("accessRights")  ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                  var expandOrganizations  = expand.ContainsIgnoreCase("organizations") ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                  var filteredUsers        = httpOrganizations.
                                                                 SafeSelectMany(organization => organization.Users).
                                                                 Distinct      ().
                                                                 Where         (includeFilter).
                                                                 OrderBy       (user => user.Name.FirstText()).
                                                                 ToArray();

                                  var filteredCount        = filteredUsers.ULongCount();
                                  var totalCount           = httpOrganizations.ULongCount();

                                  var jsonResults          = filteredUsers.
                                                                 ToJSON(skip,
                                                                        take,
                                                                        Embedded:    false,
                                                                        UserToJSON:  GetUserSerializator(Request, httpUser));


                                  #region Create HTTP response

                                  responseBuilder.HTTPStatusCode                = HTTPStatusCode.OK;
                                  responseBuilder.X_ExpectedTotalNumberOfItems  = filteredCount;
                                  responseBuilder.Content                       = withMetadata
                                                                                      ? JSONObject.Create(
                                                                                            new JProperty("totalCount",     totalCount),
                                                                                            new JProperty("filteredCount",  filteredCount),
                                                                                            new JProperty("users",          jsonResults)
                                                                                        ).ToUTF8Bytes()
                                                                                      : jsonResults.ToUTF8Bytes();

                                  #endregion

                                  return Task.FromResult(responseBuilder.AsImmutable);

                              });

            #endregion

            #region DEAUTH      ~/users

            // -----------------------------------------------------------------------------
            // curl -X DEAUTH -v -H "Accept: application/json" http://127.0.0.1:2100/users
            // -----------------------------------------------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.DEAUTH,
                              HTTPPath.Parse("/users"),
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request =>

                                   Task.FromResult(
                                       new HTTPResponse.Builder(Request) {
                                           HTTPStatusCode  = HTTPStatusCode.OK,
                                           CacheControl    = "private",
                                           SetCookie       = HTTPCookies.Parse(

                                                                 String.Concat(CookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                               HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                   ? "; Domain=" + HTTPCookieDomain
                                                                                   : "",
                                                                               "; Path=", URLPathPrefix),

                                                                 String.Concat(SessionCookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                               HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                   ? "; Domain=" + HTTPCookieDomain
                                                                                   : "",
                                                                               "; Path=", URLPathPrefix)

                                                             ),
                                           Connection      = "close"
                                       }.AsImmutable));

            #endregion


            #region OPTIONS     ~/users/{UserId}

            // -----------------------------------------------------------------------------------
            // curl -X OPTIONS -v -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf
            // -----------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.OPTIONS,
                              URLPathPrefix + "users/{UserId}",
                              HTTPDelegate: Request => {

                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode             = HTTPStatusCode.OK,
                                          Server                     = HTTPServer.DefaultServerName,
                                          Date                       = Timestamp.Now,
                                          AccessControlAllowOrigin   = "*",
                                          AccessControlAllowMethods  = new[] { "OPTIONS", "ADD", "EXISTS", "GET", "SET", "AUTH", "DEAUTH", "IMPERSONATE", "DEPERSONATE", "DELETE" },
                                          AccessControlAllowHeaders  = new[] { "X-PINGOTHER", "Content-Type", "Accept", "Authorization", "X-App-Version" },
                                          AccessControlMaxAge        = 3600,
                                          //ETag                       = "1",
                                          CacheControl               = "public",
                                          //Expires                    = "Mon, 25 Jun 2015 21:31:12 GMT",
                                          Connection                 = "close"
                                      }.AsImmutable);

                              });

            #endregion

            #region ADD         ~/users/{UserId}

            // -------------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf
            // -------------------------------------------------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.ADD,
                              URLPathPrefix + "users/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:   AddUserHTTPRequest,
                              HTTPResponseLogger:  AddUserHTTPResponse,
                              HTTPDelegate:        async Request => {

                                  #region Create HTTP response template

                                  var responseBuilder = new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.BadRequest,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = new[] { "OPTIONS", "ADD", "EXISTS", "GET", "SET", "AUTH", "DEAUTH", "IMPERSONATE", "DEPERSONATE", "DELETE" },
                                                            AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                            ContentType                 = HTTPContentType.JSON_UTF8,
                                                            Connection                  = "close"
                                                        };

                                  #endregion

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser2(Request,
                                                       out var httpUser,
                                                       out var httpOrganizations,
                                                       ref responseBuilder,
                                                       AccessLevel: Access_Levels.ReadWrite,
                                                       Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return responseBuilder;
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUserId2(this,
                                                            out var userIdURL,
                                                            ref responseBuilder) ||
                                      !userIdURL.HasValue ||
                                       userIdURL.IsNullOrEmpty())
                                  {
                                      return responseBuilder;
                                  }

                                  #endregion


                                  #region Parse JSON Object HTTP body...

                                  if (!Request.TryParseJSONObjectRequestBody2(out var json, ref responseBuilder))
                                      return responseBuilder;

                                  #region Parse UserId               [optional]

                                  // It is valid to omitt the user identification!
                                  if (json.ParseOptional("@id",
                                                         "user identification",
                                                         User_Id.TryParse,
                                                         out User_Id? userIdBody,
                                                         out var errorResponse))
                                  {

                                      if (errorResponse is not null)
                                      {

                                          responseBuilder.Content = JSONObject.Create(
                                                                        new JProperty("data", json["@id"]),
                                                                        new JProperty("description", $"The given user identification is invalid: {errorResponse}")
                                                                    ).ToUTF8Bytes();

                                          return responseBuilder;

                                      }

                                  }

                                  if (userIdBody.HasValue &&
                                      userIdURL.Value != userIdBody.Value)
                                  {

                                      responseBuilder.Content = JSONObject.Create(
                                                                    new JProperty("description",  $"The user identification within the URL '{userIdURL.Value}' does not match with the user identification within the JSON request body '{userIdBody.Value}'!")
                                                                ).ToUTF8Bytes();

                                      return responseBuilder;

                                  }

                                  #endregion

                                  #region Parse NewUser              [mandatory]

                                  if (!User.TryParseJSON(json,
                                                         out var newUser,
                                                         out errorResponse,
                                                         userIdURL,
                                                         MinUserIdLength,
                                                         MinUserNameLength) || newUser is null)
                                  {

                                      responseBuilder.Content = JSONObject.Create(
                                                                    new JProperty("data",         json),
                                                                    new JProperty("description",  errorResponse)
                                                                ).ToUTF8Bytes();

                                      return responseBuilder;

                                  }

                                  #endregion

                                  #region Parse AccessRightsArray    [optional]

                                  if (json.ParseOptional("accessRights",
                                                         "access rights",
                                                         out JArray accessRightsJSONArray,
                                                         out errorResponse))
                                  {
                                      if (errorResponse is not null)
                                      {

                                          responseBuilder.Content = JSONObject.Create(
                                                                        new JProperty("data",         json["accessRights"]),
                                                                        new JProperty("description",  errorResponse)
                                                                    ).ToUTF8Bytes();

                                          return responseBuilder;

                                      }
                                  }

                                  #endregion


                                  var accessRights = new List<Tuple<User2OrganizationEdgeLabel, IOrganization>>();

                                  foreach (var accessRightJSON in accessRightsJSONArray)
                                  {

                                      #region Validate access right JSON object

                                      if (accessRightJSON is not JObject accessRightObject)
                                      {

                                          responseBuilder.Content = JSONObject.Create(
                                                                        new JProperty("data",         accessRightJSON),
                                                                        new JProperty("description",  "Invalid 'accessRight' JSON object!")
                                                                    ).ToUTF8Bytes();

                                          return responseBuilder;

                                      }

                                      #endregion

                                      #region Parse AccessRight     [mandatory]

                                      if (!accessRightObject.ParseMandatoryEnum("accessRight",
                                                                                "access right",
                                                                                out User2OrganizationEdgeLabel accessRight,
                                                                                out errorResponse))
                                      {

                                          responseBuilder.Content = JSONObject.Create(
                                                                        new JProperty("data",         accessRightObject["accessRight"]),
                                                                        new JProperty("description",  $"Invalid 'access right': {errorResponse}")
                                                                    ).ToUTF8Bytes();

                                          return responseBuilder;

                                      }

                                      #endregion

                                      #region Parse Organization    [mandatory]

                                      if (!accessRightObject.ParseMandatory("organizationId",
                                                                            "organization identification",
                                                                            Organization_Id.TryParse,
                                                                            out Organization_Id organizationId,
                                                                            out errorResponse))
                                      {

                                          responseBuilder.Content = JSONObject.Create(
                                                                        new JProperty("data",         accessRightObject["organizationId"]),
                                                                        new JProperty("description",  $"Invalid organization identification: {errorResponse}")
                                                                    ).ToUTF8Bytes();

                                          return responseBuilder;

                                      }

                                      if (!organizations.TryGetValue(organizationId, out var organization))
                                      {

                                          responseBuilder.Content = JSONObject.Create(
                                                                        new JProperty("data",         organizationId.ToString()),
                                                                        new JProperty("description",  $"Unkown organization identification '{organizationId}'!")
                                                                    ).ToUTF8Bytes();

                                          return responseBuilder;

                                      }

                                      #endregion

                                      accessRights.Add(new Tuple<User2OrganizationEdgeLabel, IOrganization>(accessRight,
                                                                                                            organization));

                                  }

                                  #endregion


                                  var result = accessRights.Any()

                                                  ? await AddUser(newUser,
                                                                  accessRights,
                                                                  EventTrackingId: Request.EventTrackingId,
                                                                  CurrentUserId:   httpUser.Id)

                                                  : await AddUser(newUser,
                                                                  EventTrackingId: Request.EventTrackingId,
                                                                  CurrentUserId:   httpUser.Id);


                                  switch (result.Result)
                                  {

                                      case CommandResult.Success:
                                          responseBuilder.HTTPStatusCode  = HTTPStatusCode.Created;
                                          responseBuilder.Content         = newUser.ToJSON(Embedded: false).ToUTF8Bytes();
                                          break;

                                      default:
                                          responseBuilder.Content         = JSONObject.Create(
                                                                                new JProperty("description",  "Could create the new user!")
                                                                            ).ToUTF8Bytes();
                                          break;

                                  }

                                  return responseBuilder;

                              });

            #endregion

            #region SET         ~/users/{UserId}

            // ---------------------------------------------------------------------------------------------
            // curl -v -X SET \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //              \"@id\" :             \"214080158\", \
            //              \"@context\" :        \"https://opendata.social/contexts/UsersAPI/user+json\", \
            //              \"description\" :     { \"deu\" : \"Test AED in Erlangen Raum Yavin 4\" },\
            //              \"dataLicenseIds\" :  [ \"ODbL\" ],\
            //              \"ownerId\" :         \"Organization\", \
            //              \"address\" :         { \
            //                                      \"country\" :      \"Germany\",
            //                                      \"postalCode\" :   \"91052\",
            //                                      \"city\" :         { \"deu\": \"Erlangen\" },
            //                                      \"street\" :       \"Henkestraße\",
            //                                      \"houseNumber\" :  \"91\",
            //                                      \"floorLevel\" :   \"1\"
            //                                    }, \
            //              \"geoLocation\" :     { \"lat\": 49.594760, \"lng\": 11.019356 }, \
            //              \"privacyLevel\" :    \"Public\" \
            //          }" \
            //      http://127.0.0.1:2000/users/214080158
            // ---------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.SET,
                              URLPathPrefix + "users/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:   SetUserHTTPRequest,
                              HTTPResponseLogger:  SetUserHTTPResponse,
                              HTTPDelegate:        async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUserId(this,
                                                           out var UserIdURL,
                                                           out httpResponseBuilder))
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Parse JSON

                                  if (!Request.TryParseJSONObjectRequestBody(out var json, out httpResponseBuilder) || json is null)
                                      return httpResponseBuilder!;

                                  if (!User.TryParseJSON(json,
                                                         out var user,
                                                         out var ErrorResponse,
                                                         UserIdURL) || user is null)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ETag                       = "1",
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description",  ErrorResponse)
                                                                              ).ToUTF8Bytes()
                                             }.AsImmutable;

                                  }

                                  #endregion


                                  // Has the current HTTP user the required
                                  // access rights to update?
                                  if (httpUser.Id != user.Id && !CanImpersonate(httpUser, user))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;


                                  var result = await AddOrUpdateUser(user,
                                                                     EventTrackingId: Request.EventTrackingId,
                                                                     CurrentUserId:   httpUser.Id);


                                  return result.Result == CommandResult.Success

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.OK,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "GET", "SET" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   //ETag                        = _User.HashValue,
                                                   ContentType                 = HTTPContentType.JSON_UTF8,
                                                   Content                     = user.ToJSON().ToUTF8Bytes(),
                                                   Connection                  = "close"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                   Server                     = HTTPServer.DefaultServerName,
                                                   Date                       = Timestamp.Now,
                                                   AccessControlAllowOrigin   = "*",
                                                   AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                   AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ETag                       = "1",
                                                   ContentType                = HTTPContentType.JSON_UTF8,
                                                   Content                    = JSONObject.Create(
                                                                                    new JProperty("description", result?.Description?.ToJSON())
                                                                                ).ToUTF8Bytes()
                                               }.AsImmutable;

                              });

            #endregion

            #region DELETE      ~/users/{UserId}

            // ----------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf
            // ----------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.DELETE,
                              URLPathPrefix + "users/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUser(this,
                                                         out var userId,
                                                         out var user,
                                                         out httpResponseBuilder) ||
                                     !userId.HasValue ||
                                      user is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Validate user

                                  if (httpUser != user && !CanImpersonate(httpUser,
                                                                          user,
                                                                          Access_Levels.ReadWrite))
                                  {
                                      return new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode             = HTTPStatusCode.Forbidden,
                                              Server                     = HTTPServer.DefaultServerName,
                                              Date                       = Timestamp.Now,
                                              AccessControlAllowOrigin   = "*",
                                              AccessControlAllowMethods  = new[] { "OPTIONS", "ADD", "EXISTS", "GET", "SET", "AUTH", "DEAUTH", "IMPERSONATE", "DEPERSONATE", "DELETE" },
                                              AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                              ContentType                = HTTPContentType.JSON_UTF8,
                                              Content                    = JSONObject.Create(
                                                                                  new JProperty("description", "This operation is not allowed!")
                                                                              ).ToUTF8Bytes(),
                                              Connection                 = "close",
                                              Vary                       = "Accept"
                                          }.AsImmutable;
                                  }

                                  #endregion


                                  var result = await DeleteUser(user,
                                                                EventTrackingId: Request.EventTrackingId,
                                                                CurrentUserId:   httpUser.Id);


                                  return result.Result == CommandResult.Success

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.OK,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "OPTIONS", "ADD", "EXISTS", "GET", "SET", "AUTH", "DEAUTH", "IMPERSONATE", "DEPERSONATE", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                 = HTTPContentType.JSON_UTF8,
                                                   Content                     = user.ToJSON(false).ToUTF8Bytes(),
                                                   Connection                  = "close",
                                                   Vary                        = "Accept"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.FailedDependency,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "OPTIONS", "ADD", "EXISTS", "GET", "SET", "AUTH", "DEAUTH", "IMPERSONATE", "DEPERSONATE", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                 = HTTPContentType.JSON_UTF8,
                                                   Content                     = JSONObject.Create(
                                                                                    new JProperty("description", result?.Description?.ToJSON())
                                                                                ).ToUTF8Bytes(),
                                                   Connection                  = "close",
                                                   Vary                        = "Accept"
                                               }.AsImmutable;

            });

            #endregion

            #region EXISTS      ~/users/{UserId}

            // ---------------------------------------------------------------------------------
            // curl -v -X EXITS -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf
            // ---------------------------------------------------------------------------------
            //HTTPServer.ITEM_EXISTS<User_Id, IUser>(this,
            //                                       URLPathPrefix + "users/{UserId}",
            //                                       User_Id.TryParse,
            //                                       text   => "Invalid user identification '" + text + "'!",
            //                                       users.TryGetValue,
            //                                       user   => user.PrivacyLevel == PrivacyLevel.World,
            //                                       userId => "Unknown user '" + userId + "'!");

            #endregion

            #region GET         ~/users/{UserId}

            // ------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf
            // ------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "users/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadOnly,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUser(this,
                                                         out var userIdURL,
                                                         out var user,
                                                         out httpResponseBuilder) ||
                                     !userIdURL.HasValue ||
                                      user is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  if (httpUser != user && !CanImpersonate(httpUser, user, Access_Levels.ReadOnly))
                                      return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.Unauthorized,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                     AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                     Connection                 = "close"
                                                 }.AsImmutable);


                                  var userJSON = user.ToJSON(false);

                                  // You request your own profile or you are a valid *admin*
                                  if (httpUser == user || CanImpersonate(httpUser, user, Access_Levels.ReadWrite))
                                      userJSON.Add(new JProperty("youCanEdit", true));


                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode              = HTTPStatusCode.OK,
                                          Server                      = HTTPServer.DefaultServerName,
                                          Date                        = Timestamp.Now,
                                          AccessControlAllowOrigin    = "*",
                                          AccessControlAllowMethods   = new[] { "GET", "SET" },
                                          AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                          ContentType                 = HTTPContentType.JSON_UTF8,
                                          Content                     = userJSON.ToUTF8Bytes(),
                                          Connection                  = "close",
                                          Vary                        = "Accept"
                                      }.AsImmutable);

                              });

            #endregion

            #region AUTH        ~/users/{UserId}

            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.AUTH,
                              URLPathPrefix + "users/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Check JSON body...

                                  if (!Request.TryParseJSONObjectRequestBody(out var json, out var httpResponseBuilder) || json is null)
                                      return httpResponseBuilder!;

                                  if (!json.HasValues)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 ContentType     = HTTPContentType.JSON_UTF8,
                                                 Content         = new JObject(
                                                                       new JProperty("@context",     SignInOutContext),
                                                                       new JProperty("statuscode",   400),
                                                                       new JProperty("description",  "Invalid JSON!")
                                                                  ).ToUTF8Bytes(),
                                                 CacheControl    = "private",
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion

                                  #region Verify username

                                  // The login is taken from the URL, not from the JSON!
                                  var login = Request.ParsedURLParameters[0];

                                  if (login.Length < MinUserIdLength)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 ContentType     = HTTPContentType.JSON_UTF8,
                                                 Content         = new JObject(
                                                                       new JProperty("@context",     SignInOutContext),
                                                                       new JProperty("statuscode",   400),
                                                                       new JProperty("property",     "user identification"),
                                                                       new JProperty("description",  "The login is too short!")
                                                                   ).ToString().ToUTF8Bytes(),
                                                 CacheControl    = "private",
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  }

                                  json["username"] = login;

                                  #endregion

                                  #region Verify password

                                  var password = json.GetString("password") ?? "";

                                  if (password.IsNullOrEmpty())
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 ContentType     = HTTPContentType.JSON_UTF8,
                                                 Content         = new JObject(
                                                                       new JProperty("@context",     SignInOutContext),
                                                                       new JProperty("statuscode",   400),
                                                                       new JProperty("property",     "password"),
                                                                       new JProperty("description",  "Missing \"password\" property!")
                                                                  ).ToString().ToUTF8Bytes(),
                                                 CacheControl    = "private",
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  }

                                  var passwordQuality = PasswordQualityCheck(password);

                                  if (passwordQuality < 1.0)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 ContentType     = HTTPContentType.JSON_UTF8,
                                                 Content         = new JObject(
                                                                       new JProperty("@context",     SignInOutContext),
                                                                       new JProperty("statuscode",   400),
                                                                       new JProperty("property",     "password"),
                                                                       new JProperty("description",  "The password does not match the password quality criteria!")
                                                                  ).ToString().ToUTF8Bytes(),
                                                 CacheControl    = "private",
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  }

                                  json["passwordQuality"] = passwordQuality;

                                  #endregion

                                  #region Check login or e-mail address and password(s)

                                  var possibleUsers = new HashSet<IUser>();

                                  if (User_Id.       TryParse   (login,  out var userId) &&
                                      users.         TryGetValue(userId, out var user)   &&
                                      loginPasswords.TryGetValue(userId, out var loginPassword))
                                  {
                                      possibleUsers.Add(user);
                                  }

                                  if (possibleUsers.Count == 0)
                                  {
                                      foreach (var user2 in users.Values)
                                      {
                                          if (String.Equals(login,
                                                            user2.EMail.Address.ToString(),
                                                            StringComparison.OrdinalIgnoreCase))
                                          {
                                              possibleUsers.Add(user2);
                                          }
                                      }
                                  }

                                  if (possibleUsers.Count == 0)
                                      return new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.NotFound,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",     SignInOutContext),
                                                                    new JProperty("property",     "login"),
                                                                    new JProperty("description",  "Unknown login!")
                                                                ).ToString().ToUTF8Bytes(),
                                              CacheControl    = "private",
                                              Connection      = "close"
                                          }.AsImmutable;


                                  var validUsers = new HashSet<IUser>();

                                  foreach (var possibleUser in possibleUsers)
                                  {
                                      if (loginPasswords.TryGetValue(possibleUser.Id, out loginPassword) &&
                                          loginPassword.VerifyPassword(password))
                                      {
                                          validUsers.Add(possibleUser);
                                      }
                                  }

                                  if (validUsers.Count == 0)
                                      return new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.NotFound,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",     SignInOutContext),
                                                                    new JProperty("property",     "login"),
                                                                    new JProperty("description",  "Invalid password!")
                                                                ).ToString().ToUTF8Bytes(),
                                              CacheControl    = "private",
                                              Connection      = "close"
                                          }.AsImmutable;


                                  if (validUsers.Count > 1)
                                      return new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode  = HTTPStatusCode.MultipleChoices,
                                              Server          = HTTPServer.DefaultServerName,
                                              ContentType     = HTTPContentType.JSON_UTF8,
                                              Content         = new JObject(
                                                                    new JProperty("@context",     SignInOutContext),
                                                                    new JProperty("property",     "login"),
                                                                    new JProperty("description",  "Multiple matching user accounts found: Please use your login name!")
                                                                ).ToString().ToUTF8Bytes(),
                                              CacheControl    = "private",
                                              Connection      = "close"
                                          }.AsImmutable;

                                  #endregion

                                  #region Check whether the user has access to at least one organization

                                  if (!possibleUsers.First().Organizations(Access_Levels.ReadOnly).Any())
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 ContentType     = HTTPContentType.JSON_UTF8,
                                                 Content         = new JObject(
                                                                       new JProperty("@context",    SignInOutContext),
                                                                       new JProperty("description", "You do not have access to any organization!")
                                                                   ).ToString().ToUTF8Bytes(),
                                                 CacheControl    = "private",
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion

                                  var validUser = validUsers.First();

                                  #region Check EULA

                                  var acceptsEULA = json["acceptsEULA"]?.Value<Boolean>();

                                  if (!validUser.AcceptedEULA.HasValue)
                                  {

                                      if (!acceptsEULA.HasValue || acceptsEULA == false)
                                      {
                                          return new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                                     Server          = HTTPServer.DefaultServerName,
                                                     ContentType     = HTTPContentType.JSON_UTF8,
                                                     Content         = new JObject(
                                                                           new JProperty("@context",     SignInOutContext),
                                                                           new JProperty("showEULA",     true),
                                                                           new JProperty("description",  "Please accept the end-user license agreement!")
                                                                       ).ToString().ToUTF8Bytes(),
                                                     CacheControl    = "private",
                                                     Connection      = "close"
                                                 }.AsImmutable;
                                      }

                                      await UpdateUser(validUser,
                                                       _user => _user.AcceptedEULA = Timestamp.Now,
                                                       false,
                                                       null,
                                                       Request.EventTrackingId,
                                                       Robot.Id);

                                  }

                                  #endregion


                                  #region Register security token

                                  var securityTokenId  = SecurityToken_Id.Parse(
                                                             SHA256.HashData(
                                                                 String.Concat(Guid.NewGuid().ToString(),
                                                                               validUser.Id).
                                                                 ToUTF8Bytes()
                                                             ).ToHexString()
                                                         );

                                  var expires          = Timestamp.Now.Add(MaxSignInSessionLifetime);

                                  httpCookies.TryAdd(securityTokenId,
                                                     new SecurityToken(validUser.Id,
                                                                       expires));

                                  await File.AppendAllTextAsync(HTTPAPIPath + DefaultHTTPCookiesFile,
                                                                securityTokenId + ";" + validUser.Id + ";" + expires.ToIso8601() + Environment.NewLine);

                                  #endregion


                                  return new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode  = HTTPStatusCode.Created,
                                             ContentType     = HTTPContentType.TEXT_UTF8,
                                             Content         = new JObject(
                                                                   new JProperty("@context",  SignInOutContext),
                                                                   new JProperty("login",     validUser.Id.           ToString()),
                                                                   new JProperty("username",  validUser.Name.         ToJSON()),
                                                                   new JProperty("email",     validUser.EMail.Address.ToString())
                                                               ).ToUTF8Bytes(),
                                             CacheControl    = "private",
                                             SetCookie       = HTTPCookies.Parse(

                                                                   String.Concat(CookieName,
                                                                                 GenerateCookieUserData(validUser),
                                                                                 GenerateCookieSettings(expires)),

                                                                   String.Concat(SessionCookieName, "=", securityTokenId.ToString(),
                                                                                 GenerateCookieSettings(expires),
                                                                                 "; HttpOnly")

                                                               ),
                                             Connection      = "close"
                                         }.AsImmutable;

                              });

            #endregion

            #region DEAUTH      ~/users/{UserId}

            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.DEAUTH,
                              URLPathPrefix + "users/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request =>

                                  Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode  = HTTPStatusCode.OK,
                                          CacheControl    = "private",
                                          SetCookie       = HTTPCookies.Parse(

                                                                String.Concat(CookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                              HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                  ? "; Domain=" + HTTPCookieDomain
                                                                                  : "",
                                                                              "; Path=", URLPathPrefix),

                                                                String.Concat(SessionCookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                              HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                  ? "; Domain=" + HTTPCookieDomain
                                                                                  : "",
                                                                              "; Path=", URLPathPrefix)
                                                            ),
                                          Connection      = "close"
                                      }.AsImmutable));

            #endregion

            #region IMPERSONATE ~/users/{UserId}

            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.IMPERSONATE,
                              URLPathPrefix + "users/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:   ImpersonateUserRequest,
                              HTTPResponseLogger:  ImpersonateUserResponse,
                              HTTPDelegate:        async Request => {

                                  #region Get super user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetSuperUser(Request,
                                                       out var superUser,
                                                       out var superUserOrganizations,
                                                       out var httpResponseBuilder,
                                                       Recursive: true) ||
                                       superUser is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUserId(this,
                                                           out var userIdURL,
                                                           out httpResponseBuilder) ||
                                      !userIdURL.HasValue)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  if (!TryGetUser(userIdURL.Value, out var userURL) ||
                                       userURL is null)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.NotFound,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "IMPERSONATE" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  }

                                  #endregion

                                  #region Is the current user allowed to impersonate the given user?

                                  if (!CanImpersonate(superUser, userURL))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "IMPERSONATE" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  #endregion


                                  #region Register security token

                                  var securityTokenId  = SecurityToken_Id.Parse(
                                                             SHA256.HashData(
                                                                 String.Concat(Guid.NewGuid().ToString(),
                                                                               userURL.Id).
                                                                 ToUTF8Bytes()
                                                             ).ToHexString()
                                                         );

                                  var expires          = Timestamp.Now.Add(MaxSignInSessionLifetime);

                                  httpCookies.TryAdd(securityTokenId,
                                                     new SecurityToken(userURL.Id,
                                                                       expires,
                                                                       superUser.Id));

                                  await File.AppendAllTextAsync(HTTPAPIPath + DefaultHTTPCookiesFile,
                                                                $"{securityTokenId};{userURL.Id};{expires.ToIso8601()};{superUser.Id}{Environment.NewLine}");

                                  #endregion


                                  return new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode  = HTTPStatusCode.Created,
                                             ContentType     = HTTPContentType.TEXT_UTF8,
                                             Content         = new JObject(
                                                                   new JProperty("@context",  SignInOutContext),
                                                                   new JProperty("login",     userURL.Id.ToString()),
                                                                   new JProperty("username",  userURL.Name),
                                                                   new JProperty("email",     userURL.EMail.Address.ToString())
                                                               ).ToUTF8Bytes(),
                                             CacheControl    = "private",
                                             SetCookie       = HTTPCookies.Parse(

                                                                   String.Concat(CookieName,
                                                                                 GenerateCookieUserData(userURL, superUser),
                                                                                 GenerateCookieSettings(expires)),

                                                                   String.Concat(SessionCookieName, "=", securityTokenId.ToString(),
                                                                                 GenerateCookieSettings(expires),
                                                                                 "; HttpOnly")

                                                               ),
                                             Connection      = "close"
                                         }.AsImmutable;

                              });

            #endregion

            #region DEPERSONATE ~/users/{UserId}

            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.DEPERSONATE,
                              URLPathPrefix + "users/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get super user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetSuperUser(Request,
                                                       out var superUser,
                                                       out var superUserOrganizations,
                                                       out var httpResponseBuilder,
                                                       Recursive: true) ||
                                       superUser is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUserId(this,
                                                           out var userIdURL,
                                                           out httpResponseBuilder) ||
                                       userIdURL is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  if (!TryGetUser(userIdURL.Value, out var UserURL) ||
                                       UserURL is null)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.NotFound,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "DEPERSONATE" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  }

                                  #endregion


                                  #region Switch back to super user identification...

                                  var securityTokenId  = SecurityToken_Id.Parse(
                                                             SHA256.HashData(
                                                                 String.Concat(Guid.NewGuid().ToString(),
                                                                               superUser.Id).
                                                                 ToUTF8Bytes()
                                                             ).ToHexString()
                                                         );

                                  var expires          = Timestamp.Now.Add(MaxSignInSessionLifetime);


                                  httpCookies.TryAdd(securityTokenId,
                                                     new SecurityToken(superUser.Id,
                                                                       expires));

                                  await File.AppendAllTextAsync(HTTPAPIPath + DefaultHTTPCookiesFile,
                                                                $"{securityTokenId};{superUser.Id};{expires.ToIso8601()}{Environment.NewLine}");

                                  #endregion


                                  return new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode  = HTTPStatusCode.Created,
                                             ContentType     = HTTPContentType.TEXT_UTF8,
                                             Content         = new JObject(
                                                                   new JProperty("@context",  SignInOutContext),
                                                                   new JProperty("login",     superUser.Id.ToString()),
                                                                   new JProperty("username",  superUser.Name),
                                                                   new JProperty("email",     superUser.EMail.Address.ToString())
                                                               ).ToUTF8Bytes(),
                                             CacheControl    = "private",
                                             SetCookie       = HTTPCookies.Parse(

                                                                   String.Concat(CookieName,
                                                                                 GenerateCookieUserData(superUser),
                                                                                 GenerateCookieSettings(expires)),

                                                                   String.Concat(SessionCookieName, "=", securityTokenId.ToString(),
                                                                                 GenerateCookieSettings(expires),
                                                                                 "; HttpOnly")

                                                               ),
                                             Connection      = "close"
                                         }.AsImmutable;

                              });

            #endregion


            #region SET         ~/users/{UserId}/password

            AddMethodCallback(Hostname,
                              HTTPMethod.SET,
                              URLPathPrefix + "users/{UserId}/password",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:   ChangePasswordRequest,
                              HTTPResponseLogger:  ChangePasswordResponse,
                              HTTPDelegate:        async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUser(this,
                                                         out var userIdURL,
                                                         out var user,
                                                         out httpResponseBuilder) ||
                                      !userIdURL.HasValue ||
                                       user is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion


                                  // Has the current HTTP user the required
                                  // access rights to update?
                                  if (httpUser.Id != userIdURL.Value)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "GET", "SET", "CHOWN" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  }

                                  #region Parse JSON

                                  if (!Request.TryParseJSONObjectRequestBody(out var json, out httpResponseBuilder) || json is null)
                                      return httpResponseBuilder!;

                                  #endregion

                                  #region Parse CurrentPassword    [mandatory]

                                  if (!json.ParseMandatory("currentPassword",
                                                           "current password",
                                                           Password.TryParse,
                                                           out Password CurrentPassword,
                                                           out var errorResponse))
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ETag                       = "1",
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", errorResponse)
                                                                              ).ToUTF8Bytes()
                                             }.AsImmutable;

                                  }

                                  #endregion

                                  #region Parse NewPassword        [mandatory]

                                  if (!json.ParseMandatory("newPassword",
                                                           "new password",
                                                           Password.TryParse,
                                                           out Password NewPassword,
                                                           out errorResponse))
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ETag                       = "1",
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", errorResponse)
                                                                              ).ToUTF8Bytes()
                                             }.AsImmutable;

                                  }

                                  if (PasswordQualityCheck(NewPassword.UnsecureString) < 1.0)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 ContentType     = HTTPContentType.JSON_UTF8,
                                                 Content         = JSONObject.Create(
                                                                       new JProperty("@context",      SignInOutContext),
                                                                       new JProperty("statuscode",    400),
                                                                       new JProperty("property",     "password"),
                                                                       new JProperty("description",  "The choosen password does not match the password quality criteria!")
                                                                   ).ToString().ToUTF8Bytes(),
                                                 CacheControl    = "private",
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion


                                  var result = await ChangePassword(user,
                                                                    NewPassword,
                                                                    CurrentPassword,
                                                                    EventTrackingId: Request.EventTrackingId,
                                                                    CurrentUserId:   httpUser.Id);


                                  return result.Result == CommandResult.Success

                                             ? new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.OK,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "SET" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "SET" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                              });

            #endregion

            #region GET         ~/users/{UserId}/profilephoto

            HTTPServer.RegisterFilesystemFile(this,
                                              HTTPHostname.Any,
                                              URLPathPrefix + "users/{UserId}/profilephoto",
                                              URLParams => "LocalHTTPRoot/data/Users/" + URLParams[0] + ".png",
                                              DefaultFile: "HTTPRoot/images/defaults/DefaultUser.png");

            #endregion

            #region GET         ~/users/{UserId}/organizations

            // ------------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/users/{UserId}/organizations?summary
            // ------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "users/{UserId}/organizations",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUser(this,
                                                         out var userIdURL,
                                                         out var user,
                                                         out httpResponseBuilder) ||
                                      !userIdURL.HasValue ||
                                       user is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  var allMyOrganizations = new OrganizationInfo(NoOwner, httpUser).Childs;

                                  var summary = Request.QueryString.GetBoolean("summary", false);

                                  if (summary)
                                  {
                                      // [
                                      //     {
                                      //         "@id":   "hamzatest",
                                      //         "name":  { "deu": "Hamza_tests" }
                                      //     },
                                      //     ...
                                      // ]
                                  }

                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode             = HTTPStatusCode.OK,
                                          Server                     = HTTPServer.DefaultServerName,
                                          Date                       = Timestamp.Now,
                                          AccessControlAllowOrigin   = "*",
                                          AccessControlAllowMethods  = new[] { "GET", "COUNT", "OPTIONS" },
                                          AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                          ETag                       = "1",
                                          ContentType                = HTTPContentType.JSON_UTF8,
                                          Content                    = allMyOrganizations.ToJSON().ToUTF8Bytes(),
                                          Vary                       = "Accept"
                                      }.AsImmutable);

                              });

            #endregion


            #region GET         ~/users/{UserId}/notifications

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf/notifications
            // --------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "users/{UserId}/notifications",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion

                                  return Task.FromResult(new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode             = HTTPStatusCode.OK,
                                             Server                     = HTTPServer.DefaultServerName,
                                             Date                       = Timestamp.Now,
                                             AccessControlAllowOrigin   = "*",
                                             AccessControlAllowMethods  = new[] { "GET", "SET" },
                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                             ETag                       = "1",
                                             ContentType                = HTTPContentType.JSON_UTF8,
                                             Content                    = GetNotifications(httpUser).ToUTF8Bytes(),
                                             Connection                 = "close",
                                             Vary                       = "Accept"
                                         }.AsImmutable);

            });

            #endregion

            #region SET         ~/users/{UserId}/notifications

            // ---------------------------------------------------------------------------------------------
            // curl -v -X SET \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //          }" \
            //      http://127.0.0.1:2000/users/214080158
            // ---------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.SET,
                              URLPathPrefix + "users/{UserId}/notifications",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:   SetUserNotificationsRequest,
                              HTTPResponseLogger:  SetUserNotificationsResponse,
                              HTTPDelegate:        async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadOnly,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUser(this,
                                                         out var userIdURL,
                                                         out var user,
                                                         out httpResponseBuilder))
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion


                                  #region Has the current HTTP user the required access rights to update?

                                  if (userIdURL != httpUser.Id)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "GET", "SET", "CHOWN" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  }

                                  #endregion


                                  #region Parse JSON and new notifications...

                                  if (!Request.TryParseJSONArrayRequestBody(out var jsonArray, out httpResponseBuilder) || jsonArray is null)
                                      return httpResponseBuilder!;

                                  String? ErrorString = null;

                                  if (jsonArray.Count > 0)
                                  {

                                      var jsonObjects = jsonArray.Cast<JObject>().ToArray();

                                      if (!jsonObjects.Any())
                                          goto fail;

                                      String? context = null;

                                      foreach (var JSONObject in jsonObjects)
                                      {

                                          context = JSONObject["@context"]?.Value<String>();

                                          if (context.IsNullOrEmpty())
                                              goto fail;

                                          switch (context)
                                          {

                                              case TelegramNotification.JSONLDContext:
                                                  if (!TelegramNotification.TryParse(JSONObject, out TelegramNotification telegramNotification))
                                                  {
                                                      ErrorString = "Could not parse Telegram notification!";
                                                      goto fail;
                                                  }
                                                  await AddNotification(httpUser, telegramNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case TelegramGroupNotification.JSONLDContext:
                                                  if (!TelegramGroupNotification.TryParse(JSONObject, out TelegramGroupNotification telegramGroupNotification))
                                                  {
                                                      ErrorString = "Could not parse Telegram group notification!";
                                                      goto fail;
                                                  }
                                                  await AddNotification(httpUser, telegramGroupNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case SMSNotification.JSONLDContext:
                                                  if (!SMSNotification.TryParse(JSONObject, out SMSNotification   smsNotification))
                                                  {
                                                      ErrorString = "Could not parse sms notification!";
                                                      goto fail;
                                                  }
                                                  await AddNotification(httpUser, smsNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case HTTPSNotification.JSONLDContext:
                                                  if (!HTTPSNotification.TryParse(JSONObject, out HTTPSNotification httpsNotification))
                                                  {
                                                      ErrorString = "Could not parse https notification!";
                                                      goto fail;
                                                  }
                                                  await AddNotification(httpUser, httpsNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case EMailNotification.JSONLDContext:
                                                  if (!EMailNotification.TryParse(JSONObject, out EMailNotification eMailNotification))
                                                  {
                                                      ErrorString = "Could not parse e-mail notification!";
                                                      goto fail;
                                                  }
                                                  await AddNotification(httpUser, eMailNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              default:
                                                  goto fail;

                                          }

                                      }

                                  }

                                  goto goon;

                                  #region fail...

                                             fail:

                                             return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                            AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", ErrorString ?? "Invalid array of notifications!")
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             #endregion

                                  goon:

                                  #endregion


                                  return new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode              = HTTPStatusCode.OK,
                                             Server                      = HTTPServer.DefaultServerName,
                                             Date                        = Timestamp.Now,
                                             AccessControlAllowOrigin    = "*",
                                             AccessControlAllowMethods   = new[] { "GET", "SET" },
                                             AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                             ContentType                 = HTTPContentType.JSON_UTF8,
                                             Content                     = GetNotifications(httpUser).ToUTF8Bytes(),
                                             Connection                  = "close"
                                         }.AsImmutable;

                              });

            #endregion

            #region DELETE      ~/users/{UserId}/notifications

            // ---------------------------------------------------------------------------------------------
            // curl -v -X DELETE \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //          }" \
            //      http://127.0.0.1:2000/users/214080158
            // ---------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.DELETE,
                              URLPathPrefix + "users/{UserId}/notifications",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:   DeleteUserNotificationsRequest,
                              HTTPResponseLogger:  DeleteUserNotificationsResponse,
                              HTTPDelegate:        async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadOnly,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUser(this,
                                                         out var userIdURL,
                                                         out var user,
                                                         out httpResponseBuilder))
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion


                                  #region Has the current HTTP user the required access rights to update?

                                  if (userIdURL != httpUser.Id)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "GET", "SET", "CHOWN" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  }

                                  #endregion


                                  #region Parse JSON and new notifications...

                                  if (!Request.TryParseJSONArrayRequestBody(out var jsonArray, out httpResponseBuilder) || jsonArray is null)
                                      return httpResponseBuilder!;

                                  String? ErrorString = null;

                                  if (jsonArray.Count > 0)
                                  {

                                      var jsonObjects = jsonArray.Cast<JObject>().ToArray();

                                      if (!jsonObjects.Any())
                                          goto fail;

                                      String? context = null;

                                      foreach (var jsonObject in jsonObjects)
                                      {

                                          context = jsonObject["@context"]?.Value<String>();

                                          if (context.IsNullOrEmpty())
                                              goto fail;

                                          switch (context)
                                          {

                                              case TelegramNotification.JSONLDContext:
                                                  if (!TelegramNotification.TryParse(jsonObject, out var telegramNotification))
                                                  {
                                                      ErrorString = "Could not parse Telegram notification!";
                                                      goto fail;
                                                  }
                                                  await RemoveNotification(httpUser, telegramNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case TelegramGroupNotification.JSONLDContext:
                                                  if (!TelegramGroupNotification.TryParse(jsonObject, out var telegramGroupNotification))
                                                  {
                                                      ErrorString = "Could not parse Telegram group notification!";
                                                      goto fail;
                                                  }
                                                  await RemoveNotification(httpUser, telegramGroupNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case SMSNotification.JSONLDContext:
                                                  if (!SMSNotification.  TryParse(jsonObject, out var smsNotification))
                                                  {
                                                      ErrorString = "Could not parse sms notification!";
                                                      goto fail;
                                                  }
                                                  await RemoveNotification(httpUser, smsNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case HTTPSNotification.JSONLDContext:
                                                  if (!HTTPSNotification.TryParse(jsonObject, out var httpsNotification))
                                                  {
                                                      ErrorString = "Could not parse https notification!";
                                                      goto fail;
                                                  }
                                                  await RemoveNotification(httpUser, httpsNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case EMailNotification.JSONLDContext:
                                                  if (!EMailNotification.TryParse(jsonObject, out var eMailNotification))
                                                  {
                                                      ErrorString = "Could not parse e-mail notification!";
                                                      goto fail;
                                                  }
                                                  await RemoveNotification(httpUser, eMailNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              default:
                                                  goto fail;

                                          }

                                      }

                                  }

                                  goto goon;

                                  #region fail...

                                             fail:

                                             return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                            AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", ErrorString ?? "Invalid array of notifications!")
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             #endregion

                                  goon:

                                  #endregion


                                  return new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode              = HTTPStatusCode.OK,
                                             Server                      = HTTPServer.DefaultServerName,
                                             Date                        = Timestamp.Now,
                                             AccessControlAllowOrigin    = "*",
                                             AccessControlAllowMethods   = new[] { "GET", "SET" },
                                             AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                             ContentType                 = HTTPContentType.JSON_UTF8,
                                             Content                     = GetNotifications(httpUser).ToUTF8Bytes(),
                                             Connection                  = "close"
                                         }.AsImmutable;

                              });

            #endregion

            #region GET         ~/users/{UserId}/notifications/{notificationId}

            // -------------------------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf/notifications/{notificationId}
            // -------------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "users/{UserId}/notifications/{notificationId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion

                                  #region Get notificationId URL parameter

                                  if (Request.ParsedURLParameters.Length < 2)
                                  {

                                      return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                     Server          = HTTPServer.DefaultServerName,
                                                     Date            = Timestamp.Now,
                                                     Connection      = "close"
                                                 }.AsImmutable);

                                  }

                                  var notificationIdText = Request.ParsedURLParameters[1];

                                  if (notificationIdText is not null &&
                                      UInt32.TryParse(notificationIdText, out var notificationId))
                                  {

                                      return Task.FromResult(new HTTPResponse.Builder(Request) {
                                                                 HTTPStatusCode             = HTTPStatusCode.OK,
                                                                 Server                     = HTTPServer.DefaultServerName,
                                                                 Date                       = Timestamp.Now,
                                                                 AccessControlAllowOrigin   = "*",
                                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                                 ETag                       = "1",
                                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                                 Content                    = GetNotification(httpUser, notificationId).ToUTF8Bytes(),
                                                                 Connection                 = "close",
                                                                 Vary                       = "Accept"
                                                             }.AsImmutable);

                                  }

                                  #endregion


                                  return Task.FromResult(
                                             new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable);

            });

            #endregion


            #region GET         ~/users/{UserId}/APIKeys

            // --------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf/APIKeys
            // --------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "users/{UserId}/APIKeys",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUser(this,
                                                         out var userId,
                                                         out var user,
                                                         out httpResponseBuilder) ||
                                      !userId.HasValue ||
                                       user is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  #region Validate user

                                  if (httpUser.Id != userId && !CanImpersonate(httpUser, user))
                                  {
                                      return Task.FromResult(
                                             new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.Forbidden,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "ADD", "GET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", "This operation is not allowed!")
                                                                              ).ToUTF8Bytes(),
                                                 Connection                 = "close",
                                                 Vary                       = "Accept"
                                             }.AsImmutable);
                                  }

                                  #endregion


                                  return Task.FromResult(new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.OK,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = new[] { "ADD", "GET" },
                                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                             ETag                       = "1",
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = new JArray(
                                                                                              GetAPIKeysForUser(user).
                                                                                              SafeSelect       (apiKey => apiKey.ToJSON(Embedded: false))
                                                                                          ).ToUTF8Bytes(),
                                                             Connection                 = "close",
                                                             Vary                       = "Accept"
                                                         }.AsImmutable);

                              });

            #endregion

            #region ADD         ~/users/{UserId}/APIKeys

            // ---------------------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf/APIKeys
            // ---------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.ADD,
                              URLPathPrefix + "users/{UserId}/APIKeys",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUser(this,
                                                         out var userId,
                                                         out var user,
                                                         out httpResponseBuilder) ||
                                      !userId.HasValue ||
                                       user is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Parse JSON HTTP body...

                                  if (!Request.TryParseJSONObjectRequestBody(out var json, out httpResponseBuilder) || json is null)
                                      return httpResponseBuilder!;

                                  #region Parse APIKey    [mandatory]

                                      if (!APIKey.TryParse(json,
                                                           users.TryGetValue,
                                                           out var apiKey,
                                                           out var errorString) ||
                                          apiKey is null)
                                      {

                                          return new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = new[] { "ADD", "GET" },
                                                     AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                     ContentType                = HTTPContentType.JSON_UTF8,
                                                     Content                    = JSONObject.Create(
                                                                                      new JProperty("description", errorString)
                                                                                  ).ToUTF8Bytes()
                                                 }.AsImmutable;

                                      }

                                      #endregion

                                  #endregion


                                  #region Validate user

                                  if (apiKey.UserId != userId || (httpUser.Id != userId && !CanImpersonate(httpUser, user)))
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.Forbidden,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "ADD", "GET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", "This operation is not allowed!")
                                                                              ).ToUTF8Bytes(),
                                                 Connection                 = "close",
                                                 Vary                       = "Accept"
                                             }.AsImmutable;

                                  }

                                  #endregion


                                  var result = await AddAPIKey(apiKey,
                                                               null,
                                                               Request.EventTrackingId,
                                                               httpUser.Id);

                                  return result is not null

                                             ? new HTTPResponse.Builder(Request) {
                                                       HTTPStatusCode             = HTTPStatusCode.OK,
                                                       Server                     = HTTPServer.DefaultServerName,
                                                       Date                       = Timestamp.Now,
                                                       AccessControlAllowOrigin   = "*",
                                                       AccessControlAllowMethods  = new[] { "ADD", "GET" },
                                                       AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                       ContentType                = HTTPContentType.JSON_UTF8,
                                                       Content                    = apiKey.ToJSON().ToUTF8Bytes(),
                                                       Connection                 = "close",
                                                       Vary                       = "Accept"
                                                   }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                       HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                       Server                     = HTTPServer.DefaultServerName,
                                                       Date                       = Timestamp.Now,
                                                       AccessControlAllowOrigin   = "*",
                                                       AccessControlAllowMethods  = new[] { "ADD", "GET" },
                                                       AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                       ContentType                = HTTPContentType.JSON_UTF8,
                                                       Content                    = JSONObject.Create(
                                                                                        new JProperty("description", errorString)
                                                                                    ).ToUTF8Bytes()
                                                   }.AsImmutable;

                              });

            #endregion

            #region DELETE      ~/users/{UserId}/APIKeys/{APIKeyId}

            // ---------------------------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf/APIKeys/abcdefgh
            // ---------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.DELETE,
                              URLPathPrefix + "users/{UserId}/APIKeys/{APIKeyId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check UserId URL parameter

                                  if (!Request.ParseUser(this,
                                                         out var userId,
                                                         out var user,
                                                         out httpResponseBuilder) ||
                                      !userId.HasValue ||
                                       user is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Get API key

                                  if (Request.ParsedURLParameters.Length < 1)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "DELETE" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", "Missing API key!")
                                                                              ).ToUTF8Bytes(),
                                                 Connection                 = "close",
                                                 Vary                       = "Accept"
                                             };

                                  }

                                  var apiKeyId = APIKey_Id.TryParse(Request.ParsedURLParameters[0]);

                                  if (!apiKeyId.HasValue || apiKeyId.Value.IsNullOrEmpty)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "DELETE" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", "Invalid API key!")
                                                                              ).ToUTF8Bytes(),
                                                 Connection                 = "close",
                                                 Vary                       = "Accept"
                                             };

                                  }

                                  if (!TryGetAPIKey(apiKeyId.Value, out var apiKeyInfo) || apiKeyInfo is null)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "DELETE" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", "Unknown API key!")
                                                                              ).ToUTF8Bytes(),
                                                 Connection                 = "close",
                                                 Vary                       = "Accept"
                                             };

                                  }

                                  #endregion


                                  #region Validate user

                                  if (apiKeyInfo.UserId != userId || (httpUser.Id != userId && !CanImpersonate(httpUser, user)))
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.Forbidden,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "DELETE" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", "This operation is not allowed!")
                                                                              ).ToUTF8Bytes(),
                                                 Connection                 = "close",
                                                 Vary                       = "Accept"
                                             }.AsImmutable;

                                  }

                                  #endregion


                                  await RemoveAPIKey(apiKeyInfo,
                                                     null,
                                                     Request.EventTrackingId,
                                                     httpUser.Id);


                                  return new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode             = HTTPStatusCode.OK,
                                             Server                     = HTTPServer.DefaultServerName,
                                             Date                       = Timestamp.Now,
                                             AccessControlAllowOrigin   = "*",
                                             AccessControlAllowMethods  = new[] { "DELETE" },
                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                             ContentType                = HTTPContentType.JSON_UTF8,
                                             Content                    = apiKeyInfo.ToJSON().ToUTF8Bytes(),
                                             Connection                 = "close",
                                             Vary                       = "Accept"
                                         }.AsImmutable;

                              });

            #endregion

            #endregion

            #region ~/userGroups

            #region GET         ~/userGroups

            // ------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/userGroups
            // ------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "userGroups",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      AccessLevel: Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  var withMetadata           = Request.QueryString.GetBoolean("withMetadata", false);
                                  var matchFilter            = Request.QueryString.CreateStringFilter<IUserGroup>("match",
                                                                                                                  (group, include) => group.Id.ToString().IndexOf(include) >= 0 ||
                                                                                                                                      group.Name.       Matches(include, IgnoreCase: true) ||
                                                                                                                                      group.Description.Matches(include, IgnoreCase: true));

                                  var skip                   = Request.QueryString.GetUInt64 ("skip");
                                  var take                   = Request.QueryString.GetUInt64 ("take");

                                  //var expand                 = Request.QueryString.GetStrings("expand");
                                  //var expandTags             = expand.ContainsIgnoreCase("tags")              ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                  var filteredUserGroups     = userGroups.Values.
                                                                   //Where         (userGroup => userGroup.Id.ToString() != "Admins").
                                                                   Where         (matchFilter).
                                                                   OrderBy       (userGroup => userGroup.Name.FirstText()).
                                                                   ToArray();

                                  var filteredCount          = filteredUserGroups.ULongCount();
                                  var totalCount             = userGroups.        ULongCount();

                                  var JSONResults            = filteredUserGroups.
                                                                   ToJSON(skip,
                                                                          take,
                                                                          true, //Embedded
                                                                          InfoStatus.ShowIdOnly,
                                                                          InfoStatus.ShowIdOnly,
                                                                          InfoStatus.ShowIdOnly,
                                                                          InfoStatus.ShowIdOnly,
                                                                          InfoStatus.ShowIdOnly,
                                                                          GetUserGroupSerializator(Request, httpUser));


                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode                = HTTPStatusCode.OK,
                                          Server                        = HTTPServer.DefaultServerName,
                                          Date                          = Timestamp.Now,
                                          AccessControlAllowOrigin      = "*",
                                          AccessControlAllowMethods     = new[] { "GET", "COUNT", "OPTIONS" },
                                          AccessControlAllowHeaders     = new[] { "Content-Type", "Accept", "Authorization" },
                                          ETag                          = "1",
                                          ContentType                   = HTTPContentType.JSON_UTF8,
                                          Content                       = withMetadata
                                                                              ? JSONObject.Create(
                                                                                    new JProperty("totalCount",     totalCount),
                                                                                    new JProperty("filteredCount",  filteredCount),
                                                                                    new JProperty("userGroups",     JSONResults)
                                                                                ).ToUTF8Bytes()
                                                                              : JSONResults.ToUTF8Bytes(),
                                          X_ExpectedTotalNumberOfItems  = filteredCount,
                                          Connection                    = "close",
                                          Vary                          = "Accept"
                                      }.AsImmutable);

                              });

            #endregion


            #region GET         ~/userGroups/{UserGroupId}

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/userGroups/{UserGroupId}
            // --------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "userGroups/{UserGroupId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      AccessLevel: Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion

                                  #region Check UserGroupId URL parameter

                                  if (!Request.ParseUserGroup(this,
                                                              out var userGroupId,
                                                              out var userGroup,
                                                              out httpResponseBuilder))
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  if (userGroup is null)
                                  {

                                      return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.Unauthorized,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                     AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                     Connection                 = "close"
                                                 }.AsImmutable
                                             );

                                  }


                                  return Task.FromResult(
                                             new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.OK,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                 = HTTPContentType.JSON_UTF8,
                                                 Content                     = userGroup.ToJSON(false).ToUTF8Bytes(),
                                                 Connection                  = "close",
                                                 Vary                        = "Accept"
                                             }.AsImmutable);

                              });

            #endregion

            #endregion


            #region ~/organizations

            #region GET         ~/organizations

            // ---------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/organizations
            // ---------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "organizations",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadOnly,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  var withMetadata            = Request.QueryString.GetBoolean("withMetadata", false);
                                  var includeFilter           = Request.QueryString.CreateStringFilter<IOrganization>("match",
                                                                                                                      (organization, include) => organization.Id.ToString().IndexOf(include)               > 0 ||
                                                                                                                                                 organization.Name.         Matches(include, IgnoreCase: true) ||
                                                                                                                                                 organization.Description.  Matches(include, IgnoreCase: true));

                                  var skip                    = Request.QueryString.GetUInt64 ("skip");
                                  var take                    = Request.QueryString.GetUInt64 ("take");

                                  var includeCryptoHash       = Request.QueryString.GetBoolean("includeCryptoHash", true);

                                  var expand                  = Request.QueryString.GetStrings("expand");
                                  var expandMembers           = expand.ContainsIgnoreCase("members")           ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                  var expandParents           = expand.ContainsIgnoreCase("parents")           ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                  var expandSubOrganizations  = expand.ContainsIgnoreCase("subOrganizations")  ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                  var expandTags              = expand.ContainsIgnoreCase("tags")              ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                  var filteredOrganizations   = httpOrganizations.
                                                                    OrderBy(organization => organization.Name.FirstText()).
                                                                    Where  (includeFilter).
                                                                    ToArray();

                                  var filteredCount           = filteredOrganizations.ULongCount();
                                  var totalCount              = httpOrganizations.ULongCount();

                                  var JSONResults             = filteredOrganizations.
                                                                    ToJSON(skip,
                                                                           take,
                                                                           false, //Embedded
                                                                           expandMembers,
                                                                           expandParents,
                                                                           expandSubOrganizations,
                                                                           expandTags,
                                                                           GetOrganizationSerializator(Request, httpUser),
                                                                           includeCryptoHash);


                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode                 = HTTPStatusCode.OK,
                                          Server                         = HTTPServer.DefaultServerName,
                                          Date                           = Timestamp.Now,
                                          AccessControlAllowOrigin       = "*",
                                          AccessControlAllowMethods      = new[] { "OPTIONS", "GET", "COUNT", "ADD" },
                                          AccessControlAllowHeaders      = new[] { "Content-Type", "Accept", "Authorization" },
                                          ETag                           = "1",
                                          ContentType                    = HTTPContentType.JSON_UTF8,
                                          Content                        = withMetadata
                                                                               ? JSONObject.Create(
                                                                                     new JProperty("totalCount",     totalCount),
                                                                                     new JProperty("filteredCount",  filteredCount),
                                                                                     new JProperty("organizations",  JSONResults)
                                                                                 ).ToUTF8Bytes()
                                                                               : JSONResults.ToUTF8Bytes(),
                                          X_ExpectedTotalNumberOfItems   = filteredCount,
                                          Connection                     = "close",
                                          Vary                           = "Accept"
                                      }.AsImmutable);

                              });

            #endregion


            #region COUNT       ~/organizations

            // ------------------------------------------------------------------------------------
            // curl -v -X COUNT -H "Accept: application/json" http://127.0.0.1:2000/organizations
            // ------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.COUNT,
                              URLPathPrefix + "organizations",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadOnly,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode             = HTTPStatusCode.OK,
                                          Server                     = HTTPServer.DefaultServerName,
                                          Date                       = Timestamp.Now,
                                          AccessControlAllowOrigin   = "*",
                                          AccessControlAllowMethods  = new[] { "OPTIONS", "GET", "COUNT", "ADD" },
                                          AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                          ETag                       = "1",
                                          ContentType                = HTTPContentType.JSON_UTF8,
                                          Content                    = JSONObject.Create(
                                                                           new JProperty("count", httpOrganizations.ULongCount())
                                                                       ).ToUTF8Bytes(),
                                          Connection                 = "close"
                                      }.AsImmutable);

                              });

            #endregion

            #region ADD         ~/organizations

            // ---------------------------------------------------------------------------------------------
            // curl -v -X Add \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //              \"@context\" :             \"https://opendata.social/contexts/UsersAPI/user+json\", \
            //              \"name\" :                 { \"deu\" : \"ACME Inc.\" },\
            //              \"description\" :          { \"deu\" : \"Testing123!\" },\
            //              \"parentOrganization\" :   \"GraphDefined\", \
            //              \"address\" :         { \
            //                                      \"country\" :      \"Germany\",
            //                                      \"postalCode\" :   \"00749\",
            //                                      \"city\" :         { \"deu\": \"Jena\" },
            //                                      \"street\" :       \"Biberweg 18\",
            //                                      \"houseNumber\" :  \"18\",
            //                                      \"floorLevel\" :   \"2\"
            //                                    }, \
            //              \"privacyLevel\" :    \"World\" \
            //          }" \
            //      http://127.0.0.1:2000/organizations
            // ---------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.ADD,
                              URLPathPrefix + "organizations",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:  AddOrganizationHTTPRequest,
                              HTTPResponseLogger: AddOrganizationHTTPResponse,
                              HTTPDelegate:       async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Parse JSON and create the new child organization...

                                  if (!Request.TryParseJSONObjectRequestBody(out var json, out httpResponseBuilder) || json is null)
                                      return httpResponseBuilder!;

                                  #region Parse new organization

                                  if (!Organization.TryParseJSON(json,
                                                                 out var newOrganization,
                                                                 out var errorResponse,
                                                                 OrganizationIdURL:  Organization_Id.Random()) || newOrganization is null)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.BadRequest,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "OPTIONS", "GET", "COUNT", "ADD" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                 = HTTPContentType.JSON_UTF8,
                                                 Content                     = JSONObject.Create(
                                                                                   new JProperty("description", errorResponse)
                                                                               ).ToUTF8Bytes(),
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  }

                                  #endregion

                                  #region Parse parent organization

                                  if (!json.ParseMandatory("parentOrganization",
                                                           "parent organization",
                                                           Organization_Id.TryParse,
                                                           out Organization_Id parentOrganizationId,
                                                           out errorResponse))
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.BadRequest,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "OPTIONS", "GET", "COUNT", "ADD" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                 = HTTPContentType.JSON_UTF8,
                                                 Content                     = JSONObject.Create(
                                                                                   new JProperty("description", errorResponse)
                                                                               ).ToUTF8Bytes(),
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  }

                                  if (!organizations.TryGetValue(parentOrganizationId, out var parentOrganization) || parentOrganization is null)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                              HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                              Server                     = HTTPServer.DefaultServerName,
                                              Date                       = Timestamp.Now,
                                              AccessControlAllowOrigin   = "*",
                                              AccessControlAllowMethods  = new[] { "OPTIONS", "GET", "COUNT", "ADD" },
                                              AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                              ContentType                = HTTPContentType.JSON_UTF8,
                                              Content                    = JSONObject.Create(
                                                                               new JProperty("description",  "Unknown parent organization!")
                                                                           ).ToUTF8Bytes(),
                                              Connection                 = "close"
                                          }.AsImmutable;

                                  }

                                  #endregion

                                  #endregion


                                  var result = await AddOrganization(newOrganization,
                                                                     parentOrganization,
                                                                     EventTrackingId: Request.EventTrackingId,
                                                                     CurrentUserId:   httpUser.Id);


                                  return result.Result == CommandResult.Success

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.Created,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "OPTIONS", "GET", "COUNT", "ADD" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                 = HTTPContentType.JSON_UTF8,
                                                   Content                     = result.Organization.ToJSON(false).ToUTF8Bytes(),
                                                   Connection                  = "close"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.BadRequest,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "OPTIONS", "GET", "COUNT", "ADD" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                 = HTTPContentType.JSON_UTF8,
                                                   Content                     = result.ToJSON().ToUTF8Bytes(),
                                                   Connection                  = "close"
                                               }.AsImmutable;

                              });

            #endregion


            #region GET         ~/organizations/{OrganizationId}

            // -------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/organizations/214080158
            // -------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "organizations/{OrganizationId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadOnly,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var organizationId,
                                                                 out var organization,
                                                                 out httpResponseBuilder) ||
                                      !organizationId.HasValue ||
                                       organization is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  var showMgt                 = Request.QueryString.GetBoolean("showMgt", false);

                                  var expand                  = Request.QueryString.GetStrings("expand");
                                  var expandMembers           = expand.ContainsIgnoreCase("members")           ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                  var expandParents           = expand.ContainsIgnoreCase("parents")           ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                  var expandSubOrganizations  = expand.ContainsIgnoreCase("subOrganizations")  ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                  var expandTags              = expand.ContainsIgnoreCase("tags")              ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                  var includeCryptoHash       = Request.QueryString.GetBoolean("includeCryptoHash", true);

                                  return Task.FromResult(
                                             (//Organization.PrivacyLevel == PrivacyLevel.Private &&
                                              !httpOrganizations.Contains(organization))

                                                 ? new HTTPResponse.Builder(Request) {
                                                       HTTPStatusCode             = HTTPStatusCode.Unauthorized,
                                                       Server                     = HTTPServer.DefaultServerName,
                                                       Date                       = Timestamp.Now,
                                                       AccessControlAllowOrigin   = "*",
                                                       AccessControlAllowMethods  = new[] { "GET", "EXISTS" },
                                                       AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                       Connection                 = "close"
                                                   }.AsImmutable

                                                 : new HTTPResponse.Builder(Request) {
                                                       HTTPStatusCode             = HTTPStatusCode.OK,
                                                       Server                     = HTTPServer.DefaultServerName,
                                                       Date                       = Timestamp.Now,
                                                       AccessControlAllowOrigin   = "*",
                                                       AccessControlAllowMethods  = new[] { "GET", "EXISTS" },
                                                       AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                       ContentType                = HTTPContentType.JSON_UTF8,
                                                       Content                    = (showMgt == true
                                                                                         ? new OrganizationInfo2(organization,
                                                                                                                 httpUser).ToJSON(false,
                                                                                                                                  expandMembers,
                                                                                                                                  expandParents,
                                                                                                                                  expandSubOrganizations,
                                                                                                                                  expandTags,
                                                                                                                                  includeCryptoHash)
                                                                                         : organization.ToJSON(false,
                                                                                                               expandMembers,
                                                                                                               expandParents,
                                                                                                               expandSubOrganizations,
                                                                                                               expandTags,
                                                                                                               includeCryptoHash)).ToUTF8Bytes(),
                                                       Connection                 = "close",
                                                       Vary                       = "Accept"
                                                   }.AsImmutable);

                              });

            #endregion

            #region EXISTS      ~/organizations/{OrganizationId}

            // ---------------------------------------------------------
            // curl -v -X EXISTS http://127.0.0.1:2000/organizations/7
            // ---------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.EXISTS,
                              URLPathPrefix + "organizations/{OrganizationId}",
                              HTTPDelegate: Request => {

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadOnly,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var organizationId,
                                                                 out var organization,
                                                                 out httpResponseBuilder) ||
                                      !organizationId.HasValue ||
                                       organization is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  return Task.FromResult(
                                             new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = new[] { "GET", "EXISTS" },
                                                     AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                     Connection                 = "close"
                                                 }.AsImmutable);

                              });

            #endregion

            #region ADD         ~/organizations/{organizationId}

            // ---------------------------------------------------------------------------------------------
            // curl -v -X ADD \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //             \"@id\":                             \"testOrg2\",
            //             \"@context\":                        \"https://opendata.social/contexts/UsersAPI+json/organization\",
            //             \"parentOrganization\":              \"testOrg1\",
            //             \"name\":                            { \"en\": \"Test Org #2\" },
            //             \"admins\": [{
            //                 \"@id\":       \"ahzf\",
            //                 \"@context\":  \"https://opendata.social/contexts/UsersAPI/user+json\",
            //                 \"name\":      \"Achim Friedland\",
            //                 \"email\":     \"nospam@graphdefined.com\",
            //             }],
            //             \"members\":                         [],
            //             \"youAreMember\":                    true,
            //             \"youCanAddMembers\":                true,
            //             \"youCanCreateChildOrganizations\":  true,
            //             \"childs\":                          []
            //          }" \
            //      http://127.0.0.1:2000/organizations/214080158
            // ---------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.ADD,
                              URLPathPrefix + "organizations/{organizationId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:  AddOrganizationHTTPRequest,
                              HTTPResponseLogger: AddOrganizationHTTPResponse,
                              HTTPDelegate:       async Request => {

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganizationId(this,
                                                                   out var organizationIdURL,
                                                                   out httpResponseBuilder) ||
                                      !organizationIdURL.HasValue)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion


                                  #region Parse JSON and create the new child organization...

                                  if (!Request.TryParseJSONObjectRequestBody(out var json, out httpResponseBuilder) || json is null)
                                      return httpResponseBuilder!;

                                  #region Parse new child organization

                                  if (!Organization.TryParseJSON(json,
                                                                 out var newChildOrganization,
                                                                 out var errorResponse,
                                                                 organizationIdURL) || newChildOrganization is null)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                             Server                     = HTTPServer.DefaultServerName,
                                             Date                       = Timestamp.Now,
                                             AccessControlAllowOrigin   = "*",
                                             AccessControlAllowMethods  = new[] { "GET", "SET" },
                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                             ContentType                = HTTPContentType.JSON_UTF8,
                                             Content                    = JSONObject.Create(
                                                                              new JProperty("description",  $"Could not parse the given child organization data: {errorResponse}")
                                                                          ).ToUTF8Bytes()
                                         }.AsImmutable;

                                  }

                                  #endregion

                                  #region Parse parent organization

                                  if (!json.ParseMandatory("parentOrganization",
                                                           "parent organization",
                                                           Organization_Id.TryParse,
                                                           out Organization_Id parentOrganizationId,
                                                           out errorResponse))
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description",  $"Invalid parent organization identification '{json["parentOrganization"]}'!")
                                                                              ).ToUTF8Bytes()
                                             }.AsImmutable;

                                  }

                                  if (!_TryGetOrganization(parentOrganizationId, out var parentOrganization) || parentOrganization is null)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description",  $"Unknown parent organization '{parentOrganizationId}'!")
                                                                              ).ToUTF8Bytes()
                                             }.AsImmutable;

                                  }

                                  #endregion

                                  #region Parse admins

                                  if (!json.ParseMandatory("admins",
                                                           "organization admins",
                                                           out JArray AdminsJSON,
                                                           out errorResponse))
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description",  "Invalid organization admins!")
                                                                              ).ToUTF8Bytes()
                                             }.AsImmutable;

                                  }

                                  #endregion

                                  #region Validate admins

                                  IUser? Admin    = null;
                                  var Admins      = new List<IUser>();
                                  var AdminNames  = AdminsJSON.Select(admin => admin as JObject).
                                                               Where(admin => admin != null).
                                                               Select(admin => User_Id.TryParse(admin["@id"].Value<String>())).
                                                               ToArray();

                                  foreach (var admin in AdminNames)
                                  {

                                      if (!admin.HasValue)
                                      {

                                          return new HTTPResponse.Builder(Request) {
                                                  HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                  Server                     = HTTPServer.DefaultServerName,
                                                  Date                       = Timestamp.Now,
                                                  AccessControlAllowOrigin   = "*",
                                                  AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                  AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                  ContentType                = HTTPContentType.JSON_UTF8,
                                                  Content                    = JSONObject.Create(
                                                                                      new JProperty("description",  "Invalid admin user '" + admin.Value  + "'!")
                                                                                  ).ToUTF8Bytes()
                                              }.AsImmutable;

                                      }

                                      Admin = GetUser(admin.Value);

                                      if (Admin == null)
                                      {

                                          return new HTTPResponse.Builder(Request) {
                                                  HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                  Server                     = HTTPServer.DefaultServerName,
                                                  Date                       = Timestamp.Now,
                                                  AccessControlAllowOrigin   = "*",
                                                  AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                  AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                  ContentType                = HTTPContentType.JSON_UTF8,
                                                  Content                    = JSONObject.Create(
                                                                                      new JProperty("description",  "Unknown admin user '" + admin.Value + "'!")
                                                                                  ).ToUTF8Bytes()
                                              }.AsImmutable;

                                      }

                                      Admins.Add(Admin);

                                  }

                                  #endregion

                                  #endregion


                                  var result = await AddOrganization(newChildOrganization,
                                                                     parentOrganization,
                                                                     async (_organization, _eventTrackingId) => {

                                                                         foreach (var admin in Admins)
                                                                             await addUserToOrganization(admin,
                                                                                                         User2OrganizationEdgeLabel.IsAdmin,
                                                                                                         _organization);

                                                                     },
                                                                     Request.EventTrackingId,
                                                                     httpUser.Id);

                                  return new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode              = HTTPStatusCode.Created,
                                          Server                      = HTTPServer.DefaultServerName,
                                          Date                        = Timestamp.Now,
                                          AccessControlAllowOrigin    = "*",
                                          AccessControlAllowMethods   = new[] { "GET", "SET" },
                                          AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                          Connection                  = "close"
                                      }.AsImmutable;

                              });

            #endregion

            #region SET         ~/organizations/{organizationId}

            // ---------------------------------------------------------------------------------------------
            // curl -v -X SET \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //              \"@id\" :             \"214080158\", \
            //              \"@context\" :        \"https://opendata.social/contexts/UsersAPI+json/organization\", \
            //              \"description\" :     { \"deu\" : \"Test AED in Erlangen Raum Yavin 4\" },\
            //              \"address\" :         { \
            //                                      \"country\" :      \"Germany\",
            //                                      \"postalCode\" :   \"91052\",
            //                                      \"city\" :         { \"deu\": \"Erlangen\" },
            //                                      \"street\" :       \"Henkestraße\",
            //                                      \"houseNumber\" :  \"91\",
            //                                      \"floorLevel\" :   \"1\"
            //                                    }, \
            //              \"geoLocation\" :     { \"lat\": 49.594760, \"lng\": 11.019356 }, \
            //              \"privacyLevel\" :    \"Public\" \
            //          }" \
            //      http://127.0.0.1:2000/organizations/214080158
            // ---------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.SET,
                              URLPathPrefix + "organizations/{organizationId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:  SetOrganizationHTTPRequest,
                              HTTPResponseLogger: SetOrganizationHTTPResponse,
                              HTTPDelegate:       async Request => {

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var organizationIdURL,
                                                                 out var organization,
                                                                 out httpResponseBuilder) ||
                                      !organizationIdURL.HasValue ||
                                       organization is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion


                                  #region The organization exists, but the given user is not an admin!

                                  if (organization is not null && !httpOrganizations.Contains(organization))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "GET", "SET", "CHOWN" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  #endregion


                                  #region Parse JSON and create the new child organization...

                                  if (!Request.TryParseJSONObjectRequestBody(out var json, out httpResponseBuilder) || json is null)
                                      return httpResponseBuilder!;

                                  #region Parse updated organization

                                  if (!HTTP.Organization.TryParseJSON(json,
                                                                      out var updatedOrganization,
                                                                      out var errorResponse,
                                                                      organizationIdURL) || updatedOrganization is null)
                                  {

                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description",  $"Could not parse the given organization: {errorResponse}")
                                                                              ).ToUTF8Bytes()
                                             }.AsImmutable;

                                  }

                                  #endregion

                                  #endregion


                                  var result = await UpdateOrganization(updatedOrganization,
                                                                        EventTrackingId: Request.EventTrackingId,
                                                                        CurrentUserId:   httpUser.Id);


                                  return result.Result == CommandResult.Success

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.Created,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "GET", "SET" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                 = HTTPContentType.JSON_UTF8,
                                                   Content                     = updatedOrganization.ToJSON().ToUTF8Bytes(),
                                                   Connection                  = "close"
                                               }

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.BadRequest,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "GET", "SET" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                 = HTTPContentType.JSON_UTF8,
                                                   Content                     = JSONObject.Create(
                                                                                     new JProperty("description",  "Could not parse the given child organization data!")
                                                                                 ).ToUTF8Bytes()
                                               };

                              });

            #endregion

            #region DELETE      ~/organizations/{organizationId}

            // ---------------------------------------------------------------------------------------------
            // curl -v -X DELETE \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      http://127.0.0.1:2000/organizations/214080158
            // ---------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.DELETE,
                              URLPathPrefix + "organizations/{organizationId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:  DeleteOrganizationHTTPRequest,
                              HTTPResponseLogger: DeleteOrganizationHTTPResponse,
                              HTTPDelegate:       async Request => {

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var organizationIdURL,
                                                                 out var organization,
                                                                 out httpResponseBuilder) ||
                                      !organizationIdURL.HasValue ||
                                       organization is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion


                                  #region Check access rights

                                  if (!httpOrganizations.Contains(organization))
                                      return new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.Unauthorized,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = new[] { "GET", "SET", "DELETE" },
                                                     AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                     ContentType                = HTTPContentType.JSON_UTF8,
                                                     Content                    = JSONObject.Create(
                                                                                      new JProperty("description",  "Unknown parent organization!")
                                                                                  ).ToUTF8Bytes()
                                                 }.AsImmutable;

                                  #endregion

                                  //ToDo: Check admin!


                                  var result = await DeleteOrganization(organization,
                                                                        EventTrackingId: Request.EventTrackingId,
                                                                        CurrentUserId:   httpUser.Id);


                                  return result.Result == CommandResult.Success

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.OK,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "GET", "SET" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.FailedDependency,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "GET", "SET" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   ContentType                 = HTTPContentType.JSON_UTF8,
                                                   Content                     = JSONObject.Create(
                                                                                     new JProperty("errorDescription",  result.Description.ToJSON())
                                                                                 ).ToUTF8Bytes(),
                                                   Connection                  = "close"
                                               }.AsImmutable;

                              });

            #endregion


            #region ADD         ~/organizations/{OrganizationId}/admins/{UserId}

            // -----------------------------------------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/admins/ahzf
            // -----------------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.ADD,
                              URLPathPrefix + "organizations/{OrganizationId}/admins/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var HTTPUser,
                                                      out var HTTPOrganizations,
                                                      out var Response,
                                                      Access_Levels.Admin,
                                                      Recursive: true))
                                  {
                                      return Response.AsImmutable;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var OrganizationId,
                                                                 out var Organization,
                                                                 out var HTTPResponse))
                                  {
                                      return HTTPResponse.AsImmutable;
                                  }

                                  #endregion

                                  #region Get UserId URL parameter

                                  if (Request.ParsedURLParameters.Length < 2)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                  if (!userId.HasValue)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  if (!TryGetUser(userId.Value, out var user))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion


                                  var result = await AddUserToOrganization(user,
                                                                           User2OrganizationEdgeLabel.IsAdmin,
                                                                           Organization);


                                  return result?.IsSuccess == true

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.OK,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close",
                                                   Vary                        = "Accept"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close"
                                               }.AsImmutable;

                              });

            #endregion

            #region ADD         ~/organizations/{OrganizationId}/members/{UserId}

            // ------------------------------------------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/members/ahzf
            // ------------------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.ADD,
                              URLPathPrefix + "organizations/{OrganizationId}/members/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var HTTPUser,
                                                      out var HTTPOrganizations,
                                                      out var Response,
                                                      Access_Levels.Admin,
                                                      Recursive: true))
                                  {
                                      return Response.AsImmutable;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var OrganizationId,
                                                                 out var Organization,
                                                                 out var HTTPResponse))
                                  {
                                      return HTTPResponse.AsImmutable;
                                  }

                                  #endregion

                                  #region Get UserId URL parameter

                                  if (Request.ParsedURLParameters.Length < 2)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                  if (!userId.HasValue)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  if (!TryGetUser(userId.Value, out var user))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion


                                  var result = await AddUserToOrganization(user,
                                                                           User2OrganizationEdgeLabel.IsMember,
                                                                           Organization);


                                  return result?.IsSuccess == true

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.OK,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close",
                                                   Vary                        = "Accept"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close"
                                               }.AsImmutable;

                              });

            #endregion

            #region ADD         ~/organizations/{OrganizationId}/guests/{UserId}

            // -----------------------------------------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/guests/ahzf
            // -----------------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.ADD,
                              URLPathPrefix + "organizations/{OrganizationId}/guests/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var HTTPUser,
                                                      out var HTTPOrganizations,
                                                      out var Response,
                                                      Access_Levels.Admin,
                                                      Recursive: true))
                                  {
                                      return Response.AsImmutable;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var OrganizationId,
                                                                 out var Organization,
                                                                 out var HTTPResponse))
                                  {
                                      return HTTPResponse.AsImmutable;
                                  }

                                  #endregion

                                  #region Get UserId URL parameter

                                  if (Request.ParsedURLParameters.Length < 2)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                  if (!userId.HasValue)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  if (!TryGetUser(userId.Value, out var user))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion


                                  var result = await AddUserToOrganization(user,
                                                                           User2OrganizationEdgeLabel.IsGuest,
                                                                           Organization);


                                  return result?.IsSuccess == true

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.OK,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close",
                                                   Vary                        = "Accept"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close"
                                               }.AsImmutable;

                              });

            #endregion

            #region DELETE      ~/organizations/{OrganizationId}/_all/{UserId}

            // ------------------------------------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/_all/ahzf
            // ------------------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.DELETE,
                              URLPathPrefix + "organizations/{OrganizationId}/_all/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var HTTPUser,
                                                      out var HTTPOrganizations,
                                                      out var Response,
                                                      Access_Levels.Admin,
                                                      Recursive: true))
                                  {
                                      return Response.AsImmutable;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var OrganizationId,
                                                                 out var Organization,
                                                                 out var HTTPResponse))
                                  {
                                      return HTTPResponse.AsImmutable;
                                  }

                                  #endregion

                                  #region Get UserId URL parameter

                                  if (Request.ParsedURLParameters.Length < 2)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                  if (!userId.HasValue)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  if (!TryGetUser(userId.Value, out var user))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion


                                  var result = await RemoveUserFromOrganization(user,
                                                                                Organization);


                                  return result?.IsSuccess == true

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.OK,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close",
                                                   Vary                        = "Accept"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close"
                                               }.AsImmutable;

                              });

            #endregion

            #region DELETE      ~/organizations/{OrganizationId}/admins/{UserId}

            // --------------------------------------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/admins/ahzf
            // --------------------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.DELETE,
                              URLPathPrefix + "organizations/{OrganizationId}/admins/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var HTTPUser,
                                                      out var HTTPOrganizations,
                                                      out var Response,
                                                      Access_Levels.Admin,
                                                      Recursive: true))
                                  {
                                      return Response.AsImmutable;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var OrganizationId,
                                                                 out var Organization,
                                                                 out var HTTPResponse))
                                  {
                                      return HTTPResponse.AsImmutable;
                                  }

                                  #endregion

                                  #region Get UserId URL parameter

                                  if (Request.ParsedURLParameters.Length < 2)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                  if (!userId.HasValue)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  if (!TryGetUser(userId.Value, out var user))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion


                                  var result = await RemoveUserFromOrganization(user,
                                                                                User2OrganizationEdgeLabel.IsAdmin,
                                                                                Organization);


                                  return result?.IsSuccess == true

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.OK,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close",
                                                   Vary                        = "Accept"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close"
                                               }.AsImmutable;

                              });

            #endregion

            #region DELETE      ~/organizations/{OrganizationId}/members/{UserId}

            // ---------------------------------------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/members/ahzf
            // ---------------------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.DELETE,
                              URLPathPrefix + "organizations/{OrganizationId}/members/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var HTTPUser,
                                                      out var HTTPOrganizations,
                                                      out var Response,
                                                      Access_Levels.Admin,
                                                      Recursive: true))
                                  {
                                      return Response.AsImmutable;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var OrganizationId,
                                                                 out var Organization,
                                                                 out var HTTPResponse))
                                  {
                                      return HTTPResponse.AsImmutable;
                                  }

                                  #endregion

                                  #region Get UserId URL parameter

                                  if (Request.ParsedURLParameters.Length < 2)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                  if (!userId.HasValue)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  if (!TryGetUser(userId.Value, out var user))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion


                                  var result = await RemoveUserFromOrganization(user,
                                                                                User2OrganizationEdgeLabel.IsMember,
                                                                                Organization);


                                  return result?.IsSuccess == true

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.OK,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close",
                                                   Vary                        = "Accept"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close"
                                               }.AsImmutable;

                              });

            #endregion

            #region DELETE      ~/organizations/{OrganizationId}/guests/{UserId}

            // --------------------------------------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/guests/ahzf
            // --------------------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.DELETE,
                              URLPathPrefix + "organizations/{OrganizationId}/guests/{UserId}",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var HTTPUser,
                                                      out var HTTPOrganizations,
                                                      out var Response,
                                                      Access_Levels.Admin,
                                                      Recursive: true))
                                  {
                                      return Response.AsImmutable;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var OrganizationId,
                                                                 out var Organization,
                                                                 out var HTTPResponse))
                                  {
                                      return HTTPResponse.AsImmutable;
                                  }

                                  #endregion

                                  #region Get UserId URL parameter

                                  if (Request.ParsedURLParameters.Length < 2)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                  if (!userId.HasValue)
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  if (!TryGetUser(userId.Value, out var user))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                 Server          = HTTPServer.DefaultServerName,
                                                 Date            = Timestamp.Now,
                                                 Connection      = "close"
                                             }.AsImmutable;

                                  #endregion


                                  var result = await RemoveUserFromOrganization(user,
                                                                                User2OrganizationEdgeLabel.IsGuest,
                                                                                Organization);


                                  return result?.IsSuccess == true

                                             ? new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.OK,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close",
                                                   Vary                        = "Accept"
                                               }.AsImmutable

                                             : new HTTPResponse.Builder(Request) {
                                                   HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                   Server                      = HTTPServer.DefaultServerName,
                                                   Date                        = Timestamp.Now,
                                                   AccessControlAllowOrigin    = "*",
                                                   AccessControlAllowMethods   = new[] { "ADD", "DELETE" },
                                                   AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                   Connection                  = "close"
                                               }.AsImmutable;

                              });

            #endregion


            #region GET         ~/organizations/{OrganizationId}/notifications

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/organizations/ahzf/notifications
            // --------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "organizations/{OrganizationId}/notifications",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadOnly,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var organizationId,
                                                                 out var organization,
                                                                 out httpResponseBuilder) ||
                                      !organizationId.HasValue ||
                                       organization is null)
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  return Task.FromResult(new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode             = HTTPStatusCode.OK,
                                             Server                     = HTTPServer.DefaultServerName,
                                             Date                       = Timestamp.Now,
                                             AccessControlAllowOrigin   = "*",
                                             AccessControlAllowMethods  = new[] { "GET", "SET" },
                                             AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                             ETag                       = "1",
                                             ContentType                = HTTPContentType.JSON_UTF8,
                                             Content                    = GetNotifications(organization).ToUTF8Bytes(),
                                             Connection                 = "close"
                                         }.AsImmutable);

            });

            #endregion

            #region SET         ~/organizations/{OrganizationId}/notifications

            // ---------------------------------------------------------------------------------------------
            // curl -v -X SET \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //          }" \
            //      http://127.0.0.1:2000/organizations/214080158
            // ---------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.SET,
                              URLPathPrefix + "organizations/{OrganizationId}/notifications",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:   SetOrganizationNotificationsRequest,
                              HTTPResponseLogger:  SetOrganizationNotificationsResponse,
                              HTTPDelegate:        async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var organizationId,
                                                                 out var organization,
                                                                 out httpResponseBuilder) ||
                                      !organizationId.HasValue ||
                                       organization is null)
                                  {
                                      return httpResponseBuilder!;
                                  }

                                  #endregion


                                  #region Has the current HTTP user the required access rights to update?

                                  if (!httpOrganizations.Contains(organization))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "GET", "SET", "CHOWN" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  #endregion


                                  #region Parse JSON and new notifications...

                                  if (!Request.TryParseJSONArrayRequestBody(out var jsonArray, out httpResponseBuilder) || jsonArray is null)
                                      return httpResponseBuilder!;

                                  String? errorString = null;

                                  if (jsonArray.Count > 0)
                                  {

                                      var jsonObjects = jsonArray.Cast<JObject>().ToArray();

                                      if (!jsonObjects.Any())
                                          goto fail;

                                      String? context = null;

                                      foreach (var jsonObject in jsonObjects)
                                      {

                                          context = jsonObject["@context"]?.Value<String>();

                                          if (context.IsNullOrEmpty())
                                              goto fail;

                                          switch (context)
                                          {

                                              case TelegramNotification.JSONLDContext:
                                                  if (!TelegramNotification.TryParse(jsonObject, out var telegramNotification))
                                                  {
                                                      errorString = "Could not parse Telegram notification!";
                                                      goto fail;
                                                  }
                                                  await AddNotification(organization, telegramNotification,      Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case TelegramGroupNotification.JSONLDContext:
                                                  if (!TelegramGroupNotification.TryParse(jsonObject, out var telegramGroupNotification))
                                                  {
                                                      errorString = "Could not parse Telegram group notification!";
                                                      goto fail;
                                                  }
                                                  await AddNotification(organization, telegramGroupNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case SMSNotification.JSONLDContext:
                                                  if (!SMSNotification.TryParse(jsonObject, out var smsNotification))
                                                  {
                                                      errorString = "Could not parse sms notification!";
                                                      goto fail;
                                                  }
                                                  await AddNotification(organization, smsNotification,           Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case HTTPSNotification.JSONLDContext:
                                                  if (!HTTPSNotification.TryParse(jsonObject, out var httpsNotification))
                                                  {
                                                      errorString = "Could not parse https notification!";
                                                      goto fail;
                                                  }
                                                  await AddNotification(organization, httpsNotification,         Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case EMailNotification.JSONLDContext:
                                                  if (!EMailNotification.TryParse(jsonObject, out var eMailNotification))
                                                  {
                                                      errorString = "Could not parse e-mail notification!";
                                                      goto fail;
                                                  }
                                                  await AddNotification(organization, eMailNotification,         Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              default:
                                                  goto fail;

                                          }

                                      }

                                  }

                                  goto goon;

                                  #region fail...

                                  fail:

                                  return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ETag                       = "1",
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", errorString ?? "Invalid array of notifications!")
                                                                              ).ToUTF8Bytes()
                                             }.AsImmutable;

                                  #endregion

                                  goon:

                                  #endregion


                                  return new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode              = HTTPStatusCode.OK,
                                             Server                      = HTTPServer.DefaultServerName,
                                             Date                        = Timestamp.Now,
                                             AccessControlAllowOrigin    = "*",
                                             AccessControlAllowMethods   = new[] { "GET", "SET" },
                                             AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                             ContentType                 = HTTPContentType.JSON_UTF8,
                                             Content                     = GetNotifications(organization).ToUTF8Bytes(),
                                             Connection                  = "close"
                                         }.AsImmutable;

                              });

            #endregion

            #region DELETE      ~/organizations/{OrganizationId}/notifications

            // ---------------------------------------------------------------------------------------------
            // curl -v -X DELETE \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //          }" \
            //      http://127.0.0.1:2000/organizations/214080158
            // ---------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.DELETE,
                              URLPathPrefix + "organizations/{OrganizationId}/notifications",
                              HTTPContentType.JSON_UTF8,
                              HTTPRequestLogger:   DeleteOrganizationNotificationsRequest,
                              HTTPResponseLogger:  DeleteOrganizationNotificationsResponse,
                              HTTPDelegate:        async Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuidler,
                                                      Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return httpResponseBuidler!;
                                  }

                                  #endregion

                                  #region Check OrganizationId URL parameter

                                  if (!Request.ParseOrganization(this,
                                                                 out var organizationId,
                                                                 out var organization,
                                                                 out httpResponseBuidler) || organization is null)
                                  {
                                      return httpResponseBuidler!;
                                  }

                                  #endregion


                                  #region Has the current HTTP user the required access rights to delete?

                                  if (!httpOrganizations.Contains(organization))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                 Server                      = HTTPServer.DefaultServerName,
                                                 Date                        = Timestamp.Now,
                                                 AccessControlAllowOrigin    = "*",
                                                 AccessControlAllowMethods   = new[] { "GET", "SET", "CHOWN" },
                                                 AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                                 Connection                  = "close"
                                             }.AsImmutable;

                                  #endregion


                                  #region Parse JSON and new notifications...

                                  if (!Request.TryParseJSONArrayRequestBody(out var jsonArray, out httpResponseBuidler) || jsonArray is null)
                                      return httpResponseBuidler!;

                                  String? errorString = null;

                                  if (jsonArray.Count > 0)
                                  {

                                      var jsonObjects = jsonArray.Cast<JObject>().ToArray();

                                      if (!jsonObjects.Any())
                                          goto fail;

                                      String? context = null;

                                      foreach (var jsonObject in jsonObjects)
                                      {

                                          context = jsonObject["@context"]?.Value<String>();

                                          if (context.IsNullOrEmpty())
                                              goto fail;

                                          switch (context)
                                          {

                                              case TelegramNotification.JSONLDContext:
                                                  if (!TelegramNotification.TryParse(jsonObject, out var telegramNotification))
                                                  {
                                                      errorString = "Could not parse Telegram notification!";
                                                      goto fail;
                                                  }
                                                  await RemoveNotification(organization, telegramNotification,      Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case TelegramGroupNotification.JSONLDContext:
                                                  if (!TelegramGroupNotification.TryParse(jsonObject, out var telegramGroupNotification))
                                                  {
                                                      errorString = "Could not parse Telegram group notification!";
                                                      goto fail;
                                                  }
                                                  await RemoveNotification(organization, telegramGroupNotification, Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case SMSNotification.JSONLDContext:
                                                  if (!SMSNotification.  TryParse(jsonObject, out var smsNotification))
                                                  {
                                                      errorString = "Could not parse sms notification!";
                                                      goto fail;
                                                  }
                                                  await RemoveNotification(organization, smsNotification,           Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case HTTPSNotification.JSONLDContext:
                                                  if (!HTTPSNotification.TryParse(jsonObject, out var httpsNotification))
                                                  {
                                                      errorString = "Could not parse https notification!";
                                                      goto fail;
                                                  }
                                                  await RemoveNotification(organization, httpsNotification,         Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              case EMailNotification.JSONLDContext:
                                                  if (!EMailNotification.TryParse(jsonObject, out var eMailNotification))
                                                  {
                                                      errorString = "Could not parse e-mail notification!";
                                                      goto fail;
                                                  }
                                                  await RemoveNotification(organization, eMailNotification,         Request.EventTrackingId, httpUser.Id);
                                                  break;

                                              default:
                                                  goto fail;

                                          }

                                      }

                                  }

                                  goto goon;

                                  #region fail...

                                  fail:

                                  return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ETag                       = "1",
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("description", errorString ?? "Invalid array of notifications!")
                                                                              ).ToUTF8Bytes()
                                             }.AsImmutable;

                                  #endregion

                                  goon:

                                  #endregion


                                  return new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode              = HTTPStatusCode.OK,
                                             Server                      = HTTPServer.DefaultServerName,
                                             Date                        = Timestamp.Now,
                                             AccessControlAllowOrigin    = "*",
                                             AccessControlAllowMethods   = new[] { "GET", "SET" },
                                             AccessControlAllowHeaders   = new[] { "Content-Type", "Accept", "Authorization" },
                                             ContentType                 = HTTPContentType.JSON_UTF8,
                                             Content                     = GetNotifications(organization).ToUTF8Bytes(),
                                             Connection                  = "close"
                                         }.AsImmutable;

                              });

            #endregion

            #endregion

            #region ~/organizationGroups

            #region GET         ~/organizationGroups

            // --------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/organizationGroups
            // --------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "organizationGroups",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.ReadWrite,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  var withMetadata           = Request.QueryString.GetBoolean("withMetadata", false);
                                  var includeFilter          = Request.QueryString.CreateStringFilter<OrganizationGroup>("match",
                                                                                                                         (group, include) => group.Id.ToString().IndexOf(include) >= 0 ||
                                                                                                                                             group.Name.       Matches(include, IgnoreCase: true) ||
                                                                                                                                             group.Description.Matches(include, IgnoreCase: true));

                                  var skip                   = Request.QueryString.GetUInt64 ("skip");
                                  var take                   = Request.QueryString.GetUInt64 ("take");

                                  var expand                 = Request.QueryString.GetStrings("expand");
                                  //var expandTags             = expand.ContainsIgnoreCase("tags")              ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                  var filteredGroups         = organizationGroups.Values.
                                                                   Where         (includeFilter).
                                                                   OrderBy       (organization => organization.Name).
                                                                   ToArray();

                                  var filteredCount          = filteredGroups.    ULongCount();
                                  var totalCount             = organizationGroups.ULongCount();

                                  var jsonResults            = filteredGroups.
                                                                   ToJSON(skip,
                                                                          take,
                                                                          false, //Embedded
                                                                          InfoStatus.ShowIdOnly,
                                                                          InfoStatus.ShowIdOnly,
                                                                          InfoStatus.ShowIdOnly,
                                                                          InfoStatus.ShowIdOnly,
                                                                          InfoStatus.ShowIdOnly,
                                                                          GetOrganizationGroupSerializator(Request, httpUser));


                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode                = HTTPStatusCode.OK,
                                          Server                        = HTTPServer.DefaultServerName,
                                          Date                          = Timestamp.Now,
                                          AccessControlAllowOrigin      = "*",
                                          AccessControlAllowMethods     = new[] { "GET", "COUNT", "OPTIONS" },
                                          AccessControlAllowHeaders     = new[] { "Content-Type", "Accept", "Authorization" },
                                          ETag                          = "1",
                                          ContentType                   = HTTPContentType.JSON_UTF8,
                                          Content                       = withMetadata
                                                                              ? JSONObject.Create(
                                                                                    new JProperty("totalCount",          totalCount),
                                                                                    new JProperty("filteredCount",       filteredCount),
                                                                                    new JProperty("organizationGroups",  jsonResults)
                                                                                ).ToUTF8Bytes()
                                                                              : jsonResults.ToUTF8Bytes(),
                                          X_ExpectedTotalNumberOfItems  = filteredCount,
                                          Connection                    = "close",
                                          Vary                          = "Accept"
                                      }.AsImmutable);

                              });

            #endregion

            #endregion


            #region ~/notifications

            #region GET         ~/notifications

            // ---------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/notifications
            // ---------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "notifications",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var HTTPUser,
                                                      out var HTTPOrganizations,
                                                      out var Response,
                                                      Recursive: true))
                                  {
                                      return Task.FromResult(Response.AsImmutable);
                                  }

                                  #endregion


                                  return Task.FromResult(
                                             new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.OK,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ETag                       = "1",
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONArray.Create(
                                                                                  GetNotificationMessages(HTTPUser).Select(notificationMessage => notificationMessage.ToJSON())
                                                                              ).ToUTF8Bytes(),
                                                 Connection                 = "close",
                                                 Vary                       = "Accept"
                                             }.AsImmutable);

            });

            #endregion

            #region GET         ~/newNotification

            // -----------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/newNotification
            // -----------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "newNotification",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  #region Get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var HTTPUser,
                                                      out var HTTPOrganizations,
                                                      out var Response,
                                                      Recursive: true))
                                  {
                                      return Task.FromResult(Response.AsImmutable);
                                  }

                                  #endregion


                                  return Task.FromResult(
                                             new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.OK,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET", "SET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ETag                       = "1",
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(
                                                                                  new JProperty("@context",  "https://opendata.social/contexts/UsersAPI/newNotification"),
                                                                                  new JProperty("user",      JSONObject.Create(

                                                                                      new JProperty("name",  HTTPUser.EMail.OwnerName),
                                                                                      new JProperty("email", HTTPUser.EMail.Address.ToString()),

                                                                                      HTTPUser.MobilePhone.HasValue
                                                                                          ? new JProperty("phoneNumber", HTTPUser.MobilePhone.Value.ToString())
                                                                                          : null

                                                                                  )),
                                                                                  new JProperty("notificationGroups", new JArray(
                                                                                       notificationGroups.Values.Select(notificationGroup => notificationGroup.ToJSON())
                                                                                  ))
                                                                               ).ToUTF8Bytes(),
                                                 Connection                 = "close",
                                                 Vary                       = "Accept"
                                             }.AsImmutable);

            });

            #endregion

            #endregion


            #region GET    .well-known/openpgpkey/policy

            #endregion

            #region HEAD   .well-known/openpgpkey/hu/{Id}

            #endregion

            #region GET    .well-known/openpgpkey/hu/{Id}

            // application/octet-string

            // EMailAddress.toLower().SHA1().ZBase32() == 32 octet string
            // Z-Base-32 method RFC 6189 section 5.1.6

            // https://www.ietf.org/id/draft-koch-openpgp-webkey-service-06.txt
            // The server MUST NOT return an ASCII armored version of the key.

            #endregion


            #region GET   ~/serviceCheck

            // -----------------------------------------
            // curl http://127.0.0.1:2000/serviceCheck
            // -----------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.GET,
                              URLPathPrefix + "serviceCheck",
                              HTTPDelegate: Request => {

                                  var jsonResponse  = JSONObject.Create(
                                                          new JProperty("timestamp",  Timestamp.Now),
                                                          new JProperty("service",    HTTPServer.ServiceName),
                                                          new JProperty("instance",   Environment.MachineName),
                                                          new JProperty("content",    RandomExtensions.RandomString(20))
                                                      );

                                  if (ServiceCheckPublicKey is not null)
                                  {

                                      jsonResponse.Add("publicKey", ServiceCheckPublicKey.Q.GetEncoded().ToHexString());

                                      if (ServiceCheckPrivateKey is not null)
                                      {

                                          var plaintext   = jsonResponse.ToString(Newtonsoft.Json.Formatting.None);
                                          var sha256Hash  = SHA256.HashData(plaintext.ToUTF8Bytes());

                                          var signer      = SignerUtilities.GetSigner("NONEwithECDSA");
                                          signer.Init(true, ServiceCheckPrivateKey);
                                          signer.BlockUpdate(sha256Hash, 0, sha256Hash.Length);
                                          var signature   = signer.GenerateSignature().ToHexString();

                                          jsonResponse.Add("signature", signature);

                                      }

                                  }

                                  return Task.FromResult(
                                             new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.OK,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "POST" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = jsonResponse.ToUTF8Bytes(),
                                                 CacheControl               = "no-cache",
                                                 Connection                 = "close"
                                             }.AsImmutable);

                              }, AllowReplacement: URLReplacement.Allow);

            #endregion

            #region POST  ~/serviceCheck

            // -----------------------------------------------------------------------------------------------------------------
            // curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"123\"}" http://127.0.0.1:2000/serviceCheck
            // -----------------------------------------------------------------------------------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.POST,
                              URLPathPrefix + "serviceCheck",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  var content = String.Empty;

                                  #region Try to parse a text HTTP body...

                                  HTTPResponse.Builder? httpResponse = null;

                                  if (Request.ContentType == HTTPContentType.TEXT_UTF8 &&
                                      Request.TryParseUTF8StringRequestBody(out content, out httpResponse))
                                  {
                                      
                                  }

                                  #endregion

                                  #region ...or parse a JSON HTTP body

                                  else if (Request.ContentType == HTTPContentType.JSON_UTF8 &&
                                      Request.TryParseJSONObjectRequestBody(out var jsonRequest, out httpResponse) &&
                                      jsonRequest is not null)
                                  {
                                      content = jsonRequest["content"]?.Value<String>() ?? RandomExtensions.RandomString(20);
                                  }

                                  if (httpResponse is not null)
                                      return Task.FromResult(httpResponse.AsImmutable);

                                  #endregion


                                  var jsonResponse  = JSONObject.Create(
                                                          new JProperty("timestamp",  Timestamp.Now),
                                                          new JProperty("service",    HTTPServer.ServiceName),
                                                          new JProperty("instance",   Environment.MachineName),
                                                          new JProperty("content",    content?.Reverse())
                                                      );

                                  if (ServiceCheckPublicKey is not null)
                                  {

                                      jsonResponse.Add("publicKey", ServiceCheckPublicKey.Q.GetEncoded().ToHexString());

                                      if (ServiceCheckPrivateKey is not null)
                                      {

                                          var plaintext   = jsonResponse.ToString(Newtonsoft.Json.Formatting.None);
                                          var sha256Hash  = SHA256.HashData(plaintext.ToUTF8Bytes());

                                          var signer      = SignerUtilities.GetSigner("NONEwithECDSA");
                                          signer.Init(true, ServiceCheckPrivateKey);
                                          signer.BlockUpdate(sha256Hash, 0, sha256Hash.Length);
                                          var signature   = signer.GenerateSignature().ToHexString();

                                          jsonResponse.Add("signature", signature);

                                      }

                                  }

                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode             = HTTPStatusCode.OK,
                                          Server                     = HTTPServer.DefaultServerName,
                                          Date                       = Timestamp.Now,
                                          AccessControlAllowOrigin   = "*",
                                          AccessControlAllowMethods  = new[] { "POST" },
                                          AccessControlAllowHeaders  = new[] { "Content-Type", "Accept" },
                                          ContentType                = HTTPContentType.JSON_UTF8,
                                          Content                    = jsonResponse.ToUTF8Bytes(),
                                          CacheControl               = "no-cache",
                                          Connection                 = "close"
                                      }.AsImmutable);

                              }, AllowReplacement: URLReplacement.Allow);

            #endregion

            #region GET   ~/monitoring

            // ---------------------------------------
            // curl http://127.0.0.1:2000/monitoring
            // ---------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.GET,
                              URLPathPrefix + "monitoring",
                              HTTPDelegate: Request => {

                                  var process           = Process.GetCurrentProcess();
                                  process.Refresh();

                                  var freeSystemMemory  = RuntimeInformation.IsOSPlatform(OSPlatform.OSX) ||
                                                          RuntimeInformation.IsOSPlatform(OSPlatform.Linux)
                                                              ? ResourcesMonitor.GetMemoryMetricsOnUnix()
                                                              : ResourcesMonitor.GetMemoryMetricsOnWindows();

                                  var driveInfo         = new DriveInfo(Path.GetPathRoot(AppDomain.CurrentDomain.BaseDirectory)!);
                                  var freeDiscSpace     = (Double) driveInfo.AvailableFreeSpace / driveInfo.TotalSize * 100;

                                  var jsonResponse      = JSONObject.Create(
                                                              new JProperty("timestamp",  Timestamp.Now),
                                                              new JProperty("service",    HTTPServer.ServiceName),
                                                              new JProperty("instance",   Environment.MachineName),
                                                              new JProperty("usedRAM",    process.PrivateMemorySize64 / (1024 * 1024)),
                                                              new JProperty("sharedRAM",  process.WorkingSet64        / (1024 * 1024)),
                                                              new JProperty("content",    RandomExtensions.RandomString(20))
                                                          );

                                  if (ServiceCheckPublicKey is not null)
                                  {

                                      jsonResponse.Add("publicKey", ServiceCheckPublicKey.Q.GetEncoded().ToHexString());

                                      if (ServiceCheckPrivateKey is not null)
                                      {

                                          var plaintext   = jsonResponse.ToString(Newtonsoft.Json.Formatting.None);
                                          var sha256Hash  = SHA256.HashData(plaintext.ToUTF8Bytes());

                                          var signer      = SignerUtilities.GetSigner("NONEwithECDSA");
                                          signer.Init(true, ServiceCheckPrivateKey);
                                          signer.BlockUpdate(sha256Hash, 0, sha256Hash.Length);
                                          var signature   = signer.GenerateSignature().ToHexString();

                                          jsonResponse.Add("signature", signature);

                                      }

                                  }

                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode             = HTTPStatusCode.OK,
                                          Server                     = HTTPServer.DefaultServerName,
                                          Date                       = Timestamp.Now,
                                          AccessControlAllowOrigin   = "*",
                                          AccessControlAllowMethods  = new[] { "POST" },
                                          AccessControlAllowHeaders  = new[] { "Content-Type", "Accept" },
                                          ContentType                = HTTPContentType.JSON_UTF8,
                                          Content                    = jsonResponse.ToUTF8Bytes(),
                                          CacheControl               = "no-cache",
                                          Connection                 = "close"
                                      }.AsImmutable);

                              }, AllowReplacement: URLReplacement.Allow);

            #endregion

            #region POST  ~/serviceCheck

            // -----------------------------------------------------------------------------------------------------------------
            // curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"123\"}" http://127.0.0.1:2000/serviceCheck
            // -----------------------------------------------------------------------------------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.POST,
                              URLPathPrefix + "serviceCheck",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: Request => {

                                  var content = String.Empty;

                                  #region Try to parse a text HTTP body...

                                  HTTPResponse.Builder? httpResponse = null;

                                  if (Request.ContentType == HTTPContentType.TEXT_UTF8 &&
                                      Request.TryParseUTF8StringRequestBody(out content, out httpResponse))
                                  {
                                      
                                  }

                                  #endregion

                                  #region ...or parse a JSON HTTP body

                                  else if (Request.ContentType == HTTPContentType.JSON_UTF8 &&
                                      Request.TryParseJSONObjectRequestBody(out var jsonRequest, out httpResponse) &&
                                      jsonRequest is not null)
                                  {
                                      content = jsonRequest["content"]?.Value<String>() ?? RandomExtensions.RandomString(20);
                                  }

                                  if (httpResponse is not null)
                                      return Task.FromResult(httpResponse.AsImmutable);

                                  #endregion


                                  var process       = Process.GetCurrentProcess();
                                  process.Refresh();

                                  var jsonResponse  = JSONObject.Create(
                                                          new JProperty("timestamp",  Timestamp.Now),
                                                          new JProperty("service",    HTTPServer.ServiceName),
                                                          new JProperty("instance",   Environment.MachineName),
                                                          new JProperty("usedRAM",    process.PrivateMemorySize64 / (1024 * 1024)),
                                                          new JProperty("sharedRAM",  process.WorkingSet64        / (1024 * 1024)),
                                                          new JProperty("content",    content?.Reverse())
                                                      );

                                  if (ServiceCheckPublicKey is not null)
                                  {

                                      jsonResponse.Add("publicKey", ServiceCheckPublicKey.Q.GetEncoded().ToHexString());

                                      if (ServiceCheckPrivateKey is not null)
                                      {

                                          var plaintext   = jsonResponse.ToString(Newtonsoft.Json.Formatting.None);
                                          var sha256Hash  = SHA256.HashData(plaintext.ToUTF8Bytes());

                                          var signer      = SignerUtilities.GetSigner("NONEwithECDSA");
                                          signer.Init(true, ServiceCheckPrivateKey);
                                          signer.BlockUpdate(sha256Hash, 0, sha256Hash.Length);
                                          var signature   = signer.GenerateSignature().ToHexString();

                                          jsonResponse.Add("signature", signature);

                                      }

                                  }

                                  return Task.FromResult(
                                             new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.OK,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "POST" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = jsonResponse.ToUTF8Bytes(),
                                                 CacheControl               = "no-cache",
                                                 Connection                 = "close"
                                             }.AsImmutable);

                              }, AllowReplacement: URLReplacement.Allow);

            #endregion


            #region /hashimage

            AddMethodCallback(
                                         HTTPHostname.Any,
                                         HTTPMethod.GET,
                                         HTTPPath.Parse("/hashimage"),
                                         HTTPContentType.PNG,
                                         HTTPDelegate: Request => {

                Byte x =  13;
                Byte y =  13;
                Byte t = 255;

                var ByteArray = SecurityVisualization.DrunkenBishop("fc:94:b0:c1:e5:b0:98:7c:58:43:99:76:97:ee:9f:b7");
                ByteArray     = SecurityVisualization.DrunkenBishop("AE0D 5C5C 4EB5 C3F0 683E  2173 B1EA 6EEA A89A 2896", x, y);
                var MaxValue  = ByteArray.Max();

                var size = 10UL;
                var _Bitmap = new Bitmap((Int32) (x * size), (Int32) (y * size));

                var _Pens = new Brush[] {
                    new SolidBrush(Color.FromArgb(t, 240, 240, 240)),
                    new SolidBrush(Color.FromArgb(t, 120, 120, 240)),
                    new SolidBrush(Color.FromArgb(t, 105, 105, 210)),
                    new SolidBrush(Color.FromArgb(t,  90,  90, 180)),
                    new SolidBrush(Color.FromArgb(t,  75,  75, 150)),
                    new SolidBrush(Color.FromArgb(t,  60,  60, 120)),
                    new SolidBrush(Color.FromArgb(t,  45,  45,  90)),
                    new SolidBrush(Color.FromArgb(t,  30,  30,  60)),
                    new SolidBrush(Color.FromArgb(t,  15,  15,  30)),
                    new SolidBrush(Color.FromArgb(t,   0,   0,   0))
                };

                var g = Graphics.FromImage(_Bitmap);
                ByteArray.ForEachCounted((_byte, i) => {
                    g.FillRectangle(_Pens[Math.Min(_byte, _Pens.Length-1)], size * ((i - 1) % x), size * ((i - 1) / x), size - 1, size-1);
                });


                var s = new MemoryStream();
                _Bitmap.Save(s, ImageFormat.Png);
                var f = s.ToArray();

                return Task.FromResult(
                    new HTTPResponse.Builder(Request) {
                        HTTPStatusCode  = HTTPStatusCode.OK,
                        Server          = HTTPServer.DefaultServerName,
                        ContentType     = HTTPContentType.PNG,
                        Content         = f,
                        CacheControl    = "public",
                        //Expires         = "Mon, 25 Jun 2015 21:31:12 GMT",
                        Connection      = "close"
                    }.AsImmutable);

            });

            #endregion


            // Manage this HTTP service...

            #region /restart

            // -----------------------------------------------
            // curl -v -X POST http://127.0.0.1:2000/restart
            // -----------------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.POST,
                              URLPathPrefix + "/restart",
                              HTTPRequestLogger:   RestartRequest,
                              HTTPResponseLogger:  RestartResponse,
                              HTTPDelegate:        Request => {

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.Admin,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  //Task.Run(() => {
                                  //    Task.Delay(10000);
                                      Environment.Exit(1000);
                                  //});

                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode  = HTTPStatusCode.OK,
                                          Server          = HTTPServer.DefaultServerName,
                                          Connection      = "close"
                                      }.AsImmutable);

                              });

            #endregion

            #region /stop

            // --------------------------------------------
            // curl -v -X POST http://127.0.0.1:2000/stop
            // --------------------------------------------
            AddMethodCallback(HTTPHostname.Any,
                              HTTPMethod.POST,
                              URLPathPrefix + "/stop",
                              HTTPRequestLogger:   StopRequest,
                              HTTPResponseLogger:  StopResponse,
                              HTTPDelegate:        Request => {

                                  #region Try to get HTTP user and its organizations

                                  // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                  if (!TryGetHTTPUser(Request,
                                                      out var httpUser,
                                                      out var httpOrganizations,
                                                      out var httpResponseBuilder,
                                                      Access_Levels.Admin,
                                                      Recursive: true) ||
                                      httpUser is null ||
                                     !httpOrganizations.Any())
                                  {
                                      return Task.FromResult(httpResponseBuilder!.AsImmutable);
                                  }

                                  #endregion


                                  //Task.Run(() => {
                                  //    Task.Delay(1000);
                                  Environment.Exit(0);
                                  //});

                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode  = HTTPStatusCode.OK,
                                          Server          = HTTPServer.DefaultServerName,
                                          Connection      = "close"
                                      }.AsImmutable);

                              });

            #endregion


            #region OPTIONS     ~/changeSets

            // -----------------------------------------------------
            // curl -X OPTIONS -v http://127.0.0.1:3004/changeSets
            // -----------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.OPTIONS,
                              URLPathPrefix + "changeSets",
                              HTTPDelegate: Request => {

                                  return Task.FromResult(
                                      new HTTPResponse.Builder(Request) {
                                          HTTPStatusCode             = HTTPStatusCode.OK,
                                          Server                     = HTTPServer.DefaultServerName,
                                          Date                       = Timestamp.Now,
                                          AccessControlAllowOrigin   = "*",
                                          AccessControlAllowMethods  = new[] { "GET", "OPTIONS" },
                                          AccessControlAllowHeaders  = new[] { "Authorization", "X-App-Version" },
                                          Connection                 = "close"
                                      }.AsImmutable);

                              });

            #endregion

            #region GET         ~/changeSets

            // ---------------------------------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" -H "API-Key: xxx" http://127.0.0.1:3004/changeSets?withMetadata\&take=2
            // ---------------------------------------------------------------------------------------------------------------
            AddMethodCallback(Hostname,
                              HTTPMethod.GET,
                              URLPathPrefix + "changeSets",
                              HTTPContentType.JSON_UTF8,
                              HTTPDelegate: async Request => {

                                  #region Check API Key...

                                  if (Request.API_Key is null || !remoteAuthAPIKeys.Contains(Request.API_Key.Value))
                                      return new HTTPResponse.Builder(Request) {
                                                 HTTPStatusCode             = HTTPStatusCode.Forbidden,
                                                 Server                     = HTTPServer.DefaultServerName,
                                                 Date                       = Timestamp.Now,
                                                 AccessControlAllowOrigin   = "*",
                                                 AccessControlAllowMethods  = new[] { "GET" },
                                                 AccessControlAllowHeaders  = new[] { "Content-Type", "Accept", "Authorization" },
                                                 ContentType                = HTTPContentType.JSON_UTF8,
                                                 Content                    = JSONObject.Create(

                                                                                  Request.API_Key.HasValue
                                                                                      ? new JProperty("apiKey",  Request.API_Key?.ToString() ?? "")
                                                                                      : null,

                                                                                  new JProperty("description",  "Please use a valid API key!")

                                                                              ).ToUTF8Bytes(),
                                                 Connection                 = "close"
                                             }.AsImmutable;

                                  #endregion

                                  var withMetadata                            = Request.QueryString.GetBoolean ("withMetadata", false);
                                  var since                                   = Request.QueryString.GetDateTime("since");
                                  var skipUntil                               = Request.QueryString.GetString  ("skipUntil");
                                  var skip                                    = Request.QueryString.GetUInt64  ("skip");
                                  var take                                    = Request.QueryString.GetUInt64  ("take");
                                  var match                                   = Request.QueryString.GetString  ("match");

                                  var (filteredChangeSets, totalCount, ETag)  = await LoadChangeSetsFromDisc(since,
                                                                                                             skipUntil,
                                                                                                             match is not null
                                                                                                               ? line => line.Contains(match)
                                                                                                               : null,
                                                                                                             skip,
                                                                                                             take);
                                  var filteredCount                           = filteredChangeSets.ULongCount();

                                  var JSONResults                             = new JArray(filteredChangeSets);


                                  return new HTTPResponse.Builder(Request) {
                                             HTTPStatusCode                = HTTPStatusCode.OK,
                                             Server                        = HTTPServer.DefaultServerName,
                                             Date                          = Timestamp.Now,
                                             AccessControlAllowOrigin      = "*",
                                             AccessControlAllowMethods     = new[] { "GET", "OPTIONS" },
                                             AccessControlAllowHeaders     = new[] { "Authorization", "X-App-Version" },
                                             ETag                          = ETag,
                                             ContentType                   = HTTPContentType.JSON_UTF8,
                                             Content                       = withMetadata
                                                                                 ? JSONObject.Create(
                                                                                       new JProperty("totalCount",    totalCount),
                                                                                       new JProperty("filteredCount", filteredCount),
                                                                                       new JProperty("changeSets",    JSONResults)
                                                                                   ).ToUTF8Bytes()
                                                                                 : JSONResults.ToUTF8Bytes(),
                                             X_ExpectedTotalNumberOfItems  = filteredCount,
                                             Connection                    = "close"
                                         }.AsImmutable;

                              });

            #endregion


        }

        #endregion

        #region Database file...

        #region (protected) ReadDatabaseFiles(ProcessEventDelegate, DatabaseFileName = null)

        /// <summary>
        /// Read the database file.
        /// </summary>
        /// <param name="ProcessEventDelegate">A delegate to process each database entry.</param>
        /// <param name="DatabaseFileName">The optional database file name.</param>
        protected async Task ReadDatabaseFiles(Func<String, JObject, String, UInt64?, Task>  ProcessEventDelegate,
                                               String?                                       DatabaseFileName = null)
        {

            if (DisableLogging)
                return;

            #region Reloading database file

            var databaseFileName = DatabaseFileName ?? this.DatabaseFileName;

            DebugX.Log("Reloading database file '" + databaseFileName + "'...");

            try
            {

                JObject jsonLine;
                String  jsonCommand;

                var lines = await File.ReadAllLinesAsync(databaseFileName);

                lines.ForEachCounted(async (line, lineNumber) => {

                    if (line.IsNeitherNullNorEmpty() &&
                       !line.StartsWith("#") &&
                       !line.StartsWith("//"))
                    {

                        try
                        {

                            jsonLine  = JObject.Parse(line);

                            if (jsonLine.First is JProperty jsonProperty)
                            {

                                jsonCommand = jsonProperty.Name;

                                if (jsonCommand.IsNotNullOrEmpty() &&
                                    jsonProperty.Value is JObject jsonObject)
                                {

                                    CurrentDatabaseHashValue = jsonLine?["sha256hash"]?["hashValue"]?.Value<String>() ?? "";

                                    await ProcessEventDelegate(jsonCommand,
                                                               jsonObject,
                                                               databaseFileName,
                                                               lineNumber);

                                }

                            }

                        }
                        catch (Exception e)
                        {
                            DebugX.Log("Could not (re-)load database file ''" + databaseFileName + "' line " + lineNumber + ": " + e.Message);
                        }

                    }

                });

            }
            catch (FileNotFoundException)
            {
                DebugX.LogT("Could not find database file '" + databaseFileName + "'!");
            }
            catch (Exception e)
            {
                DebugX.LogT("Could not (re-)load database file '" + databaseFileName + "': " + e.Message);
            }

            #endregion

            DebugX.Log("Reloading all HTTPExtAPI database helper files...");

            #region Read Password file...

            try
            {

                JObject?  jsonLine;
                String?   jsonCommand;
                JObject?  jsonObject;

                // Info: File.Exists(...) is harmful!
                var lines = await File.ReadAllLinesAsync(HTTPAPIPath + DefaultPasswordFile);

                lines.ForEachCounted((line, linenumber) => {

                    if (line.IsNeitherNullNorEmpty() &&
                       !line.StartsWith("#")         &&
                       !line.StartsWith("//"))
                    {

                        try
                        {

                            jsonLine                  = JObject.Parse(line);
                            jsonCommand               = (jsonLine.First as JProperty)?.Name;
                            jsonObject                = (jsonLine.First as JProperty)?.Value as JObject;
                            CurrentDatabaseHashValue  =  jsonLine["sha256hash"]?["hashValue"]?.Value<String>();

                            if (jsonCommand is not null &&
                                jsonCommand.IsNotNullOrEmpty() &&
                                jsonObject is not null &&
                                User_Id.TryParse(jsonObject["login"]?.Value<String>() ?? "", out var login))
                            {

                                switch (jsonCommand)
                                {

                                    #region add

                                        case "add":
                                        case "addPassword":
                                        case "AddPassword":

                                            if (!loginPasswords.ContainsKey(login))
                                            {

                                                loginPasswords.TryAdd(login,
                                                                      new LoginPassword(login,
                                                                                        Password.ParseHash(jsonObject["newPassword"]["salt"].        Value<String>(),
                                                                                                           jsonObject["newPassword"]["passwordHash"].Value<String>())));

                                            }

                                            else
                                                DebugX.Log("Invalid 'AddPassword' command in '" + this.HTTPAPIPath + DefaultPasswordFile + "' line " + linenumber + "!");

                                            break;

                                        #endregion

                                    #region change

                                        case "change":
                                        case "changePassword":
                                        case "ChangePassword":

                                            if (loginPasswords.TryGetValue(login, out var loginPassword) &&
                                                loginPassword.Password.     UnsecureString   == jsonObject["currentPassword"]["passwordHash"].Value<String>() &&
                                                loginPassword.Password.Salt.UnsecureString() == jsonObject["currentPassword"]["salt"].        Value<String>())
                                            {

                                                loginPasswords[login] = new LoginPassword(login,
                                                                                          Password.ParseHash(jsonObject["newPassword"]["salt"].        Value<String>(),
                                                                                                             jsonObject["newPassword"]["passwordHash"].Value<String>()));

                                            }

                                            else
                                                DebugX.Log("Invalid 'ChangePassword' command in '" + this.HTTPAPIPath + DefaultPasswordFile + "' line " + linenumber + "!");

                                            break;

                                        #endregion

                                    #region reset

                                        case "reset":
                                        case "resetPassword":
                                        case "ResetPassword":

                                            if (loginPasswords.ContainsKey(login))
                                                loginPasswords.TryRemove(login, out _);

                                            loginPasswords.TryAdd(login,
                                                                  new LoginPassword(login,
                                                                                    Password.ParseHash(jsonObject["newPassword"]["salt"].        Value<String>(),
                                                                                                       jsonObject["newPassword"]["passwordHash"].Value<String>())));

                                            break;

                                        #endregion

                                    default:
                                        DebugX.Log("Unknown command '" + jsonCommand + "' in password file '" + this.HTTPAPIPath + DefaultPasswordFile + "' line " + linenumber + "!");
                                        break;

                                }

                            }

                            else
                                DebugX.Log("Could not read password file '" + this.HTTPAPIPath + DefaultPasswordFile + "' line " + linenumber + "!");

                        }
                        catch (Exception e)
                        {
                            DebugX.Log("Could not read password file '" + this.HTTPAPIPath + DefaultPasswordFile + "' line " + linenumber + ": " + e.Message);
                        }

                    }

                });

            }
            catch (FileNotFoundException fe)
            { }
            catch (Exception e)
            {
                DebugX.LogT("Could not read password file '" + this.HTTPAPIPath + DefaultPasswordFile + "' failed: " + e.Message);
            }

            #endregion

            #region Read HTTP Cookies file...

            try
            {

                var lines = await File.ReadAllLinesAsync(HTTPAPIPath + DefaultHTTPCookiesFile);

                lines.ForEachCounted((line, linenumber) => {

                    try
                    {

                        var elements         = line.Split(new Char[] { ';' }, StringSplitOptions.None);

                        var securityTokenId  = SecurityToken_Id.Parse(elements[0]);
                        var userId           = User_Id.         Parse(elements[1]);
                        var expires          = DateTime.        Parse(elements[2]);
                        var superUserId      = elements.Length == 4
                                                    ? new User_Id?(User_Id.Parse(elements[3]))
                                                    : null;

                        if (!httpCookies.ContainsKey(securityTokenId) &&
                            loginPasswords.ContainsKey(userId) &&
                            expires > Timestamp.Now)
                        {

                            httpCookies.TryAdd(securityTokenId,
                                                new SecurityToken(userId,
                                                                    expires,
                                                                    superUserId));

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.Log("Could not read HTTP cookies file '" + this.HTTPAPIPath + DefaultHTTPCookiesFile + "' line " + linenumber + ": " + e.Message);
                    }

                });

            }
            catch (FileNotFoundException)
            { }
            catch (Exception e)
            {
                DebugX.Log("Could not read HTTP cookies file '" + this.HTTPAPIPath + DefaultHTTPCookiesFile + "': " + e.Message);
            }


            // Write filtered (no invalid users, no expired tokens) tokens back to file...
            try
            {

                File.WriteAllLines(HTTPAPIPath + DefaultHTTPCookiesFile,
                                    httpCookies.Select(token => token.Key + ";" + token.Value.ToLogLine()));

            }
            catch (Exception e)
            {
                DebugX.Log("Could not update HTTP cookies file '" + this.HTTPAPIPath + DefaultHTTPCookiesFile + "': " + e.Message);
            }

            #endregion

            #region Read Password Resets file...

            try
            {

                JObject  jsonLine;
                String?  jsonCommand;
                JObject? jsonObject;

                var now     = Timestamp.Now;
                var maxAge  = TimeSpan.FromDays(7);

                // Info: File.Exists(...) is harmful!
                var lines = await File.ReadAllLinesAsync(HTTPAPIPath + DefaultPasswordResetsFile);

                lines.ForEachCounted((line, linenumber) => {

                    if (line.IsNeitherNullNorEmpty() &&
                       !line.StartsWith("#")         &&
                       !line.StartsWith("//"))
                    {

                        try
                        {

                            jsonLine                  = JObject.Parse(line);
                            jsonCommand               = (jsonLine.First as JProperty)?.Name;
                            jsonObject                = (jsonLine.First as JProperty)?.Value as JObject;
                            //CurrentDatabaseHashValue  =  JSONLine["sha256hash"]?["hashValue"]?.Value<String>();

                            if (jsonCommand is not null &&
                                jsonCommand.IsNotNullOrEmpty() &&
                                jsonObject is not null &&
                                PasswordReset.TryParseJSON(jsonObject,
                                                           users.TryGetValue,
                                                           out var passwordReset,
                                                           out var errorResponse) &&
                                passwordReset is not null)
                            {

                                if (errorResponse is null)
                                {

                                    switch (jsonCommand.ToLower())
                                    {

                                        #region add

                                        case "add":

                                            if (!passwordResets.ContainsKey(passwordReset.SecurityToken1))
                                            {
                                                if (now - passwordReset.Timestamp <= maxAge)
                                                {
                                                    passwordResets.TryAdd(passwordReset.SecurityToken1,
                                                                          passwordReset);
                                                }
                                            }

                                            else
                                                DebugX.Log("Invalid 'Add' command in '" + this.HTTPAPIPath + DefaultPasswordResetsFile + "' line " + linenumber + "!");

                                            break;

                                        #endregion

                                        #region remove

                                        case "remove":
                                            passwordResets.TryRemove(passwordReset.SecurityToken1, out _);
                                            break;

                                        #endregion

                                        default:
                                            DebugX.Log("Unknown command '" + jsonCommand + "' in password file '" + this.HTTPAPIPath + DefaultPasswordResetsFile + "' line " + linenumber + "!");
                                            break;

                                    }

                                }

                            }

                            else
                                DebugX.Log("Could not read password file '" + this.HTTPAPIPath + DefaultPasswordResetsFile + "' line " + linenumber + "!");

                        }
                        catch (Exception e)
                        {
                            DebugX.Log("Could not read password file '" + this.HTTPAPIPath + DefaultPasswordResetsFile + "' line " + linenumber + ": " + e.Message);
                        }

                    }

                });

            }
            catch (FileNotFoundException)
            { }
            catch (Exception e)
            {
                DebugX.LogT("Could not read password file '" + this.HTTPAPIPath + DefaultPasswordResetsFile + "': " + e.Message);
            }

            #endregion

            DebugX.Log("Reloading of all HTTPExtAPI database helper files finished...");

        }

        #endregion


        #region (protected) LoadChangeSetsFromAPI(ProcessEventDelegate, LastKnownSHA256HashValue = null)

        /// <summary>
        /// Read the database file.
        /// </summary>
        /// <param name="ProcessEventDelegate">A delegate to process each database entry.</param>
        /// <param name="LastKnownSHA256HashValue">The optional last known SHA256 hash value.</param>
        public async Task LoadChangeSetsFromAPI(Func<String, JObject, String, UInt64?, Task>  ProcessEventDelegate,
                                                String?                                       LastKnownSHA256HashValue = null)
        {

            try
            {

                JArray? jsonChangeSets = null;

                #region Get change sets from remote API

                var retries     = -1;
                var maxRetries  = 3;

                var _remoteAuthServers = Array.Empty<URLWithAPIKey>();

                lock (remoteAuthServers)
                {
                    _remoteAuthServers = remoteAuthServers.ToArray();
                }

                var usedRemoteAuthServer = _remoteAuthServers.FirstOrDefault();

                do
                {

                    retries++;

                    foreach (var remoteAuthServer in _remoteAuthServers)
                    {

                        try
                        {

                            #region Upstream HTTP(S) request...

                            var httpresult = await HTTPClientFactory.Create(remoteAuthServer.URL,
                                                                            //VirtualHostname,
                                                                            //Description,
                                                                            //RemoteCertificateValidator,
                                                                            //ClientCertificateSelector,
                                                                            //ClientCert,
                                                                            //HTTPUserAgent,
                                                                            //RequestTimeout,
                                                                            //TransmissionRetryDelay,
                                                                            //MaxNumberOfRetries,
                                                                            //UseHTTPPipelining,
                                                                            //HTTPLogger,
                                                                            DNSClient: DNSClient).

                                                        Execute(client => client.GETRequest(remoteAuthServer.URL.Path + (LastKnownSHA256HashValue is not null ? "changeSets?skipUntil=" + LastKnownSHA256HashValue : "changeSets"),
                                                                                            requestbuilder => {
                                                                                                requestbuilder.Host         = remoteAuthServer.URL.Hostname;
                                                                                                requestbuilder.API_Key      = remoteAuthServer.APIKeyId;
                                                                                                requestbuilder.Accept.Add(HTTPContentType.JSON_UTF8);
                                                                                            }),

                                                                //RequestLogDelegate:   OnGetCDRsHTTPRequest,
                                                                //ResponseLogDelegate:  OnGetCDRsHTTPResponse,
                                                                //CancellationToken:    CancellationToken,
                                                                //EventTrackingId:      EventTrackingId,
                                                                RequestTimeout: TimeSpan.FromSeconds(5)).

                                                        ConfigureAwait(false);

                            #endregion

                            #region HTTPStatusCode.OK

                            if (httpresult.HTTPStatusCode == HTTPStatusCode.OK)
                            {

                                jsonChangeSets        = JArray.Parse(httpresult.HTTPBody.ToUTF8String());
                                usedRemoteAuthServer  = remoteAuthServer;

                                DebugX.Log("Loaded " + jsonChangeSets.Count + " remote change sets from '" + remoteAuthServer.URL.ToString() + (LastKnownSHA256HashValue is not null ? "/changeSets?skipUntil=" + LastKnownSHA256HashValue : "/changeSets"));

                            }

                            #endregion

                        }
                        catch (Exception e)
                        {
                            DebugX.Log("Could not load remote change set from '" + remoteAuthServer.URL.ToString() + (LastKnownSHA256HashValue is not null ? "/changeSets?skipUntil=" + LastKnownSHA256HashValue : "/changeSets") + ": " + e.Message);
                        }

                    }

                } while (jsonChangeSets is null && retries < maxRetries);

                #endregion

                #region Process change sets

                if (jsonChangeSets is not null)
                {

                    jsonChangeSets.ForEachCounted(async (line, lineNumber) =>
                    {

                        if (line is JObject JSONLine)
                        {

                            try
                            {

                                if (JSONLine.First is JProperty jsonProperty)
                                {

                                    var JSONCommand = jsonProperty.Name;

                                    if (JSONCommand.IsNotNullOrEmpty() &&
                                        jsonProperty.Value is JObject jsonObject)
                                    {

                                        CurrentDatabaseHashValue = JSONLine?["sha256hash"]?["hashValue"]?.Value<String>() ?? "";

                                        await ProcessEventDelegate(JSONCommand,
                                                                   jsonObject,
                                                                   usedRemoteAuthServer.URL.ToString(),
                                                                   lineNumber);

                                    }

                                }

                            }
                            catch (Exception e)
                            {
                                DebugX.Log("Could not load remote change set from '" + usedRemoteAuthServer.URL.ToString() + (LastKnownSHA256HashValue is not null ? "/changeSets?skipUntil=" + LastKnownSHA256HashValue : "/changeSets") + "' line " + lineNumber + ": " + e.Message);
                            }

                        }

                    });

                }

                #endregion

            }
            catch (Exception e)
            {
                DebugX.LogT("Could not load remote change set: " + e.Message);
            }

        }

        #endregion

        #region (protected) LoadChangeSets(Since = null, SkipUntil = null, MatchFilter = null, Skip = null, Take = null, DatabaseFileName = null)

        /// <summary>
        /// Read all change sets from the database file.
        /// </summary>
        /// <param name="DatabaseFileName">The optional database file name.</param>
        protected async Task<(IEnumerable<JObject>, UInt64, String)>

            LoadChangeSetsFromDisc(DateTime?               Since              = null,
                                   String?                 SkipUntil          = null,
                                   Func<String, Boolean>?  MatchFilter        = null,
                                   UInt64?                 Skip               = null,
                                   UInt64?                 Take               = null,
                                   String?                 DatabaseFileName   = null)

        {

            if (MatchFilter is null)
                MatchFilter = line => true;

            var     jsonList           = new List<JObject>();
            String  databaseFileName   = DatabaseFileName ?? this.DatabaseFileName;
            var     totalCount         = 0UL;
            var     skipUntil_reached  = SkipUntil is null;
            var     lastValidLine      = "";
            var     ETag               = "";

            try
            {

                var lines = await File.ReadAllLinesAsync(databaseFileName);

                lines?.ForEachCounted((line, lineNumber) =>
                {

                    if (line.IsNeitherNullNorEmpty() &&
                       !line.StartsWith("#")         &&
                       !line.StartsWith("//"))
                    {

                        try
                        {

                            var jsonLine = JObject.Parse(line);

                            if (jsonLine is JObject &&
                                jsonLine.First is JProperty jsonProperty)
                            {

                                if (jsonProperty.Name.IsNotNullOrEmpty() &&
                                    jsonProperty.Value is JObject jsonObject)
                                {

                                    totalCount++;
                                    lastValidLine = line;

                                    var skip = false;

                                    if (Since is not null)
                                    {

                                        var timestamp = jsonLine["timestamp"]?.Value<DateTime>();

                                        if (timestamp is not null)
                                        {
                                            if (timestamp < Since.Value)
                                                skip = true;
                                        }

                                    }

                                    if (skip              == false &&
                                        skipUntil_reached == false &&
                                        SkipUntil is not null)
                                    {

                                        var sha256hash = jsonLine["sha256hash"]?["hashValue"]?.Value<String>();

                                        if (sha256hash is not null)
                                        {
                                            if (sha256hash == SkipUntil)
                                                skipUntil_reached = true;
                                        }

                                    }

                                    if (skip == false && skipUntil_reached && MatchFilter(line))
                                        jsonList.Add(jsonLine);

                                }

                            }

                        }
                        catch (Exception e)
                        {
                            DebugX.Log("Could not load change set file ''" + databaseFileName + "' line " + lineNumber + ": " + e.Message);
                        }

                    }

                });

                ETag = JObject.Parse(lastValidLine)?["sha256hash"]?["hashValue"]?.Value<String>() ?? "0";

            }
            catch (FileNotFoundException)
            {
                DebugX.LogT("Could not find change set file '" + databaseFileName + "'!");
            }
            catch (Exception e)
            {
                DebugX.LogT("Could not (re-)load change set file '" + databaseFileName + "': " + e.Message);
            }

            return (jsonList.SkipTakeFilter(Skip, Take),
                    totalCount,
                    ETag);

        }

        #endregion

        //ToDo: Receive Network Database Events

        #region (protected virtual) ProcessEvent(Command, Data, Sender = null, LineNumber = null)

        /// <summary>
        /// Process a database event.
        /// </summary>
        /// <param name="Command">The event command.</param>
        /// <param name="Data">The event data.</param>
        /// <param name="Sender">The event sender or file name.</param>
        /// <param name="LineNumber">The event line number within the event file.</param>
        protected virtual async Task ProcessEvent(String   Command,
                                                  JObject  Data,
                                                  String?  Sender       = null,
                                                  UInt64?  LineNumber   = null)
        {

            #region Initial checks

            if (Command.IsNullOrEmpty() || Data == null)
                return;

            User_Id          userId;
            IUser?           user;
            User?            user2;
            IUserGroup?      userGroup;
            UserGroup?       userGroup2;
            APIKey?          apiKey;
            Organization_Id  organizationId;
            IOrganization?   organization;
            Organization?    organization2;
            String?          errorResponse;

            #endregion

            switch (Command)
            {

                #region Create user

                case "createUser":

                    if (User.TryParseJSON(Data,
                                          out user2,
                                          out errorResponse) && user2 is not null)
                    {

                        user = user2;

                        user.API = this;
                        users.AddAndReturnValue(user.Id, user);

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Add user

                case "addUser":

                    if (User.TryParseJSON(Data,
                                          out user2,
                                          out errorResponse) && user2 is not null)
                    {

                        user = user2;

                        user.API = this;
                        users.AddAndReturnValue(user.Id, user);
                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Add user if not exists

                case "addUserIfNotExists":

                    if (User.TryParseJSON(Data,
                                          out user2,
                                          out errorResponse) && user2 is not null)
                    {

                        user = user2;

                        if (!users.ContainsKey(user.Id))
                        {
                            user.API = this;
                            users.AddAndReturnValue(user.Id, user);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Add or update user

                case "addOrUpdateUser":

                    if (User.TryParseJSON(Data,
                                          out user2,
                                          out errorResponse) && user2 is not null)
                    {

                        user = user2;

                        if (users.TryGetValue(user.Id, out var OldUser))
                        {
                            users.TryRemove(OldUser.Id, out _);
                            user.CopyAllLinkedDataFrom(OldUser);
                        }

                        users.TryAdd(user.Id, user);
                        user.API = this;

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Update user

                case "updateUser":

                    if (User.TryParseJSON(Data,
                                          out user2,
                                          out errorResponse) && user2 is not null)
                    {

                        user = user2;

                        if (users.TryGetValue(user.Id, out var OldUser))
                        {

                            users.TryRemove(OldUser.Id, out _);
                            user.API = this;
                            user.CopyAllLinkedDataFrom(OldUser);

                            users.TryAdd(user.Id, user);

                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Delete user

                case "deleteUser":

                    if (User.TryParseJSON(Data,
                                          out user2,
                                          out errorResponse) && user2 is not null)
                    {

                        user = user2;

                        if (users.TryGetValue(user.Id, out var __User))
                        {

                            // this --edge--> organization
                            foreach (var edge in __User.User2Organization_OutEdges.ToArray())
                                edge.Target.RemoveUser(edge);

                        }

                        users.TryRemove(user.Id, out _);

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion


                #region Add API key

                case "addAPIKey":

                    if (APIKey.TryParse(Data,
                                        users.TryGetValue,
                                        out apiKey,
                                        out errorResponse) && apiKey is not null)
                    {
                        apiKeys.AddAndReturnValue(apiKey.Id, apiKey);
                    }

                    else
                        DebugX.Log(String.Concat(nameof(apiKey), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Add API key if not exists

                case "addAPIKeyIfNotExists":

                    if (APIKey.TryParse(Data,
                                        users.TryGetValue,
                                        out apiKey,
                                        out errorResponse) && apiKey is not null)
                    {

                        if (!apiKeys.ContainsKey(apiKey.Id))
                        {
                            apiKey.API = this;
                            apiKeys.AddAndReturnValue(apiKey.Id, apiKey);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(apiKey), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Add or update API key

                case "addOrUpdateAPIKey":

                    if (APIKey.TryParse(Data,
                                        users.TryGetValue,
                                        out apiKey,
                                        out errorResponse) && apiKey is not null)
                    {

                        if (apiKeys.TryGetValue(apiKey.Id, out var OldAPIKey))
                        {
                            apiKeys.Remove(OldAPIKey.Id);
                        }

                        apiKeys.Add(apiKey.Id, apiKey);
                        apiKey.API = this;

                    }

                    else
                        DebugX.Log(String.Concat(nameof(apiKey), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Update API key

                case "updateAPIKey":

                    if (APIKey.TryParse(Data,
                                        users.TryGetValue,
                                        out apiKey,
                                        out errorResponse) && apiKey is not null)
                    {

                        if (apiKeys.TryGetValue(apiKey.Id, out var OldAPIKey))
                        {
                            apiKeys.Remove(OldAPIKey.Id);
                            apiKey.API = this;
                            apiKeys.Add(apiKey.Id, apiKey);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(apiKey), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Remove API key

                case "removeAPIKey":

                    if (APIKey.TryParse(Data,
                                        users.TryGetValue,
                                        out apiKey,
                                        out errorResponse) && apiKey is not null)
                    {
                        apiKeys.Remove(apiKey.Id);
                    }

                    else
                        DebugX.Log(String.Concat(nameof(apiKey), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion


                #region Add organization

                case "addOrganization":

                    if (Organization.TryParseJSON(Data,
                                                  out organization2,
                                                  out errorResponse) && organization2 is not null)
                    {

                        organization = organization2;

                        if (!organizations.ContainsKey(organization.Id))
                        {
                            organization.API = this;
                            organizations.TryAdd(organization.Id, organization);
                        }

                        else
                            DebugX.Log("Organization '" + organization.Id + "' already exists!");

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Add organization if not exists

                case "addOrganizationIfNotExists":

                    if (Organization.TryParseJSON(Data,
                                                  out organization2,
                                                  out errorResponse) && organization2 is not null)
                    {

                        organization = organization2;

                        if (!organizations.ContainsKey(organization.Id))
                        {
                            organization.API = this;
                            organizations.AddAndReturnValue(organization.Id, organization);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Add or update organization

                case "addOrUpdateOrganization":

                    if (Organization.TryParseJSON(Data,
                                                  out organization2,
                                                  out errorResponse) && organization2 is not null)
                    {

                        organization = organization2;

                        if (organizations.TryGetValue(organization.Id, out var OldOrganization))
                        {
                            organizations.TryRemove(OldOrganization.Id, out _);
                            organization.API = this;
                            organization.CopyAllLinkedDataFrom(OldOrganization);
                        }

                        organizations.TryAdd(organization.Id, organization);
                        organization.API = this;

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Update organization

                case "updateOrganization":

                    if (Organization.TryParseJSON(Data,
                                                  out organization2,
                                                  out errorResponse) && organization2 is not null)
                    {

                        organization = organization2;

                        if (organizations.TryGetValue(organization.Id, out var OldOrganization))
                        {

                            organizations.TryRemove(OldOrganization.Id, out _);
                            organization.API = this;
                            organization.CopyAllLinkedDataFrom(OldOrganization);

                            organizations.TryAdd(organization.Id, organization);

                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Delete organization

                case "deleteOrganization":

                    if (Organization.TryParseJSON(Data,
                                                  out organization2,
                                                  out errorResponse) && organization2 is not null)
                    {

                        organization = organization2;

                        if (TryGetOrganization(organization.Id, out var __Organization))
                        {

                            // this --edge--> other_organization
                            foreach (var edge in __Organization.Organization2OrganizationOutEdges)
                                edge.Target.RemoveInEdge(edge);

                            // this <--edge-- other_organization
                            foreach (var edge in __Organization.Organization2OrganizationInEdges)
                                edge.Source.RemoveOutEdge(edge);

                            // this <--edge-- user
                            foreach (var edge in __Organization.User2OrganizationEdges)
                                edge.Source.RemoveOutEdge(edge);

                        }

                        organizations.TryRemove(organization.Id, out _);

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion


                #region Add user to organization

                case "addUserToOrganization":

                    if (!User_Id.TryParse(Data["user"]?.Value<String>(), out var U2O_UserId))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Invalid user identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetUser(U2O_UserId, out var U2O_User))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown user '" + U2O_UserId + "'!"));
                        break;
                    }


                    if (!Organization_Id.TryParse(Data["organization"]?.Value<String>(), out Organization_Id U2O_OrganizationId))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Invalid organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(U2O_OrganizationId, out var U2O_Organization))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown organization '" + U2O_OrganizationId + "'!"));
                        break;
                    }


                    if (!Enum.TryParse(Data["edge"].Value<String>(), out User2OrganizationEdgeLabel U2O_EdgeLabel))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown edge label '" + Data["edge"].Value<String>() + "'!"));
                        break;
                    }


                    U2O_Organization.AddUser(U2O_User.AddOutgoingEdge(U2O_EdgeLabel,
                                                                      U2O_Organization));

                    break;

                #endregion

                #region Remove user from organization

                case "removeUserFromOrganization":

                    if (!User_Id.TryParse(Data["user"]?.Value<String>(), out U2O_UserId))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Invalid user identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetUser(U2O_UserId, out U2O_User))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown user '" + U2O_UserId + "'!"));
                        break;
                    }


                    if (!Organization_Id.TryParse(Data["organization"]?.Value<String>(), out U2O_OrganizationId))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Invalid organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(U2O_OrganizationId, out U2O_Organization))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown organization '" + U2O_OrganizationId + "'!"));
                        break;
                    }


                    if (!Enum.TryParse(Data["edge"].Value<String>(), out U2O_EdgeLabel))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown edge label '" + Data["edge"].Value<String>() + "'!"));
                        break;
                    }

                    foreach (var edge in U2O_User.Edges(U2O_Organization).Where(_edge => _edge.EdgeLabel == U2O_EdgeLabel).ToArray())
                        U2O_User.RemoveOutEdge(edge);

                    foreach (var edge in U2O_Organization.User2OrganizationInEdges(U2O_User).Where(_edge => _edge.EdgeLabel == U2O_EdgeLabel).ToArray())
                        U2O_Organization.RemoveUser(edge.EdgeLabel, U2O_User);

                    break;

                #endregion

                #region Link organizations

                case "linkOrganizations":

                    if (!Organization_Id.TryParse(Data["organizationOut"]?.Value<String>(), out var O2O_OrganizationIdOut))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Invalid outgoing organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(O2O_OrganizationIdOut, out var O2O_OrganizationOut))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown outgoing organization '" + O2O_OrganizationIdOut + "'!"));
                        break;
                    }


                    if (!Organization_Id.TryParse(Data["organizationIn"]?.Value<String>(), out var O2O_OrganizationIdIn))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Invalid incoming organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(O2O_OrganizationIdIn, out var O2O_OrganizationIn))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown incoming organization '" + O2O_OrganizationIdIn + "'!"));
                        break;
                    }


                    if (!Enum.TryParse(Data["edge"].Value<String>(), out Organization2OrganizationEdgeLabel O2O_EdgeLabel))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown edge label '" + Data["edge"].Value<String>() + "'!"));
                        break;
                    }


                    O2O_OrganizationIn.AddEdge(O2O_OrganizationOut.AddOutEdge(O2O_EdgeLabel,
                                                                              O2O_OrganizationIn));

                    break;

                #endregion

                #region Unlink organizations

                case "unlinkOrganizations":

                    if (!Organization_Id.TryParse(Data["organizationOut"]?.Value<String>(), out O2O_OrganizationIdOut))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Invalid outgoing organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(O2O_OrganizationIdOut, out O2O_OrganizationOut))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown outgoing organization '" + O2O_OrganizationIdOut + "'!"));
                        break;
                    }


                    if (!Organization_Id.TryParse(Data["organizationIn"]?.Value<String>(), out O2O_OrganizationIdIn))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Invalid incoming organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(O2O_OrganizationIdIn, out O2O_OrganizationIn))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown incoming organization '" + O2O_OrganizationIdIn + "'!"));
                        break;
                    }


                    if (!Enum.TryParse(Data["edge"].Value<String>(), out O2O_EdgeLabel))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown edge label '" + Data["edge"].Value<String>() + "'!"));
                        break;
                    }

                    if (O2O_OrganizationOut.
                            Organization2OrganizationOutEdges.
                            Where(edge => edge.Target    == O2O_OrganizationIn).
                            Any  (edge => edge.EdgeLabel == O2O_EdgeLabel))
                    {

                        O2O_OrganizationOut.RemoveOutEdges(O2O_EdgeLabel, O2O_OrganizationIn);

                        if (O2O_OrganizationIn.
                                Organization2OrganizationInEdges.
                                Where(edge => edge.Source    == O2O_OrganizationOut).
                                Any  (edge => edge.EdgeLabel == O2O_EdgeLabel))
                        {
                            O2O_OrganizationIn.RemoveInEdges(O2O_EdgeLabel, O2O_OrganizationOut);
                        }

                    }

                    break;

                #endregion


                #region Add user group

                case "addUserGroup":

                    if (UserGroup.TryParseJSON(Data,
                                               userGroups.TryGetValue,
                                               users.TryGetValue,
                                               out userGroup2,
                                               out errorResponse) && userGroup2 is not null)
                    {

                        userGroup = userGroup2;

                        if (!userGroups.ContainsKey(userGroup.Id))
                        {
                            userGroup.API = this;
                            userGroups.AddAndReturnValue(userGroup.Id, userGroup);
                        }

                        else
                            DebugX.Log("User group '" + userGroup.Id + "' already exists!");

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Add user group if not exists

                case "addUserGroupIfNotExists":

                    if (UserGroup.TryParseJSON(Data,
                                               userGroups.TryGetValue,
                                               users.TryGetValue,
                                               out userGroup2,
                                               out errorResponse) && userGroup2 is not null)
                    {

                        userGroup = userGroup2;

                        if (!userGroups.ContainsKey(userGroup.Id))
                        {
                            userGroup.API = this;
                            userGroups.AddAndReturnValue(userGroup.Id, userGroup);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", errorResponse));

                    break;

                #endregion

                #region Add user to user group

                case "addUserToUserGroup":

                    if (!User_Id.TryParse(Data["userId"]?.Value<String>(), out var U2G_UserId))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Invalid user identification '" + Data["userId"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetUser(U2G_UserId, out var U2G_User))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown user '" + U2G_UserId + "'!"));
                        break;
                    }


                    if (!UserGroup_Id.TryParse(Data["userGroupId"]?.Value<String>(), out var U2G_GroupId))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Invalid group identification '" + Data["userGroupId"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetUserGroup(U2G_GroupId, out var U2G_Group))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown group '" + U2G_GroupId + "'!"));
                        break;
                    }


                    if (!Enum.TryParse(Data["edgeLabel"].Value<String>(), out User2UserGroupEdgeLabel U2G_EdgeLabel))
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " ", Command, ": ", "Unknown edge label '" + Data["edgeLabel"].Value<String>() + "'!"));
                        break;
                    }


                    U2G_Group.AddUser(U2G_User.AddToUserGroup(U2G_EdgeLabel,
                                                              U2G_Group));

                    break;

                #endregion


                #region Add    notification

                case "addNotification":

                    user          = null;
                    organization  = null;

                    if (Data["@context"]?.Value<String>().IsNotNullOrEmpty() != true)
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the @context is invalid or missing!"));
                        break;
                    }

                    if (Data.ContainsKey("userId"))
                    {

                        if (Data["userId"]?.Value<String>().IsNotNullOrEmpty() == false)
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the 'userId' is invalid or missing!"));
                            break;
                        }

                        if (!User_Id.TryParse(Data["userId"]?.Value<String>(), out userId))
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the userId '" + (Data["userId"]?.Value<String>() ?? "") + "' could not be parsed!"));
                            break;
                        }

                        if (!TryGetUser(userId, out user))
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the user '" + userId + "' is unknown!"));
                            break;
                        }

                    }

                    if (Data.ContainsKey("organizationId"))
                    {

                        if (Data["organizationId"]?.Value<String>().IsNotNullOrEmpty() == false)
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the 'organizationId' is invalid or missing!"));
                            break;
                        }

                        if (!Organization_Id.TryParse(Data["organizationId"]?.Value<String>(), out organizationId))
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the organizationId '" + (Data["organizationId"]?.Value<String>() ?? "") + "' could not be parsed!"));
                            break;
                        }

                        if (!TryGetOrganization(organizationId, out organization))
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the organization '" + organizationId + "' is unknown!"));
                            break;
                        }

                    }

                    switch (Data["@context"]?.Value<String>())
                    {

                        case TelegramNotification.JSONLDContext:

                            if (TelegramNotification.TryParse(Data, out TelegramNotification telegramNotification))
                            {
                                user?.        AddNotification(telegramNotification);
                                organization?.AddNotification(telegramNotification);
                            }

                            else
                                DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given Telegram notification!"));

                            break;


                        case TelegramGroupNotification.JSONLDContext:

                            if (TelegramGroupNotification.TryParse(Data, out TelegramGroupNotification telegramGroupNotification))
                            {
                                user?.        AddNotification(telegramGroupNotification);
                                organization?.AddNotification(telegramGroupNotification);
                            }

                            else
                                DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given Telegram group notification!"));

                            break;


                        case SMSNotification.JSONLDContext:

                            if (SMSNotification.TryParse(Data, out SMSNotification smsNotification))
                            {
                                user?.        AddNotification(smsNotification);
                                organization?.AddNotification(smsNotification);
                            }

                            else
                                DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given SMS notification!"));

                            break;


                        case HTTPSNotification.JSONLDContext:

                            if (HTTPSNotification.TryParse(Data, out HTTPSNotification httpsNotification))
                            {
                                user?.        AddNotification(httpsNotification);
                                organization?.AddNotification(httpsNotification);
                            }

                            else
                                DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given HTTPS notification!"));

                            break;


                        case EMailNotification.JSONLDContext:

                            if (EMailNotification.TryParse(Data, out EMailNotification emailNotification))
                            {
                                user?.        AddNotification(emailNotification);
                                organization?.AddNotification(emailNotification);
                            }

                            else
                                DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given e-mail notification!"));

                            break;


                        default:
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given 'add notification' command as the @context '" + (Data["@context"]?.Value<String>() ?? "") + "' is unknown!"));
                            break;

                    }

                    break;

                #endregion

                #region Remove notification

                case "removeNotification":

                    user          = null;
                    organization  = null;

                    if (Data["@context"]?.Value<String>().IsNotNullOrEmpty() != true)
                    {
                        DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the @context is invalid or missing!"));
                        break;
                    }

                    if (Data.ContainsKey("userId"))
                    {

                        if (Data["userId"]?.Value<String>().IsNotNullOrEmpty() == false)
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the 'userId' is invalid or missing!"));
                            break;
                        }

                        if (!User_Id.TryParse(Data["userId"]?.Value<String>(), out userId))
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the userId '" + (Data["userId"]?.Value<String>() ?? "") + "' could not be parsed!"));
                            break;
                        }

                        if (!TryGetUser(userId, out user))
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the user '" + userId + "' is unknown!"));
                            break;
                        }

                    }

                    if (Data.ContainsKey("organizationId"))
                    {

                        if (Data["organizationId"]?.Value<String>().IsNotNullOrEmpty() == false)
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the 'organizationId' is invalid or missing!"));
                            break;
                        }

                        if (!Organization_Id.TryParse(Data["organizationId"]?.Value<String>(), out organizationId))
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the organizationId '" + (Data["organizationId"]?.Value<String>() ?? "") + "' could not be parsed!"));
                            break;
                        }

                        if (!TryGetOrganization(organizationId, out organization))
                        {
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given '" + Command + "' command as the organization '" + organizationId + "' is unknown!"));
                            break;
                        }

                    }

                    switch (Data["@context"]?.Value<String>())
                    {

                        case TelegramNotification.JSONLDContext:

                            if (TelegramNotification.TryParse(Data, out TelegramNotification telegramNotification))
                            {

                                if (user         != null)
                                    await user.        RemoveNotification(telegramNotification);

                                if (organization != null)
                                    await organization.RemoveNotification(telegramNotification);

                            }

                            else
                                DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given Telegram notification!"));

                            break;


                        case TelegramGroupNotification.JSONLDContext:

                            if (TelegramGroupNotification.TryParse(Data, out TelegramGroupNotification telegramGroupNotification))
                            {

                                if (user         != null)
                                    await user.        RemoveNotification(telegramGroupNotification);

                                if (organization != null)
                                    await organization.RemoveNotification(telegramGroupNotification);

                            }

                            else
                                DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given Telegram group notification!"));

                            break;


                        case SMSNotification.JSONLDContext:

                            if (SMSNotification.TryParse(Data, out SMSNotification smsNotification))
                            {

                                if (user         != null)
                                    await user.        RemoveNotification(smsNotification);

                                if (organization != null)
                                    await organization.RemoveNotification(smsNotification);

                            }

                            else
                                DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given SMS notification!"));

                            break;


                        case HTTPSNotification.JSONLDContext:

                            if (HTTPSNotification.TryParse(Data, out HTTPSNotification httpsNotification))
                            {

                                if (user         != null)
                                    await user.        RemoveNotification(httpsNotification);

                                if (organization != null)
                                    await organization.RemoveNotification(httpsNotification);

                            }

                            else
                                DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given HTTPS notification!"));

                            break;


                        case EMailNotification.JSONLDContext:

                            if (EMailNotification.TryParse(Data, out EMailNotification emailNotification))
                            {

                                if (user         != null)
                                    await user.        RemoveNotification(emailNotification);

                                if (organization != null)
                                    await organization.RemoveNotification(emailNotification);

                            }

                            else
                                DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given e-mail notification!"));

                            break;


                        default:
                            DebugX.Log(String.Concat(nameof(HTTPExtAPI), " Could not parse the given 'add notification' command as the @context '" + (Data["@context"]?.Value<String>() ?? "") + "' is unknown!"));
                            break;

                    }

                    break;

                #endregion


                default:
                    DebugX.Log(String.Concat(nameof(HTTPExtAPI), ": does not know what to do with event '", Command,
                                             Sender.IsNotNullOrEmpty() ? " via " + Sender : "",
                                             LineNumber.HasValue ? ", line " + LineNumber.Value : "",
                                             "'!"));
                    break;

            }

        }

        #endregion


        #region (protected internal) WriteToDatabaseFile(              MessageType, JSONData, EventTrackingId, ...)

        /// <summary>
        /// Write data to a log file.
        /// </summary>
        /// <param name="MessageType">The type of the message.</param>
        /// <param name="JSONData">The JSON data of the message.</param>
        /// <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal Task WriteToDatabaseFile(NotificationMessageType  MessageType,
                                                    JObject                  JSONData,
                                                    EventTracking_Id?        EventTrackingId,
                                                    User_Id?                 CurrentUserId   = null)

            => WriteToDatabaseFile(DatabaseFileName,
                                   MessageType,
                                   JSONData,
                                   EventTrackingId,
                                   CurrentUserId);

        #endregion

        #region (protected internal) WriteToDatabaseFile(DatabaseFile, MessageType, JSONData, EventTrackingId, ...)

        /// <summary>
        /// Write data to a database file.
        /// </summary>
        /// <param name="DatabaseFile">The database file.</param>
        /// <param name="MessageType">The type of the message.</param>
        /// <param name="JSONData">The JSON data of the message.</param>
        /// <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFile(String                   DatabaseFile,
                                                          NotificationMessageType  MessageType,
                                                          JObject                  JSONData,
                                                          EventTracking_Id?        EventTrackingId,
                                                          User_Id?                 CurrentUserId     = null)
        {

            if (!DisableLogging || !DisableNotifications)
            {

                try
                {

                    var Now          = Timestamp.Now;

                    var JSONMessage  = new JObject(
                                           new JProperty(MessageType.ToString(),  JSONData),
                                           new JProperty("eventTrackingId",       (EventTrackingId ?? EventTracking_Id.New).ToString()),
                                           new JProperty("userId",                (CurrentUserId ?? CurrentAsyncLocalUserId.Value ?? Robot.Id).ToString()),
                                           new JProperty("systemId",              SystemId.ToString()),
                                           new JProperty("timestamp",             Now.ToIso8601()),
                                           new JProperty("sha256hash",            new JObject(
                                               new JProperty("nonce",                 Guid.NewGuid().ToString().Replace("-", "")),
                                               new JProperty("parentHash",            CurrentDatabaseHashValue)
                                           ))
                                       );

                    var SHA256                = new SHA256Managed();
                    CurrentDatabaseHashValue  = SHA256.ComputeHash(Encoding.Unicode.GetBytes(JSONMessage.ToString(Newtonsoft.Json.Formatting.None))).
                                                       Select(value => String.Format("{0:x2}", value)).
                                                       Aggregate();

                    (JSONMessage["sha256hash"] as JObject)?.Add(new JProperty("hashValue",  CurrentDatabaseHashValue));


                    #region Write to database file

                    if (!DisableLogging)
                    {

                        try
                        {

                            await LogFileSemaphore.WaitAsync();

                            var retry       = 0;
                            var maxRetries  = 23;

                            do
                            {

                                try
                                {

                                    File.AppendAllText(DatabaseFile ?? DatabaseFileName,
                                                       JSONMessage.ToString(Newtonsoft.Json.Formatting.None) + Environment.NewLine);

                                    retry = maxRetries;

                                }
                                catch (IOException ioEx)
                                {
                                    DebugX.Log("Retry " + retry + ": Could not write message '" + MessageType + "' to logfile '" + DatabaseFile + "': " + ioEx.Message);
                                    await Task.Delay(10);
                                    retry++;
                                }
                                catch (Exception e)
                                {
                                    DebugX.Log("Retry " + retry + ": Could not write message '" + MessageType + "' to logfile '" + DatabaseFile + "': " + e.Message);
                                    await Task.Delay(10);
                                    retry++;
                                }

                            } while (retry < maxRetries);

                        }
                        catch (Exception e)
                        {
                            //ToDo: Handle WriteToLogfileAndNotify(...Write to logfile...) exceptions!
                        }
                        finally
                        {
                            LogFileSemaphore.Release();
                        }

                    }

                    #endregion

                }
                catch (Exception e)
                {
                    //ToDo: Handle WriteToLogfileAndNotify(...) exceptions!
                }

            }

        }

        #endregion

        #region WriteCommentToDatabaseFile(Comment = null, DatabaseFile = APIDatabaseFile, ...)

        /// <summary>
        /// Write a comment or just an empty comment to a database file.
        /// </summary>
        /// <param name="Comment">An optional comment.</param>
        /// <param name="DatabaseFile">An optional database file.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task WriteCommentToDatabaseFile(String?            Comment           = null,
                                                     String?            DatabaseFile      = null,
                                                     EventTracking_Id?  EventTrackingId   = null,
                                                     User_Id?           CurrentUserId     = null)
        {

            if (!DisableLogging || !DisableNotifications)
            {

                try
                {

                    if (!DisableLogging)
                    {

                        try
                        {

                            await LogFileSemaphore.WaitAsync();

                            var retry       = 0;
                            var maxRetries  = 23;
                            var text1       = (Comment ?? "no comment!") + (CurrentUserId.HasValue ? "by " + CurrentUserId.ToString() + " " : "");
                            var text2       = "# --" + (text1 != null ? "< " + text1 + " >" : "");
                            var text3       = text2 + new String('-', Math.Max(10, 200 - text2.Length)) + Environment.NewLine;

                            do
                            {

                                try
                                {
                                    File.AppendAllText(DatabaseFile ?? DatabaseFileName, text3);
                                    retry = maxRetries;
                                }
                                catch (IOException ioEx)
                                {
                                    DebugX.Log("Retry " + retry + ": Could not write comment '" + Comment + "' to logfile '" + DatabaseFile + "': " + ioEx.Message);
                                    await Task.Delay(10);
                                    retry++;
                                }
                                catch (Exception e)
                                {
                                    DebugX.Log("Retry " + retry + ": Could not write comment '" + Comment + "' to logfile '" + DatabaseFile + "': " + e.Message);
                                    await Task.Delay(10);
                                    retry++;
                                }

                            } while (retry < maxRetries);

                        }
                        catch (Exception e)
                        {
                            //ToDo: Handle WriteToLogfileAndNotify(...Write to logfile...) exceptions!
                        }
                        finally
                        {
                            LogFileSemaphore.Release();
                        }

                    }

                }
                catch (Exception e)
                {
                    //ToDo: Handle WriteToLogfileAndNotify(...) exceptions!
                }

            }

        }

        #endregion

        #region WriteToCustomLogfile(Logfilename, Lock, Data)

        public async Task WriteToCustomLogfile(String         Logfilename,
                                               SemaphoreSlim  Lock,
                                               String         Data)
        {

            if (!DisableLogging)
            {

                try
                {

                    await Lock.WaitAsync();

                    var retry       = 0;
                    var maxRetries  = 23;

                    do
                    {

                        try
                        {

                            File.AppendAllText(Logfilename,
                                               Data +
                                               Environment.NewLine);

                            retry = maxRetries;

                        }
                        catch (IOException ioEx)
                        {
                            DebugX.Log("Retry " + retry + ": Could not write custom logfile '" + Logfilename + "': " + ioEx.Message);
                            await Task.Delay(10);
                            retry++;
                        }
                        catch (Exception e)
                        {
                            DebugX.Log("Retry " + retry + ": Could not write custom logfile '" + Logfilename + "': " + e.Message);
                            await Task.Delay(10);
                            retry++;
                        }

                    } while (retry < maxRetries);

                }
                catch (Exception e)
                {
                    //ToDo: Handle WriteToCustomLogfile(...) exceptions!
                }
                finally
                {
                    Lock.Release();
                }

            }

        }

        #endregion

        #endregion

        #region ECC cryptography...

        #region (static) GenerateKeys(ECParameters)

        public static AsymmetricCipherKeyPair GenerateKeys(X9ECParameters ECParameters)
        {

            var ellipticCurveSpec = new ECDomainParameters(
                                        ECParameters.Curve,
                                        ECParameters.G,
                                        ECParameters.N,
                                        ECParameters.H,
                                        ECParameters.GetSeed()
                                    );

            var g = GeneratorUtilities.GetKeyPairGenerator("ECDH");
            g.Init(new ECKeyGenerationParameters(ellipticCurveSpec, new SecureRandom()));

            return g.GenerateKeyPair();

        }

        #endregion


        #region (static) SerializePrivateKey (PrivateKey)

        public static Byte[] SerializePrivateKey(ECPrivateKeyParameters PrivateKey)
            => PrivateKey.D.ToByteArray();

        #endregion

        #region (static) SerializePublicKey  (PublicKey)

        public static Byte[] SerializePublicKey(ECPublicKeyParameters PublicKey)

            => PublicKey.Q.GetEncoded();

        #endregion

        #region (static) SerializePublicKeyXY(PublicKey)

        public static Tuple<Byte[], Byte[]> SerializePublicKeyXY(ECPublicKeyParameters PublicKey)

            => new (PublicKey.Q.XCoord.ToBigInteger().ToByteArray(),
                    PublicKey.Q.YCoord.ToBigInteger().ToByteArray());

        #endregion


        #region (static) ParsePrivateKeyBytes (ECParameters,      PrivateKeyBytes)

        public static ECPrivateKeyParameters ParsePrivateKeyBytes(X9ECParameters  ECParameters,
                                                                  Byte[]          PrivateKeyBytes)

            => ParsePrivateKeyBytes(new ECDomainParameters(ECParameters.Curve,
                                                           ECParameters.G,
                                                           ECParameters.N,
                                                           ECParameters.H,
                                                           ECParameters.GetSeed()),
                                    PrivateKeyBytes);

        #endregion

        #region (static) ParsePrivateKeyBytes (EllipticCurveSpec, PrivateKeyBytes)

        public static ECPrivateKeyParameters ParsePrivateKeyBytes(ECDomainParameters  EllipticCurveSpec,
                                                                  Byte[]              PrivateKeyBytes)

            => new (new BigInteger(PrivateKeyBytes),
                    EllipticCurveSpec);


        #endregion

        #region (static) ParsePrivateKeyHEX   (ECParameters,      PrivateKeyHEX)

        public static ECPrivateKeyParameters ParsePrivateKeyHEX(X9ECParameters  ECParameters,
                                                         String          PrivateKeyHEX)

            => ParsePrivateKeyHEX(new ECDomainParameters(ECParameters.Curve,
                                                         ECParameters.G,
                                                         ECParameters.N,
                                                         ECParameters.H,
                                                         ECParameters.GetSeed()),
                                  PrivateKeyHEX);

        #endregion

        #region (static) ParsePrivateKeyHEX   (EllipticCurveSpec, PrivateKeyHEX)

        public static ECPrivateKeyParameters ParsePrivateKeyHEX(ECDomainParameters  EllipticCurveSpec,
                                                                String              PrivateKeyHEX)

            => new (new BigInteger(PrivateKeyHEX, 16),
                    EllipticCurveSpec);


        #endregion

        #region (static) ParsePrivateKeyBase64(ECParameters,      PrivateKeyBase64)

        public static ECPrivateKeyParameters ParsePrivateKeyBase64(X9ECParameters  ECParameters,
                                                                   String          PrivateKeyBase64)

            => ParsePrivateKeyBase64(new ECDomainParameters(
                                         ECParameters.Curve,
                                         ECParameters.G,
                                         ECParameters.N,
                                         ECParameters.H,
                                         ECParameters.GetSeed()
                                     ),
                                     PrivateKeyBase64);

        #endregion

        #region (static) ParsePrivateKeyBase64(EllipticCurveSpec, PrivateKeyBase64)

        public static ECPrivateKeyParameters ParsePrivateKeyBase64(ECDomainParameters  EllipticCurveSpec,
                                                                   String              PrivateKeyBase64)

            => new (new BigInteger(PrivateKeyBase64.FromBase64()),
                    EllipticCurveSpec);

        #endregion


        #region (static) ParsePublicKey       (ECParameters,      PublicKey)

        public static ECPublicKeyParameters ParsePublicKey(X9ECParameters  ECParameters,
                                                           Byte[]          PublicKey)

            => new ("ECDSA",
                    ECParameters.Curve.DecodePoint(PublicKey),
                    new ECDomainParameters(ECParameters.Curve,
                                           ECParameters.G,
                                           ECParameters.N,
                                           ECParameters.H,
                                           ECParameters.GetSeed()));

        #endregion

        #region (static) ParsePublicKey       (EllipticCurveSpec, PublicKey)

        public static  ECPublicKeyParameters ParsePublicKey(ECDomainParameters  EllipticCurveSpec,
                                                            Byte[]              PublicKey)

            => new ("ECDSA",
                    EllipticCurveSpec.Curve.DecodePoint(PublicKey),
                    EllipticCurveSpec);

        #endregion

        #region (static) ParsePublicKeyHEX    (ECParameters,      PublicKeyHEX)

        public static ECPublicKeyParameters ParsePublicKeyHEX(X9ECParameters ECParameters,
                                                              String         PublicKeyHEX)

            => new ("ECDSA",
                    ECParameters.Curve.DecodePoint(PublicKeyHEX.HexStringToByteArray()),
                    new ECDomainParameters(ECParameters.Curve,
                                           ECParameters.G,
                                           ECParameters.N,
                                           ECParameters.H,
                                           ECParameters.GetSeed()));

        #endregion

        #region (static) ParsePublicKeyHEX    (EllipticCurveSpec, PublicKeyHEX)

        public static ECPublicKeyParameters ParsePublicKeyHEX(ECDomainParameters  EllipticCurveSpec,
                                                              String              PublicKeyHEX)

            => new ("ECDSA",
                    EllipticCurveSpec.Curve.DecodePoint(PublicKeyHEX.HexStringToByteArray()),
                    EllipticCurveSpec);

        #endregion

        #region (static) ParsePublicKeyBase64 (ECParameters,      PublicKeyBase64)

        public static ECPublicKeyParameters ParsePublicKeyBase64(X9ECParameters ECParameters,
                                                                 String         PublicKeyBase64)

            => new ("ECDSA",
                    ECParameters.Curve.DecodePoint(PublicKeyBase64.FromBase64()),
                    new ECDomainParameters(
                        ECParameters.Curve,
                        ECParameters.G,
                        ECParameters.N,
                        ECParameters.H,
                        ECParameters.GetSeed()
                    ));

        #endregion

        #region (static) ParsePublicKeyBase64 (EllipticCurveSpec, PublicKeyBase64)

        public static ECPublicKeyParameters ParsePublicKeyBase64(ECDomainParameters  EllipticCurveSpec,
                                                                 String              PublicKeyBase64)

            => new ("ECDSA",
                    EllipticCurveSpec.Curve.DecodePoint(PublicKeyBase64.FromBase64()),
                    EllipticCurveSpec);

        #endregion


        #region (static) CalculatePublicKey(PrivateKey)

        /// <summary>
        /// Calculate the public key only using domainParams.getG() and private key.
        /// </summary>
        /// <param name="PrivateKey"></param>
        public static ECPublicKeyParameters CalculatePublicKey(ECPrivateKeyParameters PrivateKey)

            => new ("ECDSA",
                    PrivateKey.Parameters.Curve.DecodePoint(
                        PrivateKey.Parameters.G.Multiply(
                            new BigInteger(PrivateKey.D.ToByteArray()
                        )
                    ).GetEncoded()),
                    PrivateKey.Parameters);

        #endregion


        #region (static) VerifyMessageSignatures(JSONMessage, AllMustBeValid = true)

        public static Boolean VerifyMessageSignatures(JObject  JSONMessage,
                                                      Boolean  AllMustBeValid   = true)
        {

            if (JSONMessage is null)
                return false;

            if (JSONMessage["signatures"] is not JArray signaturesJSON ||
                signaturesJSON.Type != JTokenType.Array ||
                signaturesJSON.Count < 1)
            {
                return false;
            }

            try
            {

                var JSONMessageCopy  = JObject.Parse(JSONMessage.ToString(Newtonsoft.Json.Formatting.None));
                JSONMessageCopy.Remove("signatures");
                var plainText        = JSONMessageCopy.ToString(Newtonsoft.Json.Formatting.None)?.ToUTF8Bytes();

                var results          = new List<Boolean>();

                // loop!
                foreach (var signatureJSON in signaturesJSON)
                {

                    if (signatureJSON is not JObject ||
                        signatureJSON.Type != JTokenType.Object)
                    {
                        results.Add(false);
                        continue;
                    }

                    var publicKey  = signatureJSON["publicKey"]?.Value<String>()?.FromBase64();
                    var signature  = signatureJSON["signature"]?.Value<String>()?.FromBase64();

                    if (plainText is null     ||
                        publicKey is null     ||
                        signature is null     ||
                        plainText.Length == 0 ||
                        publicKey.Length == 0 ||
                        signature.Length == 0)
                    {
                        results.Add(false);
                        continue;
                    }


                    //Byte[] pubKey = publicKey;
                    //var aa = new X509EncodedKeySpec(signaturePublicKey);
                    //var input = new Asn1InputStream(signaturePublicKey);

                    //Byte[] pubKey = null;

                    //Asn1Object p;
                    //while ((p = input.ReadObject()) != null)
                    //{
                    //    pubKey = ((p.ToAsn1Object() as Asn1Sequence)[1] as DerBitString).GetBytes();
                    //    Console.WriteLine(p.ToString());
                    //}

                    var ecp           = SecNamedCurves.GetByName("secp256r1");
                    var ecParams      = new ECDomainParameters(ecp.Curve, ecp.G, ecp.N, ecp.H, ecp.GetSeed());
                    var pubKeyParams  = new ECPublicKeyParameters("ECDSA", ecParams.Curve.DecodePoint(publicKey), ecParams);

                    var SHA256Hash    = SHA256.HashData(plainText);
                    var BlockSize     = 32;

                    var verifier      = SignerUtilities.GetSigner("NONEwithECDSA");
                    verifier.Init(false, pubKeyParams);
                    verifier.BlockUpdate(SHA256Hash, 0, BlockSize);
                    var result        = verifier.VerifySignature(signature);

                    results.Add(result);

                }

                return AllMustBeValid
                           ? results.All(result => result)
                           : results.Any(result => result);

            }
            catch
            {
                return false;
            }

        }

        #endregion

        #region (static) SignMessage(JSONMessage, params KeyPairs)

        public static Boolean SignMessage(JObject JSONMessage, params AsymmetricCipherKeyPair[] KeyPairs)
        {

            if (JSONMessage is null || KeyPairs is null || !KeyPairs.Any())
                return false;

            foreach (var KeyPair in KeyPairs)
            {

                if (KeyPair is null)
                    continue;

                if (KeyPair?.Private is not ECPrivateKeyParameters privateKey)
                    continue;

                if (KeyPair?.Public  is not ECPublicKeyParameters  publicKey)
                    continue;

                if (JSONMessage["signatures"] is not null &&
                    JSONMessage["signatures"]?.Type != JTokenType.Array)
                {
                    return false;
                }

                var cc = new Newtonsoft.Json.Converters.IsoDateTimeConverter {
                    DateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffZ"
                };

                var messageText  = JSONMessage.ToString(Newtonsoft.Json.Formatting.None, cc);
                var messageJSON  = JObject.Parse(messageText);
                messageJSON.Remove("signatures");

                var plainText    = messageJSON.ToString(Newtonsoft.Json.Formatting.None, cc);
                var sha256Hash   = SHA256.HashData(plainText.ToUTF8Bytes());
                var blockSize    = 32;

                if (JSONMessage["signatures"] is not JArray signaturesJSON)
                {
                    signaturesJSON = new JArray();
                    JSONMessage.Add("signatures", signaturesJSON);
                }

                var signatureJSON = new JObject();
                signaturesJSON.Add(signatureJSON);


                var publicKey_Bytes = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(publicKey).PublicKeyData.GetBytes();
                signatureJSON.Add(new JProperty("publicKey",     Convert.ToBase64String(publicKey_Bytes)));
                signatureJSON.Add(new JProperty("publicKeyHEX",  publicKey_Bytes.ToHexString()));

                var signer       = SignerUtilities.GetSigner("NONEwithECDSA");
                signer.Init(true, privateKey);
                signer.BlockUpdate(sha256Hash, 0, blockSize);
                var signature    = signer.GenerateSignature();
                signatureJSON.Add(new JProperty("signature",    Convert.ToBase64String(signature)));
                signatureJSON.Add(new JProperty("signatureHEX", signature.ToHexString()));


                DebugX.Log("Response: "  + JSONMessage.ToString(Newtonsoft.Json.Formatting.None));
                DebugX.Log("PlainText: " + plainText);
                DebugX.Log("sha256: "    + sha256Hash.ToHexString());

                //// Re-Verify...
                //{
                //    var verifier = SignerUtilities.GetSigner("NONEwithECDSA");
                //    verifier.Init(false, publicKey);
                //    verifier.BlockUpdate(SHA256Hash, 0, BlockSize);
                //    Console.WriteLine("Signature Verification(1): " + (verifier.VerifySignature(signature) ? "ok" : "failed!"));
                //}

                {
                    var ecp           = SecNamedCurves.GetByName("secp256r1");
                    var ecParams      = new ECDomainParameters(ecp.Curve, ecp.G, ecp.N, ecp.H, ecp.GetSeed());
                    var pubKeyParams  = new ECPublicKeyParameters("ECDSA", ecParams.Curve.DecodePoint(publicKey_Bytes), ecParams);
                    var verifier      = SignerUtilities.GetSigner("NONEwithECDSA");
                    verifier.Init(false, pubKeyParams);
                    verifier.BlockUpdate(sha256Hash, 0, blockSize);
                    DebugX.Log("Signature Verification(2): " + (verifier.VerifySignature(signature) ? "ok" : "failed!"));
                }

            }

            return true;

        }

        #endregion


        //// key agreement protocol => ConcatenationKDFGenerator?
        //var keyAgreement  = AgreementUtilities.GetBasicAgreement("ECDH");
        //keyAgreement.Init(backendAPIPrivateKey);
        //var sharedSecret  = keyAgreement.CalculateAgreement(ownerPublicKey).
        //                                 ToByteArrayUnsigned();

        //var sha256Digest  = DigestUtilities.GetDigest("SHA256");
        //var keySize       = 32; // sha256Digest.GetDigestSize()
        //var kdf           = new ECDHKekGenerator(sha256Digest);
        //kdf.Init(new DHKdfParameters(NistObjectIdentifiers.Aes,
        //                             sharedSecret.Length,
        //                             sharedSecret));
        //var symmetricKey  = new Byte[keySize];
        //kdf.GenerateBytes(symmetricKey, 0, keySize);
        //var bigInt        = new BigInteger(1, symmetricKey);

        #endregion


        #region Remote Authorization

        #region AddRemoteAuthServer(URLWithAPIKeyId)

        public void AddRemoteAuthServer(URLWithAPIKey URLWithAPIKeyId)
        {
            lock (remoteAuthServers)
            {
                remoteAuthServers.Add(URLWithAPIKeyId);
            }
        }

        #endregion

        #region AddRemoteAuthServer(URL, APIKeyId)

        public void AddRemoteAuthServer(URL        URL,
                                        APIKey_Id  APIKeyId)
        {
            lock (remoteAuthServers)
            {
                remoteAuthServers.Add(new URLWithAPIKey(URL, APIKeyId));
            }
        }

        #endregion


        #region CheckHTTPCookie(Request,         RemoteAuthServersMaxHopCount = 0)

        public async Task<IUser?> CheckHTTPCookie(HTTPRequest Request,
                                                  Byte?       RemoteAuthServersMaxHopCount = 0)
        {

            if (TryGetSecurityTokenFromCookie(Request, out var securityTokenId))
            {

                var securityToken = await CheckHTTPCookie(securityTokenId,
                                                          RemoteAuthServersMaxHopCount);

                if (securityToken is not null &&
                    _TryGetUser(securityToken.UserId, out var user))
                {
                    return user;
                }

            }

            return null;

        }

        #endregion

        #region CheckHTTPCookie(SecurityTokenId, RemoteAuthServersMaxHopCount = 0)

        public async Task<SecurityToken?> CheckHTTPCookie(SecurityToken_Id SecurityTokenId,
                                                          Byte?            RemoteAuthServersMaxHopCount = 0)
        {

            User_Id? userId = null;

            if (httpCookies.TryGetValue(SecurityTokenId, out var securityToken) &&
                Timestamp.Now < securityToken.Expires)
            {
                userId = securityToken.UserId;
            }

            //if (userId is null && RemoteAuthServersMaxHopCount > 0)
            if (RemoteAuthServersMaxHopCount > 0)
            {
                try
                {

                    var jsonRequest         = JSONObject.Create(
                                                  new JProperty("securityTokenId",  SecurityTokenId.ToString()),
                                                  new JProperty("maxHopCount",      RemoteAuthServersMaxHopCount - 1)
                                              ).ToUTF8Bytes();

                    var _remoteAuthServers  = Array.Empty<URLWithAPIKey>();

                    lock (remoteAuthServers)
                    {
                        _remoteAuthServers = remoteAuthServers.ToArray();
                    }

                    foreach (var remoteAuthServer in _remoteAuthServers)
                    {

                        #region Upstream HTTP(S) request...

                        var httpresult = await HTTPClientFactory.Create(remoteAuthServer.URL,
                                                                        //VirtualHostname,
                                                                        //Description,
                                                                        //RemoteCertificateValidator,
                                                                        //ClientCertificateSelector,
                                                                        //ClientCert,
                                                                        //HTTPUserAgent,
                                                                        //RequestTimeout,
                                                                        //TransmissionRetryDelay,
                                                                        //MaxNumberOfRetries,
                                                                        //UseHTTPPipelining,
                                                                        //HTTPLogger,
                                                                        DNSClient: DNSClient).

                                                   Execute(client => client.CHECKRequest(remoteAuthServer.URL.Path + "securityToken",
                                                                                         requestbuilder => {
                                                                                             requestbuilder.Host         = remoteAuthServer.URL.Hostname;
                                                                                             requestbuilder.API_Key      = remoteAuthServer.APIKeyId;
                                                                                             requestbuilder.Accept.Add(HTTPContentType.JSON_UTF8);
                                                                                             requestbuilder.ContentType  = HTTPContentType.JSON_UTF8;
                                                                                             requestbuilder.Content      = jsonRequest;
                                                                                         }),

                                                           //RequestLogDelegate:   OnGetCDRsHTTPRequest,
                                                           //ResponseLogDelegate:  OnGetCDRsHTTPResponse,
                                                           //CancellationToken:    CancellationToken,
                                                           //EventTrackingId:      EventTrackingId,
                                                           RequestTimeout:       TimeSpan.FromSeconds(5)).

                                                   ConfigureAwait(false);

                        #endregion


                        if (httpresult.HTTPStatusCode == HTTPStatusCode.OK)
                        {

                            var JSONResponse = JObject.Parse(httpresult.HTTPBody.ToUTF8String());

                            #region Parse userId       [mandatory]

                            if (JSONResponse.ParseMandatory("userId",
                                                            "user identificcation",
                                                            User_Id.TryParse,
                                                            out User_Id _userId,
                                                            out String  errorDescription))
                            {
                                userId = _userId;
                            }

                            #endregion

                            #region Parse expires      [optional]

                            if (JSONResponse.ParseOptional("expires",
                                                           "security token expires",
                                                           out DateTime? expires,
                                                           out           errorDescription))
                            { }

                            #endregion

                            #region Parse superuser    [optional]

                            User_Id? superuserId = null;

                            if (JSONResponse.ParseOptional("superUserId",
                                                           "super user identificcation",
                                                           User_Id.TryParse,
                                                           out User_Id _superuserId,
                                                           out         errorDescription))
                            {
                                if (errorDescription != null)
                                    superuserId = _superuserId;
                            }

                            #endregion


                            if (userId.HasValue && expires.HasValue)
                            {

                                lock (httpCookies)
                                {
                                    if (!httpCookies.ContainsKey(SecurityTokenId))
                                        httpCookies.TryAdd(SecurityTokenId,
                                                           new SecurityToken(userId.Value,
                                                                             expires.Value,
                                                                             superuserId));
                                }

                                break;

                            }

                        }

                    }

                }
                catch
                { }
            }

            if (userId.HasValue)
                return securityToken;

            return null;

        }

        #endregion


        #region CheckHTTPBasicAuth(Request)

        public IUser? CheckHTTPBasicAuth(HTTPRequest Request)
        {

            if (Request.Authorization is HTTPBasicAuthentication basicAuthentication)
            {

                // Find username or e-mail addresses...
                var possibleUsers = new HashSet<IUser>();
                var validUsers    = new HashSet<IUser>();

                if (User_Id.TryParse   (basicAuthentication.Username, out var _UserId) &&
                    users. TryGetValue(_UserId,                       out var _User))
                {
                    possibleUsers.Add(_User);
                }

                if (possibleUsers.Count == 0)
                {
                    foreach (var user in users.Values)
                    {
                        if (String.Equals(basicAuthentication.Username,
                                          user.EMail.Address.ToString(),
                                          StringComparison.OrdinalIgnoreCase))
                        {
                            possibleUsers.Add(user);
                        }
                    }
                }

                if (possibleUsers.Count > 0)
                {
                    foreach (var possibleUser in possibleUsers)
                    {
                        if (loginPasswords.TryGetValue(possibleUser.Id, out var loginPassword) &&
                            loginPassword.VerifyPassword(basicAuthentication.Password))
                        {
                            validUsers.Add(possibleUser);
                        }
                    }
                }

                if (validUsers.Count == 1)
                    return validUsers.First();

            }

            return null;

        }

        #endregion


        #region CheckHTTPAPIKey(Request)

        public IUser? CheckHTTPAPIKey(HTTPRequest Request)
        {

            if (Request.API_Key.HasValue &&
                TryGetAPIKey(Request.API_Key.Value, out var apiKey) &&
                APIKeyIsValid(apiKey!) &&
                _TryGetUser(apiKey!.UserId, out var user))
            {
                return user;
            }

            return null;

        }

        #endregion

        #endregion


        #region Users

        #region Users

        /// <summary>
        /// An enumeration of all users.
        /// </summary>
        protected internal readonly  ConcurrentDictionary<User_Id, IUser>                    users                = new ();

        /// <summary>
        /// All logins and passwords.
        /// </summary>
        protected          readonly  ConcurrentDictionary<User_Id, LoginPassword>            loginPasswords       = new ();

        /// <summary>
        /// All verification tokens.
        /// </summary>
        protected          readonly  ConcurrentDictionary<VerificationToken, IUser>          verificationTokens   = new ();

        /// <summary>
        /// All HTTP cookies.
        /// </summary>
        protected          readonly  ConcurrentDictionary<SecurityToken_Id, SecurityToken>   httpCookies          = new ();

        /// <summary>
        /// All password resets.
        /// </summary>
        protected          readonly  ConcurrentDictionary<SecurityToken_Id, PasswordReset>   passwordResets       = new ();


        /// <summary>
        /// An enumeration of all users.
        /// </summary>
        public IEnumerable<IUser> Users
            => users.Values;

        #endregion


        #region (class) UserContext

        /// <summary>
        /// A user context to simplify API usage.
        /// </summary>
        public class UserContext : IDisposable
        {

            /// <summary>
            /// The current user identification.
            /// </summary>
            public User_Id  Current    { get; }

            /// <summary>
            /// The privious user identification.
            /// </summary>
            public User_Id? Previous   { get; }


            /// <summary>
            /// Create a new user context.
            /// </summary>
            /// <param name="UserId">The new user identification.</param>
            public UserContext(User_Id UserId)
            {
                Previous                       = CurrentAsyncLocalUserId.Value;
                Current                        = UserId;
                CurrentAsyncLocalUserId.Value  = UserId;
            }

            /// <summary>
            /// Dispose this object.
            /// </summary>
            public void Dispose()
            {
                CurrentAsyncLocalUserId.Value = Previous;
            }

        }

        #endregion

        #region SetUserContext

        /// <summary>
        /// Set the current user context.
        /// </summary>
        /// <remarks>Wrap this into a using statement.</remarks>
        /// <param name="User">A user.</param>
        public UserContext SetUserContext(IUser User)

            => new (User.Id);


        /// <summary>
        /// Set the current user context.
        /// </summary>
        /// <remarks>Wrap this into a using statement.</remarks>
        /// <param name="UserId">A user identification.</param>
        public UserContext SetUserContext(User_Id UserId)

            => new (UserId);

        #endregion

        #region CurrentAsyncLocalUserId

        /// <summary>
        /// The current async local user identification.
        /// </summary>
        protected internal static AsyncLocal<User_Id?> CurrentAsyncLocalUserId = new();

        #endregion


        #region (protected internal) SendNotifications  (User,                      MessageType(s), OldUser = null, ...)

        protected virtual String UserHTMLInfo(IUser User)

            => String.Concat(User.Name.IsNotNullOrEmpty()
                                 ? String.Concat("<a href=\"https://", ExternalDNSName, BasePath, "/users/", User.Id, "\">", User.Name, "</a> ",
                                                "(<a href=\"https://", ExternalDNSName, BasePath, "/users/", User.Id, "\">", User.Id,   "</a>)")
                                 : String.Concat("<a href=\"https://", ExternalDNSName, BasePath, "/users/", User.Id, "\">", User.Id,   "</a>"));

        protected virtual String UserTextInfo(IUser User)

            => String.Concat(User.Name.IsNotNullOrEmpty()
                                 ? String.Concat("'", User.Name, "' (", User.Id, ")")
                                 : String.Concat("'", User.Id.ToString(), "'"));


        /// <summary>
        /// Send user notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldUser">The old/updated user.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal virtual Task SendNotifications(IUser                    User,
                                                          NotificationMessageType  MessageType,
                                                          IUser?                   OldUser           = null,
                                                          EventTracking_Id?        EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)

            => SendNotifications(User,
                                 new NotificationMessageType[] { MessageType },
                                 OldUser,
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldUser">The old/updated user.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async virtual Task SendNotifications(IUser                                 User,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                IUser?                                OldUser           = null,
                                                                EventTracking_Id?                     EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (User is null)
                throw new ArgumentNullException(nameof(User),          "The given user must not be null!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldUser == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            ComparizionResult? comparizionResult = null;

            if (messageTypes.Contains(updateUser_MessageType))
                comparizionResult = (User as User).CompareWith(OldUser as User);


            #region Get notification settings from his organisations and higher-level organizations

            var allHisOrganizations = User.User2Organization_OutEdges.
                                           Where (edge => edge.EdgeLabel == User2OrganizationEdgeLabel.IsAdmin ||
                                                          edge.EdgeLabel == User2OrganizationEdgeLabel.IsMember).
                                           Select(edge => edge.Target).
                                           ToSafeHashSet();

            // Limit the number of levels, or people will get overwhelmed by e-mails...
            for (var i = 0; i <= 5; i++)
            {
                foreach (var higherLevelOrganization in allHisOrganizations.ToArray().
                                                                            SelectMany(org => org.Organization2OrganizationOutEdges.
                                                                                                  Where (edge => edge.EdgeLabel == Organization2OrganizationEdgeLabel.IsChildOf).
                                                                                                  Select(edge => edge.Target)))
                {
                    if (higherLevelOrganization != NoOwner)
                        allHisOrganizations.Add(higherLevelOrganization);
                }
            }

            #endregion


           if (!DisableNotifications)
           {

                #region Telegram Notifications

                //if (TelegramClient != null)
                //{
                //    try
                //    {

                //        var AllTelegramNotifications  = User.GetNotificationsOf<TelegramNotification>(messageTypes).
                //                                             ToSafeHashSet();

                //        foreach (var telegramNotification in allHisOrganizations.SelectMany(org => org.GetNotificationsOf<TelegramNotification>(messageTypes)))
                //            AllTelegramNotifications.Add(telegramNotification);

                //        if (AllTelegramNotifications.SafeAny())
                //        {

                //            if (messageTypes.Contains(addUser_MessageType))
                //                await TelegramClient.SendTelegrams(String.Concat("User ", UserHTMLInfo(User), " was successfully added."),
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                //            if (messageTypes.Contains(updateUser_MessageType))
                //                await TelegramClient.SendTelegrams(String.Concat("User ", UserHTMLInfo(User), " information had been successfully updated.\n", comparizionResult?.ToTelegram() ?? ""),
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                //        }

                //    }
                //    catch (Exception e)
                //    {
                //        DebugX.LogException(e);
                //    }
                //}

                #endregion

                #region SMS Notifications

                //try
                //{

                //    var AllSMSNotifications  = User.GetNotificationsOf<SMSNotification>(messageTypes).ToSafeHashSet();

                //    foreach (var SMSNotification in allHisOrganizations.SelectMany(org => org.GetNotificationsOf<SMSNotification>(messageTypes)))
                //        AllSMSNotifications.Add(SMSNotification);

                //    if (AllSMSNotifications.SafeAny())
                //    {

                //        if (messageTypes.Contains(addUser_MessageType))
                //        {
                //            SendSMS(String.Concat("User ", UserTextInfo(User), " was successfully added. ",
                //                                  "https://", ExternalDNSName, BasePath, "/users/", User.Id),
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);
                //        }

                //        if (messageTypes.Contains(updateUser_MessageType))
                //        {
                //            SendSMS(String.Concat("User ", UserTextInfo(User), " information had been successfully updated. ",
                //                                  "https://", ExternalDNSName, BasePath, "/users/", User.Id),
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);
                //        }

                //    }

                //}
                //catch (Exception e)
                //{
                //    DebugX.LogException(e);
                //}

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications  = User.GetNotificationsOf<HTTPSNotification>(messageTypes).
                                                      ToSafeHashSet();

                    foreach (var HTTPSNotification in allHisOrganizations.SelectMany(org => org.GetNotificationsOf<HTTPSNotification>(messageTypes)))
                        AllHTTPSNotifications.Add(HTTPSNotification);

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(addUser_MessageType))
                        {
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("userCreated",
                                                                 User.ToJSON()
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));
                        }

                        if (messageTypes.Contains(updateUser_MessageType))
                        {
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("userUpdated",
                                                                 User.ToJSON()
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));
                        }

                        //if (messageTypes.Contains(deleteUser_MessageType))
                        //{
                        //    await SendHTTPSNotifications(AllHTTPSNotifications,
                        //                                 new JObject(
                        //                                     new JProperty("userRemoved",
                        //                                         User.ToJSON()
                        //                                     ),
                        //                                     new JProperty("timestamp", Timestamp.Now.ToIso8601())
                        //                                 ));
                        //}

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region E-Mail Notifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications  = User.GetNotificationsOf<EMailNotification>(messageTypes).
                                                          ToSafeHashSet();

                        foreach (var eMailNotification in allHisOrganizations.SelectMany(org => org.GetNotificationsOf<EMailNotification>(messageTypes)))
                            AllEMailNotifications.Add(eMailNotification);

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(addUser_MessageType))
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIRobotGPGPassphrase,
                                             Subject        = "User " + UserTextInfo(User) + " was successfully created",

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "User ", UserHTMLInfo(User), " was successfully created.",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "User ", UserTextInfo(User), " was successfully created.\r\n",
                                                                            "https://", ExternalDNSName, BasePath, "/users/", User.Id, "\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });

                            if (messageTypes.Contains(updateUser_MessageType))
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIRobotGPGPassphrase,
                                             Subject        = "User " + UserTextInfo(User) + " information had been successfully updated",

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "User ", UserHTMLInfo(User), " information had been successfully updated.<br /><br />",
                                                                            comparizionResult?.ToHTML() ?? "",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "User ", UserTextInfo(User), " information had been successfully updated.\r\r\r\r",
                                                                            comparizionResult?.ToText() ?? "",
                                                                            "\r\r\r\r",
                                                                            "https://", ExternalDNSName, BasePath, "/users/", User.Id, "\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion

        #region (protected internal) SendNotifications  (User, ParentOrganizations, MessageType(s), ...)

        /// <summary>
        /// Send user notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="ParentOrganizations">The enumeration of parent organizations.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal virtual Task SendNotifications(IUser                       User,
                                                          IEnumerable<IOrganization>  ParentOrganizations,
                                                          NotificationMessageType     MessageType,
                                                          EventTracking_Id?           EventTrackingId   = null,
                                                          User_Id?                    CurrentUserId     = null)

            => SendNotifications(User,
                                 ParentOrganizations,
                                 new NotificationMessageType[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="ParentOrganizations">The enumeration of parent organizations.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async virtual Task SendNotifications(IUser                                 User,
                                                                IEnumerable<IOrganization>            ParentOrganizations,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id?                     EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            ParentOrganizations ??= Array.Empty<Organization>();

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),         "The given enumeration of message types must not be null or empty!");

            //if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
            //    messageTypesHash.Add(addUser_MessageType);

            //if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
            //    messageTypesHash.Add(OldUser == null
            //                           ? addUser_MessageType
            //                           : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                //if (TelegramClient != null)
                //{
                //    try
                //    {

                //        var AllTelegramNotifications  = ParentOrganizations.
                //                                            SelectMany(parent => parent.User2OrganizationEdges).
                //                                            SelectMany(edge   => edge.Source.GetNotificationsOf<TelegramNotification>(deleteUser_MessageType)).
                //                                            ToSafeHashSet();

                //        if (AllTelegramNotifications.SafeAny())
                //        {

                //            if (messageTypes.Contains(deleteUser_MessageType))
                //                await TelegramClient.SendTelegrams(String.Concat("User ", UserHTMLInfo(User), " has been deleted."),
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                //        }

                //    }
                //    catch (Exception e)
                //    {
                //        DebugX.LogException(e);
                //    }
                //}

                #endregion

                #region SMS Notifications

                //try
                //{

                //    var AllSMSNotifications = ParentOrganizations.
                //                                  SelectMany(parent => parent.User2OrganizationEdges).
                //                                  SelectMany(edge   => edge.Source.GetNotificationsOf<SMSNotification>(deleteUser_MessageType)).
                //                                  ToSafeHashSet();

                //    if (AllSMSNotifications.SafeAny())
                //    {

                //        if (messageTypes.Contains(deleteUser_MessageType))
                //            SendSMS(String.Concat("User ", UserTextInfo(User), " has been deleted."),
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);

                //    }

                //}
                //catch (Exception e)
                //{
                //    DebugX.LogException(e);
                //}

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications = ParentOrganizations.
                                                    SelectMany(parent => parent.User2OrganizationEdges).
                                                    SelectMany(edge   => edge.Source.GetNotificationsOf<HTTPSNotification>(deleteUser_MessageType)).
                                                    ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(deleteUser_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("userDeleted",
                                                                 User.ToJSON()
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications = ParentOrganizations.
                                                        SelectMany(parent => parent.User2OrganizationEdges).
                                                        SelectMany(edge   => edge.Source.GetNotificationsOf<EMailNotification>(deleteUser_MessageType)).
                                                        ToSafeHashSet();

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(deleteUser_MessageType))
                                await SMTPClient.Send(
                                     new HTMLEMailBuilder() {

                                         From           = Robot.EMail,
                                         To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                         Passphrase     = APIRobotGPGPassphrase,
                                         Subject        = "User " + UserTextInfo(User) + " has been deleted",

                                         HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserHTMLInfo(User), " has been deleted.<br />",
                                                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserTextInfo(User), " has been deleted.\r\n",
                                                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         SecurityLevel  = EMailSecurity.autosign

                                     });

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion

        #region (protected internal) GetUserSerializator(Request, User)

        protected internal CustomUserSerializerDelegate GetUserSerializator(HTTPRequest  Request,
                                                                            IUser        User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (user,
                            embedded)

                            => user.ToJSON(embedded);

            }

        }

        #endregion


        #region AddUser           (User,      (Membership, Organization), ..., OnAdded = null, ...)

        /// <summary>
        /// A delegate called whenever a user was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user was added.</param>
        /// <param name="User">The added user.</param>
        /// <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnUserAddedDelegate(DateTime           Timestamp,
                                                 IUser              User,
                                                 EventTracking_Id?  EventTrackingId   = null,
                                                 User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user was added.
        /// </summary>
        public event OnUserAddedDelegate? OnUserAdded;


        #region (protected internal) addUser(User,                            SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user to the API.
        /// </summary>
        /// <param name="User">A new user to be added to this API.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddUserResult>

            addUser(IUser                 User,
                     Boolean               SkipDefaultNotifications   = false,
                     Boolean               SkipNewUserEMail           = false,
                     Boolean               SkipNewUserNotifications   = false,
                     OnUserAddedDelegate?  OnAdded                    = null,
                     EventTracking_Id?     EventTrackingId            = null,
                     User_Id?              CurrentUserId              = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User.API is not null && User.API != this)
                return AddUserResult.ArgumentError(
                           User,
                           "The given user is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (users.ContainsKey(User.Id))
                return AddUserResult.ArgumentError(
                           User,
                           $"The given user identification '{User.Id}' already exists!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (User.Id.Length < MinUserIdLength)
                return AddUserResult.ArgumentError(
                           User,
                           $"The given user identification '{User.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (User.Name.IsNullOrEmpty() || User.Name.IsNullOrEmpty())
                return AddUserResult.ArgumentError(
                           User,
                           "The given user name must not be null!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (User.Name.FirstText().Length < MinUserNameLength)
                return AddUserResult.ArgumentError(
                           User,
                           $"The given user name '{User.Name}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            User.API = this;


            await WriteToDatabaseFile(addUser_MessageType,
                                      User.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            users.TryAdd(User.Id, User);
            var now = Timestamp.Now;

            #region Register 'New User Default'-Notifications

            if (!SkipDefaultNotifications)
            {

                var newUserDefaultNotificationMessageGroups = notificationGroups.Values.
                                                                  SelectMany(group       => group.Notifications).
                                                                  Where     (description => description.Tags.Contains(NotificationTag.NewUserDefault)).
                                                                  SelectMany(description => description.Messages).
                                                                  ToSafeHashSet();

                if (newUserDefaultNotificationMessageGroups.Any())
                    await addNotification(User,
                                           new EMailNotification(User.EMail,
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 newUserDefaultNotificationMessageGroups,
                                                                 "Default notifications for new users"),
                                           eventTrackingId,
                                           CurrentUserId);

            }

            #endregion


            OnAdded?.Invoke(now,
                            User,
                            eventTrackingId,
                            CurrentUserId);

            var OnUserAddedLocal = OnUserAdded;
            if (OnUserAddedLocal is not null)
                await OnUserAddedLocal.Invoke(now,
                                              User,
                                              eventTrackingId,
                                              CurrentUserId);

            var resetPasswordResult = await _ResetPassword(User,
                                                           SuppressNotifications:  true,
                                                           EventTrackingId:        eventTrackingId);

            if (!SkipNewUserEMail)
                await SMTPClient.Send(NewUserSignUpEMailCreator(User,
                                                                User.EMail,
                                                                resetPasswordResult.PasswordReset.SecurityToken1,
                                                                User.MobilePhone.HasValue,
                                                                DefaultLanguage,
                                                                eventTrackingId));

            if (!SkipNewUserNotifications)
                await SendNotifications(User,
                                        addUser_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);


            return AddUserResult.Success(
                       User,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddUser                      (User,                            SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserResult> AddUser(IUser                 User,
                                                 Boolean               SkipDefaultNotifications   = false,
                                                 Boolean               SkipNewUserEMail           = false,
                                                 Boolean               SkipNewUserNotifications   = false,
                                                 OnUserAddedDelegate?  OnAdded                    = null,
                                                 EventTracking_Id?     EventTrackingId            = null,
                                                 User_Id?              CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addUser(User,
                                          SkipDefaultNotifications,
                                          SkipNewUserEMail,
                                          SkipNewUserNotifications,
                                          OnAdded,
                                          eventTrackingId,
                                          CurrentUserId);

                }
                catch (Exception e)
                {

                    return AddUserResult.Error(
                               User,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddUserResult.LockTimeout(
                       User,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddUser                      (User, AccessRight, Organization, SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user and add him/her to the given organization.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="AccessRight">The organization membership of the new user.</param>
        /// <param name="Organization">The organization of the new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserResult>

            AddUser(IUser                       User,
                    User2OrganizationEdgeLabel  AccessRight,
                    IOrganization               Organization,
                    Boolean                     SkipDefaultNotifications   = false,
                    Boolean                     SkipNewUserEMail           = false,
                    Boolean                     SkipNewUserNotifications   = false,
                    OnUserAddedDelegate?        OnAdded                    = null,
                    EventTracking_Id?           EventTrackingId            = null,
                    User_Id?                    CurrentUserId              = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        var result = await addUser(User,
                                                    SkipDefaultNotifications,
                                                    SkipNewUserEMail,
                                                    SkipNewUserNotifications,
                                                    async(_timestamp, _user, _eventTrackingId, _currentUserId) => {

                                                        await addUserToOrganization(_user,
                                                                                     AccessRight,
                                                                                     Organization,
                                                                                     _eventTrackingId,
                                                                                     SuppressNotifications:  true,
                                                                                     CurrentUserId:          _currentUserId);

                                                        OnAdded?.Invoke(_timestamp,
                                                                        _user,
                                                                        _eventTrackingId,
                                                                        _currentUserId);

                                                    },
                                                    eventTrackingId ?? EventTracking_Id.New,
                                                    CurrentUserId);

                        result.Organization = Organization;

                        if (result.Result == CommandResult.Success)
                            await SendNotifications(User,
                                                    AccessRight,
                                                    Organization,
                                                    addUserToOrganization_MessageType,
                                                    eventTrackingId,
                                                    CurrentUserId);

                        return result;

                    }
                    catch (Exception e)
                    {

                        return AddUserResult.Error(
                                   User,
                                   e,
                                   eventTrackingId,
                                   SystemId,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserResult.LockTimeout(
                       User,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddUser                      (User, AccessRights,              SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user and add him/her to the given organization.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="AccessRights">The organization memberships of the new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserResult>

            AddUser(IUser                                                          User,
                    IEnumerable<Tuple<User2OrganizationEdgeLabel, IOrganization>>  AccessRights,
                    Boolean                                                        SkipDefaultNotifications   = false,
                    Boolean                                                        SkipNewUserEMail           = false,
                    Boolean                                                        SkipNewUserNotifications   = false,
                    OnUserAddedDelegate?                                           OnAdded                    = null,
                    EventTracking_Id?                                              EventTrackingId            = null,
                    User_Id?                                                       CurrentUserId              = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (AccessRights is null || !AccessRights.Any())
                return AddUserResult.ArgumentError(
                           User,
                           "The given enumeration of access rights must not be null or empty!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        var result = await addUser(User,
                                                    SkipDefaultNotifications,
                                                    SkipNewUserEMail,
                                                    SkipNewUserNotifications,
                                                    async (_timestamp, _user, _eventTrackingId, _currentUserId) => {

                                                        foreach (var accessRight in AccessRights)
                                                            await addUserToOrganization(_user,
                                                                                         accessRight.Item1,
                                                                                         accessRight.Item2,
                                                                                         _eventTrackingId,
                                                                                         SuppressNotifications:  true,
                                                                                         CurrentUserId:          _currentUserId);

                                                        OnAdded?.Invoke(_timestamp,
                                                                        _user,
                                                                        _eventTrackingId,
                                                                        _currentUserId);

                                                    },
                                                    eventTrackingId ?? EventTracking_Id.New,
                                                    CurrentUserId);

                        result.Organization = AccessRights.First().Item2;

                        if (result.Result == CommandResult.Success)
                        {
                            foreach (var accessRight in AccessRights)
                                await SendNotifications(User,
                                                        accessRight.Item1,
                                                        accessRight.Item2,
                                                        addUserToOrganization_MessageType,
                                                        eventTrackingId,
                                                        CurrentUserId);
                        }

                        return result;

                    }
                    catch (Exception e)
                    {

                        return AddUserResult.Error(
                                   User,
                                   e,
                                   eventTrackingId,
                                   SystemId,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserResult.LockTimeout(
                       User,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region AddUserIfNotExists(User,      (Membership, Organization), ..., OnAdded = null, ...)

        #region (protected internal) addUserIfNotExists(User,                            SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given user to the API.
        /// </summary>
        /// <param name="User">A new user to be added to this API.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddUserResult>

            addUserIfNotExists(IUser                 User,
                                Boolean               SkipDefaultNotifications   = false,
                                Boolean               SkipNewUserEMail           = false,
                                Boolean               SkipNewUserNotifications   = false,
                                OnUserAddedDelegate?  OnAdded                    = null,
                                EventTracking_Id?     EventTrackingId            = null,
                                User_Id?              CurrentUserId              = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User.API is not null && User.API != this)
                return AddUserResult.ArgumentError(
                           User,
                           "The given user is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (users.TryGetValue(User.Id, out var existingUser) && existingUser is not null)
                return AddUserResult.NoOperation(
                           existingUser,
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (User.Id.Length < MinUserIdLength)
                return AddUserResult.ArgumentError(
                           User,
                           $"The given user identification '{User.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (User.Name.IsNullOrEmpty() || User.Name.FirstText().IsNullOrEmpty())
                return AddUserResult.ArgumentError(
                           User,
                           "The given user name must not be null!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (User.Name.FirstText().Length < MinUserNameLength)
                return AddUserResult.ArgumentError(
                           User,
                           $"The given user name '{User.Name}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            User.API = this;


            await WriteToDatabaseFile(addUserIfNotExists_MessageType,
                                      User.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            users.TryAdd(User.Id, User);

            #region Register 'New User Default'-Notifications

            if (!SkipDefaultNotifications)
            {

                var newUserDefaultNotificationMessageGroups = notificationGroups.Values.
                                                                    SelectMany(group       => group.Notifications).
                                                                    Where     (description => description.Tags.Contains(NotificationTag.NewUserDefault)).
                                                                    SelectMany(description => description.Messages).
                                                                    ToSafeHashSet();

                if (newUserDefaultNotificationMessageGroups.Any())
                    await addNotification(User,
                                           new EMailNotification(User.EMail,
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 newUserDefaultNotificationMessageGroups,
                                                                 "Default notifications for new users"),
                                           eventTrackingId,
                                           CurrentUserId);

            }

            #endregion

            var now = Timestamp.Now;

            OnAdded?.Invoke(now,
                            User,
                            eventTrackingId,
                            CurrentUserId);

            var OnUserAddedLocal = OnUserAdded;
            if (OnUserAddedLocal is not null)
                await OnUserAddedLocal.Invoke(now,
                                              User,
                                              eventTrackingId,
                                              CurrentUserId);

            var resetPasswordResult = await _ResetPassword(User,
                                                           SuppressNotifications: true,
                                                           EventTrackingId:       eventTrackingId);

            if (!SkipNewUserEMail)
                await SMTPClient.Send(NewUserSignUpEMailCreator(User,
                                                                User.EMail,
                                                                resetPasswordResult.PasswordReset.SecurityToken1,
                                                                User.MobilePhone.HasValue,
                                                                DefaultLanguage,
                                                                eventTrackingId));

            if (!SkipNewUserNotifications)
                await SendNotifications(User,
                                        addUserIfNotExists_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);


            return AddUserResult.Success(
                       User,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddUserIfNotExists                      (User,                            SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserResult>

            AddUserIfNotExists(IUser                 User,
                               Boolean               SkipDefaultNotifications   = false,
                               Boolean               SkipNewUserEMail           = false,
                               Boolean               SkipNewUserNotifications   = false,
                               OnUserAddedDelegate?  OnAdded                    = null,
                               EventTracking_Id?     EventTrackingId            = null,
                               User_Id?              CurrentUserId              = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addUserIfNotExists(User,
                                                     SkipDefaultNotifications,
                                                     SkipNewUserEMail,
                                                     SkipNewUserNotifications,
                                                     OnAdded,
                                                     eventTrackingId,
                                                     CurrentUserId);

                }
                catch (Exception e)
                {

                    return AddUserResult.Error(
                               User,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddUserResult.LockTimeout(
                       User,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddUserIfNotExists                      (User, AccessRight, Organization, SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user and add him/her to the given organization.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="AccessRight">The organization membership of the new user.</param>
        /// <param name="Organization">The organization of the new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserResult>

            AddUserIfNotExists(IUser                       User,
                               User2OrganizationEdgeLabel  AccessRight,
                               IOrganization               Organization,
                               Boolean                     SkipDefaultNotifications   = false,
                               Boolean                     SkipNewUserEMail           = false,
                               Boolean                     SkipNewUserNotifications   = false,
                               OnUserAddedDelegate?        OnAdded                    = null,
                               EventTracking_Id?           EventTrackingId            = null,
                               User_Id?                    CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {

                    try
                    {

                        var result = await addUserIfNotExists(User,
                                                               SkipDefaultNotifications,
                                                               SkipNewUserEMail,
                                                               SkipNewUserNotifications,
                                                               async (_timestamp, _user, _eventTrackingId, _currentUserId) => {

                                                                   await addUserToOrganization(_user,
                                                                                               AccessRight,
                                                                                               Organization,
                                                                                               _eventTrackingId,
                                                                                               SuppressNotifications:  true,
                                                                                               CurrentUserId:          CurrentUserId);

                                                                   OnAdded?.Invoke(_timestamp,
                                                                                   _user,
                                                                                   _eventTrackingId,
                                                                                   _currentUserId);

                                                               },
                                                               eventTrackingId,
                                                               CurrentUserId);

                        result.Organization = Organization;

                        if (result.Result == CommandResult.Success)
                            await SendNotifications(User,
                                                    AccessRight,
                                                    Organization,
                                                    addUserToOrganization_MessageType,
                                                    eventTrackingId,
                                                    CurrentUserId);

                        return result;

                    }
                    catch (Exception e)
                    {

                        return AddUserResult.Error(
                                   User,
                                   e,
                                   eventTrackingId,
                                   SystemId,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserResult.LockTimeout(
                       User,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddUserIfNotExists                      (User, AccessRights,              SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user and add him/her to the given organization.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="AccessRights">The organization memberships of the new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserResult>

            AddUserIfNotExists(IUser                                                          User,
                               IEnumerable<Tuple<User2OrganizationEdgeLabel, IOrganization>>  AccessRights,
                               Boolean                                                        SkipDefaultNotifications   = false,
                               Boolean                                                        SkipNewUserEMail           = false,
                               Boolean                                                        SkipNewUserNotifications   = false,
                               OnUserAddedDelegate?                                           OnAdded                    = null,
                               EventTracking_Id?                                              EventTrackingId            = null,
                               User_Id?                                                       CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (AccessRights is null || !AccessRights.Any())
                return AddUserResult.ArgumentError(
                           User,
                           "The given enumeration of access rights must not be null or empty!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {

                    try
                    {

                        var result = await addUserIfNotExists(User,
                                                               SkipDefaultNotifications,
                                                               SkipNewUserEMail,
                                                               SkipNewUserNotifications,
                                                               async (_timestamp, _user, _eventTrackingId, _currentUserId) => {

                                                                   foreach (var accessRight in AccessRights)
                                                                       await addUserToOrganization(_user,
                                                                                                    accessRight.Item1,
                                                                                                    accessRight.Item2,
                                                                                                    _eventTrackingId,
                                                                                                    SuppressNotifications:  true,
                                                                                                    CurrentUserId:          CurrentUserId);

                                                                   OnAdded?.Invoke(_timestamp,
                                                                                   _user,
                                                                                   _eventTrackingId,
                                                                                   _currentUserId);

                                                               },
                                                               eventTrackingId,
                                                               CurrentUserId);

                        result.Organization = AccessRights.First().Item2;

                        if (result.Result == CommandResult.Success)
                        {
                            foreach (var accessRight in AccessRights)
                                await SendNotifications(User,
                                                        accessRight.Item1,
                                                        accessRight.Item2,
                                                        addUserToOrganization_MessageType,
                                                        eventTrackingId,
                                                        CurrentUserId);
                        }


                        return result;

                    }
                    catch (Exception e)
                    {

                        return AddUserResult.Error(
                                   User,
                                   e,
                                   eventTrackingId,
                                   SystemId,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserResult.LockTimeout(
                       User,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region AddOrUpdateUser   (User,      (Membership, Organization), ..., OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) addOrUpdateUser(User,                            SkipDefaultNotifications = false, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given user to/within the API.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="SkipUserUpdatedNotifications">Do not send the updated user information e-mail to the new user.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddOrUpdateUserResult>

            addOrUpdateUser(IUser                   User,
                             Boolean                 SkipDefaultNotifications       = false,
                             Boolean                 SkipNewUserEMail               = false,
                             Boolean                 SkipNewUserNotifications       = false,
                             Boolean                 SkipUserUpdatedNotifications   = false,
                             OnUserAddedDelegate?    OnAdded                        = null,
                             OnUserUpdatedDelegate?  OnUpdated                      = null,
                             EventTracking_Id?       EventTrackingId                = null,
                             User_Id?                CurrentUserId                  = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User.API is not null && User.API != this)
                return AddOrUpdateUserResult.ArgumentError(
                           User,
                           "The given user is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (User.Id.Length < MinUserIdLength)
                return AddOrUpdateUserResult.ArgumentError(
                           User,
                           $"The given user identification '{User.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (User.Name.IsNullOrEmpty() || User.Name.FirstText().IsNullOrEmpty())
                return AddOrUpdateUserResult.ArgumentError(
                           User,
                           "The given user name must not be null!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (User.Name.FirstText().Length < MinUserNameLength)
                return AddOrUpdateUserResult.ArgumentError(
                           User,
                           $"The given user name '{User.Name}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            User.API = this;


            await WriteToDatabaseFile(addOrUpdateUser_MessageType,
                                      User.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            if (users.TryGetValue(User.Id, out var oldUser) && oldUser is not null)
            {
                users.TryRemove(oldUser.Id, out _);
                User.CopyAllLinkedDataFrom(oldUser);
            }

            users.TryAdd(User.Id, User);
            var now = Timestamp.Now;

            if (oldUser is null)
            {

                #region Register 'New User Default'-Notifications

                if (!SkipDefaultNotifications)
                {

                    var newUserDefaultNotificationMessageGroups = notificationGroups.Values.
                                                                        SelectMany(group       => group.Notifications).
                                                                        Where     (description => description.Tags.Contains(NotificationTag.NewUserDefault)).
                                                                        SelectMany(description => description.Messages).
                                                                        ToSafeHashSet();

                    if (newUserDefaultNotificationMessageGroups.Any())
                        await addNotification(User,
                                               new EMailNotification(User.EMail,
                                                                     "",
                                                                     "",
                                                                     "",
                                                                     newUserDefaultNotificationMessageGroups,
                                                                     "Default notifications for new users"),
                                               eventTrackingId,
                                               CurrentUserId);

                }

                #endregion

                OnAdded?.Invoke(now,
                                User,
                                eventTrackingId,
                                CurrentUserId);

                var OnUserAddedLocal = OnUserAdded;
                if (OnUserAddedLocal is not null)
                    await OnUserAddedLocal.Invoke(now,
                                                  User,
                                                  eventTrackingId,
                                                  CurrentUserId);

                var resetPasswordResult = await _ResetPassword(User,
                                                               SuppressNotifications: true,
                                                               EventTrackingId:       eventTrackingId);

                if (!SkipNewUserEMail)
                    await SMTPClient.Send(NewUserSignUpEMailCreator(User,
                                                                    User.EMail,
                                                                    resetPasswordResult.PasswordReset.SecurityToken1,
                                                                    User.MobilePhone.HasValue,
                                                                    DefaultLanguage,
                                                                    eventTrackingId));

                if (!SkipNewUserNotifications)
                    await SendNotifications(User,
                                            addUser_MessageType,
                                            null,
                                            eventTrackingId,
                                            CurrentUserId);

                return AddOrUpdateUserResult.Added(
                           User,
                           eventTrackingId,
                           SystemId,
                           this
                       );

            }



            OnUpdated?.Invoke(now,
                              User,
                              oldUser,
                              eventTrackingId,
                              CurrentUserId);

            var OnUserUpdatedLocal = OnUserUpdated;
            if (OnUserUpdatedLocal is not null)
                await OnUserUpdatedLocal.Invoke(Timestamp.Now,
                                                User,
                                                oldUser,
                                                eventTrackingId,
                                                CurrentUserId);

            if (!SkipUserUpdatedNotifications)
                await SendNotifications(User,
                                        updateUser_MessageType,
                                        oldUser,
                                        eventTrackingId,
                                        CurrentUserId);

            return AddOrUpdateUserResult.Updated(
                       User,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddOrUpdateUser                      (User,                            SkipDefaultNotifications = false, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given user to/within the API.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="SkipUserUpdatedNotifications">Do not send the updated user information e-mail to the new user.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddOrUpdateUserResult>

            AddOrUpdateUser(IUser                   User,
                            Boolean                 SkipDefaultNotifications       = false,
                            Boolean                 SkipNewUserEMail               = false,
                            Boolean                 SkipNewUserNotifications       = false,
                            Boolean                 SkipUserUpdatedNotifications   = false,
                            OnUserAddedDelegate?    OnAdded                        = null,
                            OnUserUpdatedDelegate?  OnUpdated                      = null,
                            EventTracking_Id?       EventTrackingId                = null,
                            User_Id?                CurrentUserId                  = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addOrUpdateUser(User,
                                                  SkipDefaultNotifications,
                                                  SkipNewUserEMail,
                                                  SkipNewUserNotifications,
                                                  SkipUserUpdatedNotifications,
                                                  OnAdded,
                                                  OnUpdated,
                                                  eventTrackingId,
                                                  CurrentUserId);

                }
                catch (Exception e)
                {

                    return AddOrUpdateUserResult.Error(
                               User,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddOrUpdateUserResult.LockTimeout(
                       User,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddOrUpdateUser                      (User, AccessRight, Organization, SkipDefaultNotifications = false, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given user to/within the API.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="AccessRight">The organization membership of the new user.</param>
        /// <param name="Organization">The organization of the new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="SkipNewUserEMail">Do not send the new user e-mail to the new user.</param>
        /// <param name="SkipNewUserNotifications">Do not send notifications for this user addition.</param>
        /// <param name="SkipUserUpdatedNotifications">Do not send the updated user information e-mail to the new user.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddOrUpdateUserResult> AddOrUpdateUser(IUser                       User,
                                                                 User2OrganizationEdgeLabel  AccessRight,
                                                                 Organization                Organization,
                                                                 Boolean                     SkipDefaultNotifications       = false,
                                                                 Boolean                     SkipNewUserEMail               = false,
                                                                 Boolean                     SkipNewUserNotifications       = false,
                                                                 Boolean                     SkipUserUpdatedNotifications   = false,
                                                                 OnUserAddedDelegate?        OnAdded                        = null,
                                                                 OnUserUpdatedDelegate?      OnUpdated                      = null,
                                                                 EventTracking_Id?           EventTrackingId                = null,
                                                                 User_Id?                    CurrentUserId                  = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        var result = await addOrUpdateUser(User,
                                                            SkipDefaultNotifications,
                                                            SkipNewUserEMail,
                                                            SkipNewUserNotifications,
                                                            SkipUserUpdatedNotifications,
                                                            async (_timestamp, _user, _eventTrackingId, _currentUserId) => {

                                                                await addUserToOrganization(_user,
                                                                                             AccessRight,
                                                                                             Organization,
                                                                                             _eventTrackingId,
                                                                                             SuppressNotifications:  true,
                                                                                             CurrentUserId:          CurrentUserId);

                                                                OnAdded?.Invoke(_timestamp,
                                                                                _user,
                                                                                _eventTrackingId,
                                                                                _currentUserId);

                                                            },
                                                            OnUpdated,
                                                            eventTrackingId,
                                                            CurrentUserId);

                        result.Organization = Organization;

                        if (result.Result == CommandResult.Success)
                            await SendNotifications(User,
                                                    AccessRight,
                                                    Organization,
                                                    addUserToOrganization_MessageType,
                                                    eventTrackingId,
                                                    CurrentUserId);

                        return result;

                    }
                    catch (Exception e)
                    {

                        return AddOrUpdateUserResult.Error(
                                   User,
                                   e,
                                   eventTrackingId,
                                   SystemId,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddOrUpdateUserResult.LockTimeout(
                       User,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region UpdateUser        ((New)User, ...,                                             OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a user was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user was updated.</param>
        /// <param name="User">The updated user.</param>
        /// <param name="OldUser">The old user.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnUserUpdatedDelegate(DateTime           Timestamp,
                                                   IUser              User,
                                                   IUser              OldUser,
                                                   EventTracking_Id?  EventTrackingId   = null,
                                                   User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user was updated.
        /// </summary>
        public event OnUserUpdatedDelegate? OnUserUpdated;


        #region (protected internal) updateUser(NewUser,                 SkipUserUpdatedNotifications = false, OnUpdated = null, ...)

        /// <summary>
        /// Update the given user to/within the API.
        /// </summary>
        /// <param name="NewUser">A user.</param>
        /// <param name="SkipUserUpdatedNotifications">Do not send the updated user information e-mail to the new user.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<UpdateUserResult>

            updateUser(IUser                   NewUser,
                        Boolean                 SkipUserUpdatedNotifications   = false,
                        OnUserUpdatedDelegate?  OnUpdated                      = null,
                        EventTracking_Id?       EventTrackingId                = null,
                        User_Id?                CurrentUserId                  = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (!_TryGetUser(NewUser.Id, out var OldUser))
                return UpdateUserResult.ArgumentError(
                           NewUser,
                           $"The given user '{NewUser.Id}' does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (NewUser.API is not null && NewUser.API != this)
                return UpdateUserResult.ArgumentError(
                           NewUser,
                           "The given user is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            NewUser.API = this;


            await WriteToDatabaseFile(updateUser_MessageType,
                                      NewUser.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            users.TryRemove(OldUser.Id, out _);
            NewUser.CopyAllLinkedDataFrom(OldUser);
            users.TryAdd(NewUser.Id, NewUser);

            var now = Timestamp.Now;

            OnUpdated?.Invoke(now,
                              NewUser,
                              OldUser,
                              eventTrackingId,
                              CurrentUserId);

            var OnUserUpdatedLocal = OnUserUpdated;
            if (OnUserUpdatedLocal is not null)
                await OnUserUpdatedLocal.Invoke(now,
                                                NewUser,
                                                OldUser,
                                                eventTrackingId,
                                                CurrentUserId);

            if (!SkipUserUpdatedNotifications)
                await SendNotifications(NewUser,
                                        updateUser_MessageType,
                                        OldUser,
                                        eventTrackingId,
                                        CurrentUserId);

            return UpdateUserResult.Success(
                       NewUser,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region UpdateUser                      (NewUser,                 SkipUserUpdatedNotifications = false, OnUpdated = null, ...)

        /// <summary>
        /// Update the given user to/within the API.
        /// </summary>
        /// <param name="NewUser">A user.</param>
        /// <param name="SkipUserUpdatedNotifications">Do not send the updated user information e-mail to the new user.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<UpdateUserResult>

            UpdateUser(IUser                   NewUser,
                       Boolean                 SkipUserUpdatedNotifications   = false,
                       OnUserUpdatedDelegate?  OnUpdated                      = null,
                       EventTracking_Id?       EventTrackingId                = null,
                       User_Id?                CurrentUserId                  = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await updateUser(NewUser,
                                             SkipUserUpdatedNotifications,
                                             OnUpdated,
                                             EventTrackingId,
                                             CurrentUserId);

                }
                catch (Exception e)
                {

                    return UpdateUserResult.Error(
                               NewUser,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateUserResult.LockTimeout(
                       NewUser,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion


        #region (protected internal) updateUser(User,    UpdateDelegate, SkipUserUpdatedNotifications = false, OnUpdated = null, ...)

        /// <summary>
        /// Update the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="UpdateDelegate">A delegate to update the given user.</param>
        /// <param name="SkipUserUpdatedNotifications">Do not send the updated user information e-mail to the new user.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<UpdateUserResult>

            updateUser(IUser                   User,
                        Action<User.Builder>    UpdateDelegate,
                        Boolean                 SkipUserUpdatedNotifications   = false,
                        OnUserUpdatedDelegate?  OnUpdated                      = null,
                        EventTracking_Id?       EventTrackingId                = null,
                        User_Id?                CurrentUserId                  = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (!_UserExists(User.Id))
                return UpdateUserResult.ArgumentError(
                           User,
                           $"The given user '{User.Id}' does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (User.API != this)
                return UpdateUserResult.ArgumentError(
                           User,
                           "The given user is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (UpdateDelegate is null)
                return UpdateUserResult.ArgumentError(
                           User,
                           "The given update delegate must not be null!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            var builder = User.ToBuilder();
            UpdateDelegate(builder);
            var updatedUser = builder.ToImmutable;

            await WriteToDatabaseFile(updateUser_MessageType,
                                      updatedUser.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            users.TryRemove(User.Id, out _);
            updatedUser.CopyAllLinkedDataFrom(User);
            users.TryAdd(updatedUser.Id, updatedUser);

            var now = Timestamp.Now;

            OnUpdated?.Invoke(now,
                              updatedUser,
                              User,
                              eventTrackingId,
                              CurrentUserId);

            var OnUserUpdatedLocal = OnUserUpdated;
            if (OnUserUpdatedLocal is not null)
                await OnUserUpdatedLocal.Invoke(now,
                                                updatedUser,
                                                User,
                                                eventTrackingId,
                                                CurrentUserId);

            if (!SkipUserUpdatedNotifications)
                await SendNotifications(updatedUser,
                                        updateUser_MessageType,
                                        User,
                                        eventTrackingId,
                                        CurrentUserId);

            return UpdateUserResult.Success(
                       User,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region UpdateUser                      (User,    UpdateDelegate, SkipUserUpdatedNotifications = false, OnUpdated = null, ...)

        /// <summary>
        /// Update the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="UpdateDelegate">A delegate to update the given user.</param>
        /// <param name="SkipUserUpdatedNotifications">Do not send the updated user information e-mail to the new user.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<UpdateUserResult>

            UpdateUser(IUser                   User,
                       Action<User.Builder>    UpdateDelegate,
                       Boolean                 SkipUserUpdatedNotifications   = false,
                       OnUserUpdatedDelegate?  OnUpdated                      = null,
                       EventTracking_Id?       EventTrackingId                = null,
                       User_Id?                CurrentUserId                  = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await updateUser(User,
                                             UpdateDelegate,
                                             SkipUserUpdatedNotifications,
                                             OnUpdated,
                                             eventTrackingId,
                                             CurrentUserId);

                }
                catch (Exception e)
                {

                    return UpdateUserResult.Error(
                               User,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateUserResult.LockTimeout(
                       User,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region DeleteUser        (User,      ...,                                             OnDeleted = null, ...)

        /// <summary>
        /// A delegate called whenever a user was deleted.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user was deleted.</param>
        /// <param name="User">The user to be deleted.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnUserDeletedDelegate(DateTime           Timestamp,
                                                   IUser              User,
                                                   EventTracking_Id?  EventTrackingId   = null,
                                                   User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user was deleted.
        /// </summary>
        public event OnUserDeletedDelegate? OnUserDeleted;


        #region (protected internal virtual) canDeleteUser(User)

        /// <summary>
        /// Determines whether the user can safely be deleted from the API.
        /// </summary>
        /// <param name="User">The user to be deleted.</param>
        protected internal virtual I18NString? canDeleteUser(IUser User)
        {

            if (User.User2Organization_OutEdges.Any())
                return "The user is still member of an organization!".ToI18NString();

            return null;

        }

        #endregion

        #region (protected internal) deleteUser(User, SkipUserDeletedNotifications = false, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given user.
        /// </summary>
        /// <param name="User">The user to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the user has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<DeleteUserResult> deleteUser(IUser                             User,
                                                                    Boolean                           SkipUserDeletedNotifications   = false,
                                                                    Action<IUser, EventTracking_Id>?  OnDeleted                      = null,
                                                                    EventTracking_Id?                 EventTrackingId                = null,
                                                                    User_Id?                          CurrentUserId                  = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User.API != this)
                return DeleteUserResult.ArgumentError(
                           User,
                           "The given user is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (!users.ContainsKey(User.Id))
                return DeleteUserResult.ArgumentError(
                           User,
                           "The given user does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            var veto = canDeleteUser(User);

            if (veto is not null)
                return DeleteUserResult.CanNotBeRemoved(
                           User,
                           eventTrackingId,
                           SystemId,
                           this,
                           null,
                           veto
                       );


            // Get all parent user groups now, because later
            // the --isMember/Admin/Guest--> edge will no longer be available!
            var parentOrganizations = User.ParentOrganizations().
                                           ToArray();

            await WriteToDatabaseFile(deleteUser_MessageType,
                                      User.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);


            // ToDo: Remove incoming edges


            users.TryRemove(User.Id, out _);

            OnDeleted?.Invoke(User,
                              eventTrackingId);

            var OnUserDeletedLocal = OnUserDeleted;
            if (OnUserDeletedLocal is not null)
                await OnUserDeletedLocal.Invoke(Timestamp.Now,
                                                User,
                                                eventTrackingId,
                                                CurrentUserId);

            if (!SkipUserDeletedNotifications)
                await SendNotifications(User,
                                        parentOrganizations,
                                        deleteUser_MessageType,
                                        eventTrackingId,
                                        CurrentUserId);


            return DeleteUserResult.Success(
                       User,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region DeleteUser                      (User, SkipUserDeletedNotifications = false, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given user.
        /// </summary>
        /// <param name="User">The user to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the user has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<DeleteUserResult> DeleteUser(IUser                             User,
                                                       Boolean                           SkipUserDeletedNotifications   = false,
                                                       Action<IUser, EventTracking_Id>?  OnDeleted                      = null,
                                                       EventTracking_Id?                 EventTrackingId                = null,
                                                       User_Id?                          CurrentUserId                  = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await deleteUser(User,
                                             SkipUserDeletedNotifications,
                                             OnDeleted,
                                             eventTrackingId,
                                             CurrentUserId);

                }
                catch (Exception e)
                {

                    return DeleteUserResult.Error(
                               User,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return DeleteUserResult.LockTimeout(
                       User,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion


        #region UserExists(User)

        /// <summary>
        /// Determines whether the given user exists within this API.
        /// </summary>
        /// <param name="User">The user.</param>
        public Boolean UserExists(IUser User)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _UserExists(User.Id);

                }
                catch (Exception e)
                {
                    DebugX.LogException(e, $"{nameof(HTTPExtAPI)}.{nameof(UserExists)}({User.Id}, ...)");
                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region UserExists(UserId)

        /// <summary>
        /// Determines whether the given user identification exists within this API.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        protected internal Boolean _UserExists(User_Id UserId)

            => UserId.IsNotNullOrEmpty &&
               users.ContainsKey(UserId);

        /// <summary>
        /// Determines whether the given user identification exists within this API.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        protected internal Boolean _UserExists(User_Id? UserId)

            => UserId.HasValue &&
               UserId.IsNotNullOrEmpty() &&
               users.ContainsKey(UserId.Value);


        /// <summary>
        /// Determines whether the given user identification exists within this API.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        public Boolean UserExists(User_Id UserId)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _UserExists(UserId);

                }
                catch (Exception e)
                {
                    DebugX.LogException(e, $"{nameof(HTTPExtAPI)}.{nameof(UserExists)}({UserId}, ...)");
                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given user identification exists within this API.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        public Boolean UserExists(User_Id? UserId)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _UserExists(UserId);

                }
                catch (Exception e)
                {
                    DebugX.LogException(e, $"{nameof(HTTPExtAPI)}.{nameof(UserExists)}({UserId}, ...)");
                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region GetUser   (UserId)

        /// <summary>
        /// Get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        protected internal IUser? _GetUser(User_Id UserId)
        {

            if (!UserId.IsNullOrEmpty &&
                users.TryGetValue(UserId, out var user))
            {
                return user;
            }

            return null;

        }

        /// <summary>
        /// Get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        protected internal IUser? _GetUser(User_Id? UserId)
        {

            if (UserId.HasValue &&
                UserId.IsNotNullOrEmpty() &&
                users.TryGetValue(UserId.Value, out var user))
            {
                return user;
            }

            return null;

        }


        /// <summary>
        /// Get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        public IUser? GetUser(User_Id  UserId)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetUser(UserId);

                }
                catch (Exception e)
                {
                    DebugX.LogException(e, $"{nameof(HTTPExtAPI)}.{nameof(GetUser)}({UserId}, ...)");
                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        /// <summary>
        /// Get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        public IUser? GetUser(User_Id? UserId)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetUser(UserId);

                }
                catch (Exception e)
                {
                    DebugX.LogException(e, $"{nameof(HTTPExtAPI)}.{nameof(GetUser)}({UserId}, ...)");
                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        #endregion

        #region TryGetUser(UserId, out User)

        /// <summary>
        /// Try to get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        /// <param name="User">The user.</param>
        protected internal Boolean _TryGetUser(User_Id UserId, out IUser? User)
        {

            if (!UserId.IsNullOrEmpty &&
                users.TryGetValue(UserId, out var user))
            {
                User = user;
                return true;
            }

            User = null;
            return false;

        }

        /// <summary>
        /// Try to get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        /// <param name="User">The user.</param>
        protected internal Boolean _TryGetUser(User_Id? UserId, out IUser? User)
        {

            if (UserId.HasValue &&
                UserId.IsNotNullOrEmpty() &&
                users.TryGetValue(UserId.Value, out var user))
            {
                User = user;
                return true;
            }

            User = null;
            return false;

        }


        /// <summary>
        /// Try to get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        /// <param name="User">The user.</param>
        public Boolean TryGetUser(User_Id UserId, out IUser? User)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetUser(UserId, out User);

                }
                catch (Exception e)
                {
                    DebugX.LogException(e, $"{nameof(HTTPExtAPI)}.{nameof(TryGetUser)}({UserId}, ...)");
                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            User = null;
            return false;

        }

        /// <summary>
        /// Try to get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        /// <param name="User">The user.</param>
        public Boolean TryGetUser(User_Id? UserId, out IUser? User)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetUser(UserId, out User);

                }
                catch (Exception e)
                {
                    DebugX.LogException(e, $"{nameof(HTTPExtAPI)}.{nameof(TryGetUser)}({UserId}, ...)");
                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            User = null;
            return false;

        }

        #endregion


        #region SearchUsersByName   (Username)

        /// <summary>
        /// Find all users having the given user name.
        /// </summary>
        /// <param name="Username">The name of a user (might not be unique).</param>
        protected internal IEnumerable<IUser> _SearchUsersByName(String Username)

            => users.Values.
                      Where(user => user.Name.Equals(Username)).
                      ToArray();


        /// <summary>
        /// Find all users having the given user name.
        /// </summary>
        /// <param name="Username">The name of a user (might not be unique).</param>
        public IEnumerable<IUser> SearchUsersByName(String Username)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _SearchUsersByName(Username);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return Array.Empty<IUser>();

        }

        #endregion

        #region TrySearchUsersByName(Username, out Users)

        /// <summary>
        /// Find all users having the given user name.
        /// </summary>
        /// <param name="Username">The name of a user (might not be unique).</param>
        /// <param name="Users">An enumeration of matching users.</param>
        protected internal Boolean _TrySearchUsersByName(String Username, out IEnumerable<IUser> Users)
        {

            var foundUsers = new List<IUser>();

            foreach (var user in users.Values)
                if (user.Name.Equals(Username ?? ""))
                    foundUsers.Add(user);

            Users = foundUsers;

            return foundUsers.Any();

        }


        /// <summary>
        /// Find all users having the given user name.
        /// </summary>
        /// <param name="Username">The name of a user (might not be unique).</param>
        /// <param name="Users">An enumeration of matching users.</param>
        public Boolean TrySearchUsersByName(String Username, out IEnumerable<IUser> Users)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TrySearchUsersByName(Username, out Users);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            Users = Array.Empty<IUser>();
            return false;

        }

        #endregion

        #endregion

        #region Reset user password

        #region VerifyPassword     (UserId, Password)

        /// <summary>
        /// Verify the given user identification and password.
        /// </summary>
        /// <param name="UserId">The unique identification of the user.</param>
        /// <param name="Password">The user's password.</param>
        protected internal Boolean _VerifyPassword(User_Id  UserId,
                                                   String   Password)

            => UserId.IsNotNullOrEmpty &&
               UserId.Length >= MinUserIdLength &&
               loginPasswords.TryGetValue(UserId, out var loginPassword) &&
               loginPassword.VerifyPassword(Password);


        /// <summary>
        /// Verify the given user identification and password.
        /// </summary>
        /// <param name="UserId">The unique identification of the user.</param>
        /// <param name="Password">The user's password.</param>
        public Boolean VerifyPassword(User_Id  UserId,
                                      String   Password)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _VerifyPassword(UserId,
                                           Password);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return false;

        }

        #endregion

        #region ChangePassword     (User,  NewPassword, CurrentPassword = null, SuppressNotifications = false, ...)

        /// <summary>
        /// Change the password of the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="CurrentPassword">The optional current password of the user.</param>
        /// <param name="SuppressNotifications">Do not send 'Password changed e-mails'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<ChangePasswordResult> _ChangePassword(IUser             User,
                                                                            Password          NewPassword,
                                                                            Password?         CurrentPassword         = null,
                                                                            Boolean           SuppressNotifications   = false,
                                                                            EventTracking_Id? EventTrackingId         = null,
                                                                            User_Id?          CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (NewPassword.IsNullOrEmpty)
                return ChangePasswordResult.ArgumentError(
                           new[] { User },
                           "The given new password must not be null or empty!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (CurrentPassword.HasValue && CurrentPassword.Value.IsNullOrEmpty)
                return ChangePasswordResult.ArgumentError(
                           new[] { User },
                           "The given current password must not be empty!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            #region AddPassword

            if (!loginPasswords.TryGetValue(User.Id, out var _LoginPassword))
            {

                await WriteToDatabaseFile(HTTPAPIPath + DefaultPasswordFile,
                                          addPassword_MessageType,
                                          new JObject(
                                              new JProperty("login",         User.Id.ToString()),
                                              new JProperty("newPassword", new JObject(
                                                  new JProperty("salt",          NewPassword.Salt.UnsecureString()),
                                                  new JProperty("passwordHash",  NewPassword.UnsecureString)
                                              ))
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                loginPasswords.TryAdd(User.Id,
                                      new LoginPassword(
                                          User.Id,
                                          NewPassword
                                      ));

                if (!SuppressNotifications)
                    await SMTPClient.Send(PasswordChangedEMailCreator(User,
                                                                      User.EMail,
                                                                      //"https://" + Request.Host.SimpleString,
                                                                      DefaultLanguage,
                                                                      eventTrackingId));

                return ChangePasswordResult.Success(
                           new[] { User },
                           eventTrackingId,
                           SystemId,
                           this
                       );

            }

            #endregion

            #region ChangePassword

            else if (CurrentPassword.IsNotNullOrEmpty() && _LoginPassword.VerifyPassword(CurrentPassword.Value))
            {

                await WriteToDatabaseFile(HTTPAPIPath + DefaultPasswordFile,
                                          changePassword_MessageType,
                                          new JObject(
                                              new JProperty("login",         User.Id.ToString()),
                                              new JProperty("currentPassword", new JObject(
                                                  new JProperty("salt",          _LoginPassword.Password.Salt.UnsecureString()),
                                                  new JProperty("passwordHash",  _LoginPassword.Password.UnsecureString)
                                              )),
                                              new JProperty("newPassword",     new JObject(
                                                  new JProperty("salt",          NewPassword.Salt.UnsecureString()),
                                                  new JProperty("passwordHash",  NewPassword.UnsecureString)
                                              ))
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                loginPasswords[User.Id] = new LoginPassword(User.Id, NewPassword);

                if (!SuppressNotifications)
                    await SMTPClient.Send(PasswordChangedEMailCreator(User,
                                                                      User.EMail,
                                                                      //"https://" + Request.Host.SimpleString,
                                                                      DefaultLanguage,
                                                                      eventTrackingId));

                return ChangePasswordResult.Success(
                           new[] { User },
                           eventTrackingId,
                           SystemId,
                           this
                       );

            }

            #endregion

            else
                return ChangePasswordResult.Error(
                           new[] { User },
                           "Could not change the password!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

        }

        /// <summary>
        /// Change the password of the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="CurrentPassword">The optional current password of the user.</param>
        /// <param name="SuppressNotifications">Do not send 'Password changed e-mails'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<ChangePasswordResult> ChangePassword(IUser             User,
                                                               Password          NewPassword,
                                                               Password?         CurrentPassword         = null,
                                                               Boolean           SuppressNotifications   = false,
                                                               EventTracking_Id? EventTrackingId         = null,
                                                               User_Id?          CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _ChangePassword(User,
                                                 NewPassword,
                                                 CurrentPassword,
                                                 SuppressNotifications,
                                                 eventTrackingId,
                                                 CurrentUserId);

                }
                catch (Exception e)
                {

                    return ChangePasswordResult.Error(
                               new[] { User },
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return ChangePasswordResult.LockTimeout(
                       new[] { User },
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region ChangePassword     (Users, NewPassword, CurrentPassword = null, SuppressNotifications = false, ...)

        /// <summary>
        /// Change the password of the given enumeration of users.
        /// </summary>
        /// <param name="Users">An enumeration of users.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="CurrentPassword">The optional current password of the user.</param>
        /// <param name="SuppressNotifications">Do not send 'Password changed e-mails'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<ChangePasswordResult> _ChangePassword(IEnumerable<IUser>  Users,
                                                                            Password            NewPassword,
                                                                            Password?           CurrentPassword         = null,
                                                                            Boolean             SuppressNotifications   = false,
                                                                            EventTracking_Id?   EventTrackingId         = null,
                                                                            User_Id?            CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (!Users.Any())
                return ChangePasswordResult.ArgumentError(
                           Users,
                           "The given enumeration of users must not be null or empty!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (NewPassword.IsNullOrEmpty)
                return ChangePasswordResult.ArgumentError(
                           Users,
                           "The given new password must not be null or empty!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (CurrentPassword.HasValue && CurrentPassword.Value.IsNullOrEmpty)
                return ChangePasswordResult.ArgumentError(
                           Users,
                           "The given current password must not be empty!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (!Users.All(user => loginPasswords.ContainsKey(user.Id)))
                return ChangePasswordResult.ArgumentError(
                           Users,
                           "No all users exist!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            foreach (var user in Users)
            {

                await WriteToDatabaseFile(HTTPAPIPath + DefaultPasswordFile,
                                          resetPassword_MessageType,
                                          JSONObject.Create(

                                              new JProperty("login",                 user.Id.ToString()),

                                              new JProperty("newPassword", new JObject(
                                                  new JProperty("salt",              NewPassword.Salt.UnsecureString()),
                                                  new JProperty("passwordHash",      NewPassword.UnsecureString)
                                              ))

                                              //new JProperty("securityToken1",        SecurityToken1.ToString()),

                                              //SecurityToken2.HasValue
                                              //    ? new JProperty("securityToken2",  SecurityToken2.ToString())
                                              //    : null

                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                loginPasswords[user.Id] = new LoginPassword(user.Id, NewPassword);

                if (!SuppressNotifications)
                    await SMTPClient.Send(PasswordChangedEMailCreator(user,
                                                                      user.EMail,
                                                                      //"https://" + Request.Host.SimpleString,
                                                                      DefaultLanguage,
                                                                      eventTrackingId));

            }

            return ChangePasswordResult.Success(
                       Users,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        /// <summary>
        /// Change the password of the given enumeration of users.
        /// </summary>
        /// <param name="Users">An enumeration of users.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="CurrentPassword">The optional current password of the user.</param>
        /// <param name="SuppressNotifications">Do not send 'Password changed e-mails'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<ChangePasswordResult> ChangePassword(IEnumerable<User>  Users,
                                                               Password           NewPassword,
                                                               Password?          CurrentPassword         = null,
                                                               Boolean            SuppressNotifications   = false,
                                                               EventTracking_Id?  EventTrackingId         = null,
                                                               User_Id?           CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _ChangePassword(Users,
                                                 NewPassword,
                                                 CurrentPassword,
                                                 SuppressNotifications,
                                                 eventTrackingId,
                                                 CurrentUserId);

                }
                catch (Exception e)
                {

                    return ChangePasswordResult.Error(
                               Users,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return ChangePasswordResult.LockTimeout(
                       Users,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region ResetPassword      (User,  SuppressNotifications = false, ...)

        /// <summary>
        /// Reset a user password.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        protected internal async Task<ResetPasswordResult> _ResetPassword(IUser              User,
                                                                          Boolean            SuppressNotifications   = false,
                                                                          EventTracking_Id?  EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            var result = await addPasswordReset(
                                   new PasswordReset(
                                       User,
                                       SecurityToken_Id.Random(40),
                                       User.Use2AuthFactor == Use2AuthFactor.MobilePhoneSMS && User.MobilePhone.HasValue
                                           ? SecurityToken_Id.Parse(RandomExtensions.RandomString(5) + "-" + RandomExtensions.RandomString(5))
                                           : new SecurityToken_Id?(),
                                       eventTrackingId
                                   ),
                                   SuppressNotifications,
                                   eventTrackingId
                               );

            return new ResetPasswordResult(
                       new[] { User },
                       result.Result,
                       result.EventTrackingId,
                       result.SenderId,
                       result.Sender,
                       result.PasswordReset,
                       result.Description,
                       result.Warnings,
                       result.Runtime
                   );

        }

        /// <summary>
        /// Reset a user password.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        public async Task<ResetPasswordResult> ResetPassword(IUser             User,
                                                             Boolean           SuppressNotifications   = false,
                                                             EventTracking_Id? EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _ResetPassword(User,
                                                SuppressNotifications,
                                                eventTrackingId);

                }
                catch (Exception e)
                {

                    return ResetPasswordResult.Error(
                               new[] { User },
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return ResetPasswordResult.LockTimeout(
                       new[] { User },
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region ResetPassword      (Users, SuppressNotifications = false, ...)

        /// <summary>
        /// Reset the password of a user having multiple logins.
        /// </summary>
        /// <param name="Users">An enumeration of users.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        protected internal async Task<ResetPasswordResult> _ResetPassword(IEnumerable<IUser>  Users,
                                                                          Boolean             SuppressNotifications   = false,
                                                                          EventTracking_Id?   EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            var result = await addPasswordReset(
                                   new PasswordReset(
                                       Users,
                                       SecurityToken_Id.Random(40),
                                       Users.Any(user => user.Use2AuthFactor == Use2AuthFactor.MobilePhoneSMS && user.MobilePhone.HasValue)
                                           ? SecurityToken_Id.Parse(RandomExtensions.RandomString(5) + "-" + RandomExtensions.RandomString(5))
                                           : new SecurityToken_Id?(),
                                       eventTrackingId
                                   ),
                                   SuppressNotifications,
                                   eventTrackingId
                               );

            return new ResetPasswordResult(
                       Users,
                       result.Result,
                       result.EventTrackingId,
                       result.SenderId,
                       result.Sender,
                       result.PasswordReset,
                       result.Description,
                       result.Warnings,
                       result.Runtime
                   );

        }

        /// <summary>
        /// Reset the password of a user having multiple logins.
        /// </summary>
        /// <param name="Users">An enumeration of users.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        public async Task<ResetPasswordResult> ResetPassword(IEnumerable<IUser>  Users,
                                                             Boolean             SuppressNotifications   = false,
                                                             EventTracking_Id?   EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _ResetPassword(Users,
                                                SuppressNotifications,
                                                eventTrackingId);

                }
                catch (Exception e)
                {

                    return ResetPasswordResult.Error(
                               Users,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return ResetPasswordResult.LockTimeout(
                       Users,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddPasswordReset   (PasswordReset, ...)

        /// <summary>
        /// Add a password reset.
        /// </summary>
        /// <param name="PasswordReset">A password reset.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        protected internal async Task<AddPasswordResetResult> addPasswordReset(PasswordReset     PasswordReset,
                                                                                Boolean           SuppressNotifications   = false,
                                                                                EventTracking_Id? EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(HTTPAPIPath + DefaultPasswordResetsFile,
                                      addToPasswordFile,
                                      PasswordReset.ToJSON(),
                                      eventTrackingId);

            this.passwordResets.TryAdd(PasswordReset.SecurityToken1,
                                       PasswordReset);


            foreach (var user in PasswordReset.Users)
            {
                if (!SuppressNotifications)
                {

                    await SMTPClient.Send(ResetPasswordEMailCreator(user,
                                                                    user.EMail,
                                                                    PasswordReset.SecurityToken1,
                                                                    user.Use2AuthFactor == Use2AuthFactor.MobilePhoneSMS && user.MobilePhone.HasValue,
                                                                    DefaultLanguage,
                                                                    eventTrackingId));

                    //if (SMSClient != null &&
                    //    PasswordReset.SecurityToken2.HasValue &&
                    //    user.MobilePhone.HasValue)
                    //{
                    //    SMSClient.Send("Dear '" + user.Name + "' your 2nd security token for resetting your password is '" + PasswordReset.SecurityToken2 + "'!",
                    //                   user.MobilePhone.Value.ToString());
                    //}

                }
            }

            return AddPasswordResetResult.Success(
                       PasswordReset,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        /// <summary>
        /// Add a password reset.
        /// </summary>
        /// <param name="PasswordReset">A password reset.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        public async Task<AddPasswordResetResult> AddPasswordReset(PasswordReset     PasswordReset,
                                                                   Boolean           SuppressNotifications   = false,
                                                                   EventTracking_Id? EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addPasswordReset(PasswordReset,
                                                   SuppressNotifications,
                                                   eventTrackingId);

                }
                catch (Exception e)
                {

                    return AddPasswordResetResult.Error(
                               PasswordReset,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return AddPasswordResetResult.LockTimeout(
                       PasswordReset,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region ResetPassword      (SecurityTokenId1, NewPassword, SecurityTokenId2 = null, ...)

        /// <summary>
        /// Reset the user password(s) specified by the given security token(s).
        /// </summary>
        /// <param name="SecurityTokenId1">The (first) security token for the password reset.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="SecurityTokenId2">An optional second security token for the password reset.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<ResetPasswordResult> _ResetPassword(SecurityToken_Id   SecurityTokenId1,
                                                                          Password           NewPassword,
                                                                          SecurityToken_Id?  SecurityTokenId2   = null,
                                                                          EventTracking_Id?  EventTrackingId    = null,
                                                                          User_Id?           CurrentUserId      = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (SecurityTokenId1.IsNullOrEmpty)
                return ResetPasswordResult.ArgumentError(
                           Array.Empty<IUser>(),
                           "The given first security token must not be null or empty!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (!passwordResets.TryGetValue(SecurityTokenId1, out var passwordReset))
                return ResetPasswordResult.ArgumentError(
                           Array.Empty<IUser>(),
                           "Invalid security token(s)!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (NewPassword.IsNullOrEmpty)
                return ResetPasswordResult.ArgumentError(
                           Array.Empty<IUser>(),
                           "The given new password must not be null or empty!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (PasswordQualityCheck(NewPassword.UnsecureString) < 1.0)
                return ResetPasswordResult.ArgumentError(
                           Array.Empty<IUser>(),
                           "The choosen password does not match the password quality criteria!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (SecurityTokenId2.HasValue && SecurityTokenId2.Value.IsNullOrEmpty)
                return ResetPasswordResult.ArgumentError(
                           Array.Empty<IUser>(),
                           "The given second security token must not be null or empty!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if ((SecurityTokenId2.HasValue != passwordReset.SecurityToken2.HasValue) ||
                (SecurityTokenId2.HasValue && passwordReset.SecurityToken2.HasValue && SecurityTokenId2.Value != passwordReset.SecurityToken2.Value))
                return ResetPasswordResult.ArgumentError(
                           Array.Empty<IUser>(),
                           "Invalid security token(s)!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            foreach (var user in passwordReset.Users)
            {

                await WriteToDatabaseFile(HTTPAPIPath + DefaultPasswordFile,
                                          resetPassword_MessageType,
                                          JSONObject.Create(

                                              new JProperty("login",                 user.Id.ToString()),

                                              new JProperty("newPassword", new JObject(
                                                  new JProperty("salt",              NewPassword.Salt.UnsecureString()),
                                                  new JProperty("passwordHash",      NewPassword.UnsecureString)
                                              ))

                                              //new JProperty("securityToken1",        SecurityToken1.ToString()),

                                              //SecurityToken2.HasValue
                                              //    ? new JProperty("securityToken2",  SecurityToken2.ToString())
                                              //    : null

                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                loginPasswords[user.Id] = new LoginPassword(user.Id, NewPassword);

                await SMTPClient.Send(PasswordChangedEMailCreator(user,
                                                                  user.EMail,
                                                                  //"https://" + Request.Host.SimpleString,
                                                                  DefaultLanguage,
                                                                  eventTrackingId));

            }

            await deletePasswordReset(passwordReset,
                                       eventTrackingId);

            return ResetPasswordResult.Success(
                       Users,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        /// <summary>
        /// Reset the user password(s) specified by the given security token(s).
        /// </summary>
        /// <param name="SecurityTokenId1">The (first) security token for the password reset.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="SecurityTokenId2">An optional second security token for the password reset.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<ResetPasswordResult> ResetPassword(SecurityToken_Id   SecurityTokenId1,
                                                             Password           NewPassword,
                                                             SecurityToken_Id?  SecurityTokenId2   = null,
                                                             EventTracking_Id?  EventTrackingId    = null,
                                                             User_Id?           CurrentUserId      = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _ResetPassword(SecurityTokenId1,
                                                NewPassword,
                                                SecurityTokenId2,
                                                eventTrackingId,
                                                CurrentUserId);

                }
                catch (Exception e)
                {

                    return ResetPasswordResult.Error(
                               Array.Empty<IUser>(),
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return ResetPasswordResult.LockTimeout(
                       Array.Empty<IUser>(),
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region RemovePasswordReset(PasswordReset, ...)

        /// <summary>
        /// Remove a password reset.
        /// </summary>
        /// <param name="PasswordReset">A password reset.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<Boolean> deletePasswordReset(PasswordReset     PasswordReset,
                                                                    EventTracking_Id? EventTrackingId   = null,
                                                                    User_Id?          CurrentUserId     = null)
        {

            await WriteToDatabaseFile(HTTPAPIPath + DefaultPasswordResetsFile,
                                      removeFromPasswordFile,
                                      PasswordReset.ToJSON(),
                                      EventTrackingId ?? EventTracking_Id.New,
                                      CurrentUserId);

            passwordResets.TryRemove(PasswordReset.SecurityToken1, out _);

            return true;

        }


        /// <summary>
        /// Remove a password reset.
        /// </summary>
        /// <param name="PasswordReset">A password reset.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<Boolean> RemovePasswordReset(PasswordReset     PasswordReset,
                                                       EventTracking_Id? EventTrackingId   = null,
                                                       User_Id?          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await deletePasswordReset(PasswordReset,
                                                      eventTrackingId,
                                                      CurrentUserId);

                }
                catch (Exception e)
                {

                    return false;

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return false;

        }

        #endregion

        #endregion

        #region API Keys

        #region Data

        /// <summary>
        /// An enumeration of all API keys.
        /// </summary>
        protected internal readonly Dictionary<APIKey_Id, APIKey> apiKeys = new ();

        /// <summary>
        /// An enumeration of all API keys.
        /// </summary>
        public IEnumerable<APIKey> APIKeys
        {
            get
            {

                if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return apiKeys.Values.ToArray();

                    }
                    finally
                    {
                        try
                        {
                            APIKeysSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return Array.Empty<APIKey>();

            }
        }

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(APIKey, MessageType,  OldAPIKey = null, ...)

        /// <summary>
        /// Write the given API key to the database and send out notifications.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldAPIKey">The old/updated API key.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(APIKey                   APIKey,
                                                                   NotificationMessageType  MessageType,
                                                                   APIKey?                  OldAPIKey         = null,
                                                                   EventTracking_Id?        EventTrackingId   = null,
                                                                   User_Id?                 CurrentUserId     = null)
        {

            if (APIKey is null)
                throw new ArgumentNullException(nameof(APIKey),       "The given API key must not be null!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      APIKey.ToJSON(true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(APIKey,
                                    MessageType,
                                    OldAPIKey,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (APIKey, MessageTypes, OldAPIKey = null, ...)

        /// <summary>
        /// Send API key notifications.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        /// <param name="MessageType">The API key notification.</param>
        /// <param name="OldAPIKey">An optional old/updated API key.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(APIKey                   APIKey,
                                                        NotificationMessageType  MessageType,
                                                        APIKey?                  OldAPIKey         = null,
                                                        EventTracking_Id?        EventTrackingId   = null,
                                                        User_Id?                 CurrentUserId     = null)
        {

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType), "The given message type must not be null or empty!");

            await SendNotifications(APIKey,
                                    new[] { MessageType },
                                    OldAPIKey,
                                    EventTrackingId,
                                    CurrentUserId);

        }


        /// <summary>
        /// Send API key notifications.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        /// <param name="MessageTypes">The API key notifications.</param>
        /// <param name="OldAPIKey">The old/updated API key.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(APIKey                                APIKey,
                                                        IEnumerable<NotificationMessageType>  MessageTypes,
                                                        APIKey?                               OldAPIKey         = null,
                                                        EventTracking_Id?                     EventTrackingId   = null,
                                                        User_Id?                              CurrentUserId     = null)
        {

            if (APIKey is null)
                throw new ArgumentNullException(nameof(APIKey),        "The given API key must not be null!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            //if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
            //    messageTypesHash.Add(addUser_MessageType);

            //if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
            //    messageTypesHash.Add(OldUser == null
            //                           ? addUser_MessageType
            //                           : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();



            if (!DisableNotifications)
            {


            }

        }

        #endregion


        #region AddAPIKey           (APIKey, OnAdded = null,                   CurrentUserId = null)

        /// <summary>
        /// A delegate called whenever a API key was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the API key was added.</param>
        /// <param name="APIKey">The added API key.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnAPIKeyAddedDelegate(DateTime          Timestamp,
                                                   APIKey            APIKey,
                                                   EventTracking_Id? EventTrackingId   = null,
                                                   User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a API key was added.
        /// </summary>
        public event OnAPIKeyAddedDelegate? OnAPIKeyAdded;


        #region (protected internal) addAPIKey(APIKey, OnAdded = null, ...)

        /// <summary>
        /// Add the given API key to the API.
        /// </summary>
        /// <param name="APIKey">A new API key to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddAPIKeyResult> addAPIKey(APIKey                             APIKey,
                                                                  Action<APIKey, EventTracking_Id>?  OnAdded           = null,
                                                                  EventTracking_Id?                  EventTrackingId   = null,
                                                                  User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (APIKey.API is not null && APIKey.API != this)
                return AddAPIKeyResult.ArgumentError(
                           APIKey,
                           "The given API key is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (apiKeys.ContainsKey(APIKey.Id))
                return AddAPIKeyResult.ArgumentError(
                           APIKey,
                           $"APIKey identification '{APIKey.Id}' already exists!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (APIKey.Id.Length < MinAPIKeyLength)
                return AddAPIKeyResult.ArgumentError(
                           APIKey,
                           $"APIKey identification '{APIKey.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            APIKey.API = this;


            await WriteToDatabaseFile(addAPIKey_MessageType,
                                      APIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            apiKeys.Add(APIKey.Id, APIKey);

            OnAdded?.Invoke(APIKey,
                            eventTrackingId);

            var OnAPIKeyAddedLocal = OnAPIKeyAdded;
            if (OnAPIKeyAddedLocal is not null)
                await OnAPIKeyAddedLocal.Invoke(Timestamp.Now,
                                                APIKey,
                                                eventTrackingId,
                                                CurrentUserId);

            await SendNotifications(APIKey,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddAPIKeyResult.Success(
                       APIKey,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddAPIKey                      (APIKey, OnAdded = null, ...)

        /// <summary>
        /// Add the given API key.
        /// </summary>
        /// <param name="APIKey">A new API key.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddAPIKeyResult> AddAPIKey(APIKey                             APIKey,
                                                     Action<APIKey, EventTracking_Id>?  OnAdded           = null,
                                                     EventTracking_Id?                  EventTrackingId   = null,
                                                     User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addAPIKey(APIKey,
                                            OnAdded,
                                            eventTrackingId,
                                            CurrentUserId);

                }
                catch (Exception e)
                {

                    return AddAPIKeyResult.Error(
                               APIKey,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddAPIKeyResult.LockTimeout(
                       APIKey,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region AddAPIKeyIfNotExists(APIKey, OnAdded = null,                   CurrentUserId = null)

        #region (protected internal) addAPIKeyIfNotExists(APIKey, OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given API key to the API.
        /// </summary>
        /// <param name="APIKey">A new API key to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddAPIKeyResult> addAPIKeyIfNotExists(APIKey                             APIKey,
                                                                             Action<APIKey, EventTracking_Id>?  OnAdded           = null,
                                                                             EventTracking_Id?                  EventTrackingId   = null,
                                                                             User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (APIKey.API is not null && APIKey.API != this)
                return AddAPIKeyResult.ArgumentError(
                           APIKey,
                           "The given API key is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (apiKeys.ContainsKey(APIKey.Id))
                return AddAPIKeyResult.Success(
                           apiKeys[APIKey.Id],
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (APIKey.Id.Length < MinAPIKeyLength)
                return AddAPIKeyResult.ArgumentError(
                           APIKey,
                           $"APIKey identification '{APIKey.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            APIKey.API = this;


            await WriteToDatabaseFile(addAPIKeyIfNotExists_MessageType,
                                      APIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            apiKeys.Add(APIKey.Id, APIKey);

            OnAdded?.Invoke(APIKey,
                            eventTrackingId);

            var OnAPIKeyAddedLocal = OnAPIKeyAdded;
            if (OnAPIKeyAddedLocal is not null)
                await OnAPIKeyAddedLocal.Invoke(Timestamp.Now,
                                                APIKey,
                                                eventTrackingId,
                                                CurrentUserId);

            await SendNotifications(APIKey,
                                    addAPIKeyIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddAPIKeyResult.Success(
                       APIKey,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddAPIKeyIfNotExists                      (APIKey, OnAdded = null, ...)

        /// <summary>
        /// Add the given API key.
        /// </summary>
        /// <param name="APIKey">A new API key.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddAPIKeyResult> AddAPIKeyIfNotExists(APIKey                             APIKey,
                                                                Action<APIKey, EventTracking_Id>?  OnAdded           = null,
                                                                EventTracking_Id?                  EventTrackingId   = null,
                                                                User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addAPIKeyIfNotExists(APIKey,
                                                       OnAdded,
                                                       eventTrackingId,
                                                       CurrentUserId);

                }
                catch (Exception e)
                {

                    return AddAPIKeyResult.Error(
                               APIKey,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddAPIKeyResult.LockTimeout(
                       APIKey,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region AddOrUpdateAPIKey   (APIKey, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) addOrUpdateAPIKey(APIKey, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given API key to/within the API.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        protected internal async Task<AddOrUpdateAPIKeyResult> addOrUpdateAPIKey(APIKey                             APIKey,
                                                                                  Action<APIKey, EventTracking_Id>?  OnAdded           = null,
                                                                                  Action<APIKey, EventTracking_Id>?  OnUpdated         = null,
                                                                                  EventTracking_Id?                  EventTrackingId   = null,
                                                                                  User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (APIKey.API is not null && APIKey.API != this)
                return AddOrUpdateAPIKeyResult.ArgumentError(
                           APIKey,
                           "The given API key is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (APIKey.Id.Length < MinAPIKeyLength)
                return AddOrUpdateAPIKeyResult.ArgumentError(
                           APIKey,
                           $"The given API key identification '{APIKey.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            APIKey.API = this;


            await WriteToDatabaseFile(addOrUpdateAPIKey_MessageType,
                                      APIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            if (apiKeys.TryGetValue(APIKey.Id, out var OldAPIKey))
            {
                apiKeys.Remove(OldAPIKey.Id);
                //APIKey.CopyAllLinkedDataFrom(OldAPIKey);
            }

            apiKeys.Add(APIKey.Id, APIKey);


            if (OldAPIKey is not null)
            {

                OnUpdated?.Invoke(APIKey,
                                  eventTrackingId);

                var OnAPIKeyUpdatedLocal = OnAPIKeyUpdated;
                if (OnAPIKeyUpdatedLocal is not null)
                    await OnAPIKeyUpdatedLocal.Invoke(Timestamp.Now,
                                                      APIKey,
                                                      OldAPIKey,
                                                      eventTrackingId,
                                                      CurrentUserId);

                await SendNotifications(APIKey,
                                        updateAPIKey_MessageType,
                                        OldAPIKey,
                                        eventTrackingId,
                                        CurrentUserId);

                return AddOrUpdateAPIKeyResult.Updated(
                           APIKey,
                           eventTrackingId,
                           SystemId,
                           this
                       );

            }


            OnAdded?.Invoke(APIKey,
                            eventTrackingId);

            var OnAPIKeyAddedLocal = OnAPIKeyAdded;
            if (OnAPIKeyAddedLocal is not null)
                await OnAPIKeyAddedLocal.Invoke(Timestamp.Now,
                                                APIKey,
                                                eventTrackingId,
                                                CurrentUserId);

            await SendNotifications(APIKey,
                                    addAPIKey_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddOrUpdateAPIKeyResult.Added(
                       APIKey,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddOrUpdateAPIKey                      (APIKey, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given API key to/within the API.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        public async Task<AddOrUpdateAPIKeyResult> AddOrUpdateAPIKey(APIKey                             APIKey,
                                                                     Action<APIKey, EventTracking_Id>?  OnAdded           = null,
                                                                     Action<APIKey, EventTracking_Id>?  OnUpdated         = null,
                                                                     EventTracking_Id?                  EventTrackingId   = null,
                                                                     User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addOrUpdateAPIKey(APIKey,
                                                    OnAdded,
                                                    OnUpdated,
                                                    eventTrackingId,
                                                    CurrentUserId);

                }
                catch (Exception e)
                {

                    return AddOrUpdateAPIKeyResult.Error(
                               APIKey,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddOrUpdateAPIKeyResult.LockTimeout(
                       APIKey,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region UpdateAPIKey        (APIKey,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a API key was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the API key was updated.</param>
        /// <param name="APIKey">The updated API key.</param>
        /// <param name="OldAPIKey">The old API key.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking API key identification</param>
        public delegate Task OnAPIKeyUpdatedDelegate(DateTime          Timestamp,
                                                     APIKey            APIKey,
                                                     APIKey            OldAPIKey,
                                                     EventTracking_Id? EventTrackingId   = null,
                                                     User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a API key was updated.
        /// </summary>
        public event OnAPIKeyUpdatedDelegate? OnAPIKeyUpdated;


        #region (protected internal) updateAPIKey(APIKey,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given API key to/within the API.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        protected internal async Task<UpdateAPIKeyResult> updateAPIKey(APIKey                             APIKey,
                                                                        Action<APIKey, EventTracking_Id>?  OnUpdated         = null,
                                                                        EventTracking_Id?                  EventTrackingId   = null,
                                                                        User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (!_TryGetAPIKey(APIKey.Id, out var OldAPIKey) || OldAPIKey is null)
                return UpdateAPIKeyResult.ArgumentError(
                           APIKey,
                           $"The given API key '{APIKey.Id}' does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (APIKey.API != this)
                return UpdateAPIKeyResult.ArgumentError(
                           APIKey,
                           "The given API key is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            APIKey.API = this;


            await WriteToDatabaseFile(updateAPIKey_MessageType,
                                      APIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            apiKeys.Remove(OldAPIKey.Id);
            //APIKey.CopyAllLinkedDataFrom(OldAPIKey);
            apiKeys.Add(APIKey.Id, APIKey);

            OnUpdated?.Invoke(APIKey,
                              eventTrackingId);

            var OnAPIKeyUpdatedLocal = OnAPIKeyUpdated;
            if (OnAPIKeyUpdatedLocal is not null)
                await OnAPIKeyUpdatedLocal.Invoke(Timestamp.Now,
                                                APIKey,
                                                OldAPIKey,
                                                eventTrackingId,
                                                CurrentUserId);

            await SendNotifications(APIKey,
                                    updateAPIKey_MessageType,
                                    OldAPIKey,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateAPIKeyResult.Success(
                       APIKey,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region UpdateAPIKey                      (APIKey,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given API key to/within the API.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        public async Task<UpdateAPIKeyResult> UpdateAPIKey(APIKey                             APIKey,
                                                           Action<APIKey, EventTracking_Id>?  OnUpdated         = null,
                                                           EventTracking_Id?                  EventTrackingId   = null,
                                                           User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await updateAPIKey(APIKey,
                                               OnUpdated,
                                               EventTrackingId,
                                               CurrentUserId);

                }
                catch (Exception e)
                {

                    return UpdateAPIKeyResult.Error(
                               APIKey,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateAPIKeyResult.LockTimeout(
                       APIKey,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion


        #region (protected internal) updateAPIKey(APIKey, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given API key.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="UpdateDelegate">A delegate to update the given API key.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        protected internal async Task<UpdateAPIKeyResult> updateAPIKey(APIKey                             APIKey,
                                                                        Action<APIKey.Builder>             UpdateDelegate,
                                                                        Action<APIKey, EventTracking_Id>?  OnUpdated         = null,
                                                                        EventTracking_Id?                  EventTrackingId   = null,
                                                                        User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (!_APIKeyExists(APIKey.Id))
                return UpdateAPIKeyResult.ArgumentError(
                           APIKey,
                           $"The given API key '{APIKey.Id}' does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (APIKey.API != this)
                return UpdateAPIKeyResult.ArgumentError(
                           APIKey,
                           "The given API key is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (UpdateDelegate is null)
                return UpdateAPIKeyResult.ArgumentError(
                           APIKey,
                           "The given update delegate must not be null!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            var builder = APIKey.ToBuilder();
            UpdateDelegate(builder);
            var updatedAPIKey = builder.ToImmutable;

            await WriteToDatabaseFile(updateAPIKey_MessageType,
                                      updatedAPIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            apiKeys.Remove(APIKey.Id);
            //updatedAPIKey.CopyAllLinkedDataFrom(APIKey);
            apiKeys.Add(updatedAPIKey.Id, updatedAPIKey);

            OnUpdated?.Invoke(updatedAPIKey,
                              eventTrackingId);

            var OnAPIKeyUpdatedLocal = OnAPIKeyUpdated;
            if (OnAPIKeyUpdatedLocal is not null)
                await OnAPIKeyUpdatedLocal.Invoke(Timestamp.Now,
                                                  updatedAPIKey,
                                                  APIKey,
                                                  eventTrackingId,
                                                  CurrentUserId);

            await SendNotifications(updatedAPIKey,
                                    updateAPIKey_MessageType,
                                    APIKey,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateAPIKeyResult.Success(
                       APIKey,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region UpdateAPIKey                      (APIKey, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given API key.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="UpdateDelegate">A delegate to update the given API key.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        public async Task<UpdateAPIKeyResult> UpdateAPIKey(APIKey                             APIKey,
                                                           Action<APIKey.Builder>             UpdateDelegate,
                                                           Action<APIKey, EventTracking_Id>?  OnUpdated         = null,
                                                           EventTracking_Id?                  EventTrackingId   = null,
                                                           User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await updateAPIKey(APIKey,
                                               UpdateDelegate,
                                               OnUpdated,
                                               eventTrackingId,
                                               CurrentUserId);

                }
                catch (Exception e)
                {

                    return UpdateAPIKeyResult.Error(
                               APIKey,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateAPIKeyResult.LockTimeout(
                       APIKey,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region RemoveAPIKey(APIKey, OnRemoved = null, ...)

        /// <summary>
        /// A delegate called whenever a API key was removed.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the API key was removed.</param>
        /// <param name="APIKey">The API key to be removed.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking API key identification</param>
        public delegate Task OnAPIKeyRemovedDelegate(DateTime           Timestamp,
                                                     APIKey             APIKey,
                                                     EventTracking_Id?  EventTrackingId   = null,
                                                     User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a API key was removed.
        /// </summary>
        public event OnAPIKeyRemovedDelegate? OnAPIKeyRemoved;


        #region (protected internal) deleteAPIKey(APIKey, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given API key from the API.
        /// </summary>
        /// <param name="APIKey">The API key to be removed.</param>
        /// <param name="OnRemoved">A delegate run whenever the API key has been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        protected internal async Task<DeleteAPIKeyResult> deleteAPIKey(APIKey                             APIKey,
                                                                        Action<APIKey, EventTracking_Id>?  OnRemoved         = null,
                                                                        EventTracking_Id?                  EventTrackingId   = null,
                                                                        User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (APIKey.API != this)
                return DeleteAPIKeyResult.ArgumentError(
                           APIKey,
                           "The given API key is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (!apiKeys.TryGetValue(APIKey.Id, out var APIKeyToBeRemoved))
                return DeleteAPIKeyResult.ArgumentError(
                           APIKey,
                           "The given API key does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            await WriteToDatabaseFile(removeAPIKey_MessageType,
                                      APIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            apiKeys.Remove(APIKey.Id);

            OnRemoved?.Invoke(APIKey,
                              eventTrackingId);

            var OnAPIKeyRemovedLocal = OnAPIKeyRemoved;
            if (OnAPIKeyRemovedLocal is not null)
                await OnAPIKeyRemovedLocal.Invoke(Timestamp.Now,
                                                  APIKey,
                                                  eventTrackingId,
                                                  CurrentUserId);

            await SendNotifications(APIKey,
                                    removeAPIKey_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return DeleteAPIKeyResult.Success(
                       APIKey,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region RemoveAPIKey                      (APIKey, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given API key from the API.
        /// </summary>
        /// <param name="APIKey">The API key to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the API key has been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        public async Task<DeleteAPIKeyResult> RemoveAPIKey(APIKey                             APIKey,
                                                           Action<APIKey, EventTracking_Id>?  OnRemoved         = null,
                                                           EventTracking_Id?                  EventTrackingId   = null,
                                                           User_Id?                           CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await deleteAPIKey(APIKey,
                                               OnRemoved,
                                               eventTrackingId,
                                               CurrentUserId);

                }
                catch (Exception e)
                {

                    return DeleteAPIKeyResult.Error(
                               APIKey,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }


            return DeleteAPIKeyResult.LockTimeout(
                       APIKey,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion


        #region APIKeyExists       (APIKeyId)

        /// <summary>
        /// Determines whether the given API key identification exists within this API.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of an API key.</param>
        protected internal Boolean _APIKeyExists(APIKey_Id APIKeyId)

            => APIKeyId.IsNotNullOrEmpty &&
               apiKeys.ContainsKey(APIKeyId);

        /// <summary>
        /// Determines whether the given API key identification exists within this API.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of an API key.</param>
        protected internal Boolean _APIKeyExists(APIKey_Id? APIKeyId)

            => APIKeyId.HasValue &&
               APIKeyId.IsNotNullOrEmpty() &&
               apiKeys.ContainsKey(APIKeyId.Value);


        /// <summary>
        /// Determines whether the given API key identification exists within this API.
        /// </summary>
        /// <param name="APIKey">The unique identification of an API key.</param>
        public Boolean APIKeyExists(APIKey_Id APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _APIKeyExists(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given API key identification exists within this API.
        /// </summary>
        /// <param name="APIKey">The unique identification of an API key.</param>
        public Boolean APIKeyExists(APIKey_Id? APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _APIKeyExists(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region APIKeyIsValid      (APIKeyId)

        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _APIKeyIsValid(APIKey APIKey)

            => (!APIKey.NotBefore.HasValue || Timestamp.Now >= APIKey.NotBefore) &&
               (!APIKey.NotAfter. HasValue || Timestamp.Now <  APIKey.NotAfter)  &&
                !APIKey.IsDisabled;


        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _APIKeyIsValid(APIKey_Id APIKey)

            => _TryGetAPIKey(APIKey, out var apiKey) &&
                apiKey is not null &&
               _APIKeyIsValid(apiKey);

        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _APIKeyIsValid(APIKey_Id? APIKey)

            => APIKey.HasValue &&
               _APIKeyIsValid(APIKey.Value);


        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        public Boolean APIKeyIsValid(APIKey APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _APIKeyIsValid(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        public Boolean APIKeyIsValid(APIKey_Id APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _APIKeyIsValid(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        public Boolean APIKeyIsValid(APIKey_Id? APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _APIKeyIsValid(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region GetAPIKey          (APIKeyId)

        /// <summary>
        /// Get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKey">The unique identification of an API key.</param>
        protected internal APIKey? _GetAPIKey(APIKey_Id APIKey)
        {

            if (!APIKey.IsNullOrEmpty && apiKeys.TryGetValue(APIKey, out var apiKey))
                return apiKey;

            return null;

        }


        /// <summary>
        /// Get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKey">The unique identification of the API key.</param>
        public APIKey? GetAPIKey(APIKey_Id APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetAPIKey(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        #endregion

        #region TryGetAPIKey       (APIKeyId, out APIKey)

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of an API key.</param>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _TryGetAPIKey(APIKey_Id APIKeyId, out APIKey? APIKey)
        {

            if (!APIKeyId.IsNullOrEmpty &&
                apiKeys.TryGetValue(APIKeyId, out var apiKey))
            {
                APIKey = apiKey;
                return true;
            }

            APIKey = null;
            return false;

        }

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of an API key.</param>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _TryGetAPIKey(APIKey_Id? APIKeyId, out APIKey? APIKey)
        {

            if (APIKeyId.IsNotNullOrEmpty() &&
               apiKeys. TryGetValue(APIKeyId!.Value, out var apiKey))
            {
                APIKey = apiKey;
                return true;
            }

            APIKey = null;
            return false;

        }


        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of an API key.</param>
        /// <param name="APIKey">The API key.</param>
        public Boolean TryGetAPIKey(APIKey_Id APIKeyId, out APIKey? APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetAPIKey(APIKeyId, out APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            APIKey = null;
            return false;

        }

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of an API key.</param>
        /// <param name="APIKey">The API key.</param>
        public Boolean TryGetAPIKey(APIKey_Id? APIKeyId, out APIKey? APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetAPIKey(APIKeyId, out APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            APIKey = null;
            return false;

        }

        #endregion

        #region TryGetAPIKeyIfValid(APIKeyId, out APIKey)

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of the API key.</param>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _TryGetValidAPIKey(APIKey_Id APIKeyId, out APIKey? APIKey)
        {

            if (apiKeys.TryGetValue(APIKeyId, out var apiKey) &&
                _APIKeyIsValid(apiKey))
            {
                APIKey = apiKey;
                return true;
            }

            APIKey = null;
            return false;

        }

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of the API key.</param>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _TryGetValidAPIKey(APIKey_Id? APIKeyId, out APIKey? APIKey)
        {

            if (APIKeyId.IsNotNullOrEmpty() &&
                apiKeys.TryGetValue(APIKeyId!.Value, out var apiKey) &&
                _APIKeyIsValid(apiKey))
            {
                APIKey = apiKey;
                return true;
            }

            APIKey = null;
            return false;

        }


        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of the API key.</param>
        /// <param name="APIKey">The API key.</param>
        public Boolean TryGetValidAPIKey(APIKey_Id APIKeyId, out APIKey? APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetValidAPIKey(APIKeyId, out APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            APIKey = null;
            return false;

        }

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of the API key.</param>
        /// <param name="APIKey">The API key.</param>
        public Boolean TryGetValidAPIKey(APIKey_Id? APIKeyId, out APIKey? APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetValidAPIKey(APIKeyId, out APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            APIKey = null;
            return false;

        }

        #endregion


        #region GetAPIKeysForUser     (User)

        /// <summary>
        /// Return all API keys for the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        protected internal IEnumerable<APIKey> _GetAPIKeysForUser(IUser User)

            => apiKeys.Values.
                       Where(apiKey => apiKey.UserId == User.Id).
                       ToArray();


        /// <summary>
        /// Return all API keys for the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        public IEnumerable<APIKey> GetAPIKeysForUser(IUser User)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetAPIKeysForUser(User);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return Array.Empty<APIKey>();

        }

        #endregion

        #region GetValidAPIKeysForUser(User)

        /// <summary>
        /// Return all API keys for the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        protected internal IEnumerable<APIKey> _GetValidAPIKeysForUser(IUser User)

            => apiKeys.Values.
                       Where(apiKey => apiKey.UserId == User.Id &&
                                       APIKeyIsValid(apiKey)).
                       ToArray();


        /// <summary>
        /// Return all API keys for the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        public IEnumerable<APIKey> GetValidAPIKeysForUser(IUser User)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetValidAPIKeysForUser(User);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return Array.Empty<APIKey>();

        }

        #endregion

        #endregion

        #region UserGroups

        #region Data

        /// <summary>
        /// An enumeration of all user groups.
        /// </summary>
        protected internal readonly ConcurrentDictionary<UserGroup_Id, IUserGroup> userGroups = new ();

        /// <summary>
        /// An enumeration of all user groups.
        /// </summary>
        public IEnumerable<IUserGroup> UserGroups
            => userGroups.Values;

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(UserGroup,                   MessageType,    OldUserGroup = null, ...)

        /// <summary>
        /// Write the given user group to the database and send out notifications.
        /// </summary>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldUserGroup">The old/updated user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(IUserGroup               UserGroup,
                                                                   NotificationMessageType  MessageType,
                                                                   IUserGroup?              OldUserGroup      = null,
                                                                   EventTracking_Id?        EventTrackingId   = null,
                                                                   User_Id?                 CurrentUserId     = null)
        {

            if (UserGroup is null)
                throw new ArgumentNullException(nameof(UserGroup),    "The given user group must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      UserGroup.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(UserGroup,
                                    MessageType,
                                    OldUserGroup,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (UserGroup,                   MessageType(s), OldUserGroup = null, ...)

        /// <summary>
        /// Send user group notifications.
        /// </summary>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldUserGroup">The old/updated user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal Task SendNotifications(IUserGroup               UserGroup,
                                                  NotificationMessageType  MessageType,
                                                  IUserGroup?              OldUserGroup      = null,
                                                  EventTracking_Id?        EventTrackingId   = null,
                                                  User_Id?                 CurrentUserId     = null)

            => SendNotifications(UserGroup,
                                 new[] { MessageType },
                                 OldUserGroup,
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user group notifications.
        /// </summary>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldUserGroup">The old/updated user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(IUserGroup                            UserGroup,
                                                        IEnumerable<NotificationMessageType>  MessageTypes,
                                                        IUserGroup?                           OldUserGroup      = null,
                                                        EventTracking_Id?                     EventTrackingId   = null,
                                                        User_Id?                              CurrentUserId     = null)
        {

            if (UserGroup is null)
                throw new ArgumentNullException(nameof(UserGroup),     "The given user group must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldUserGroup == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {


            }

        }

        #endregion

        #region (protected internal) SendNotifications           (UserGroup, ParentUserGroups, MessageType(s), ...)

        /// <summary>
        /// Send user group notifications.
        /// </summary>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="ParentUserGroups">The enumeration of parent user groups.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal virtual Task SendNotifications(IUserGroup               UserGroup,
                                                          IEnumerable<IUserGroup>  ParentUserGroups,
                                                          NotificationMessageType  MessageType,
                                                          EventTracking_Id?        EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)

            => SendNotifications(UserGroup,
                                 ParentUserGroups,
                                 new NotificationMessageType[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user group notifications.
        /// </summary>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="ParentUserGroups">The enumeration of parent user groups.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async virtual Task SendNotifications(IUserGroup                            UserGroup,
                                                                IEnumerable<IUserGroup>               ParentUserGroups,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id?                     EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (UserGroup is null)
                throw new ArgumentNullException(nameof(UserGroup),         "The given user group must not be null or empty!");

            if (ParentUserGroups is null || !ParentUserGroups.Any())
                throw new ArgumentNullException(nameof(ParentUserGroups),  "The given enumeration of parent user groups must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),      "The given enumeration of message types must not be null or empty!");

            //if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
            //    messageTypesHash.Add(addUser_MessageType);

            //if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
            //    messageTypesHash.Add(OldUserGroup == null
            //                           ? addUser_MessageType
            //                           : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                //if (TelegramClient != null)
                //{
                //    try
                //    {

                //        var AllTelegramNotifications  = ParentUserGroups.
                //                                            SelectMany(parent => parent.User2UserGroupEdges).
                //                                            SelectMany(edge   => edge.Source.GetNotificationsOf<TelegramNotification>(deleteUserGroup_MessageType)).
                //                                            ToSafeHashSet();

                //        if (AllTelegramNotifications.SafeAny())
                //        {

                //            if (messageTypes.Contains(deleteUserGroup_MessageType))
                //                await TelegramClient.SendTelegrams(String.Concat("User group '", UserGroup.Name.FirstText(), "' has been deleted. "),
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                //        }

                //    }
                //    catch (Exception e)
                //    {
                //        DebugX.LogException(e);
                //    }
                //}

                #endregion

                #region SMS Notifications

                //try
                //{

                //    var AllSMSNotifications = ParentUserGroups.
                //                                  SelectMany(parent => parent.User2UserGroupEdges).
                //                                  SelectMany(edge   => edge.Source.GetNotificationsOf<SMSNotification>(deleteUserGroup_MessageType)).
                //                                  ToSafeHashSet();

                //    if (AllSMSNotifications.SafeAny())
                //    {

                //        if (messageTypes.Contains(deleteUserGroup_MessageType))
                //            SendSMS(String.Concat("User group '", UserGroup.Name.FirstText(), "' has been deleted."),
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);

                //    }

                //}
                //catch (Exception e)
                //{
                //    DebugX.LogException(e);
                //}

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications = ParentUserGroups.
                                                    SelectMany(parent => parent.User2UserGroupEdges).
                                                    SelectMany(edge   => edge.Source.GetNotificationsOf<HTTPSNotification>(deleteUserGroup_MessageType)).
                                                    ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(deleteUserGroup_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("userGroupDeleted",
                                                                 UserGroup.ToJSON(true)
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications = ParentUserGroups.
                                                        SelectMany(parent => parent.User2UserGroupEdges).
                                                        SelectMany(edge   => edge.Source.GetNotificationsOf<EMailNotification>(deleteUserGroup_MessageType)).
                                                        ToSafeHashSet();

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(deleteUserGroup_MessageType))
                                await SMTPClient.Send(
                                     new HTMLEMailBuilder() {

                                         From           = Robot.EMail,
                                         To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                         Passphrase     = APIRobotGPGPassphrase,
                                         Subject        = String.Concat("User group '", UserGroup.Name.FirstText(), "' has been deleted."),

                                         HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User group <a href=\"https://", ExternalDNSName, BasePath, "/organizations/", UserGroup.Id, "\">", UserGroup.Name.FirstText(), "</a> has been deleted.<br />",
                                                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User group '", UserGroup.Name.FirstText(), "' has been deleted.\r\n",
                                                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         SecurityLevel  = EMailSecurity.autosign

                                     });

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion

        #region (protected internal) GetUserGroupSerializator(Request, User)

        protected internal UserGroupToJSONDelegate GetUserGroupSerializator(HTTPRequest  Request,
                                                                            IUser        User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (userGroup,
                            embedded,
                            expandUsers,
                            expandParentGroup,
                            expandSubgroups,
                            expandAttachedFiles,
                            includeAttachedFileSignatures)

                            => userGroup.ToJSON(embedded,
                                                expandUsers,
                                                expandParentGroup,
                                                expandSubgroups,
                                                expandAttachedFiles,
                                                includeAttachedFileSignatures);

            }

        }

        #endregion


        #region AddUserGroup           (UserGroup, OnAdded = null, ...)

        /// <summary>
        /// A delegate called whenever a user group was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user group was added.</param>
        /// <param name="UserGroup">The added user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnUserGroupAddedDelegate(DateTime           Timestamp,
                                                      IUserGroup         UserGroup,
                                                      EventTracking_Id?  EventTrackingId   = null,
                                                      User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user group was added.
        /// </summary>
        public event OnUserGroupAddedDelegate? OnUserGroupAdded;


        #region (protected internal) addUserGroup(UserGroup, OnAdded = null, ...)

        /// <summary>
        /// Add the given user group to the API.
        /// </summary>
        /// <param name="UserGroup">A new user group to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddUserGroupResult> addUserGroup(IUserGroup                             UserGroup,
                                                                        Action<IUserGroup, EventTracking_Id>?  OnAdded           = null,
                                                                        EventTracking_Id?                      EventTrackingId   = null,
                                                                        User_Id?                               CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (UserGroup.API != null && UserGroup.API != this)
                return AddUserGroupResult.ArgumentError(
                           UserGroup,
                           "The given user group is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (userGroups.ContainsKey(UserGroup.Id))
                return AddUserGroupResult.ArgumentError(
                           UserGroup,
                           $"The given user group identification '{UserGroup.Id}' already exists!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (UserGroup.Id.Length < MinUserGroupIdLength)
                return AddUserGroupResult.ArgumentError(
                           UserGroup,
                           $"UserGroup identification '{UserGroup.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            //if (UserGroup.Name.IsNullOrEmpty() || UserGroup.Name.Trim().IsNullOrEmpty())
            //    return AddUserGroupResult.ArgumentError(UserGroup,
            //                                            eventTrackingId,
            //                                            nameof(UserGroup),
            //                                            "The given user name must not be null!");

            //if (UserGroup.Name.Length < MinUserGroupNameLength)
            //    return AddUserGroupResult.ArgumentError(UserGroup,
            //                                            eventTrackingId,
            //                                            nameof(UserGroup),
            //                                            "UserGroup name '" + UserGroup.Name + "' is too short!");

            UserGroup.API = this;


            await WriteToDatabaseFile(addUserGroup_MessageType,
                                      UserGroup.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            userGroups.TryAdd(UserGroup.Id, UserGroup);


            OnAdded?.Invoke(UserGroup,
                            eventTrackingId);

            var OnUserGroupAddedLocal = OnUserGroupAdded;
            if (OnUserGroupAddedLocal is not null)
                await OnUserGroupAddedLocal.Invoke(Timestamp.Now,
                                                   UserGroup,
                                                   eventTrackingId,
                                                   CurrentUserId);

            await SendNotifications(UserGroup,
                                    addUserGroup_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);


            return AddUserGroupResult.Success(
                       UserGroup,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddUserGroup                      (UserGroup, OnAdded = null, ...)

        /// <summary>
        /// Add the given user group.
        /// </summary>
        /// <param name="UserGroup">A new user group.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserGroupResult> AddUserGroup(IUserGroup                             UserGroup,
                                                           Action<IUserGroup, EventTracking_Id>?  OnAdded           = null,
                                                           EventTracking_Id?                      EventTrackingId   = null,
                                                           User_Id?                               CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addUserGroup(UserGroup,
                                               OnAdded,
                                               eventTrackingId,
                                               CurrentUserId);

                }
                catch (Exception e)
                {

                    return AddUserGroupResult.Error(
                               UserGroup,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddUserGroupResult.LockTimeout(
                       UserGroup,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region AddUserGroupIfNotExists(UserGroup, OnAdded = null, ...)

        #region (protected internal) addUserGroupIfNotExists(UserGroup,                                OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given user group to the API.
        /// </summary>
        /// <param name="UserGroup">A new user group to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddUserGroupResult>

            addUserGroupIfNotExists(IUserGroup                             UserGroup,
                                     Action<IUserGroup, EventTracking_Id>?  OnAdded           = null,
                                     EventTracking_Id?                      EventTrackingId   = null,
                                     User_Id?                               CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (UserGroup.API != null && UserGroup.API != this)
                return AddUserGroupResult.ArgumentError(
                           UserGroup,
                           "The given user group is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (userGroups.ContainsKey(UserGroup.Id))
                return AddUserGroupResult.ArgumentError(
                           UserGroup,
                           $"The given user group identification '{UserGroup.Id}' already exists!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (UserGroup.Id.Length < MinUserGroupIdLength)
                return AddUserGroupResult.ArgumentError(
                           UserGroup,
                           $"UserGroup identification '{UserGroup.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            //if (UserGroup.Name.IsNullOrEmpty() || UserGroup.Name.Trim().IsNullOrEmpty())
            //    return AddUserGroupResult.ArgumentError(UserGroup,
            //                                                       eventTrackingId,
            //                                                       nameof(UserGroup),
            //                                                       "The given user name must not be null!");

            //if (UserGroup.Name.Length < MinUserGroupNameLength)
            //    return AddUserGroupResult.ArgumentError(UserGroup,
            //                                                       eventTrackingId,
            //                                                       nameof(UserGroup),
            //                                                       "UserGroup name '" + UserGroup.Name + "' is too short!");

            UserGroup.API = this;


            await WriteToDatabaseFile(addUserGroupIfNotExists_MessageType,
                                      UserGroup.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            userGroups.TryAdd(UserGroup.Id, UserGroup);

            OnAdded?.Invoke(UserGroup,
                            eventTrackingId);

            var OnUserGroupAddedLocal = OnUserGroupAdded;
            if (OnUserGroupAddedLocal is not null)
                await OnUserGroupAddedLocal.Invoke(Timestamp.Now,
                                                   UserGroup,
                                                   eventTrackingId,
                                                   CurrentUserId);

            await SendNotifications(UserGroup,
                                    addUserGroupIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);


            return AddUserGroupResult.Success(
                       UserGroup,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddUserGroupIfNotExists             (UserGroup,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given user group.
        /// </summary>
        /// <param name="UserGroup">A new user group.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserGroupResult>

            AddUserGroupIfNotExists(IUserGroup                             UserGroup,
                                    Action<IUserGroup, EventTracking_Id>?  OnAdded           = null,
                                    EventTracking_Id?                      EventTrackingId   = null,
                                    User_Id?                               CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addUserGroupIfNotExists(UserGroup,
                                                          OnAdded,
                                                          eventTrackingId,
                                                          CurrentUserId);

                }
                catch (Exception e)
                {

                    return AddUserGroupResult.Error(
                               UserGroup,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddUserGroupResult.LockTimeout(
                       UserGroup,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region AddOrUpdateUserGroup   (UserGroup, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) addOrUpdateUserGroup   (UserGroup,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given user group to/within the API.
        /// </summary>
        /// <param name="UserGroup">A user group.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        protected internal async Task<AddOrUpdateUserGroupResult>

            addOrUpdateUserGroup(IUserGroup                             UserGroup,
                                  Action<IUserGroup, EventTracking_Id>?  OnAdded           = null,
                                  Action<IUserGroup, EventTracking_Id>?  OnUpdated         = null,
                                  EventTracking_Id?                      EventTrackingId   = null,
                                  User_Id?                               CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (UserGroup.API != null && UserGroup.API != this)
                return AddOrUpdateUserGroupResult.ArgumentError(
                           UserGroup,
                           "The given user group is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (UserGroup.Id.Length < MinUserGroupIdLength)
                return AddOrUpdateUserGroupResult.ArgumentError(
                           UserGroup,
                           $"The given user group identification '{UserGroup.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            //if (UserGroup.Name.IsNullOrEmpty() || UserGroup.Name.Trim().IsNullOrEmpty())
            //    return AddOrUpdateUserGroupResult.ArgumentError(UserGroup,
            //                                                    eventTrackingId,
            //                                                    nameof(UserGroup),
            //                                                    "The given user group name must not be null!");

            //if (UserGroup.Name.Length < MinUserGroupNameLength)
            //    return AddOrUpdateUserGroupResult.ArgumentError(UserGroup,
            //                                                    eventTrackingId,
            //                                                    nameof(UserGroup),
            //                                                    "The given user group name '" + UserGroup.Name + "' is too short!");

            UserGroup.API = this;


            await WriteToDatabaseFile(addOrUpdateUserGroup_MessageType,
                                      UserGroup.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            if (userGroups.TryGetValue(UserGroup.Id, out var OldUserGroup))
            {
                userGroups.TryRemove(OldUserGroup.Id, out _);
                UserGroup.CopyAllLinkedDataFromBase(OldUserGroup);
            }

            userGroups.TryAdd(UserGroup.Id, UserGroup);

            if (OldUserGroup is null)
            {

                OnAdded?.Invoke(UserGroup,
                                eventTrackingId);

                var OnUserGroupAddedLocal = OnUserGroupAdded;
                if (OnUserGroupAddedLocal is not null)
                    await OnUserGroupAddedLocal.Invoke(Timestamp.Now,
                                                       UserGroup,
                                                       eventTrackingId,
                                                       CurrentUserId);

                await SendNotifications(UserGroup,
                                        addUserGroup_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                return AddOrUpdateUserGroupResult.Added(
                           UserGroup,
                           eventTrackingId,
                           SystemId,
                           this
                       );

            }


            OnUpdated?.Invoke(UserGroup,
                              eventTrackingId);

            var OnUserGroupUpdatedLocal = OnUserGroupUpdated;
            if (OnUserGroupUpdatedLocal is not null)
                await OnUserGroupUpdatedLocal.Invoke(Timestamp.Now,
                                                     UserGroup,
                                                     OldUserGroup,
                                                     eventTrackingId,
                                                     CurrentUserId);

            await SendNotifications(UserGroup,
                                    updateUserGroup_MessageType,
                                    OldUserGroup,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddOrUpdateUserGroupResult.Updated(
                       UserGroup,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddOrUpdateUserGroup   (UserGroup,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given user group to/within the API.
        /// </summary>
        /// <param name="UserGroup">A user group.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        public async Task<AddOrUpdateUserGroupResult>

            AddOrUpdateUserGroup(IUserGroup                             UserGroup,
                                 Action<IUserGroup, EventTracking_Id>?  OnAdded           = null,
                                 Action<IUserGroup, EventTracking_Id>?  OnUpdated         = null,
                                 EventTracking_Id?                      EventTrackingId   = null,
                                 User_Id?                               CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addOrUpdateUserGroup(UserGroup,
                                                       OnAdded,
                                                       OnUpdated,
                                                       eventTrackingId,
                                                       CurrentUserId);

                }
                catch (Exception e)
                {

                    return AddOrUpdateUserGroupResult.Error(
                               UserGroup,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddOrUpdateUserGroupResult.LockTimeout(
                       UserGroup,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region UpdateUserGroup        (UserGroup,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a user group was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user group was updated.</param>
        /// <param name="UserGroup">The updated user group.</param>
        /// <param name="OldUserGroup">The old user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user group identification</param>
        public delegate Task OnUserGroupUpdatedDelegate(DateTime          Timestamp,
                                                        IUserGroup        UserGroup,
                                                        IUserGroup        OldUserGroup,
                                                        EventTracking_Id? EventTrackingId   = null,
                                                        User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user group was updated.
        /// </summary>
        public event OnUserGroupUpdatedDelegate? OnUserGroupUpdated;


        #region (protected internal) updateUserGroup(UserGroup,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given user group to/within the API.
        /// </summary>
        /// <param name="UserGroup">A user group.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        protected internal async Task<UpdateUserGroupResult>

            updateUserGroup(IUserGroup                             UserGroup,
                             Action<IUserGroup, EventTracking_Id>?  OnUpdated         = null,
                             EventTracking_Id?                      EventTrackingId   = null,
                             User_Id?                               CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (!_TryGetUserGroup(UserGroup.Id, out var OldUserGroup))
                return UpdateUserGroupResult.ArgumentError(
                           UserGroup,
                           $"The given user '{UserGroup.Id}' does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (UserGroup.API != null && UserGroup.API != this)
                return UpdateUserGroupResult.ArgumentError(
                           UserGroup,
                           "The given user is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            UserGroup.API = this;


            await WriteToDatabaseFile(updateUserGroup_MessageType,
                                      UserGroup.ToJSON(true),
                                      eventTrackingId,
                                      CurrentUserId);

            userGroups.TryRemove(OldUserGroup.Id, out _);
            UserGroup.CopyAllLinkedDataFromBase(OldUserGroup);
            userGroups.TryAdd(UserGroup.Id, UserGroup);

            OnUpdated?.Invoke(UserGroup,
                              eventTrackingId);

            var OnUserGroupUpdatedLocal = OnUserGroupUpdated;
            if (OnUserGroupUpdatedLocal is not null)
                await OnUserGroupUpdatedLocal.Invoke(Timestamp.Now,
                                                     UserGroup,
                                                     OldUserGroup,
                                                     eventTrackingId,
                                                     CurrentUserId);

            await SendNotifications(UserGroup,
                                    updateUserGroup_MessageType,
                                    OldUserGroup,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateUserGroupResult.Success(
                       UserGroup,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region UpdateUserGroup                      (UserGroup,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given user group to/within the API.
        /// </summary>
        /// <param name="UserGroup">A user group.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        public async Task<UpdateUserGroupResult>

            UpdateUserGroup(IUserGroup                             UserGroup,
                            Action<IUserGroup, EventTracking_Id>?  OnUpdated         = null,
                            EventTracking_Id?                      EventTrackingId   = null,
                            User_Id?                               CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await updateUserGroup(UserGroup,
                                                  OnUpdated,
                                                  EventTrackingId,
                                                  CurrentUserId);

                }
                catch (Exception e)
                {

                    return UpdateUserGroupResult.Error(
                               UserGroup,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateUserGroupResult.LockTimeout(
                       UserGroup,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion


        #region (protected internal) updateUserGroup(UserGroup, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given user group.
        /// </summary>
        /// <param name="UserGroup">An user group.</param>
        /// <param name="UpdateDelegate">A delegate to update the given user group.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        protected internal async Task<UpdateUserGroupResult>

            updateUserGroup(IUserGroup                             UserGroup,
                             Action<UserGroup.Builder>              UpdateDelegate,
                             Action<IUserGroup, EventTracking_Id>?  OnUpdated         = null,
                             EventTracking_Id?                      EventTrackingId   = null,
                             User_Id?                               CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (!_UserGroupExists(UserGroup.Id))
                return UpdateUserGroupResult.ArgumentError(
                           UserGroup,
                           $"The given user '{UserGroup.Id}' does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (UserGroup.API != this)
                return UpdateUserGroupResult.ArgumentError(
                           UserGroup,
                           "The given user is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (UpdateDelegate is null)
                return UpdateUserGroupResult.ArgumentError(
                           UserGroup,
                           "The given update delegate must not be null!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            var builder = UserGroup.ToBuilder();
            UpdateDelegate(builder);
            var updatedUserGroup = builder.ToImmutable;

            await WriteToDatabaseFile(updateUserGroup_MessageType,
                                      updatedUserGroup.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            userGroups.TryRemove(UserGroup.Id, out _);
            updatedUserGroup.CopyAllLinkedDataFromBase(UserGroup);
            userGroups.TryAdd(updatedUserGroup.Id,
                              updatedUserGroup);

            OnUpdated?.Invoke(updatedUserGroup,
                              eventTrackingId);

            var OnUserGroupUpdatedLocal = OnUserGroupUpdated;
            if (OnUserGroupUpdatedLocal is not null)
                await OnUserGroupUpdatedLocal.Invoke(Timestamp.Now,
                                                     updatedUserGroup,
                                                     UserGroup,
                                                     eventTrackingId,
                                                     CurrentUserId);

            await SendNotifications(updatedUserGroup,
                                    updateUserGroup_MessageType,
                                    UserGroup,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateUserGroupResult.Success(
                       UserGroup,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region UpdateUserGroup                      (UserGroup, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given user group.
        /// </summary>
        /// <param name="UserGroup">An user group.</param>
        /// <param name="UpdateDelegate">A delegate to update the given user group.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        public async Task<UpdateUserGroupResult>

            UpdateUserGroup(IUserGroup                             UserGroup,
                            Action<UserGroup.Builder>              UpdateDelegate,
                            Action<IUserGroup, EventTracking_Id>?  OnUpdated         = null,
                            EventTracking_Id?                      EventTrackingId   = null,
                            User_Id?                               CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await updateUserGroup(UserGroup,
                                                  UpdateDelegate,
                                                  OnUpdated,
                                                  eventTrackingId,
                                                  CurrentUserId);

                }
                catch (Exception e)
                {

                    return UpdateUserGroupResult.Error(
                               UserGroup,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateUserGroupResult.LockTimeout(
                       UserGroup,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region DeleteUserGroup(UserGroup, OnDeleted = null, ...)

        /// <summary>
        /// A delegate called whenever a user group was deleted.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user group was deleted.</param>
        /// <param name="UserGroup">The deleted user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user group identification</param>
        public delegate Task OnUserGroupDeletedDelegate(DateTime           Timestamp,
                                                        IUserGroup         UserGroup,
                                                        EventTracking_Id?  EventTrackingId   = null,
                                                        User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user group was deleted.
        /// </summary>
        public event OnUserGroupDeletedDelegate? OnUserGroupDeleted;


        #region (protected internal virtual) canDeleteUserGroup(UserGroup)

        /// <summary>
        /// Determines whether the user group can safely be removed from the API.
        /// </summary>
        /// <param name="UserGroup">The user group to be deleted.</param>
        protected internal virtual I18NString canDeleteUserGroup(IUserGroup UserGroup)
        {
            return "Currently not possible!".ToI18NString();
        }

        #endregion

        #region (protected internal) deleteUserGroup(UserGroup, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given user group.
        /// </summary>
        /// <param name="UserGroup">The user group to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the user group has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        protected internal async Task<DeleteUserGroupResult>

            deleteUserGroup(IUserGroup                             UserGroup,
                            Action<IUserGroup, EventTracking_Id>?  OnDeleted         = null,
                            EventTracking_Id?                      EventTrackingId   = null,
                            User_Id?                               CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (UserGroup.API != this)
                return DeleteUserGroupResult.ArgumentError(
                           UserGroup,
                           "The given user group is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (!userGroups.TryGetValue(UserGroup.Id, out var UserGroupToBeDeleted))
                return DeleteUserGroupResult.ArgumentError(
                           UserGroup,
                           "The given user group does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            var veto = canDeleteUserGroup(UserGroup);

            if (veto is not null)
                return DeleteUserGroupResult.CanNotBeRemoved(
                           UserGroup,
                           eventTrackingId,
                           SystemId,
                           this,
                           veto
                       );


            // Get all parent user groups now, because later
            // the --isSubGroupOf--> edge will no longer be available!
            var parentUserGroups = UserGroup.GetAllParents().
                                             ToArray();

            //// Remove all: this --edge--> other user group
            //foreach (var edge in UserGroup.UserGroup2UserGroupOutEdges.ToArray())
            //    await _UnlinkUserGroups(edge.Source,
            //                            edge.EdgeLabel,
            //                            edge.Target,
            //                            EventTrackingId,
            //                            SuppressNotifications:  false,
            //                            CurrentUserId:          CurrentUserId);

            //// Remove all: this <--edge-- other user group
            //foreach (var edge in UserGroup.UserGroup2UserGroupInEdges.ToArray())
            //    await _UnlinkUserGroups(edge.Target,
            //                            edge.EdgeLabel,
            //                            edge.Source,
            //                            EventTrackingId,
            //                            SuppressNotifications:  false,
            //                            CurrentUserId:          CurrentUserId);


            await WriteToDatabaseFile(deleteUserGroup_MessageType,
                                      UserGroup.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            userGroups.TryRemove(UserGroup.Id, out _);

            OnDeleted?.Invoke(UserGroup,
                              eventTrackingId);

            var OnUserGroupDeletedLocal = OnUserGroupDeleted;
            if (OnUserGroupDeletedLocal is not null)
                await OnUserGroupDeletedLocal.Invoke(Timestamp.Now,
                                                     UserGroup,
                                                     eventTrackingId,
                                                     CurrentUserId);

            await SendNotifications(UserGroup,
                                    parentUserGroups,
                                    deleteUserGroup_MessageType,
                                    eventTrackingId,
                                    CurrentUserId);


            return DeleteUserGroupResult.Success(
                       UserGroup,
                       eventTrackingId,
                       SystemId,
                       this
                   );


        }

        #endregion

        #region DeleteUserGroup                     (UserGroup, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given user group.
        /// </summary>
        /// <param name="UserGroup">The user group to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the user group has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        public async Task<DeleteUserGroupResult>

            DeleteUserGroup(IUserGroup                             UserGroup,
                            Action<IUserGroup, EventTracking_Id>?  OnDeleted         = null,
                            EventTracking_Id?                      EventTrackingId   = null,
                            User_Id?                               CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await deleteUserGroup(UserGroup,
                                                  OnDeleted,
                                                  eventTrackingId,
                                                  CurrentUserId);

                }
                catch (Exception e)
                {

                    return DeleteUserGroupResult.Error(
                               UserGroup,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return DeleteUserGroupResult.LockTimeout(
                       UserGroup,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion


        #region UserGroupExists(UserGroupId)

        /// <summary>
        /// Determines whether the given user group identification exists within this API.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        protected internal Boolean _UserGroupExists(UserGroup_Id UserGroupId)

            => UserGroupId.IsNotNullOrEmpty && userGroups.ContainsKey(UserGroupId);

        /// <summary>
        /// Determines whether the given user group identification exists within this API.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        protected internal Boolean _UserGroupExists(UserGroup_Id? UserGroupId)

            => UserGroupId.IsNotNullOrEmpty() && userGroups.ContainsKey(UserGroupId.Value);


        /// <summary>
        /// Determines whether the given user group identification exists within this API.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        public Boolean UserGroupExists(UserGroup_Id UserGroupId)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _UserGroupExists(UserGroupId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given user group identification exists within this API.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        public Boolean UserGroupExists(UserGroup_Id? UserGroupId)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _UserGroupExists(UserGroupId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region GetUserGroup   (UserGroupId)

        /// <summary>
        /// Get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        protected internal IUserGroup? _GetUserGroup(UserGroup_Id UserGroupId)
        {

            if (!UserGroupId.IsNullOrEmpty && userGroups.TryGetValue(UserGroupId, out var userGroup))
                return userGroup;

            return null;

        }

        /// <summary>
        /// Get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        protected internal IUserGroup? _GetUserGroup(UserGroup_Id? UserGroupId)
        {

            if (UserGroupId.IsNotNullOrEmpty() && userGroups.TryGetValue(UserGroupId.Value, out var userGroup))
                return userGroup;

            return null;

        }


        /// <summary>
        /// Get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        public IUserGroup? GetUserGroup(UserGroup_Id  UserGroupId)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetUserGroup(UserGroupId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        /// <summary>
        /// Get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        public IUserGroup? GetUserGroup(UserGroup_Id? UserGroupId)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetUserGroup(UserGroupId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        #endregion

        #region TryGetUserGroup(UserGroupId, out UserGroup)

        /// <summary>
        /// Try to get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        /// <param name="UserGroup">The user group.</param>
        protected internal Boolean _TryGetUserGroup(UserGroup_Id     UserGroupId,
                                                    out IUserGroup?  UserGroup)
        {

            if (!UserGroupId.IsNullOrEmpty &&
                userGroups.TryGetValue(UserGroupId, out var userGroup))
            {
                UserGroup = userGroup;
                return true;
            }

            UserGroup = null;
            return false;

        }

        /// <summary>
        /// Try to get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        /// <param name="UserGroup">The user group.</param>
        protected internal Boolean _TryGetUserGroup(UserGroup_Id?   UserGroupId,
                                                    out IUserGroup?  UserGroup)
        {

            if (UserGroupId.IsNotNullOrEmpty() &&
               userGroups.TryGetValue(UserGroupId.Value, out var userGroup))
            {
                UserGroup = userGroup;
                return true;
            }

            UserGroup = null;
            return false;

        }


        /// <summary>
        /// Try to get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        /// <param name="UserGroup">The user group.</param>
        public Boolean TryGetUserGroup(UserGroup_Id     UserGroupId,
                                       out IUserGroup?  UserGroup)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetUserGroup(UserGroupId, out UserGroup);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            UserGroup = null;
            return false;

        }

        /// <summary>
        /// Try to get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        /// <param name="UserGroup">The user group.</param>
        public Boolean TryGetUserGroup(UserGroup_Id?    UserGroupId,
                                       out IUserGroup?  UserGroup)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetUserGroup(UserGroupId, out UserGroup);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            UserGroup = null;
            return false;

        }

        #endregion


        #region SearchUserGroupsByName   (UserGroupName)

        /// <summary>
        /// Find all user groups having the given user group name.
        /// </summary>
        /// <param name="UserGroupName">The name of a user group (might not be unique).</param>
        protected internal IEnumerable<IUserGroup> _SearchUserGroupsByName(String UserGroupName)

            => userGroups.Values.
                           Where(userGroup => userGroup.Name.Equals(UserGroupName)).
                           ToArray();


        /// <summary>
        /// Find all user groups having the given user group name.
        /// </summary>
        /// <param name="UserGroupName">The name of a user group (might not be unique).</param>
        public IEnumerable<IUserGroup> SearchUserGroupsByName(String UserGroupName)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _SearchUserGroupsByName(UserGroupName);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return Array.Empty<IUserGroup>();

        }

        #endregion

        #region TrySearchUserGroupsByName(UserGroupName, out UserGroups)

        /// <summary>
        /// Find all user groups having the given user group name.
        /// </summary>
        /// <param name="UserGroupName">The name of a user group (might not be unique).</param>
        /// <param name="UserGroups">An enumeration of matching user groups.</param>
        protected internal Boolean _TrySearchUserGroupsByName(String UserGroupName, out IEnumerable<IUserGroup> UserGroups)
        {

            var foundUserGroups = new List<IUserGroup>();

            foreach (var userGroup in userGroups.Values)
                if (userGroup.Name.Equals(UserGroupName ?? ""))
                    foundUserGroups.Add(userGroup);

            UserGroups = foundUserGroups;

            return foundUserGroups.Any();

        }


        /// <summary>
        /// Find all user groups having the given user group name.
        /// </summary>
        /// <param name="UserGroupName">The name of a user group (might not be unique).</param>
        /// <param name="UserGroups">An enumeration of matching user groups.</param>
        public Boolean TrySearchUserGroupsByName(String UserGroupName, out IEnumerable<IUserGroup> UserGroups)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TrySearchUserGroupsByName(UserGroupName, out UserGroups);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            UserGroups = Array.Empty<IUserGroup>();
            return false;

        }

        #endregion

        #endregion

        #region Notifications

        private JObject GetNotifications(IUser User)
        {

            var notificationsJSON = User.GetNotificationInfos();

            notificationsJSON.AddFirst(new JProperty("notificationGroups", new JArray(
                                           notificationGroups.Values.Select(notificationGroup => notificationGroup.ToJSON())
                                      )));

            return notificationsJSON;

        }

        private JObject GetNotification (IUser User, UInt32 NotificationId)
        {

            var notificationJSON = User.GetNotificationInfo(NotificationId);

            notificationJSON.AddFirst(new JProperty("notificationGroups", new JArray(
                                          notificationGroups.Values.Select(notificationGroup => notificationGroup.ToJSON())
                                     )));

            return notificationJSON;

        }

        private JObject GetNotifications(IOrganization Organization)
        {

            var notificationsJSON = Organization.GetNotificationInfos();

            notificationsJSON.AddFirst(new JProperty("notificationGroups", new JArray(
                                           notificationGroups.Values.Select(notificationGroup => notificationGroup.ToJSON())
                                      )));

            return notificationsJSON;

        }




        // ToDo: Add locks
        // ToDo: Add logging!

        #region AddNotification(User,           NotificationType,                           CurrentUserId = null)

        protected async Task addNotification<T>(IUser              User,
                                                T                  NotificationType,
                                                EventTracking_Id?  EventTrackingId   = null,
                                                User_Id?           CurrentUserId     = null)

            where T : ANotification

        {

            User.AddNotification(NotificationType,
                                 async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                           update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                           EventTrackingId,
                                                                           CurrentUserId));

        }


        public async Task AddNotification<T>(IUser              User,
                                             T                  NotificationType,
                                             EventTracking_Id?  EventTrackingId   = null,
                                             User_Id?           CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                await addNotification(User,
                                       NotificationType,
                                       EventTrackingId,
                                       CurrentUserId);

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(UserId,         NotificationType,                           CurrentUserId = null)

        public async Task AddNotification<T>(User_Id           UserId,
                                             T                 NotificationType,
                                             EventTracking_Id? EventTrackingId   = null,
                                             User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (users.TryGetValue(UserId, out var User))
                {

                    User.AddNotification(NotificationType,
                                         async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                   update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                                   EventTrackingId,
                                                                                   CurrentUserId));

                }

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(User,           NotificationType, NotificationMessageType,  CurrentUserId = null)

        public async Task AddNotification<T>(IUser                    User,
                                             T                        NotificationType,
                                             NotificationMessageType  NotificationMessageType,
                                             EventTracking_Id?        EventTrackingId   = null,
                                             User_Id?                 CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                User.AddNotification(NotificationType,
                                     NotificationMessageType,
                                     async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                               update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                               EventTrackingId,
                                                                               CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(UserId,         NotificationType, NotificationMessageType,  CurrentUserId = null)

        public async Task AddNotification<T>(User_Id                  UserId,
                                             T                        NotificationType,
                                             NotificationMessageType  NotificationMessageType,
                                             EventTracking_Id?        EventTrackingId   = null,
                                             User_Id?                 CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (users.TryGetValue(UserId, out var User))
                {

                    User.AddNotification(NotificationType,
                                         NotificationMessageType,
                                         async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                   update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                                   EventTrackingId,
                                                                                   CurrentUserId));

                }

                else
                    throw new ArgumentException("The given user '" + UserId + "' is unknown!");

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(User,           NotificationType, NotificationMessageTypes, ...)

        public async Task AddNotification<T>(IUser                                 User,
                                             T                                     NotificationType,
                                             IEnumerable<NotificationMessageType>  NotificationMessageTypes,
                                             EventTracking_Id?                     EventTrackingId   = null,
                                             User_Id?                              CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                User.AddNotification(NotificationType,
                                     NotificationMessageTypes,
                                     async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                               update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                               EventTrackingId,
                                                                               CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(UserId,         NotificationType, NotificationMessageTypes, ...)

        public async Task AddNotification<T>(User_Id                               UserId,
                                             T                                     NotificationType,
                                             IEnumerable<NotificationMessageType>  NotificationMessageTypes,
                                             EventTracking_Id?                     EventTrackingId   = null,
                                             User_Id?                              CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (users.TryGetValue(UserId, out var User))
                {

                    User.AddNotification(NotificationType,
                                         NotificationMessageTypes,
                                         async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                   update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                                   EventTrackingId,
                                                                                   CurrentUserId));

                }

                else
                    throw new ArgumentException("The given user '" + UserId + "' is unknown!");

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion


        #region AddNotification(Organization,   NotificationType,                           CurrentUserId = null)

        public async Task AddNotification<T>(IOrganization      Organization,
                                             T                  NotificationType,
                                             EventTracking_Id?  EventTrackingId   = null,
                                             User_Id?           CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                Organization.AddNotification(NotificationType,
                                             async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                       update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                       EventTrackingId,
                                                                                       CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(OrganizationId, NotificationType,                           CurrentUserId = null)

        public async Task AddNotification<T>(Organization_Id   OrganizationId,
                                             T                 NotificationType,
                                             EventTracking_Id? EventTrackingId   = null,
                                             User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (organizations.TryGetValue(OrganizationId, out var Organization))
                {

                    Organization.AddNotification(NotificationType,
                                                 async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                           update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                           EventTrackingId,
                                                                                           CurrentUserId));

                }

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(Organization,   NotificationType, NotificationMessageType,  CurrentUserId = null)

        public async Task AddNotification<T>(IOrganization            Organization,
                                             T                        NotificationType,
                                             NotificationMessageType  NotificationMessageType,
                                             EventTracking_Id?        EventTrackingId   = null,
                                             User_Id?                 CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                Organization.AddNotification(NotificationType,
                                             NotificationMessageType,
                                             async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                       update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                       EventTrackingId,
                                                                                       CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(OrganizationId, NotificationType, NotificationMessageType,  CurrentUserId = null)

        public async Task AddNotification<T>(Organization_Id          OrganizationId,
                                             T                        NotificationType,
                                             NotificationMessageType  NotificationMessageType,
                                             EventTracking_Id?        EventTrackingId   = null,
                                             User_Id?                 CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (organizations.TryGetValue(OrganizationId, out var Organization))
                {

                    Organization.AddNotification(NotificationType,
                                                 NotificationMessageType,
                                                 async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                           update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                           EventTrackingId,
                                                                                           CurrentUserId));

                }

                else
                    throw new ArgumentException("The given organization '" + OrganizationId + "' is unknown!");

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(Organization,   NotificationType, NotificationMessageTypes, ...)

        public async Task AddNotification<T>(IOrganization                         Organization,
                                             T                                     NotificationType,
                                             IEnumerable<NotificationMessageType>  NotificationMessageTypes,
                                             EventTracking_Id?                     EventTrackingId   = null,
                                             User_Id?                              CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                Organization.AddNotification(NotificationType,
                                             NotificationMessageTypes,
                                             async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                       update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                       EventTrackingId,
                                                                                       CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(OrganizationId, NotificationType, NotificationMessageTypes, ...)

        public async Task AddNotification<T>(Organization_Id                       OrganizationId,
                                             T                                     NotificationType,
                                             IEnumerable<NotificationMessageType>  NotificationMessageTypes,
                                             EventTracking_Id?                     EventTrackingId   = null,
                                             User_Id?                              CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (organizations.TryGetValue(OrganizationId, out var Organization))
                {

                    Organization.AddNotification(NotificationType,
                                                 NotificationMessageTypes,
                                                 async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                           update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                           EventTrackingId,
                                                                                           CurrentUserId));

                }

                else
                    throw new ArgumentException("The given organization '" + OrganizationId + "' is unknown!");

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion



        #region GetNotifications  (User,           NotificationMessageType = null)

        public IEnumerable<ANotification> GetNotifications(IUser                     User,
                                                           NotificationMessageType?  NotificationMessageType = null)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return User.GetNotifications(NotificationMessageType);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return Array.Empty<ANotification>();

        }

        #endregion

        #region GetNotifications  (UserId,         NotificationMessageType = null)

        public IEnumerable<ANotification> GetNotifications(User_Id                   UserId,
                                                           NotificationMessageType?  NotificationMessageType = null)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    if (users.TryGetValue(UserId, out var user))
                        return user.GetNotifications(NotificationMessageType);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return Array.Empty<ANotification>();

        }

        #endregion


        #region GetNotificationsOf(User,           params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(IUser                             User,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return User.GetNotificationsOf<T>(NotificationMessageTypes);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return Array.Empty<T>();

        }

        #endregion

        #region GetNotificationsOf(UserId,         params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(User_Id                           UserId,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    if (users.TryGetValue(UserId, out var user))
                        return user.GetNotificationsOf<T>(NotificationMessageTypes);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return Array.Empty<T>();

        }

        #endregion

        #region GetNotificationsOf(Organization,   params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(Organization                      Organization,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return Organization.
                                   GetMeAndAllMyParents(parent => parent != NoOwner).
                                   SelectMany          (parent => parent.User2OrganizationEdges).
                                   SelectMany          (edge   => edge.Source.GetNotificationsOf<T>(NotificationMessageTypes));

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return Array.Empty<T>();

        }

        #endregion

        #region GetNotificationsOf(OrganizationId, params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(Organization_Id                   OrganizationId,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        if (organizations.TryGetValue(OrganizationId, out var organization))
                            return organization.
                                       GetMeAndAllMyParents(parent => parent != NoOwner).
                                       SelectMany          (parent => parent.User2OrganizationEdges).
                                       SelectMany          (edge   => edge.Source.GetNotificationsOf<T>(NotificationMessageTypes));

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return Array.Empty<T>();

        }

        #endregion

        #region GetNotificationsOf(UserGroup,      params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(UserGroup                         UserGroup,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return UserGroup.
                                   GetMeAndAllMyParents().
                                   SelectMany(parent => parent.User2UserGroupEdges).
                                   SelectMany(edge   => edge.Source.GetNotificationsOf<T>(NotificationMessageTypes));

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return Array.Empty<T>();

        }

        #endregion

        #region GetNotificationsOf(UserGroupId,    params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(UserGroup_Id                      UserGroupId,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        if (userGroups.TryGetValue(UserGroupId, out var userGroup))
                            return userGroup.
                                       GetMeAndAllMyParents().
                                       SelectMany(parent => parent.User2UserGroupEdges).
                                       SelectMany(edge   => edge.Source.GetNotificationsOf<T>(NotificationMessageTypes));

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return Array.Empty<T>();

        }

        #endregion



        #region GetNotifications  (User,   NotificationMessageTypeFilter)

        public IEnumerable<ANotification> GetNotifications(IUser                                   User,
                                                           Func<NotificationMessageType, Boolean>  NotificationMessageTypeFilter)

            => User.GetNotifications(NotificationMessageTypeFilter);

        #endregion

        #region GetNotifications  (UserId, NotificationMessageTypeFilter)

        public IEnumerable<ANotification> GetNotifications(User_Id                                 UserId,
                                                           Func<NotificationMessageType, Boolean>  NotificationMessageTypeFilter)

            => TryGetUser(UserId, out var user) && user is not null
                   ? user.GetNotifications(NotificationMessageTypeFilter)
                   : Array.Empty<ANotification>();

        #endregion

        #region GetNotificationsOf(User,   NotificationMessageTypeFilter)

        public IEnumerable<T> GetNotificationsOf<T>(IUser                                   User,
                                                    Func<NotificationMessageType, Boolean>  NotificationMessageTypeFilter)

            where T : ANotification

            => User.GetNotificationsOf<T>(NotificationMessageTypeFilter);

        #endregion

        #region GetNotificationsOf(UserId, NotificationMessageTypeFilter)

        public IEnumerable<T> GetNotificationsOf<T>(User_Id                                 UserId,
                                                    Func<NotificationMessageType, Boolean>  NotificationMessageTypeFilter)

            where T : ANotification

            => TryGetUser(UserId, out var user) && user is not null
                   ? user.GetNotificationsOf<T>(NotificationMessageTypeFilter)
                   : Array.Empty<T>();

        #endregion


        #region RemoveNotification(User,           NotificationType, ...)

        public async Task RemoveNotification<T>(IUser              User,
                                                T                  NotificationType,
                                                EventTracking_Id?  EventTrackingId   = null,
                                                User_Id?           CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                await User.RemoveNotification(NotificationType,
                                              async update => await WriteToDatabaseFile(removeNotification_MessageType,
                                                                                        update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                                        EventTrackingId,
                                                                                        CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region RemoveNotification(UserId,         NotificationType, ...)

        public async Task RemoveNotification<T>(User_Id           UserId,
                                                T                 NotificationType,
                                                EventTracking_Id? EventTrackingId   = null,
                                                User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (users.TryGetValue(UserId, out var user) && user is not null)
                {

                    user.RemoveNotification(NotificationType,
                                            async update => await WriteToDatabaseFile(removeNotification_MessageType,
                                                                                      update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", UserId.ToString())),
                                                                                      EventTrackingId,
                                                                                      CurrentUserId));

                }

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion


        #region RemoveNotification(Organization,   NotificationType, ...)

        public async Task RemoveNotification<T>(IOrganization      Organization,
                                                T                  NotificationType,
                                                EventTracking_Id?  EventTrackingId   = null,
                                                User_Id?           CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                await Organization.RemoveNotification(NotificationType,
                                                      async update => await WriteToDatabaseFile(removeNotification_MessageType,
                                                                                                update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                                EventTrackingId,
                                                                                                CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region RemoveNotification(OrganizationId, NotificationType, ...)

        public async Task RemoveNotification<T>(Organization_Id   OrganizationId,
                                                T                 NotificationType,
                                                EventTracking_Id? EventTrackingId   = null,
                                                User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (organizations.TryGetValue(OrganizationId, out var organization) && organization is not null)
                {

                    organization.RemoveNotification(NotificationType,
                                                    async update => await WriteToDatabaseFile(removeNotification_MessageType,
                                                                                              update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", OrganizationId.ToString())),
                                                                                              EventTrackingId,
                                                                                              CurrentUserId));

                }

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #endregion

        #region Notification Groups

        #region Data

        /// <summary>
        /// An enumeration of all notification groups.
        /// </summary>
        protected readonly Dictionary<NotificationGroup_Id, NotificationGroup> notificationGroups = new();

        /// <summary>
        /// An enumeration of all notification groups.
        /// </summary>
        public IEnumerable<NotificationGroup> NotificationGroups
        {
            get
            {

                if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return notificationGroups.Values.ToArray();

                    }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return Array.Empty<NotificationGroup>();

            }
        }

        #endregion


        protected Boolean addNotificationGroup(NotificationGroup NotificationGroup)
        {
            notificationGroups.Add(NotificationGroup.Id, NotificationGroup);
            return true;
        }

        public async Task<Boolean> AddNotificationGroup(NotificationGroup NotificationGroup)
        {

            try
            {

                await UsersSemaphore.WaitAsync();

                return addNotificationGroup(NotificationGroup);

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region Notification Messages

        #region Data

        /// <summary>
        /// An enumeration of all notification messages.
        /// </summary>
        protected readonly Dictionary<NotificationMessage_Id, NotificationMessage> notificationMessages;

        /// <summary>
        /// An enumeration of all notification messages.
        /// </summary>
        public IEnumerable<NotificationMessage> NotificationMessages
        {
            get
            {
                try
                {
                    return NotificationMessagesSemaphore.Wait(SemaphoreSlimTimeout)
                               ? notificationMessages.Values.ToArray()
                               : new NotificationMessage[0];
                }
                finally
                {
                    try
                    {
                        NotificationMessagesSemaphore.Release();
                    }
                    catch
                    { }
                }
            }
        }

        #endregion


        #region (protected) WriteToDatabaseFileAndNotify(NotificationMessage, MessageType,  OldNotificationMessage = null, ...)

        /// <summary>
        /// Write the given notification message to the database and send out notifications.
        /// </summary>
        /// <param name="NotificationMessage">The notification message.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldNotificationMessage">The old/updated notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected async Task WriteToDatabaseFileAndNotify(NotificationMessage      NotificationMessage,
                                                          NotificationMessageType  MessageType,
                                                          NotificationMessage?     OldNotificationMessage   = null,
                                                          EventTracking_Id?        EventTrackingId          = null,
                                                          User_Id?                 CurrentUserId            = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),  "The given notification message must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      NotificationMessage.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(NotificationMessage,
                                    MessageType,
                                    OldNotificationMessage,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected) SendNotifications           (NotificationMessage, MessageTypes, OldNotificationMessage = null, ...)

        /// <summary>
        /// Send notification message notifications.
        /// </summary>
        /// <param name="NotificationMessage">The notification message.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldNotificationMessage">The old/updated notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected async Task SendNotifications(NotificationMessage      NotificationMessage,
                                               NotificationMessageType  MessageType,
                                               NotificationMessage?     OldNotificationMessage   = null,
                                               EventTracking_Id?        EventTrackingId          = null,
                                               User_Id?                 CurrentUserId            = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),  "The given notification message must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            await SendNotifications(NotificationMessage,
                                    new NotificationMessageType[] { MessageType },
                                    OldNotificationMessage,
                                    EventTrackingId,
                                    CurrentUserId);

        }


        /// <summary>
        /// Send notification message notifications.
        /// </summary>
        /// <param name="NotificationMessage">The notification message.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldNotificationMessage">The old/updated notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected async Task SendNotifications(NotificationMessage                   NotificationMessage,
                                               IEnumerable<NotificationMessageType>  MessageTypes,
                                               NotificationMessage?                  OldNotificationMessage   = null,
                                               EventTracking_Id?                     EventTrackingId          = null,
                                               User_Id?                              CurrentUserId            = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),   "The given notification message must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldNotificationMessage == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {


            }

        }

        #endregion

        #region (protected) GetNotificationMessageSerializator(Request, User)

        //protected NotificationMessageToJSONDelegate GetNotificationMessageSerializator(HTTPRequest  Request,
        //                                                               User         User)
        //{

        //    switch (User?.Id.ToString())
        //    {

        //        default:
        //            return (notificationMessage,
        //                    embedded,
        //                    ExpandTags,
        //                    ExpandAuthorId,
        //                    includeCryptoHash)

        //                    => notificationMessage.ToJSON(embedded,
        //                                          ExpandTags,
        //                                          ExpandAuthorId,
        //                                          includeCryptoHash);

        //    }

        //}

        #endregion


        #region AddNotificationMessage           (NotificationMessage, OnAdded = null,                   CurrentUserId = null)

        /// <summary>
        /// A delegate called whenever a notification message was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the notification message was added.</param>
        /// <param name="NotificationMessage">The added notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnNotificationMessageAddedDelegate(DateTime          Timestamp,
                                                        NotificationMessage       NotificationMessage,
                                                        EventTracking_Id? EventTrackingId   = null,
                                                        User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a notification message was added.
        /// </summary>
        public event OnNotificationMessageAddedDelegate? OnNotificationMessageAdded;


        #region (protected) addNotificationMessage(NotificationMessage,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given notification message to the API.
        /// </summary>
        /// <param name="NotificationMessage">A new notification message to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected async Task<NotificationMessage> addNotificationMessage(NotificationMessage                             NotificationMessage,
                                                                         Action<NotificationMessage, EventTracking_Id>?  OnAdded           = null,
                                                                         EventTracking_Id?                               EventTrackingId   = null,
                                                                         User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),
                                                "The given notification message must not be null!");

            if (NotificationMessage.API != null && NotificationMessage.API != this)
                throw new ArgumentException    ("The given notification message is already attached to another API!",
                                                nameof(NotificationMessage));

            if (notificationMessages.ContainsKey(NotificationMessage.Id))
                throw new ArgumentException    ("User group identification '" + NotificationMessage.Id + "' already exists!",
                                                nameof(NotificationMessage));

            if (NotificationMessage.Id.Length < MinNotificationMessageIdLength)
                throw new ArgumentException    ("User group identification '" + NotificationMessage.Id + "' is too short!",
                                                nameof(NotificationMessage));

            NotificationMessage.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addNotificationMessage_MessageType,
                                      NotificationMessage.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            notificationMessages.Add(NotificationMessage.Id, NotificationMessage);


            var OnNotificationMessageAddedLocal = OnNotificationMessageAdded;
            if (OnNotificationMessageAddedLocal is not null)
                await OnNotificationMessageAddedLocal?.Invoke(Timestamp.Now,
                                                      NotificationMessage,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(NotificationMessage,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(NotificationMessage,
                            eventTrackingId);

            return NotificationMessage;

        }

        #endregion

        #region AddNotificationMessage             (NotificationMessage,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given notification message.
        /// </summary>
        /// <param name="NotificationMessage">A new notification message.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<NotificationMessage> AddNotificationMessage(NotificationMessage                             NotificationMessage,
                                                                      Action<NotificationMessage, EventTracking_Id>?  OnAdded           = null,
                                                                      EventTracking_Id?                               EventTrackingId   = null,
                                                                      User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage), "The given notification message must not be null!");

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await addNotificationMessage(NotificationMessage,
                                                    OnAdded,
                                                    EventTrackingId,
                                                    CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddNotificationMessageIfNotExists(NotificationMessage, OnAdded = null,                   CurrentUserId = null)

        #region (protected) addNotificationMessageIfNotExists(NotificationMessage,                                OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given notification message to the API.
        /// </summary>
        /// <param name="NotificationMessage">A new notification message to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected async Task<NotificationMessage> addNotificationMessageIfNotExists(NotificationMessage                             NotificationMessage,
                                                                                    Action<NotificationMessage, EventTracking_Id>?  OnAdded           = null,
                                                                                    EventTracking_Id?                               EventTrackingId   = null,
                                                                                    User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),
                                                "The given notification message must not be null!");

            if (NotificationMessage.API != null && NotificationMessage.API != this)
                throw new ArgumentException    ("The given notification message is already attached to another API!",
                                                nameof(NotificationMessage));

            if (notificationMessages.ContainsKey(NotificationMessage.Id))
                return notificationMessages[NotificationMessage.Id];

            if (NotificationMessage.Id.Length < MinNotificationMessageIdLength)
                throw new ArgumentException    ("User group identification '" + NotificationMessage.Id + "' is too short!",
                                                nameof(NotificationMessage));

            NotificationMessage.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addNotificationMessageIfNotExists_MessageType,
                                      NotificationMessage.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            notificationMessages.Add(NotificationMessage.Id, NotificationMessage);

            var OnNotificationMessageAddedLocal = OnNotificationMessageAdded;
            if (OnNotificationMessageAddedLocal is not null)
                await OnNotificationMessageAddedLocal?.Invoke(Timestamp.Now,
                                                      NotificationMessage,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(NotificationMessage,
                                    addNotificationMessageIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(NotificationMessage,
                            eventTrackingId);

            return NotificationMessage;

        }

        #endregion

        #region AddNotificationMessageIfNotExists             (NotificationMessage,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given notification message.
        /// </summary>
        /// <param name="NotificationMessage">A new notification message.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<NotificationMessage> AddNotificationMessageIfNotExists(NotificationMessage                             NotificationMessage,
                                                                                 Action<NotificationMessage, EventTracking_Id>?  OnAdded           = null,
                                                                                 EventTracking_Id?                               EventTrackingId   = null,
                                                                                 User_Id?                                        CurrentUserId     = null)
        {

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await addNotificationMessageIfNotExists(NotificationMessage,
                                                             OnAdded,
                                                             EventTrackingId,
                                                             CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddOrUpdateNotificationMessage   (NotificationMessage, OnAdded = null, OnUpdated = null, ...)

        #region (protected) addOrUpdateNotificationMessage   (NotificationMessage,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given notification message to/within the API.
        /// </summary>
        /// <param name="NotificationMessage">A notification message.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        protected async Task<NotificationMessage> addOrUpdateNotificationMessage(NotificationMessage                             NotificationMessage,
                                                                                 Action<NotificationMessage, EventTracking_Id>?  OnAdded           = null,
                                                                                 Action<NotificationMessage, EventTracking_Id>?  OnUpdated         = null,
                                                                                 EventTracking_Id?                               EventTrackingId   = null,
                                                                                 User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),
                                                "The given notification message must not be null!");

            if (NotificationMessage.API != null && NotificationMessage.API != this)
                throw new ArgumentException    ("The given notification message is already attached to another API!",
                                                nameof(NotificationMessage));

            if (notificationMessages.ContainsKey(NotificationMessage.Id))
                return notificationMessages[NotificationMessage.Id];

            if (NotificationMessage.Id.Length < MinNotificationMessageIdLength)
                throw new ArgumentException    ("NotificationMessage identification '" + NotificationMessage.Id + "' is too short!",
                                                nameof(NotificationMessage));

            NotificationMessage.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrUpdateNotificationMessage_MessageType,
                                      NotificationMessage.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            if (notificationMessages.TryGetValue(NotificationMessage.Id, out NotificationMessage OldNotificationMessage))
            {
                notificationMessages.Remove(OldNotificationMessage.Id);
                NotificationMessage.CopyAllLinkedDataFromBase(OldNotificationMessage);
            }

            notificationMessages.Add(NotificationMessage.Id, NotificationMessage);

            if (OldNotificationMessage != null)
            {

                var OnNotificationMessageUpdatedLocal = OnNotificationMessageUpdated;
                if (OnNotificationMessageUpdatedLocal is not null)
                    await OnNotificationMessageUpdatedLocal?.Invoke(Timestamp.Now,
                                                            NotificationMessage,
                                                            OldNotificationMessage,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(NotificationMessage,
                                        updateNotificationMessage_MessageType,
                                        OldNotificationMessage,
                                        eventTrackingId,
                                        CurrentUserId);

                OnUpdated?.Invoke(NotificationMessage,
                                  eventTrackingId);

            }
            else
            {

                var OnNotificationMessageAddedLocal = OnNotificationMessageAdded;
                if (OnNotificationMessageAddedLocal is not null)
                    await OnNotificationMessageAddedLocal?.Invoke(Timestamp.Now,
                                                          NotificationMessage,
                                                          eventTrackingId,
                                                          CurrentUserId);

                await SendNotifications(NotificationMessage,
                                        addNotificationMessage_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnAdded?.Invoke(NotificationMessage,
                                eventTrackingId);

            }

            return NotificationMessage;

        }

        #endregion

        #region AddOrUpdateNotificationMessage   (NotificationMessage,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given notification message to/within the API.
        /// </summary>
        /// <param name="NotificationMessage">A notification message.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        public async Task<NotificationMessage> AddOrUpdateNotificationMessage(NotificationMessage                             NotificationMessage,
                                                                              Action<NotificationMessage, EventTracking_Id>?  OnAdded           = null,
                                                                              Action<NotificationMessage, EventTracking_Id>?  OnUpdated         = null,
                                                                              EventTracking_Id?                               EventTrackingId   = null,
                                                                              User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage), "The given notification message must not be null!");

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await addOrUpdateNotificationMessage(NotificationMessage,
                                                            OnAdded,
                                                            OnUpdated,
                                                            EventTrackingId,
                                                            CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region UpdateNotificationMessage        (NotificationMessage,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a notification message was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the notification message was updated.</param>
        /// <param name="NotificationMessage">The updated notification message.</param>
        /// <param name="OldNotificationMessage">The old notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking notification message identification</param>
        public delegate Task OnNotificationMessageUpdatedDelegate(DateTime          Timestamp,
                                                          NotificationMessage       NotificationMessage,
                                                          NotificationMessage       OldNotificationMessage,
                                                          EventTracking_Id? EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a notification message was updated.
        /// </summary>
        public event OnNotificationMessageUpdatedDelegate? OnNotificationMessageUpdated;


        #region (protected) updateNotificationMessage(NotificationMessage, OnUpdated = null, ...)

        /// <summary>
        /// Update the given notification message to/within the API.
        /// </summary>
        /// <param name="NotificationMessage">A notification message.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        protected async Task<NotificationMessage> updateNotificationMessage(NotificationMessage                             NotificationMessage,
                                                                            Action<NotificationMessage, EventTracking_Id>?  OnUpdated         = null,
                                                                            EventTracking_Id?                               EventTrackingId   = null,
                                                                            User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),
                                                "The given notification message must not be null!");

            if (NotificationMessage.API != null && NotificationMessage.API != this)
                throw new ArgumentException    ("The given notification message is already attached to another API!",
                                                nameof(NotificationMessage));

            if (!notificationMessages.TryGetValue(NotificationMessage.Id, out NotificationMessage OldNotificationMessage))
                throw new ArgumentException    ("The given notification message '" + NotificationMessage.Id + "' does not exists in this API!",
                                                nameof(NotificationMessage));

            NotificationMessage.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateNotificationMessage_MessageType,
                                      NotificationMessage.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            notificationMessages.Remove(OldNotificationMessage.Id);
            NotificationMessage.CopyAllLinkedDataFromBase(OldNotificationMessage);


            var OnNotificationMessageUpdatedLocal = OnNotificationMessageUpdated;
            if (OnNotificationMessageUpdatedLocal is not null)
                await OnNotificationMessageUpdatedLocal?.Invoke(Timestamp.Now,
                                                        NotificationMessage,
                                                        OldNotificationMessage,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(NotificationMessage,
                                    updateNotificationMessage_MessageType,
                                    OldNotificationMessage,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NotificationMessage,
                              eventTrackingId);

            return NotificationMessage;

        }

        #endregion

        #region UpdateNotificationMessage             (NotificationMessage, OnUpdated = null, ...)

        /// <summary>
        /// Update the given notification message to/within the API.
        /// </summary>
        /// <param name="NotificationMessage">A notification message.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        public async Task<NotificationMessage> UpdateNotificationMessage(NotificationMessage                             NotificationMessage,
                                                                         Action<NotificationMessage, EventTracking_Id>?  OnUpdated         = null,
                                                                         EventTracking_Id?                               EventTrackingId   = null,
                                                                         User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage), "The given notification message must not be null!");

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await updateNotificationMessage(NotificationMessage,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion


        #region (protected) updateNotificationMessage(NotificationMessageId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given notification message.
        /// </summary>
        /// <param name="NotificationMessageId">An notification message identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given notification message.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        protected async Task<NotificationMessage> updateNotificationMessage(NotificationMessage_Id                          NotificationMessageId,
                                                                            Action<NotificationMessage.Builder>             UpdateDelegate,
                                                                            Action<NotificationMessage, EventTracking_Id>?  OnUpdated         = null,
                                                                            EventTracking_Id?                               EventTrackingId   = null,
                                                                            User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessageId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(NotificationMessageId),
                                                "The given notification message identification must not be null or empty!");

            if (UpdateDelegate == null)
                throw new ArgumentNullException(nameof(UpdateDelegate),
                                                "The given update delegate must not be null!");

            if (!notificationMessages.TryGetValue(NotificationMessageId, out NotificationMessage OldNotificationMessage))
                throw new ArgumentException    ("The given notification message '" + NotificationMessageId + "' does not exists in this API!",
                                                nameof(NotificationMessageId));

            var Builder = OldNotificationMessage.ToBuilder();
            UpdateDelegate(Builder);
            var NewNotificationMessage = Builder.ToImmutable;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateNotificationMessage_MessageType,
                                      NewNotificationMessage.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            notificationMessages.Remove(OldNotificationMessage.Id);
            NewNotificationMessage.CopyAllLinkedDataFromBase(OldNotificationMessage);


            var OnNotificationMessageUpdatedLocal = OnNotificationMessageUpdated;
            if (OnNotificationMessageUpdatedLocal is not null)
                await OnNotificationMessageUpdatedLocal?.Invoke(Timestamp.Now,
                                                        NewNotificationMessage,
                                                        OldNotificationMessage,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(NewNotificationMessage,
                                    updateNotificationMessage_MessageType,
                                    OldNotificationMessage,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NewNotificationMessage,
                              eventTrackingId);

            return NewNotificationMessage;

        }

        #endregion

        #region UpdateNotificationMessage             (NotificationMessageId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given notification message.
        /// </summary>
        /// <param name="NotificationMessageId">An notification message identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given notification message.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        public async Task<NotificationMessage> UpdateNotificationMessage(NotificationMessage_Id                          NotificationMessageId,
                                                                         Action<NotificationMessage.Builder>             UpdateDelegate,
                                                                         Action<NotificationMessage, EventTracking_Id>?  OnUpdated         = null,
                                                                         EventTracking_Id?                               EventTrackingId   = null,
                                                                         User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessageId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(NotificationMessageId), "The given notification message identification must not be null or empty!");

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await updateNotificationMessage(NotificationMessageId,
                                                       UpdateDelegate,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region RemoveNotificationMessage(NotificationMessage, OnRemoved = null, ...)

        /// <summary>
        /// A delegate called whenever a notification message was removed.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the notification message was removed.</param>
        /// <param name="NotificationMessage">The removed notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking notification message identification</param>
        public delegate Task OnNotificationMessageRemovedDelegate(DateTime             Timestamp,
                                                                  NotificationMessage  NotificationMessage,
                                                                  EventTracking_Id?    EventTrackingId   = null,
                                                                  User_Id?             CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a notification message was removed.
        /// </summary>
        public event OnNotificationMessageRemovedDelegate? OnNotificationMessageRemoved;


        #region (class) DeleteNotificationMessageResult

        public class DeleteNotificationMessageResult
        {

            public Boolean     IsSuccess           { get; }

            public I18NString  ErrorDescription    { get; }


            private DeleteNotificationMessageResult(Boolean      IsSuccess,
                                                    I18NString?  ErrorDescription  = null)
            {
                this.IsSuccess         = IsSuccess;
                this.ErrorDescription  = ErrorDescription;
            }


            public static DeleteNotificationMessageResult Success

                => new DeleteNotificationMessageResult(true);

            public static DeleteNotificationMessageResult Failed(I18NString Reason)

                => new DeleteNotificationMessageResult(false,
                                             Reason);

            public static DeleteNotificationMessageResult Failed(Exception Exception)

                => new DeleteNotificationMessageResult(false,
                                             I18NString.Create(Languages.en,
                                                               Exception.Message));

            public override String ToString()

                => IsSuccess
                       ? "Success"
                       : "Failed" + (ErrorDescription.IsNullOrEmpty()
                                         ? ": " + ErrorDescription.FirstText()
                                         : "!");

        }

        #endregion

        #region (protected virtual) CanDeleteNotificationMessage(NotificationMessage)

        /// <summary>
        /// Determines whether the notification message can safely be removed from the API.
        /// </summary>
        /// <param name="NotificationMessage">The notification message to be removed.</param>
        protected virtual I18NString CanDeleteNotificationMessage(NotificationMessage NotificationMessage)
        {
            return new I18NString(Languages.en, "Currently not possible!");
        }

        #endregion


        #region (protected) deleteNotificationMessage(NotificationMessage, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given notification message from the API.
        /// </summary>
        /// <param name="NotificationMessage">The notification message to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the notification message had been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        protected async Task<DeleteNotificationMessageResult> deleteNotificationMessage(NotificationMessage                             NotificationMessage,
                                                                                        Action<NotificationMessage, EventTracking_Id>?  OnRemoved         = null,
                                                                                        EventTracking_Id?                               EventTrackingId   = null,
                                                                                        User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),
                                                "The given notification message must not be null!");

            if (NotificationMessage.API != this || !notificationMessages.TryGetValue(NotificationMessage.Id, out NotificationMessage NotificationMessageToBeRemoved))
                throw new ArgumentException    ("The given notification message '" + NotificationMessage.Id + "' does not exists in this API!",
                                                nameof(NotificationMessage));


            var result = CanDeleteNotificationMessage(NotificationMessage);

            if (result == null)
            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                await WriteToDatabaseFile(removeNotificationMessage_MessageType,
                                          NotificationMessage.ToJSON(false),
                                          eventTrackingId,
                                          CurrentUserId);

                notificationMessages.Remove(NotificationMessage.Id);


                var OnNotificationMessageRemovedLocal = OnNotificationMessageRemoved;
                if (OnNotificationMessageRemovedLocal is not null)
                    await OnNotificationMessageRemovedLocal?.Invoke(Timestamp.Now,
                                                            NotificationMessage,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(NotificationMessage,
                                        removeNotificationMessage_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnRemoved?.Invoke(NotificationMessage,
                                  eventTrackingId);

                return DeleteNotificationMessageResult.Success;

            }
            else
                return DeleteNotificationMessageResult.Failed(result);

        }

        #endregion

        #region RemoveNotificationMessage             (NotificationMessage, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given notification message from the API.
        /// </summary>
        /// <param name="NotificationMessage">The notification message to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the notification message had been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        public async Task<DeleteNotificationMessageResult> RemoveNotificationMessage(NotificationMessage                             NotificationMessage,
                                                                                     Action<NotificationMessage, EventTracking_Id>?  OnRemoved         = null,
                                                                                     EventTracking_Id?                               EventTrackingId   = null,
                                                                                     User_Id?                                        CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage), "The given notification message must not be null!");

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await deleteNotificationMessage(NotificationMessage,
                                                       OnRemoved,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            catch (Exception e)
            {
                return DeleteNotificationMessageResult.Failed(e);
            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion


        #region NotificationMessageExists(NotificationMessageId)

        /// <summary>
        /// Determines whether the given notification message identification exists within this API.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of an notification message.</param>
        protected Boolean _NotificationMessageExists(NotificationMessage_Id NotificationMessageId)

            => !NotificationMessageId.IsNullOrEmpty && notificationMessages.ContainsKey(NotificationMessageId);


        /// <summary>
        /// Determines whether the given notification message identification exists within this API.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of an notification message.</param>
        public Boolean NotificationMessageExists(NotificationMessage_Id NotificationMessageId)
        {

            try
            {

                if (NotificationMessagesSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _NotificationMessageExists(NotificationMessageId))
                {
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

            return false;

        }

        #endregion

        #region GetNotificationMessage   (NotificationMessageId)

        /// <summary>
        /// Get the notification message having the given unique identification.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of an notification message.</param>
        protected NotificationMessage _GetNotificationMessage(NotificationMessage_Id NotificationMessageId)
        {

            if (!NotificationMessageId.IsNullOrEmpty && notificationMessages.TryGetValue(NotificationMessageId, out NotificationMessage notificationMessage))
                return notificationMessage;

            return null;

        }


        /// <summary>
        /// Get the notification message having the given unique identification.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of the notification message.</param>
        public NotificationMessage GetNotificationMessage(NotificationMessage_Id NotificationMessageId)
        {

            try
            {

                if (NotificationMessagesSemaphore.Wait(SemaphoreSlimTimeout))
                    return _GetNotificationMessage(NotificationMessageId);

            }
            catch
            { }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

            return null;

        }

        #endregion

        #region TryGetNotificationMessage(NotificationMessageId, out NotificationMessage)

        /// <summary>
        /// Try to get the notification message having the given unique identification.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of an notification message.</param>
        /// <param name="NotificationMessage">The notification message.</param>
        protected Boolean _TryGetNotificationMessage(NotificationMessage_Id NotificationMessageId, out NotificationMessage NotificationMessage)
        {

            if (!NotificationMessageId.IsNullOrEmpty && notificationMessages.TryGetValue(NotificationMessageId, out NotificationMessage notificationMessage))
            {
                NotificationMessage = notificationMessage;
                return true;
            }

            NotificationMessage = null;
            return false;

        }


        /// <summary>
        /// Try to get the notification message having the given unique identification.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of an notification message.</param>
        /// <param name="NotificationMessage">The notification message.</param>
        public Boolean TryGetNotificationMessage(NotificationMessage_Id   NotificationMessageId,
                                         out NotificationMessage  NotificationMessage)
        {

            try
            {

                if (NotificationMessagesSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _TryGetNotificationMessage(NotificationMessageId, out NotificationMessage notificationMessage))
                {
                    NotificationMessage = notificationMessage;
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

            NotificationMessage = null;
            return false;

        }

        #endregion


        #region GetNotificationMessages(User)

        public IEnumerable<NotificationMessage> GetNotificationMessages(IUser User)
        {

            try
            {

                UsersSemaphore.Wait();

                var UserOrganizations = User.Organizations(Access_Levels.ReadOnly, Recursive: true).SafeSelect(org => org.Id).ToArray();

                return notificationMessages.Values.Where(message => message.Owners.Intersect(UserOrganizations).Any()).ToArray();

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #endregion


        #region Organizations

        #region Data

        /// <summary>
        /// An enumeration of all organizations.
        /// </summary>
        protected internal readonly ConcurrentDictionary<Organization_Id, IOrganization> organizations = new ();

        /// <summary>
        /// An enumeration of all organizations.
        /// </summary>
        public IEnumerable<IOrganization> Organizations
            => organizations.Values;

        #endregion


        #region (protected internal) SendNotifications           (Organization,                      MessageType(s), OldOrganization = null, ...)

        protected virtual String OrganizationHTMLInfo(IOrganization Organization)

            => String.Concat(Organization.Name.IsNotNullOrEmpty()
                                 ? String.Concat("<a href=\"https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id, "\">", Organization.Name.FirstText(), "</a> ",
                                                "(<a href=\"https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id, "\">", Organization.Id, "</a>)")
                                 : String.Concat("<a href=\"https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id, "\">", Organization.Id, "</a>"));

        protected virtual String OrganizationTextInfo(IOrganization Organization)

            => String.Concat(Organization.Name.IsNotNullOrEmpty()
                                 ? String.Concat("'", Organization.Name.FirstText(), "' (", Organization.Id, ")")
                                 : String.Concat("'", Organization.Id.ToString(), "'"));


        /// <summary>
        /// Send organization notifications.
        /// </summary>
        /// <param name="Organization">The organization.</param>
        /// <param name="MessageType">The organization notification.</param>
        /// <param name="OldOrganization">The old/updated organization.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking organization identification</param>
        protected internal virtual Task SendNotifications(IOrganization            Organization,
                                                          NotificationMessageType  MessageType,
                                                          IOrganization?           OldOrganization   = null,
                                                          EventTracking_Id?        EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)

            => SendNotifications(Organization,
                                 new[] { MessageType },
                                 OldOrganization,
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send organization notifications.
        /// </summary>
        /// <param name="Organization">The organization.</param>
        /// <param name="MessageTypes">The organization notifications.</param>
        /// <param name="OldOrganization">The old/updated organization.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking organization identification</param>
        protected internal async virtual Task SendNotifications(IOrganization                         Organization,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                IOrganization?                        OldOrganization   = null,
                                                                EventTracking_Id?                     EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addOrganizationIfNotExists_MessageType))
                messageTypesHash.Add(addOrganization_MessageType);

            if (messageTypesHash.Contains(addOrUpdateOrganization_MessageType))
                messageTypesHash.Add(OldOrganization is null
                                       ? addOrganization_MessageType
                                       : updateOrganization_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            ComparizionResult? comparizionResult = null;

            if (messageTypes.Contains(updateOrganization_MessageType))
                comparizionResult = (Organization as Organization).CompareWith(OldOrganization as Organization);


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                //if (TelegramClient != null)
                //{
                //    try
                //    {

                //        var AllTelegramNotifications  = Organization.GetNotificationsOf<TelegramNotification>(messageTypes).
                //                                             ToSafeHashSet();

                //        if (AllTelegramNotifications.SafeAny())
                //        {

                //            if (messageTypes.Contains(addOrganization_MessageType))
                //                await TelegramClient.SendTelegrams(OrganizationHTMLInfo(Organization) + " was successfully created.",
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                //            if (messageTypes.Contains(updateOrganization_MessageType))
                //                await TelegramClient.SendTelegrams(OrganizationHTMLInfo(Organization) + " information had been successfully updated.\n" + comparizionResult?.ToTelegram(),
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                //        }

                //    }
                //    catch (Exception e)
                //    {
                //        DebugX.LogException(e);
                //    }
                //}

                #endregion

                #region SMS Notifications

                //try
                //{

                //    var AllSMSNotifications  = Organization.GetNotificationsOf<SMSNotification>(messageTypes).
                //                                            ToSafeHashSet();

                //    if (AllSMSNotifications.SafeAny())
                //    {

                //        if (messageTypes.Contains(addOrganization_MessageType))
                //            SendSMS(String.Concat("Organization '", Organization.Name.FirstText(), "' was successfully created. ",
                //                                  "https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id),
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);

                //        if (messageTypes.Contains(updateOrganization_MessageType))
                //            SendSMS(String.Concat("Organization '", Organization.Name.FirstText(), "' information had been successfully updated. ",
                //                                  "https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id),
                //                                  // + {Updated information}
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);

                //    }

                //}
                //catch (Exception e)
                //{
                //    DebugX.LogException(e);
                //}

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications  = Organization.GetNotificationsOf<HTTPSNotification>(messageTypes).
                                                              ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(addOrganization_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("organizationCreated",
                                                                 Organization.ToJSON(true)
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                        if (messageTypes.Contains(updateOrganization_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("organizationUpdated",
                                                                 Organization.ToJSON(true)
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications  = Organization.GetNotificationsOf<EMailNotification>(messageTypes).
                                                                  ToSafeHashSet();

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(addOrganization_MessageType))
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIRobotGPGPassphrase,
                                             Subject        = OrganizationTextInfo(Organization) + " was successfully created",

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            OrganizationHTMLInfo(Organization) + " was successfully created.",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            OrganizationTextInfo(Organization) + " was successfully created.\r\n",
                                                                            "https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id, "\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });

                            if (messageTypes.Contains(updateOrganization_MessageType))
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIRobotGPGPassphrase,
                                             Subject        = OrganizationTextInfo(Organization) + " information had been successfully updated",

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            OrganizationHTMLInfo(Organization) + " information had been successfully updated.<br /><br />",
                                                                            comparizionResult?.ToHTML() ?? "",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            OrganizationTextInfo(Organization) + " information had been successfully updated.\r\r\r\r",
                                                                            comparizionResult?.ToText() ?? "",
                                                                            "\r\r\r\r",
                                                                            "https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id, "\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion

        #region (protected internal) SendNotifications           (Organization, ParentOrganizations, MessageType(s), ...)

        /// <summary>
        /// Send organization notifications.
        /// </summary>
        /// <param name="Organization">The organization.</param>
        /// <param name="ParentOrganizations">The enumeration of parent organizations.</param>
        /// <param name="MessageType">The organization notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking organization identification</param>
        protected internal virtual Task SendNotifications(IOrganization               Organization,
                                                          IEnumerable<IOrganization>  ParentOrganizations,
                                                          NotificationMessageType     MessageType,
                                                          EventTracking_Id?           EventTrackingId   = null,
                                                          User_Id?                    CurrentUserId     = null)

            => SendNotifications(Organization,
                                 ParentOrganizations,
                                 new[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send organization notifications.
        /// </summary>
        /// <param name="Organization">The organization.</param>
        /// <param name="ParentOrganizations">The enumeration of parent organizations.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async virtual Task SendNotifications(IOrganization                         Organization,
                                                                IEnumerable<IOrganization>            ParentOrganizations,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id?                     EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),         "The given enumeration of message types must not be null or empty!");

            //if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
            //    messageTypesHash.Add(addUser_MessageType);

            //if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
            //    messageTypesHash.Add(OldOrganization == null
            //                           ? addUser_MessageType
            //                           : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                //if (TelegramClient != null)
                //{
                //    try
                //    {

                //        var AllTelegramNotifications  = ParentOrganizations.
                //                                            SelectMany(parent => parent.User2OrganizationEdges).
                //                                            SelectMany(edge   => edge.Source.GetNotificationsOf<TelegramNotification>(deleteOrganization_MessageType)).
                //                                            ToSafeHashSet();

                //        if (AllTelegramNotifications.SafeAny())
                //        {

                //            if (messageTypes.Contains(deleteOrganization_MessageType))
                //                await TelegramClient.SendTelegrams(OrganizationHTMLInfo(Organization) + " has been deleted.",
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                //        }

                //    }
                //    catch (Exception e)
                //    {
                //        DebugX.LogException(e);
                //    }
                //}

                #endregion

                #region SMS Notifications

                //try
                //{

                //    var AllSMSNotifications = ParentOrganizations.
                //                                  SelectMany(parent => parent.User2OrganizationEdges).
                //                                  SelectMany(edge   => edge.Source.GetNotificationsOf<SMSNotification>(deleteOrganization_MessageType)).
                //                                  ToSafeHashSet();

                //    if (AllSMSNotifications.SafeAny())
                //    {

                //        if (messageTypes.Contains(deleteOrganization_MessageType))
                //            SendSMS(String.Concat("Organization '", Organization.Name.FirstText(), "' has been deleted."),
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);

                //    }

                //}
                //catch (Exception e)
                //{
                //    DebugX.LogException(e);
                //}

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications = ParentOrganizations.
                                                    SelectMany(parent => parent.User2OrganizationEdges).
                                                    SelectMany(edge   => edge.Source.GetNotificationsOf<HTTPSNotification>(deleteOrganization_MessageType)).
                                                    ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(deleteOrganization_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("organizationDeleted",
                                                                 Organization.ToJSON(true)
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications = ParentOrganizations.
                                                        SelectMany(parent => parent.User2OrganizationEdges).
                                                        SelectMany(edge   => edge.Source.GetNotificationsOf<EMailNotification>(deleteOrganization_MessageType)).
                                                        ToSafeHashSet();

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(deleteOrganization_MessageType))
                                await SMTPClient.Send(
                                     new HTMLEMailBuilder() {

                                         From           = Robot.EMail,
                                         To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                         Passphrase     = APIRobotGPGPassphrase,
                                         Subject        = OrganizationTextInfo(Organization) + " has been deleted",

                                         HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        OrganizationHTMLInfo(Organization) + " has been deleted.<br />",
                                                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        OrganizationTextInfo(Organization) + " has been deleted.\r\n",
                                                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         SecurityLevel  = EMailSecurity.autosign

                                     });

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion

        #region (protected internal) GetOrganizationSerializator (Request, Organization)

        protected internal OrganizationToJSONDelegate GetOrganizationSerializator(HTTPRequest  Request,
                                                                                  IUser        User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (organization,
                            embedded,
                            expandMembers,
                            expandParents,
                            expandSubOrganizations,
                            expandTags,
                            includeCryptoHash)

                            => organization.ToJSON(embedded,
                                                   expandMembers,
                                                   expandParents,
                                                   expandSubOrganizations,
                                                   expandTags,
                                                   includeCryptoHash);

            }

        }

        #endregion


        #region AddOrganization           (Organization, (ParentOrganization), OnAdded = null, ...)

        /// <summary>
        /// A delegate called whenever a organization was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization was added.</param>
        /// <param name="Organization">The added organization.</param>
        /// <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public delegate Task OnOrganizationAddedDelegate(DateTime           Timestamp,
                                                         IOrganization      Organization,
                                                         EventTracking_Id?  EventTrackingId   = null,
                                                         User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization was added.
        /// </summary>
        public event OnOrganizationAddedDelegate? OnOrganizationAdded;


        #region (protected internal) addOrganization(Organization,                            OnAdded = null, ...)

        /// <summary>
        /// Add the given organization to the API.
        /// </summary>
        /// <param name="Organization">A new organization to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<AddOrganizationResult> addOrganization(IOrganization                             Organization,
                                                                              Action<IOrganization, EventTracking_Id>?  OnAdded           = null,
                                                                              EventTracking_Id?                         EventTrackingId   = null,
                                                                              User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Organization.API is not null && Organization.API != this)
                return AddOrganizationResult.ArgumentError(
                           Organization,
                           "The given organization is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (organizations.ContainsKey(Organization.Id))
                return AddOrganizationResult.ArgumentError(
                           Organization,
                           $"Organization identification '{Organization.Id}' already exists!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (Organization.Id.Length < MinOrganizationIdLength)
                return AddOrganizationResult.ArgumentError(
                           Organization,
                           $"Organization identification '{Organization.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (Organization.Name.IsNullOrEmpty() || Organization.Name.IsNullOrEmpty())
                return AddOrganizationResult.ArgumentError(
                           Organization,
                           "The given organization name must not be null!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            //if (Organization.Name.Length < MinOrganizationNameLength)
            //    return AddOrganizationResult.ArgumentError(Organization,
            //                                       nameof(Organization),
            //                                       "Organization name '" + Organization.Name + "' is too short!");

            Organization.API = this;


            await WriteToDatabaseFile(addOrganization_MessageType,
                                      Organization.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            organizations.TryAdd(Organization.Id, Organization);

            OnAdded?.Invoke(Organization,
                            eventTrackingId);

            var OnOrganizationAddedLocal = OnOrganizationAdded;
            if (OnOrganizationAddedLocal is not null)
                await OnOrganizationAddedLocal.Invoke(Timestamp.Now,
                                                      Organization,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(Organization,
                                    addOrganization_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddOrganizationResult.Success(
                       Organization,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddOrganization                     (Organization, ParentOrganization = null, OnAdded = null, ...)

        /// <summary>
        /// Add the given organization and add him/her to the given organization.
        /// </summary>
        /// <param name="Organization">A new organization.</param>
        /// <param name="ParentOrganization">The parent organization of the new organization.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<AddOrganizationResult> AddOrganization(IOrganization                             Organization,
                                                                 IOrganization?                            ParentOrganization   = null,
                                                                 Action<IOrganization, EventTracking_Id>?  OnAdded              = null,
                                                                 EventTracking_Id?                         EventTrackingId      = null,
                                                                 User_Id?                                  CurrentUserId        = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    ParentOrganization ??= NoOwner;

                    if (!organizations.ContainsKey(ParentOrganization.Id))
                        return AddOrganizationResult.ArgumentError(
                                   Organization,
                                   $"Parent organization '{ParentOrganization.Id}' does not exists in this API!".ToI18NString(),
                                   eventTrackingId,
                                   SystemId,
                                   this
                               );


                    #region Check if the user is allowed to create and link the given organizations!

                    if (CurrentUserId.HasValue &&
                       !GetUser(CurrentUserId.Value).
                            Organizations(Access_Levels.ReadWrite, true).
                            Contains     (ParentOrganization))
                    {

                        return AddOrganizationResult.Error(
                                   Organization,
                                   "Your are not allowed to create this sub organization!".ToI18NString(),
                                   eventTrackingId,
                                   SystemId,
                                   this,
                                   ParentOrganization
                               );

                    }

                    #endregion


                    var result = await addOrganization(Organization,
                                                        async (_organization, _eventTrackingId) => {

                                                            await _LinkOrganizations(_organization,
                                                                                     Organization2OrganizationEdgeLabel.IsChildOf,
                                                                                     ParentOrganization,
                                                                                     _eventTrackingId,
                                                                                     SuppressNotifications:  true,
                                                                                     CurrentUserId:          CurrentUserId);

                                                            OnAdded?.Invoke(_organization,
                                                                            _eventTrackingId);

                                                        },
                                                        eventTrackingId,
                                                        CurrentUserId);

                    if (result.Result == CommandResult.Success)
                    {

                        result.ParentOrganization = ParentOrganization;

                        await SendNotifications(Organization,
                                                Organization2OrganizationEdgeLabel.IsChildOf,
                                                ParentOrganization,
                                                linkOrganizations_MessageType,
                                                eventTrackingId,
                                                CurrentUserId);

                    }

                    return result;

                }
                catch (Exception e)
                {

                    return AddOrganizationResult.Error(
                               Organization,
                               e,
                               eventTrackingId,
                               SystemId,
                               this,
                               ParentOrganization
                           );

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return AddOrganizationResult.LockTimeout(
                       Organization,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this,
                       ParentOrganization
                   );

        }

        #endregion

        #endregion

        #region AddOrganizationIfNotExists(Organization, (ParentOrganization), OnAdded = null, ...)

        #region (protected internal) addOrganizationIfNotExists(Organization,                     OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given organization to the API.
        /// </summary>
        /// <param name="Organization">A new organization to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<AddOrganizationResult> addOrganizationIfNotExists(IOrganization                             Organization,
                                                                                        Action<IOrganization, EventTracking_Id>?  OnAdded           = null,
                                                                                        EventTracking_Id?                         EventTrackingId   = null,
                                                                                        User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Organization.API is not null && Organization.API != this)
                return AddOrganizationResult.ArgumentError(
                           Organization,
                           "The given organization is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (organizations.ContainsKey(Organization.Id))
                return AddOrganizationResult.NoOperation(
                           organizations[Organization.Id],
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (Organization.Id.Length < MinOrganizationIdLength)
                return AddOrganizationResult.ArgumentError(
                           Organization,
                           $"Organization identification '{Organization.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (Organization.Name.IsNullOrEmpty() || Organization.Name.IsNullOrEmpty())
                return AddOrganizationResult.ArgumentError(
                           Organization,
                           "The given organization name must not be null!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            //if (Organization.Name.Length < MinOrganizationNameLength)
            //    return AddOrganizationIfNotExistsResult.ArgumentError(Organization,
            //                                                  nameof(Organization),
            //                                                  "Organization name '" + Organization.Name + "' is too short!");

            Organization.API = this;


            await WriteToDatabaseFile(addOrganizationIfNotExists_MessageType,
                                      Organization.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            organizations.TryAdd(Organization.Id, Organization);

            OnAdded?.Invoke(Organization,
                            eventTrackingId);

            var OnOrganizationAddedLocal = OnOrganizationAdded;
            if (OnOrganizationAddedLocal is not null)
                await OnOrganizationAddedLocal.Invoke(Timestamp.Now,
                                                      Organization,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(Organization,
                                    addOrganizationIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddOrganizationResult.Success(
                       Organization,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddOrganizationIfNotExists                     (Organization, ParentOrganization, OnAdded = null, ...)

        /// <summary>
        /// Add the given organization and add him/her to the given organization.
        /// </summary>
        /// <param name="Organization">A new organization.</param>
        /// <param name="ParentOrganization">The parent organization of the new organization.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<AddOrganizationResult>

            AddOrganizationIfNotExists(IOrganization                             Organization,
                                       IOrganization                             ParentOrganization,
                                       Action<IOrganization, EventTracking_Id>?  OnAdded           = null,
                                       EventTracking_Id?                         EventTrackingId   = null,
                                       User_Id?                                  CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    ParentOrganization ??= NoOwner;

                    if (!organizations.ContainsKey(ParentOrganization.Id))
                        return AddOrganizationResult.ArgumentError(
                                   Organization,
                                   $"Parent organization '{ParentOrganization.Id}' does not exists in this API!".ToI18NString(),
                                   eventTrackingId,
                                   SystemId,
                                   this,
                                   ParentOrganization
                               );


                    #region Check if the user is allowed to create and link the given organizations!

                    if (CurrentUserId.HasValue &&
                       !GetUser(CurrentUserId.Value).
                            Organizations(Access_Levels.ReadWrite, true).
                            Contains     (ParentOrganization))
                    {

                        return AddOrganizationResult.Error(
                                   Organization,
                                   "Your are not allowed to create this sub organization!".ToI18NString(),
                                   eventTrackingId,
                                   SystemId,
                                   this,
                                   ParentOrganization
                               );
                    }

                    #endregion


                    var result = await addOrganizationIfNotExists(Organization,
                                                                   async (_organization, _eventTrackingId) => {

                                                                       await _LinkOrganizations(_organization,
                                                                                                Organization2OrganizationEdgeLabel.IsChildOf,
                                                                                                ParentOrganization,
                                                                                                _eventTrackingId,
                                                                                                SuppressNotifications:  true,
                                                                                                CurrentUserId:          CurrentUserId);

                                                                       OnAdded?.Invoke(_organization,
                                                                                       _eventTrackingId);

                                                                   },
                                                                   eventTrackingId,
                                                                   CurrentUserId);

                    if (result.Result == CommandResult.Success)
                    {

                        result.ParentOrganization = ParentOrganization;

                        await SendNotifications(Organization,
                                                Organization2OrganizationEdgeLabel.IsChildOf,
                                                ParentOrganization,
                                                linkOrganizations_MessageType,
                                                eventTrackingId,
                                                CurrentUserId);

                    }

                    return result;

                }
                catch (Exception e)
                {

                    return AddOrganizationResult.Error(
                               Organization,
                               e,
                               eventTrackingId,
                               SystemId,
                               this,
                               ParentOrganization
                           );

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return AddOrganizationResult.LockTimeout(
                       Organization,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this,
                       ParentOrganization
                   );

        }

        #endregion

        #endregion

        #region AddOrUpdateOrganization   (Organization, (ParentOrganization), OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) addOrUpdateOrganization(Organization,                     OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given organization to/within the API.
        /// </summary>
        /// <param name="Organization">A organization.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<AddOrUpdateOrganizationResult> addOrUpdateOrganization(IOrganization                             Organization,
                                                                                              Action<IOrganization, EventTracking_Id>?  OnAdded           = null,
                                                                                              Action<IOrganization, EventTracking_Id>?  OnUpdated         = null,
                                                                                              EventTracking_Id?                         EventTrackingId   = null,
                                                                                              User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Organization.API is not null && Organization.API != this)
                return AddOrUpdateOrganizationResult.ArgumentError(
                           Organization,
                           "The given organization is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (Organization.Id.Length < MinOrganizationIdLength)
                return AddOrUpdateOrganizationResult.ArgumentError(
                           Organization,
                           $"The given organization identification '{Organization.Id}' is too short!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (Organization.Name.IsNullOrEmpty() || Organization.Name.IsNullOrEmpty())
                return AddOrUpdateOrganizationResult.ArgumentError(
                           Organization,
                           "The given organization name must not be null!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            //if (Organization.Name.Length < MinOrganizationNameLength)
            //    return AddOrUpdateOrganizationResult.ArgumentError(Organization,
            //                                               eventTrackingId,
            //                                               nameof(Organization),
            //                                               "Organization name '" + Organization.Name + "' is too short!");

            Organization.API = this;


            await WriteToDatabaseFile(addOrUpdateOrganization_MessageType,
                                      Organization.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            if (organizations.TryGetValue(Organization.Id, out var OldOrganization))
            {
                organizations.TryRemove(OldOrganization.Id, out _);
                Organization.CopyAllLinkedDataFrom(OldOrganization);
            }

            organizations.TryAdd(Organization.Id, Organization);

            if (OldOrganization is null)
            {

                OnAdded?.Invoke(Organization,
                                eventTrackingId);

                var OnOrganizationAddedLocal = OnOrganizationAdded;
                if (OnOrganizationAddedLocal is not null)
                    await OnOrganizationAddedLocal.Invoke(Timestamp.Now,
                                                          Organization,
                                                          eventTrackingId,
                                                          CurrentUserId);

                await SendNotifications(Organization,
                                        addOrganization_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                return AddOrUpdateOrganizationResult.Added(
                           Organization,
                           eventTrackingId,
                           SystemId,
                           this
                       );

            }


            OnUpdated?.Invoke(Organization,
                              eventTrackingId);

            var OnOrganizationUpdatedLocal = OnOrganizationUpdated;
            if (OnOrganizationUpdatedLocal is not null)
                await OnOrganizationUpdatedLocal.Invoke(Timestamp.Now,
                                                        Organization,
                                                        OldOrganization,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(Organization,
                                    updateOrganization_MessageType,
                                    OldOrganization,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddOrUpdateOrganizationResult.Updated(
                       Organization,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddOrUpdateOrganization                     (Organization,                     OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given organization to/within the API.
        /// </summary>
        /// <param name="Organization">A organization.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<AddOrUpdateOrganizationResult> AddOrUpdateOrganization(IOrganization                             Organization,
                                                                                 Action<IOrganization, EventTracking_Id>?  OnAdded           = null,
                                                                                 Action<IOrganization, EventTracking_Id>?  OnUpdated         = null,
                                                                                 EventTracking_Id?                         EventTrackingId   = null,
                                                                                 User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await addOrUpdateOrganization(Organization,
                                                          OnAdded,
                                                          OnUpdated,
                                                          eventTrackingId,
                                                          CurrentUserId);

                }
                catch (Exception e)
                {

                    return AddOrUpdateOrganizationResult.Error(
                               Organization,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddOrUpdateOrganizationResult.LockTimeout(
                       Organization,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region AddOrUpdateOrganization                     (Organization, ParentOrganization, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given organization to/within the API.
        /// </summary>
        /// <param name="Organization">A organization.</param>
        /// <param name="ParentOrganization">The parent organization of the new organization.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<AddOrUpdateOrganizationResult> AddOrUpdateOrganization(IOrganization                             Organization,
                                                                                 IOrganization                             ParentOrganization,
                                                                                 Action<IOrganization, EventTracking_Id>?  OnAdded           = null,
                                                                                 Action<IOrganization, EventTracking_Id>?  OnUpdated         = null,
                                                                                 EventTracking_Id?                         EventTrackingId   = null,
                                                                                 User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    ParentOrganization ??= NoOwner;

                    if (!organizations.ContainsKey(ParentOrganization.Id))
                        return AddOrUpdateOrganizationResult.ArgumentError(
                                   Organization,
                                   $"Parent organization '{ParentOrganization.Id}' does not exists in this API!".ToI18NString(),
                                   eventTrackingId,
                                   SystemId,
                                   this
                               );


                    #region Check if the user is allowed to create and link the given organizations!

                    if (!(Organization is null) &&
                        !_OrganizationExists(Organization.Id) &&
                         CurrentUserId.HasValue &&
                        !GetUser(CurrentUserId.Value).
                             Organizations(Access_Levels.ReadWrite, true).
                             Contains     (ParentOrganization))
                    {

                        return AddOrUpdateOrganizationResult.Error(
                                   Organization,
                                   "Your are not allowed to create this sub organization!".ToI18NString(),
                                   eventTrackingId,
                                   SystemId,
                                   this,
                                   ParentOrganization
                               );

                    }

                    #endregion


                    var result = await addOrUpdateOrganization(Organization,
                                                                async (_organization, _eventTrackingId) => {

                                                                    await _LinkOrganizations(_organization,
                                                                                             Organization2OrganizationEdgeLabel.IsChildOf,
                                                                                             ParentOrganization,
                                                                                             _eventTrackingId,
                                                                                             SuppressNotifications:  true,
                                                                                             CurrentUserId:          CurrentUserId);

                                                                    OnAdded?.Invoke(_organization,
                                                                                    _eventTrackingId);

                                                                },
                                                                OnUpdated,
                                                                eventTrackingId,
                                                                CurrentUserId);

                    if (result.Result == CommandResult.Success)
                    {

                        result.ParentOrganization = ParentOrganization;

                        if (result?.AddedOrUpdated == AddedOrUpdated.Add)
                            await SendNotifications(Organization,
                                                    Organization2OrganizationEdgeLabel.IsChildOf,
                                                    ParentOrganization,
                                                    linkOrganizations_MessageType,
                                                    eventTrackingId,
                                                    CurrentUserId);

                    }

                    return result;

                }
                catch (Exception e)
                {

                    return AddOrUpdateOrganizationResult.Error(
                               Organization,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return AddOrUpdateOrganizationResult.LockTimeout(
                       Organization,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this,
                       ParentOrganization
                   );

        }

        #endregion

        #endregion

        #region UpdateOrganization        (Organization,                                       OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a organization was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization was updated.</param>
        /// <param name="Organization">The updated organization.</param>
        /// <param name="OldOrganization">The old organization.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public delegate Task OnOrganizationUpdatedDelegate(DateTime           Timestamp,
                                                           IOrganization      Organization,
                                                           IOrganization      OldOrganization,
                                                           EventTracking_Id?  EventTrackingId   = null,
                                                           User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization was updated.
        /// </summary>
        public event OnOrganizationUpdatedDelegate? OnOrganizationUpdated;


        #region (protected internal) updateOrganization(Organization,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization to/within the API.
        /// </summary>
        /// <param name="Organization">A organization.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<UpdateOrganizationResult> updateOrganization(IOrganization                             Organization,
                                                                                   Action<IOrganization, EventTracking_Id>?  OnUpdated         = null,
                                                                                   EventTracking_Id?                         EventTrackingId   = null,
                                                                                   User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (!_TryGetOrganization(Organization.Id, out var OldOrganization))
                return UpdateOrganizationResult.ArgumentError(
                           Organization,
                           $"The given organization '{Organization.Id}' does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (Organization.API is not null && Organization.API != this)
                return UpdateOrganizationResult.ArgumentError(
                           Organization,
                           "The given organization is already attached to another API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            Organization.API = this;


            await WriteToDatabaseFile(updateOrganization_MessageType,
                                      Organization.ToJSON(true),
                                      eventTrackingId,
                                      CurrentUserId);

            organizations.TryRemove(OldOrganization.Id, out _);
            Organization.CopyAllLinkedDataFrom(OldOrganization);
            organizations.TryAdd(Organization.Id, Organization);

            OnUpdated?.Invoke(Organization,
                              eventTrackingId);

            var OnOrganizationUpdatedLocal = OnOrganizationUpdated;
            if (OnOrganizationUpdatedLocal is not null)
                await OnOrganizationUpdatedLocal.Invoke(Timestamp.Now,
                                                        Organization,
                                                        OldOrganization,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(Organization,
                                    updateOrganization_MessageType,
                                    OldOrganization,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateOrganizationResult.Success(
                       Organization,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region UpdateOrganization                     (Organization,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization to/within the API.
        /// </summary>
        /// <param name="Organization">A organization.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<UpdateOrganizationResult> UpdateOrganization(IOrganization                             Organization,
                                                                       Action<IOrganization, EventTracking_Id>?  OnUpdated         = null,
                                                                       EventTracking_Id?                         EventTrackingId   = null,
                                                                       User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await updateOrganization(Organization,
                                                     OnUpdated,
                                                     eventTrackingId,
                                                     CurrentUserId);

                }
                catch (Exception e)
                {

                    return UpdateOrganizationResult.Error(
                               Organization,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateOrganizationResult.LockTimeout(
                       Organization,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion


        #region (protected internal) updateOrganization(Organization, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization.
        /// </summary>
        /// <param name="Organization">An organization.</param>
        /// <param name="UpdateDelegate">A delegate to update the given organization.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<UpdateOrganizationResult> updateOrganization(IOrganization                             Organization,
                                                                                   Action<Organization.Builder>              UpdateDelegate,
                                                                                   Action<IOrganization, EventTracking_Id>?  OnUpdated         = null,
                                                                                   EventTracking_Id?                         EventTrackingId   = null,
                                                                                   User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (!_OrganizationExists(Organization.Id))
                return UpdateOrganizationResult.ArgumentError(
                           Organization,
                           $"The given organization '{Organization.Id}' does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (Organization.API != this)
                return UpdateOrganizationResult.ArgumentError(
                           Organization,
                           "The given organization is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (UpdateDelegate is null)
                return UpdateOrganizationResult.ArgumentError(
                           Organization,
                           "The given update delegate must not be null!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            var builder = Organization.ToBuilder();
            UpdateDelegate(builder);
            var updatedOrganization = builder.ToImmutable;

            await WriteToDatabaseFile(updateOrganization_MessageType,
                                      updatedOrganization.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            organizations.TryRemove(Organization.Id, out _);
            updatedOrganization.CopyAllLinkedDataFrom(Organization);
            organizations.TryAdd(updatedOrganization.Id, updatedOrganization);

            OnUpdated?.Invoke(updatedOrganization,
                              eventTrackingId);

            var OnOrganizationUpdatedLocal = OnOrganizationUpdated;
            if (OnOrganizationUpdatedLocal is not null)
                await OnOrganizationUpdatedLocal.Invoke(Timestamp.Now,
                                                        updatedOrganization,
                                                        Organization,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(updatedOrganization,
                                    updateOrganization_MessageType,
                                    Organization,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateOrganizationResult.Success(
                       Organization,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region UpdateOrganization                     (Organization, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization.
        /// </summary>
        /// <param name="Organization">An organization.</param>
        /// <param name="UpdateDelegate">A delegate to update the given organization.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<UpdateOrganizationResult> UpdateOrganization(IOrganization                             Organization,
                                                                       Action<Organization.Builder>              UpdateDelegate,
                                                                       Action<IOrganization, EventTracking_Id>?  OnUpdated         = null,
                                                                       EventTracking_Id?                         EventTrackingId   = null,
                                                                       User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await updateOrganization(Organization,
                                                     UpdateDelegate,
                                                     OnUpdated,
                                                     eventTrackingId,
                                                     CurrentUserId);

                }
                catch (Exception e)
                {

                    return UpdateOrganizationResult.Error(
                               Organization,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateOrganizationResult.LockTimeout(
                       Organization,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion

        #region DeleteOrganization        (Organization, OnDeleted = null, ...)

        /// <summary>
        /// A delegate called whenever a organization was deleted.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization was deleted.</param>
        /// <param name="Organization">The organization to be deleted.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnOrganizationDeletedDelegate(DateTime           Timestamp,
                                                           IOrganization      Organization,
                                                           EventTracking_Id?  EventTrackingId   = null,
                                                           User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization was deleted.
        /// </summary>
        public event OnOrganizationDeletedDelegate? OnOrganizationDeleted;


        #region (protected internal virtual) canDeleteOrganization(Organization)

        /// <summary>
        /// Determines whether the organization can safely be deleted from the API.
        /// </summary>
        /// <param name="Organization">The organization to be deleted.</param>
        protected internal virtual I18NString? canDeleteOrganization(IOrganization Organization)
        {

            if (Organization.Users.Any())
                return "The organization still has members!".          ToI18NString();

            if (Organization.SubOrganizations.Any())
                return "The organization still has sub organizations!".ToI18NString();

            return null;

        }

        #endregion

        #region (protected internal) deleteOrganization(Organization, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given organization.
        /// </summary>
        /// <param name="Organization">The organization to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the organization has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<DeleteOrganizationResult> deleteOrganization(IOrganization                             Organization,
                                                                                   Action<IOrganization, EventTracking_Id>?  OnDeleted         = null,
                                                                                   EventTracking_Id?                         EventTrackingId   = null,
                                                                                   User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Organization.API != this)
                return DeleteOrganizationResult.ArgumentError(
                           Organization,
                           "The given organization is not attached to this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );

            if (!organizations.TryGetValue(Organization.Id, out var OrganizationToBeDeleted))
                return DeleteOrganizationResult.ArgumentError(
                           Organization,
                           "The given organization does not exists in this API!".ToI18NString(),
                           eventTrackingId,
                           SystemId,
                           this
                       );


            var veto = canDeleteOrganization(Organization);

            if (veto is not null)
                return DeleteOrganizationResult.CanNotBeRemoved(
                           Organization,
                           eventTrackingId,
                           SystemId,
                           this,
                           null,
                           veto
                       );


            // Get all parent organizations now, because later
            // the --isChildOf--> edge will no longer be available!
            var parentOrganizations = Organization.GetAllParents(parent => parent != NoOwner).
                                                   ToArray();


            // Remove all: this --edge--> other_organization
            foreach (var edge in Organization.Organization2OrganizationOutEdges.ToArray())
                await _UnlinkOrganizations(edge.Source,
                                           edge.EdgeLabel,
                                           edge.Target,
                                           EventTrackingId,
                                           SuppressNotifications:  false,
                                           CurrentUserId:          CurrentUserId);

            // Remove all: this <--edge-- other_organization
            foreach (var edge in Organization.Organization2OrganizationInEdges.ToArray())
                await _UnlinkOrganizations(edge.Target,
                                           edge.EdgeLabel,
                                           edge.Source,
                                           EventTrackingId,
                                           SuppressNotifications:  false,
                                           CurrentUserId:          CurrentUserId);


            await WriteToDatabaseFile(deleteOrganization_MessageType,
                                      Organization.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            organizations.TryRemove(Organization.Id, out _);

            OnDeleted?.Invoke(Organization,
                              eventTrackingId);

            var OnOrganizationDeletedLocal = OnOrganizationDeleted;
            if (OnOrganizationDeletedLocal is not null)
                await OnOrganizationDeletedLocal.Invoke(Timestamp.Now,
                                                        Organization,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(Organization,
                                    parentOrganizations,
                                    deleteOrganization_MessageType,
                                    eventTrackingId,
                                    CurrentUserId);


            return DeleteOrganizationResult.Success(
                       Organization,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #region DeleteOrganization                     (Organization, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given organization.
        /// </summary>
        /// <param name="Organization">The organization to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the organization has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<DeleteOrganizationResult> DeleteOrganization(IOrganization                             Organization,
                                                                       Action<IOrganization, EventTracking_Id>?  OnDeleted         = null,
                                                                       EventTracking_Id?                         EventTrackingId   = null,
                                                                       User_Id?                                  CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await deleteOrganization(Organization,
                                                     OnDeleted,
                                                     eventTrackingId,
                                                     CurrentUserId);

                }
                catch (Exception e)
                {

                    return DeleteOrganizationResult.Error(
                               Organization,
                               e,
                               eventTrackingId,
                               SystemId,
                               this
                           );

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return DeleteOrganizationResult.LockTimeout(
                       Organization,
                       SemaphoreSlimTimeout,
                       eventTrackingId,
                       SystemId,
                       this
                   );

        }

        #endregion

        #endregion


        #region OrganizationExists(OrganizationId)

        /// <summary>
        /// Determines whether the given organization identification exists within this API.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        protected internal Boolean _OrganizationExists(Organization_Id OrganizationId)

            => OrganizationId.IsNotNullOrEmpty &&
               organizations.ContainsKey(OrganizationId);

        /// <summary>
        /// Determines whether the given organization identification exists within this API.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        protected internal Boolean _OrganizationExists(Organization_Id? OrganizationId)

            => OrganizationId.HasValue &&
               OrganizationId.IsNotNullOrEmpty() &&
               organizations.ContainsKey(OrganizationId.Value);


        /// <summary>
        /// Determines whether the given organization identification exists within this API.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        public Boolean OrganizationExists(Organization_Id OrganizationId)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _OrganizationExists(OrganizationId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given organization identification exists within this API.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        public Boolean OrganizationExists(Organization_Id? OrganizationId)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _OrganizationExists(OrganizationId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region GetOrganization   (OrganizationId)

        /// <summary>
        /// Get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        protected internal IOrganization? _GetOrganization(Organization_Id OrganizationId)
        {

            if (OrganizationId.IsNotNullOrEmpty &&
                organizations.TryGetValue(OrganizationId, out var organization))
            {
                return organization;
            }

            return null;

        }

        /// <summary>
        /// Get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        protected internal IOrganization? _GetOrganization(Organization_Id? OrganizationId)
        {

            if (OrganizationId.HasValue &&
                OrganizationId.IsNotNullOrEmpty() &&
                organizations.TryGetValue(OrganizationId.Value, out var organization))
            {
                return organization;
            }

            return null;

        }


        /// <summary>
        /// Get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        public IOrganization? GetOrganization(Organization_Id OrganizationId)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetOrganization(OrganizationId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        /// <summary>
        /// Get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        public IOrganization? GetOrganization(Organization_Id? OrganizationId)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetOrganization(OrganizationId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        #endregion

        #region TryGetOrganization(OrganizationId, out Organization)

        /// <summary>
        /// Try to get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        /// <param name="Organization">The organization.</param>
        protected internal Boolean _TryGetOrganization(Organization_Id     OrganizationId,
                                                       out IOrganization?  Organization)
        {

            if (OrganizationId.IsNotNullOrEmpty && organizations.TryGetValue(OrganizationId, out var organization))
            {
                Organization = organization;
                return true;
            }

            Organization = null;
            return false;

        }

        /// <summary>
        /// Try to get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        /// <param name="Organization">The organization.</param>
        protected internal Boolean _TryGetOrganization(Organization_Id?    OrganizationId,
                                                       out IOrganization?  Organization)
        {

            if (OrganizationId.HasValue &&
                OrganizationId.IsNotNullOrEmpty() &&
                organizations.TryGetValue(OrganizationId.Value, out var organization))
            {
                Organization = organization;
                return true;
            }

            Organization = null;
            return false;

        }


        /// <summary>
        /// Try to get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        /// <param name="Organization">The organization.</param>
        public Boolean TryGetOrganization(Organization_Id     OrganizationId,
                                          out IOrganization?  Organization)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetOrganization(OrganizationId, out Organization);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            Organization = null;
            return false;

        }

        /// <summary>
        /// Try to get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        /// <param name="Organization">The organization.</param>
        public Boolean TryGetOrganization(Organization_Id?    OrganizationId,
                                          out IOrganization?  Organization)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetOrganization(OrganizationId, out Organization);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            Organization = null;
            return false;

        }

        #endregion


        #region SearchOrganizationsByName   (OrganizationName)

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        protected internal IEnumerable<IOrganization> _SearchOrganizationsByName(I18NString OrganizationName)

            => organizations.Values.
                              Where(organization => organization.Name.Equals(OrganizationName)).
                              ToArray();

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="IgnoreCase">Ignore the case of the organization name.</param>
        protected internal IEnumerable<IOrganization> _SearchOrganizationsByName(String   OrganizationName,
                                                                                 Boolean  IgnoreCase   = false)

            => organizations.Values.
                              Where(organization => organization.Name.Matches(OrganizationName,
                                                                              IgnoreCase)).
                              ToArray();


        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        public IEnumerable<IOrganization> SearchOrganizationsByName(I18NString OrganizationName)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _SearchOrganizationsByName(OrganizationName);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return Array.Empty<Organization>();

        }

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="IgnoreCase">Ignore the case of the organization name.</param>
        public IEnumerable<IOrganization> SearchOrganizationsByName(String   OrganizationName,
                                                                    Boolean  IgnoreCase   = false)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _SearchOrganizationsByName(OrganizationName,
                                                      IgnoreCase);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return Array.Empty<Organization>();

        }

        #endregion

        #region TrySearchOrganizationsByName(OrganizationName, out Organizations)

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="Organizations">An enumeration of matching organizations.</param>
        protected internal Boolean _TrySearchOrganizationsByName(I18NString                      OrganizationName,
                                                                 out IEnumerable<IOrganization>  Organizations)
        {

            var foundOrganizations = new List<IOrganization>();

            foreach (var organization in organizations.Values)
                if (organization.Name.Equals(OrganizationName))
                    foundOrganizations.Add(organization);

            Organizations = foundOrganizations;

            return foundOrganizations.Any();

        }

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="Organizations">An enumeration of matching organizations.</param>
        /// <param name="IgnoreCase">Ignore the case of the organization name.</param>
        protected internal Boolean _TrySearchOrganizationsByName(String                          OrganizationName,
                                                                 out IEnumerable<IOrganization>  Organizations,
                                                                 Boolean                         IgnoreCase = false)
        {

            var foundOrganizations = new List<IOrganization>();

            foreach (var organization in organizations.Values)
                if (organization.Name.Matches(OrganizationName, IgnoreCase))
                    foundOrganizations.Add(organization);

            Organizations = foundOrganizations;

            return foundOrganizations.Any();

        }


        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="Organizations">An enumeration of matching organizations.</param>
        public Boolean TrySearchOrganizationsByName(I18NString                      OrganizationName,
                                                    out IEnumerable<IOrganization>  Organizations)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TrySearchOrganizationsByName(OrganizationName, out Organizations);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            Organizations = null;
            return false;

        }

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="Organizations">An enumeration of matching organizations.</param>
        public Boolean TrySearchOrganizationsByName(String                          OrganizationName,
                                                    out IEnumerable<IOrganization>  Organizations,
                                                    Boolean                         IgnoreCase = false)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TrySearchOrganizationsByName(OrganizationName,
                                                         out Organizations,
                                                         IgnoreCase);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            Organizations = null;
            return false;

        }

        #endregion


        #region IsAdmin(User)

        /// <summary>
        /// Check if the given user is an API admin.
        /// </summary>
        /// <param name="User">A user.</param>
        public Access_Levels IsAdmin(IUser User)
        {

            if (User.Organizations(Access_Levels.Admin, false).
                     Any          (org => org.Id == AdminOrganizationId))
            {
                return Access_Levels.ReadWrite;
            }

            if (User.Organizations(Access_Levels.AdminReadOnly, false).
                     Any          (org => org.Id == AdminOrganizationId))
            {
                return Access_Levels.ReadOnly;
            }

            return Access_Levels.None;

        }

        #endregion

        #region IsAdmin(UserId)

        /// <summary>
        /// Check if the given user is an API admin.
        /// </summary>
        /// <param name="UserId">A user identification.</param>
        public Access_Levels IsAdmin(User_Id UserId)
        {

            if (TryGetUser(UserId, out var user) && user is not null)
                return IsAdmin(user);

            return Access_Levels.None;

        }

        #endregion


        #region GetOrganizationHierarchyAsJSON(RootOrganization)

        public JObject GetOrganizationHierarchyAsJSON(IOrganization  RootOrganization)
        {

            var rootOrganizationJSON = new JObject();
            GetOrganizationHierarchyAsJSON(RootOrganization, ref rootOrganizationJSON);

            return rootOrganizationJSON;

        }

        #endregion

        #region GetOrganizationHierarchyAsJSON(RootOrganization, ref OrganizationHierarchyJSON)

        public void GetOrganizationHierarchyAsJSON(IOrganization  RootOrganization,
                                                   ref JObject    OrganizationHierarchyJSON)
        {

            var users = new JArray();

            foreach (var user in RootOrganization.User2OrganizationEdges.Select(edge => edge.Source))
            {

                if (user is null)
                    continue;

                users.Add(new JObject {
                              { "id",     user.Id.           ToString() },
                              { "name",   user.Name.         ToString() },
                              { "eMail",  user.EMail.Address.ToString() }
                          });

            }


            var childOrganizations = new JArray();

            foreach (var childOrganization in RootOrganization.Organization2OrganizationInEdges.Select(edge => edge.Source))
            {

                if (childOrganization is null)
                    continue;

                var childOrganizationJSON = new JObject();

                GetOrganizationHierarchyAsJSON(childOrganization,
                                               ref childOrganizationJSON);

                childOrganizations.Add(childOrganizationJSON);

            }


            OrganizationHierarchyJSON.Add("id",    RootOrganization.Id.  ToString());
            OrganizationHierarchyJSON.Add("name",  RootOrganization.Name.ToJSON());

            if (users.Any())
                OrganizationHierarchyJSON.Add("users",               users);

            if (childOrganizations.Any())
                OrganizationHierarchyJSON.Add("childOrganizations",  childOrganizations);

        }

        #endregion

        #endregion

        #region OrganizationGroups

        #region Data

        /// <summary>
        /// An enumeration of all organization groups.
        /// </summary>
        protected internal readonly ConcurrentDictionary<OrganizationGroup_Id, OrganizationGroup> organizationGroups = new ();

        /// <summary>
        /// An enumeration of all organization groups.
        /// </summary>
        public IEnumerable<OrganizationGroup> OrganizationGroups
            => organizationGroups.Values;

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(OrganizationGroup, MessageType,  OldOrganizationGroup = null, ...)

        /// <summary>
        /// Write the given organization group to the database and send out notifications.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldOrganizationGroup">The old/updated organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(OrganizationGroup        OrganizationGroup,
                                                                   NotificationMessageType  MessageType,
                                                                   OrganizationGroup?       OldOrganizationGroup   = null,
                                                                   EventTracking_Id?        EventTrackingId        = null,
                                                                   User_Id?                 CurrentUserId          = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),    "The given organization group must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      OrganizationGroup.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(OrganizationGroup,
                                    MessageType,
                                    OldOrganizationGroup,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (OrganizationGroup, MessageTypes, OldOrganizationGroup = null, ...)

        /// <summary>
        /// Send organization group notifications.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldOrganizationGroup">The old/updated organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(OrganizationGroup        OrganizationGroup,
                                                        NotificationMessageType  MessageType,
                                                        OrganizationGroup?       OldOrganizationGroup   = null,
                                                        EventTracking_Id?        EventTrackingId        = null,
                                                        User_Id?                 CurrentUserId          = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),    "The given organization group must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            await SendNotifications(OrganizationGroup,
                                    new NotificationMessageType[] { MessageType },
                                    OldOrganizationGroup,
                                    EventTrackingId,
                                    CurrentUserId);

        }


        /// <summary>
        /// Send organization group notifications.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldOrganizationGroup">The old/updated organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(OrganizationGroup                     OrganizationGroup,
                                                        IEnumerable<NotificationMessageType>  MessageTypes,
                                                        OrganizationGroup?                    OldOrganizationGroup   = null,
                                                        EventTracking_Id?                     EventTrackingId        = null,
                                                        User_Id?                              CurrentUserId          = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),     "The given organization group must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldOrganizationGroup == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {


            }

        }

        #endregion

        #region (protected internal) GetOrganizationGroupSerializator(Request, User)

        protected internal OrganizationGroupToJSONDelegate GetOrganizationGroupSerializator(HTTPRequest  Request,
                                                                                            IUser        User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (organizationGroup,
                            embedded,
                            expandUsers,
                            expandParentGroup,
                            expandSubgroups,
                            expandAttachedFiles,
                            includeAttachedFileSignatures)

                            => organizationGroup.ToJSON(embedded,
                                                        expandUsers,
                                                        expandParentGroup,
                                                        expandSubgroups,
                                                        expandAttachedFiles,
                                                        includeAttachedFileSignatures);

            }

        }

        #endregion


        #region AddOrganizationGroup           (OrganizationGroup, OnAdded = null,                   CurrentUserId = null)

        /// <summary>
        /// A delegate called whenever a organization group was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization group was added.</param>
        /// <param name="OrganizationGroup">The added organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnOrganizationGroupAddedDelegate(DateTime           Timestamp,
                                                              OrganizationGroup  OrganizationGroup,
                                                              EventTracking_Id?  EventTrackingId   = null,
                                                              User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization group was added.
        /// </summary>
        public event OnOrganizationGroupAddedDelegate? OnOrganizationGroupAdded;


        #region (protected internal) addOrganizationGroup(OrganizationGroup,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given organization group to the API.
        /// </summary>
        /// <param name="OrganizationGroup">A new organization group to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<OrganizationGroup> addOrganizationGroup(OrganizationGroup                             OrganizationGroup,
                                                                              Action<OrganizationGroup, EventTracking_Id>?  OnAdded           = null,
                                                                              EventTracking_Id?                             EventTrackingId   = null,
                                                                              User_Id?                                      CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),
                                                "The given organization group must not be null!");

            if (OrganizationGroup.API != null && OrganizationGroup.API != this)
                throw new ArgumentException    ("The given organization group is already attached to another API!",
                                                nameof(OrganizationGroup));

            if (organizationGroups.ContainsKey(OrganizationGroup.Id))
                throw new ArgumentException    ("User group identification '" + OrganizationGroup.Id + "' already exists!",
                                                nameof(OrganizationGroup));

            if (OrganizationGroup.Id.Length < MinOrganizationGroupIdLength)
                throw new ArgumentException    ("User group identification '" + OrganizationGroup.Id + "' is too short!",
                                                nameof(OrganizationGroup));

            OrganizationGroup.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrganizationGroup_MessageType,
                                      OrganizationGroup.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            organizationGroups.TryAdd(OrganizationGroup.Id, OrganizationGroup);


            var OnOrganizationGroupAddedLocal = OnOrganizationGroupAdded;
            if (OnOrganizationGroupAddedLocal is not null)
                await OnOrganizationGroupAddedLocal.Invoke(Timestamp.Now,
                                                           OrganizationGroup,
                                                           eventTrackingId,
                                                           CurrentUserId);

            await SendNotifications(OrganizationGroup,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(OrganizationGroup,
                            eventTrackingId);

            return OrganizationGroup;

        }

        #endregion

        #region AddOrganizationGroup             (OrganizationGroup,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given organization group.
        /// </summary>
        /// <param name="OrganizationGroup">A new organization group.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<OrganizationGroup> AddOrganizationGroup(OrganizationGroup                             OrganizationGroup,
                                                                  Action<OrganizationGroup, EventTracking_Id>?  OnAdded           = null,
                                                                  EventTracking_Id?                             EventTrackingId   = null,
                                                                  User_Id?                                      CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup), "The given organization group must not be null!");

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await addOrganizationGroup(OrganizationGroup,
                                                          OnAdded,
                                                          EventTrackingId,
                                                          CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddOrganizationGroupIfNotExists(OrganizationGroup, OnAdded = null,                   CurrentUserId = null)

        #region (protected internal) addOrganizationGroupIfNotExists(OrganizationGroup,                                OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given organization group to the API.
        /// </summary>
        /// <param name="OrganizationGroup">A new organization group to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<OrganizationGroup> addOrganizationGroupIfNotExists(OrganizationGroup                             OrganizationGroup,
                                                                                         Action<OrganizationGroup, EventTracking_Id>?  OnAdded           = null,
                                                                                         EventTracking_Id?                             EventTrackingId   = null,
                                                                                         User_Id?                                      CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),
                                                "The given organization group must not be null!");

            if (OrganizationGroup.API != null && OrganizationGroup.API != this)
                throw new ArgumentException    ("The given organization group is already attached to another API!",
                                                nameof(OrganizationGroup));

            if (organizationGroups.ContainsKey(OrganizationGroup.Id))
                return organizationGroups[OrganizationGroup.Id];

            if (OrganizationGroup.Id.Length < MinOrganizationGroupIdLength)
                throw new ArgumentException    ("User group identification '" + OrganizationGroup.Id + "' is too short!",
                                                nameof(OrganizationGroup));

            OrganizationGroup.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrganizationGroupIfNotExists_MessageType,
                                      OrganizationGroup.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            organizationGroups.TryAdd(OrganizationGroup.Id, OrganizationGroup);

            var OnOrganizationGroupAddedLocal = OnOrganizationGroupAdded;
            if (OnOrganizationGroupAddedLocal is not null)
                await OnOrganizationGroupAddedLocal.Invoke(Timestamp.Now,
                                                           OrganizationGroup,
                                                           eventTrackingId,
                                                           CurrentUserId);

            await SendNotifications(OrganizationGroup,
                                    addOrganizationGroupIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(OrganizationGroup,
                            eventTrackingId);

            return OrganizationGroup;

        }

        #endregion

        #region AddOrganizationGroupIfNotExists             (OrganizationGroup,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given organization group.
        /// </summary>
        /// <param name="OrganizationGroup">A new organization group.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<OrganizationGroup> AddOrganizationGroupIfNotExists(OrganizationGroup                             OrganizationGroup,
                                                                             Action<OrganizationGroup, EventTracking_Id>?  OnAdded           = null,
                                                                             EventTracking_Id?                             EventTrackingId   = null,
                                                                             User_Id?                                      CurrentUserId     = null)
        {

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await addOrganizationGroupIfNotExists(OrganizationGroup,
                                                                     OnAdded,
                                                                     EventTrackingId,
                                                                     CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddOrUpdateOrganizationGroup   (OrganizationGroup, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) addOrUpdateOrganizationGroup   (OrganizationGroup,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given organization group to/within the API.
        /// </summary>
        /// <param name="OrganizationGroup">A organization group.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        protected internal async Task<OrganizationGroup> addOrUpdateOrganizationGroup(OrganizationGroup                             OrganizationGroup,
                                                                                      Action<OrganizationGroup, EventTracking_Id>?  OnAdded           = null,
                                                                                      Action<OrganizationGroup, EventTracking_Id>?  OnUpdated         = null,
                                                                                      EventTracking_Id?                             EventTrackingId   = null,
                                                                                      User_Id?                                      CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),
                                                "The given organization group must not be null!");

            if (OrganizationGroup.API != null && OrganizationGroup.API != this)
                throw new ArgumentException    ("The given organization group is already attached to another API!",
                                                nameof(OrganizationGroup));

            if (organizationGroups.ContainsKey(OrganizationGroup.Id))
                return organizationGroups[OrganizationGroup.Id];

            if (OrganizationGroup.Id.Length < MinOrganizationGroupIdLength)
                throw new ArgumentException    ("OrganizationGroup identification '" + OrganizationGroup.Id + "' is too short!",
                                                nameof(OrganizationGroup));

            OrganizationGroup.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrUpdateOrganizationGroup_MessageType,
                                      OrganizationGroup.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            if (organizationGroups.TryGetValue(OrganizationGroup.Id, out var OldOrganizationGroup))
            {
                organizationGroups.TryRemove(OldOrganizationGroup.Id, out _);
                OrganizationGroup.CopyAllLinkedDataFromBase(OldOrganizationGroup);
            }

            organizationGroups.TryAdd(OrganizationGroup.Id, OrganizationGroup);

            if (OldOrganizationGroup is not null)
            {

                var OnOrganizationGroupUpdatedLocal = OnOrganizationGroupUpdated;
                if (OnOrganizationGroupUpdatedLocal is not null)
                    await OnOrganizationGroupUpdatedLocal.Invoke(Timestamp.Now,
                                                                 OrganizationGroup,
                                                                 OldOrganizationGroup,
                                                                 eventTrackingId,
                                                                 CurrentUserId);

                await SendNotifications(OrganizationGroup,
                                        updateOrganizationGroup_MessageType,
                                        OldOrganizationGroup,
                                        eventTrackingId,
                                        CurrentUserId);

                OnUpdated?.Invoke(OrganizationGroup,
                                  eventTrackingId);

            }
            else
            {

                var OnOrganizationGroupAddedLocal = OnOrganizationGroupAdded;
                if (OnOrganizationGroupAddedLocal is not null)
                    await OnOrganizationGroupAddedLocal.Invoke(Timestamp.Now,
                                                               OrganizationGroup,
                                                               eventTrackingId,
                                                               CurrentUserId);

                await SendNotifications(OrganizationGroup,
                                        addOrganizationGroup_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnAdded?.Invoke(OrganizationGroup,
                                eventTrackingId);

            }

            return OrganizationGroup;

        }

        #endregion

        #region AddOrUpdateOrganizationGroup   (OrganizationGroup,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given organization group to/within the API.
        /// </summary>
        /// <param name="OrganizationGroup">A organization group.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        public async Task<OrganizationGroup> AddOrUpdateOrganizationGroup(OrganizationGroup                             OrganizationGroup,
                                                                          Action<OrganizationGroup, EventTracking_Id>?  OnAdded           = null,
                                                                          Action<OrganizationGroup, EventTracking_Id>?  OnUpdated         = null,
                                                                          EventTracking_Id?                             EventTrackingId   = null,
                                                                          User_Id?                                      CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup), "The given organization group must not be null!");

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await addOrUpdateOrganizationGroup(OrganizationGroup,
                                                                  OnAdded,
                                                                  OnUpdated,
                                                                  EventTrackingId,
                                                                  CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region UpdateOrganizationGroup        (OrganizationGroup,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a organization group was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization group was updated.</param>
        /// <param name="OrganizationGroup">The updated organization group.</param>
        /// <param name="OldOrganizationGroup">The old organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking organization group identification</param>
        public delegate Task OnOrganizationGroupUpdatedDelegate(DateTime           Timestamp,
                                                                OrganizationGroup  OrganizationGroup,
                                                                OrganizationGroup  OldOrganizationGroup,
                                                                EventTracking_Id?  EventTrackingId   = null,
                                                                User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization group was updated.
        /// </summary>
        public event OnOrganizationGroupUpdatedDelegate? OnOrganizationGroupUpdated;


        #region (protected internal) updateOrganizationGroup(OrganizationGroup, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization group to/within the API.
        /// </summary>
        /// <param name="OrganizationGroup">A organization group.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        protected internal async Task<OrganizationGroup> updateOrganizationGroup(OrganizationGroup                             OrganizationGroup,
                                                                                 Action<OrganizationGroup, EventTracking_Id>?  OnUpdated         = null,
                                                                                 EventTracking_Id?                             EventTrackingId   = null,
                                                                                 User_Id?                                      CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),
                                                "The given organization group must not be null!");

            if (OrganizationGroup.API != null && OrganizationGroup.API != this)
                throw new ArgumentException    ("The given organization group is already attached to another API!",
                                                nameof(OrganizationGroup));

            if (!organizationGroups.TryGetValue(OrganizationGroup.Id, out var OldOrganizationGroup))
                throw new ArgumentException    ("The given organization group '" + OrganizationGroup.Id + "' does not exists in this API!",
                                                nameof(OrganizationGroup));

            OrganizationGroup.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateOrganizationGroup_MessageType,
                                      OrganizationGroup.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            organizationGroups.TryRemove(OldOrganizationGroup.Id, out _);
            OrganizationGroup.CopyAllLinkedDataFromBase(OldOrganizationGroup);


            var OnOrganizationGroupUpdatedLocal = OnOrganizationGroupUpdated;
            if (OnOrganizationGroupUpdatedLocal is not null)
                await OnOrganizationGroupUpdatedLocal.Invoke(Timestamp.Now,
                                                             OrganizationGroup,
                                                             OldOrganizationGroup,
                                                             eventTrackingId,
                                                             CurrentUserId);

            await SendNotifications(OrganizationGroup,
                                    updateOrganizationGroup_MessageType,
                                    OldOrganizationGroup,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(OrganizationGroup,
                              eventTrackingId);

            return OrganizationGroup;

        }

        #endregion

        #region UpdateOrganizationGroup             (OrganizationGroup, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization group to/within the API.
        /// </summary>
        /// <param name="OrganizationGroup">A organization group.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        public async Task<OrganizationGroup> UpdateOrganizationGroup(OrganizationGroup                             OrganizationGroup,
                                                                     Action<OrganizationGroup, EventTracking_Id>?  OnUpdated         = null,
                                                                     EventTracking_Id?                             EventTrackingId   = null,
                                                                     User_Id?                                      CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup), "The given organization group must not be null!");

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await updateOrganizationGroup(OrganizationGroup,
                                                             OnUpdated,
                                                             EventTrackingId,
                                                             CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion


        #region (protected internal) updateOrganizationGroup(OrganizationGroupId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization group.
        /// </summary>
        /// <param name="OrganizationGroupId">An organization group identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given organization group.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        protected internal async Task<OrganizationGroup> updateOrganizationGroup(OrganizationGroup_Id                          OrganizationGroupId,
                                                                                 Action<OrganizationGroup.Builder>             UpdateDelegate,
                                                                                 Action<OrganizationGroup, EventTracking_Id>?  OnUpdated         = null,
                                                                                 EventTracking_Id?                             EventTrackingId   = null,
                                                                                 User_Id?                                      CurrentUserId     = null)
        {

            if (OrganizationGroupId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(OrganizationGroupId),
                                                "The given organization group identification must not be null or empty!");

            if (UpdateDelegate == null)
                throw new ArgumentNullException(nameof(UpdateDelegate),
                                                "The given update delegate must not be null!");

            if (!organizationGroups.TryGetValue(OrganizationGroupId, out var OldOrganizationGroup))
                throw new ArgumentException    ("The given organization group '" + OrganizationGroupId + "' does not exists in this API!",
                                                nameof(OrganizationGroupId));

            var Builder = OldOrganizationGroup.ToBuilder();
            UpdateDelegate(Builder);
            var NewOrganizationGroup = Builder.ToImmutable;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateOrganizationGroup_MessageType,
                                      NewOrganizationGroup.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            organizationGroups.TryRemove(OldOrganizationGroup.Id, out _);
            NewOrganizationGroup.CopyAllLinkedDataFromBase(OldOrganizationGroup);


            var OnOrganizationGroupUpdatedLocal = OnOrganizationGroupUpdated;
            if (OnOrganizationGroupUpdatedLocal is not null)
                await OnOrganizationGroupUpdatedLocal.Invoke(Timestamp.Now,
                                                             NewOrganizationGroup,
                                                             OldOrganizationGroup,
                                                             eventTrackingId,
                                                             CurrentUserId);

            await SendNotifications(NewOrganizationGroup,
                                    updateOrganizationGroup_MessageType,
                                    OldOrganizationGroup,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NewOrganizationGroup,
                              eventTrackingId);

            return NewOrganizationGroup;

        }

        #endregion

        #region UpdateOrganizationGroup             (OrganizationGroupId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization group.
        /// </summary>
        /// <param name="OrganizationGroupId">An organization group identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given organization group.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        public async Task<OrganizationGroup> UpdateOrganizationGroup(OrganizationGroup_Id                          OrganizationGroupId,
                                                                     Action<OrganizationGroup.Builder>             UpdateDelegate,
                                                                     Action<OrganizationGroup, EventTracking_Id>?  OnUpdated         = null,
                                                                     EventTracking_Id?                             EventTrackingId   = null,
                                                                     User_Id?                                      CurrentUserId     = null)
        {

            if (OrganizationGroupId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(OrganizationGroupId), "The given organization group identification must not be null or empty!");

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await updateOrganizationGroup(OrganizationGroupId,
                                                             UpdateDelegate,
                                                             OnUpdated,
                                                             EventTrackingId,
                                                             CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region DeleteOrganizationGroup(OrganizationGroup, OnRemoved = null, ...)

        /// <summary>
        /// A delegate called whenever a organization group was removed.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization group was removed.</param>
        /// <param name="OrganizationGroup">The removed organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking organization group identification</param>
        public delegate Task OnOrganizationGroupRemovedDelegate(DateTime           Timestamp,
                                                                OrganizationGroup  OrganizationGroup,
                                                                EventTracking_Id?  EventTrackingId   = null,
                                                                User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization group was removed.
        /// </summary>
        public event OnOrganizationGroupRemovedDelegate? OnOrganizationGroupRemoved;


        #region (protected internal virtual) canDeleteOrganizationGroup(OrganizationGroup)

        /// <summary>
        /// Determines whether the organization group can safely be removed from the API.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group to be removed.</param>
        protected internal virtual I18NString canDeleteOrganizationGroup(OrganizationGroup OrganizationGroup)
        {
            return new I18NString(Languages.en, "Currently not possible!");
        }

        #endregion

        #region (protected internal) deleteOrganizationGroup(OrganizationGroup, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given organization group from the API.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the organization group has been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        protected internal async Task<DeleteOrganizationGroupResult>

            deleteOrganizationGroup(OrganizationGroup                             OrganizationGroup,
                                    Action<OrganizationGroup, EventTracking_Id>?  OnRemoved         = null,
                                    EventTracking_Id?                             EventTrackingId   = null,
                                    User_Id?                                      CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),
                                                "The given organization group must not be null!");

            if (OrganizationGroup.API != this || !organizationGroups.TryGetValue(OrganizationGroup.Id, out var OrganizationGroupToBeRemoved))
                throw new ArgumentException    ("The given organization group '" + OrganizationGroup.Id + "' does not exists in this API!",
                                                nameof(OrganizationGroup));


            var veto = canDeleteOrganizationGroup(OrganizationGroup);

            if (veto is null)
            {

                await WriteToDatabaseFile(removeOrganizationGroup_MessageType,
                                          OrganizationGroup.ToJSON(false),
                                          eventTrackingId,
                                          CurrentUserId);

                organizationGroups.TryRemove(OrganizationGroup.Id, out _);


                var OnOrganizationGroupRemovedLocal = OnOrganizationGroupRemoved;
                if (OnOrganizationGroupRemovedLocal is not null)
                    await OnOrganizationGroupRemovedLocal.Invoke(Timestamp.Now,
                                                                 OrganizationGroup,
                                                                 eventTrackingId,
                                                                 CurrentUserId);

                await SendNotifications(OrganizationGroup,
                                        removeOrganizationGroup_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnRemoved?.Invoke(OrganizationGroup,
                                  eventTrackingId);

                return DeleteOrganizationGroupResult.Success(OrganizationGroup,
                                                             eventTrackingId);

            }
            else
                return DeleteOrganizationGroupResult.CanNotBeRemoved(
                           OrganizationGroup,
                           eventTrackingId,
                           SystemId,
                           this,
                           veto
                       );

        }

        #endregion

        #region DeleteOrganizationGroup(OrganizationGroup, OnRemoved = null, ...)

        /// <summary>
        /// Delete the given organization group from the API.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the organization group has been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        public async Task<DeleteOrganizationGroupResult>

            DeleteOrganizationGroup(OrganizationGroup                             OrganizationGroup,
                                    Action<OrganizationGroup, EventTracking_Id>?  OnRemoved         = null,
                                    EventTracking_Id?                             EventTrackingId   = null,
                                    User_Id?                                      CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await deleteOrganizationGroup(OrganizationGroup,
                                                             OnRemoved,
                                                             eventTrackingId,
                                                             CurrentUserId)

                            : DeleteOrganizationGroupResult.LockTimeout(
                                  OrganizationGroup,
                                  SemaphoreSlimTimeout,
                                  eventTrackingId,
                                  SystemId,
                                  this
                              );

            }
            catch (Exception e)
            {

                return DeleteOrganizationGroupResult.Error(
                           OrganizationGroup,
                           e,
                           eventTrackingId,
                           SystemId,
                           this
                       );

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion


        #region OrganizationGroupExists(OrganizationGroupId)

        /// <summary>
        /// Determines whether the given organization group identification exists within this API.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of an organization group.</param>
        protected internal Boolean _OrganizationGroupExists(OrganizationGroup_Id OrganizationGroupId)

            => !OrganizationGroupId.IsNullOrEmpty && organizationGroups.ContainsKey(OrganizationGroupId);


        /// <summary>
        /// Determines whether the given organization group identification exists within this API.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of an organization group.</param>
        public Boolean OrganizationGroupExists(OrganizationGroup_Id OrganizationGroupId)
        {

            try
            {

                if (OrganizationGroupsSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _OrganizationGroupExists(OrganizationGroupId))
                {
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

            return false;

        }

        #endregion

        #region GetOrganizationGroup   (OrganizationGroupId)

        /// <summary>
        /// Get the organization group having the given unique identification.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of an organization group.</param>
        protected internal OrganizationGroup _GetOrganizationGroup(OrganizationGroup_Id OrganizationGroupId)
        {

            if (!OrganizationGroupId.IsNullOrEmpty && organizationGroups.TryGetValue(OrganizationGroupId, out OrganizationGroup organizationGroup))
                return organizationGroup;

            return null;

        }


        /// <summary>
        /// Get the organization group having the given unique identification.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of the organization group.</param>
        public OrganizationGroup GetOrganizationGroup(OrganizationGroup_Id OrganizationGroupId)
        {

            try
            {

                if (OrganizationGroupsSemaphore.Wait(SemaphoreSlimTimeout))
                    return _GetOrganizationGroup(OrganizationGroupId);

            }
            catch
            { }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

            return null;

        }

        #endregion

        #region TryGetOrganizationGroup(OrganizationGroupId, out OrganizationGroup)

        /// <summary>
        /// Try to get the organization group having the given unique identification.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of an organization group.</param>
        /// <param name="OrganizationGroup">The organization group.</param>
        protected internal Boolean _TryGetOrganizationGroup(OrganizationGroup_Id OrganizationGroupId, out OrganizationGroup OrganizationGroup)
        {

            if (!OrganizationGroupId.IsNullOrEmpty && organizationGroups.TryGetValue(OrganizationGroupId, out OrganizationGroup organizationGroup))
            {
                OrganizationGroup = organizationGroup;
                return true;
            }

            OrganizationGroup = null;
            return false;

        }


        /// <summary>
        /// Try to get the organization group having the given unique identification.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of an organization group.</param>
        /// <param name="OrganizationGroup">The organization group.</param>
        public Boolean TryGetOrganizationGroup(OrganizationGroup_Id   OrganizationGroupId,
                                               out OrganizationGroup  OrganizationGroup)
        {

            try
            {

                if (OrganizationGroupsSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _TryGetOrganizationGroup(OrganizationGroupId, out OrganizationGroup organizationGroup))
                {
                    OrganizationGroup = organizationGroup;
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

            OrganizationGroup = null;
            return false;

        }

        #endregion


        #region SearchOrganizationGroupsByName(OrganizationGroupName)

        /// <summary>
        /// Find all groups having the given name.
        /// </summary>
        /// <param name="OrganizationGroupName">The name of an group (might not be unique).</param>
        public IEnumerable<OrganizationGroup> SearchOrganizationGroupsByName(String OrganizationGroupName)
        {

            try
            {

                OrganizationGroupsSemaphore.Wait();

                var FoundOrganizationGroups = new List<OrganizationGroup>();

                foreach (var group in organizationGroups.Values)
                    if (group.Name.Any(i18npair => i18npair.Text == OrganizationGroupName))
                        FoundOrganizationGroups.Add(group);

                return FoundOrganizationGroups;

            }
            finally
            {
                OrganizationGroupsSemaphore.Release();
            }

        }

        /// <summary>
        /// Find all groups having the given name.
        /// </summary>
        /// <param name="OrganizationGroupName">The name of an group (might not be unique).</param>
        public IEnumerable<OrganizationGroup> SearchOrganizationGroupsByName(I18NString OrganizationGroupName)
        {

            try
            {

                OrganizationGroupsSemaphore.Wait();

                var FoundOrganizationGroups = new List<OrganizationGroup>();

                foreach (var group in organizationGroups.Values)
                    if (group.Name == OrganizationGroupName)
                        FoundOrganizationGroups.Add(group);

                return FoundOrganizationGroups;

            }
            finally
            {
                OrganizationGroupsSemaphore.Release();
            }

        }

        #endregion

        #region SearchOrganizationGroupsByName(OrganizationGroupName, out OrganizationGroups)

        /// <summary>
        /// Find all groups having the given name.
        /// </summary>
        /// <param name="OrganizationGroupName">The name of an group (might not be unique).</param>
        /// <param name="OrganizationGroups">An enumeration of matching groups.</param>
        public Boolean SearchOrganizationGroupsByName(String OrganizationGroupName, out IEnumerable<OrganizationGroup> OrganizationGroups)
        {

            try
            {

                OrganizationGroupsSemaphore.Wait();

                var FoundOrganizationGroups = new List<OrganizationGroup>();

                foreach (var group in organizationGroups.Values)
                    if (group.Name.Any(i18npair => i18npair.Text == OrganizationGroupName))
                        FoundOrganizationGroups.Add(group);

                OrganizationGroups = FoundOrganizationGroups;

                return FoundOrganizationGroups.Count > 0;

            }
            finally
            {
                OrganizationGroupsSemaphore.Release();
            }

        }

        /// <summary>
        /// Find all groups having the given name.
        /// </summary>
        /// <param name="OrganizationGroupName">The name of an group (might not be unique).</param>
        /// <param name="OrganizationGroups">An enumeration of matching groups.</param>
        public Boolean SearchOrganizationGroupsByName(I18NString OrganizationGroupName, out IEnumerable<OrganizationGroup> OrganizationGroups)
        {

            try
            {

                OrganizationGroupsSemaphore.Wait();

                var FoundOrganizationGroups = new List<OrganizationGroup>();

                foreach (var group in organizationGroups.Values)
                    if (group.Name == OrganizationGroupName)
                        FoundOrganizationGroups.Add(group);

                OrganizationGroups = FoundOrganizationGroups;

                return FoundOrganizationGroups.Count > 0;

            }
            finally
            {
                OrganizationGroupsSemaphore.Release();
            }

        }

        #endregion

        #endregion

        #region Users         <> UserGroups

        #region (protected internal) SendNotifications      (User, EdgeLabel, UserGroup, MessageType(s), ...)

        /// <summary>
        /// Send user &lt;-- edge --&gt; user group notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="MessageType">The notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification</param>
        protected internal virtual Task SendNotifications(User                     User,
                                                          User2UserGroupEdgeLabel  EdgeLabel,
                                                          UserGroup                UserGroup,
                                                          NotificationMessageType  MessageType,
                                                          EventTracking_Id?        EventTrackingId    = null,
                                                          User_Id?                 CurrentUserId      = null)

            => SendNotifications(User,
                                 EdgeLabel,
                                 UserGroup,
                                 new NotificationMessageType[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user &lt;-- edge --&gt; user group notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="MessageTypes">The notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification.</param>
        protected internal async virtual Task SendNotifications(User                                  User,
                                                                User2UserGroupEdgeLabel               EdgeLabel,
                                                                UserGroup                             UserGroup,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id?                     EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (User is null)
                throw new ArgumentNullException(nameof(User),          "The given User must not be null or empty!");

            if (UserGroup is null)
                throw new ArgumentNullException(nameof(UserGroup),     "The given user group must not be null or empty!");


            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            var messageTypes = messageTypesHash.ToArray();

            if (!DisableNotifications)
            {

                var membership = EdgeLabel switch {
                    User2UserGroupEdgeLabel.IsAdmin  => " as admin",
                    User2UserGroupEdgeLabel.IsMember => " as member",
                    User2UserGroupEdgeLabel.IsGuest  => " as guest",
                    _                                => ""
                };

                #region Telegram Notifications

                //if (TelegramClient != null)
                //{
                //    try
                //    {

                //        //var AllTelegramNotifications  = UserGroup.GetNotificationsOf<TelegramNotification>(messageTypes).
                //        //                                     ToSafeHashSet();

                //        //if (AllTelegramNotifications.SafeAny())
                //        //{

                //        //    if (MessageTypes.Contains(addUserToUserGroup_MessageType))
                //        //        await TelegramStore.SendTelegrams(String.Concat("User '", User.Name, "' was added to user group '", UserGroup.Name.FirstText(), "'" + membership + "."),
                //        //                                          AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username));

                //        //    if (MessageTypes.Contains(removeUserFromUserGroup_MessageType))
                //        //        await TelegramStore.SendTelegrams(String.Concat("User '", User.Name, "' was removed from user group '", UserGroup.Name.FirstText(), "'."),
                //        //                                          AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username));

                //        //}

                //    }
                //    catch (Exception e)
                //    {
                //        DebugX.LogException(e);
                //    }
                //}

                #endregion

                #region SMS Notifications

                //try
                //{

                //    //var AllSMSNotifications  = UserGroup.GetNotificationsOf<SMSNotification>(messageTypes).
                //    //                                     ToSafeHashSet();

                //    //if (AllSMSNotifications.SafeAny())
                //    //{

                //    //    if (MessageTypes.Contains(addUserToUserGroup_MessageType))
                //    //        SendSMS(String.Concat("User '", User.Name, "' was added to user group '", UserGroup.Name.FirstText(), "'" + membership + "."),
                //    //                AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //    //                SMSSenderName);

                //    //    if (MessageTypes.Contains(removeUserFromUserGroup_MessageType))
                //    //        SendSMS(String.Concat("User '", User.Name, "' was removed from user group '", UserGroup.Name.FirstText(), "'."),
                //    //                AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //    //                SMSSenderName);

                //    //}

                //}
                //catch (Exception e)
                //{
                //    DebugX.LogException(e);
                //}

                #endregion

                #region HTTPS Notifications

                try
                {

                    //var AllHTTPSNotifications  = UserGroup.GetNotificationsOf<HTTPSNotification>(messageTypes).
                    //                                       ToSafeHashSet();

                    //if (AllHTTPSNotifications.SafeAny())
                    //{

                    //    if (MessageTypes.Contains(addUserToUserGroup_MessageType))
                    //        await SendHTTPSNotifications(AllHTTPSNotifications,
                    //                                     new JObject(
                    //                                         new JProperty("addUserToUserGroup",
                    //                                             new JObject(
                    //                                                 new JProperty("userGroup", UserGroup.ToJSON()),
                    //                                                 new JProperty("user",      User.     ToJSON())
                    //                                             )
                    //                                         ),
                    //                                         new JProperty("timestamp", Timestamp.Now.ToIso8601())
                    //                                     ));

                    //    if (MessageTypes.Contains(removeUserFromUserGroup_MessageType))
                    //        await SendHTTPSNotifications(AllHTTPSNotifications,
                    //                                     new JObject(
                    //                                         new JProperty("removeUserFromUserGroup",
                    //                                             new JObject(
                    //                                                 new JProperty("userGroup", UserGroup.ToJSON()),
                    //                                                 new JProperty("user",      User.     ToJSON())
                    //                                             )
                    //                                         ),
                    //                                         new JProperty("timestamp", Timestamp.Now.ToIso8601())
                    //                                     ));

                    //}

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                try
                {

                    //var AllEMailNotifications  = UserGroup.GetNotificationsOf<EMailNotification>(messageTypes).
                    //                                       ToSafeHashSet();

                    //if (AllEMailNotifications.SafeAny())
                    //{

                    //    if (MessageTypes.Contains(addUserToUserGroup_MessageType))
                    //        await APISMTPClient.Send(
                    //                 new HTMLEMailBuilder() {

                    //                     From           = Robot.EMail,
                    //                     To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                    //                     Passphrase     = APIPassphrase,
                    //                     Subject        = String.Concat("User '", User.Name, "' was added to user group '", UserGroup.Name.FirstText(), "'" + membership + "."),

                    //                     HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                    //                                                    "User <a href=\"https://", this.ExternalDNSName, this.BasePath, "/users/", User.Id, "\">", User.Name, "</a> has been added to user group <a href=\"https://", ExternalDNSName, BasePath, "/user groups/", UserGroup.Id, "\">", UserGroup.Name.FirstText(), "</a>.<br />",
                    //                                                    HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                    //                     PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                    //                                                    "User '" + User.Name + "' has been added to user group '", UserGroup.Name.FirstText(), "'.\r\n",
                    //                                                    TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                    //                     SecurityLevel  = EMailSecurity.autosign

                    //                 });

                    //    if (MessageTypes.Contains(removeUserFromUserGroup_MessageType))
                    //        await APISMTPClient.Send(
                    //                 new HTMLEMailBuilder() {

                    //                     From           = Robot.EMail,
                    //                     To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                    //                     Passphrase     = APIPassphrase,
                    //                     Subject        = String.Concat("User '", User.Name, "' was removed from user group '", UserGroup.Name.FirstText(), "'."),

                    //                     HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                    //                                                    "User <a href=\"https://", this.ExternalDNSName, this.BasePath, "/users/", User.Id, "\">", User.Name, "</a> has been removed from user group <a href=\"https://", ExternalDNSName, BasePath, "/user groups/", UserGroup.Id, "\">", UserGroup.Name.FirstText(), "</a>.<br />",
                    //                                                    HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                    //                     PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                    //                                                    "User '" + User.Name + "' has been removed from user group '", UserGroup.Name.FirstText(), "'.\r\n",
                    //                                                    TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                    //                     SecurityLevel  = EMailSecurity.autosign

                    //                 });

                    //}

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

            }

        }

        #endregion


        #region (protected) addUserToUserGroup     (User, EdgeLabel, UserGroup, SuppressNotifications = false, CurrentUserId  = null)

        protected async Task<AddUserToUserGroupResult> addUserToUserGroup(User                     User,
                                                                           User2UserGroupEdgeLabel  EdgeLabel,
                                                                           UserGroup                UserGroup,
                                                                           EventTracking_Id?        EventTrackingId         = null,
                                                                           Boolean                  SuppressNotifications   = false,
                                                                           User_Id?                 CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return AddUserToUserGroupResult.ArgumentError(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              nameof(User),
                                                              "The given user must not be null!");

            if (User.API is not null && User.API != this)
                return AddUserToUserGroupResult.ArgumentError(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              nameof(User),
                                                              "The given user is not attached to this API!");

            if (!users.ContainsKey(User.Id))
                return AddUserToUserGroupResult.ArgumentError(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              nameof(User),
                                                              "The given user '" + User.Id + "' does not exists within this API!");


            //if (EdgeLabel.IsNullOrEmpty())
            //    return AddUserToUserGroupResult.ArgumentError(User,
            //                                                     EdgeLabel,
            //                                                     UserGroup,
            //                                                     eventTrackingId,
            //                                                     nameof(EdgeLabel),
            //                                                     "The given edge label must not be null or empty!");


            if (UserGroup is null)
                return AddUserToUserGroupResult.ArgumentError(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              nameof(UserGroup),
                                                              "The given user group must not be null!");

            if (UserGroup.API != null && UserGroup.API != this)
                return AddUserToUserGroupResult.ArgumentError(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              nameof(UserGroup),
                                                              "The given user group is not attached to this API!");

            if (!userGroups.ContainsKey(UserGroup.Id))
                return AddUserToUserGroupResult.ArgumentError(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              nameof(UserGroup),
                                                              "The given user group '" + UserGroup.Id + "' does not exists within this API!");


            if (!User.     EdgeLabels(UserGroup).Any(edgelabel => edgelabel == EdgeLabel) &&
                !UserGroup.EdgeLabels(User).     Any(edgelabel => edgelabel == EdgeLabel))
            {

                await WriteToDatabaseFile(addUserToUserGroup_MessageType,
                                          new JObject(
                                              new JProperty("userId",      User.     Id.ToString()),
                                              new JProperty("edgeLabel",   EdgeLabel.   ToString()),
                                              new JProperty("userGroupId", UserGroup.Id.ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);


                var edge = User.AddToUserGroup(EdgeLabel, UserGroup);
                UserGroup.AddUser(edge);


                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            EdgeLabel,
                                            UserGroup,
                                            addUserToUserGroup_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);


                return AddUserToUserGroupResult.Success(User,
                                                        EdgeLabel,
                                                        UserGroup,
                                                        eventTrackingId);

            }

            return AddUserToUserGroupResult.Failed(User,
                                                   EdgeLabel,
                                                   UserGroup,
                                                   eventTrackingId,
                                                   "The given edge already exists!");

        }

        #endregion

        #region AddUserToUserGroup                  (User, EdgeLabel, UserGroup,                                CurrentUserId  = null)

        public async Task<AddUserToUserGroupResult> AddUserToUserGroup(User                     User,
                                                                       User2UserGroupEdgeLabel  EdgeLabel,
                                                                       UserGroup                UserGroup,
                                                                       EventTracking_Id?        EventTrackingId   = null,
                                                                       User_Id?                 CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await addUserToUserGroup(User,
                                                         EdgeLabel,
                                                         UserGroup,
                                                         eventTrackingId,
                                                         SuppressNotifications:  false,
                                                         CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return AddUserToUserGroupResult.Failed(User,
                                                               EdgeLabel,
                                                               UserGroup,
                                                               eventTrackingId,
                                                               e);

                    }
                    finally
                    {
                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserToUserGroupResult.Failed(User,
                                                   EdgeLabel,
                                                   UserGroup,
                                                   eventTrackingId,
                                                   "Internal locking failed!");

        }

        #endregion


        #region (protected) deleteUserFromUserGroup(User, EdgeLabel, UserGroup, SuppressNotifications = false, ...)

        protected async Task<RemoveUserFromUserGroupResult> deleteUserFromUserGroup(User                     User,
                                                                                     User2UserGroupEdgeLabel  EdgeLabel,
                                                                                     UserGroup                UserGroup,
                                                                                     EventTracking_Id?        EventTrackingId         = null,
                                                                                     Boolean                  SuppressNotifications   = false,
                                                                                     User_Id?                 CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user must not be null!");

            if (User.API is not null && User.API != this)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user is not attached to this API!");

            if (!users.ContainsKey(User.Id))
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user '" + User.Id + "' does not exists within this API!");


            //if (EdgeLabel.IsNullOrEmpty())
            //    return AddUserToUserGroupResult.ArgumentError(User,
            //                                                     EdgeLabel,
            //                                                     UserGroup,
            //                                                     eventTrackingId,
            //                                                     nameof(EdgeLabel),
            //                                                     "The given edge label must not be null or empty!");


            if (UserGroup is null)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group must not be null!");

            if (UserGroup.API != null && UserGroup.API != this)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group is not attached to this API!");

            if (!userGroups.ContainsKey(UserGroup.Id))
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group '" + UserGroup.Id + "' does not exists within this API!");

            var edges = new HashSet<User2UserGroupEdge>();

            foreach (var edge in User.     Edges(EdgeLabel, UserGroup))
                edges.Add(edge);

            foreach (var edge in UserGroup.Edges(EdgeLabel, User))
                edges.Add(edge);


            foreach (var edge in edges)
            {

                User.     RemoveOutEdge(edge);
                UserGroup.AddUser      (edge.EdgeLabel, User);

                await WriteToDatabaseFile(removeUserFromUserGroup_MessageType,
                                          new JObject(
                                              new JProperty("userId",      User.     Id.ToString()),
                                              new JProperty("edgeLabel",   EdgeLabel.   ToString()),
                                              new JProperty("userGroupId", UserGroup.Id.ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            EdgeLabel,
                                            UserGroup,
                                            removeUserFromUserGroup_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);

            }


            return edges.Any()

                       ? RemoveUserFromUserGroupResult.Success(User,
                                                               EdgeLabel,
                                                               UserGroup,
                                                               eventTrackingId)

                       : RemoveUserFromUserGroupResult.Failed(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              "The requested edge was not found!");

        }

        #endregion

        #region RemoveUserFromUserGroup             (User, EdgeLabel, UserGroup,                                CurrentUserId = null)

        public async Task<RemoveUserFromUserGroupResult> RemoveUserFromUserGroup(User                     User,
                                                                                 User2UserGroupEdgeLabel  EdgeLabel,
                                                                                 UserGroup                UserGroup,
                                                                                 EventTracking_Id?        EventTrackingId   = null,
                                                                                 User_Id?                 CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await deleteUserFromUserGroup(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              EventTrackingId,
                                                              SuppressNotifications:  false,
                                                              CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return RemoveUserFromUserGroupResult.Failed(User,
                                                                    EdgeLabel,
                                                                    UserGroup,
                                                                    eventTrackingId,
                                                                    e);

                    }
                    finally
                    {
                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return RemoveUserFromUserGroupResult.Failed(User,
                                                        EdgeLabel,
                                                        UserGroup,
                                                        eventTrackingId,
                                                        "Internal locking failed!");

        }

        #endregion


        #region (protected) deleteUserFromUserGroup(User,            UserGroup, SuppressNotifications = false, ...)

        protected async Task<RemoveUserFromUserGroupResult> deleteUserFromUserGroup(User              User,
                                                                                     UserGroup         UserGroup,
                                                                                     EventTracking_Id? EventTrackingId         = null,
                                                                                     Boolean           SuppressNotifications   = false,
                                                                                     User_Id?          CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user must not be null!");

            if (User.API is not null && User.API != this)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user is not attached to this API!");

            if (!users.ContainsKey(User.Id))
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user '" + User.Id + "' does not exists within this API!");

            if (UserGroup is null)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group must not be null!");

            if (UserGroup.API != null && UserGroup.API != this)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group is not attached to this API!");

            if (!userGroups.ContainsKey(UserGroup.Id))
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group '" + UserGroup.Id + "' does not exists within this API!");

            var edges = new HashSet<User2UserGroupEdge>();

            foreach (var edge in User.     Edges(UserGroup))
                edges.Add(edge);

            foreach (var edge in UserGroup.Edges(User))
                edges.Add(edge);


            foreach (var edge in edges)
            {

                User.     RemoveOutEdge(edge);
                UserGroup.AddUser      (edge.EdgeLabel, User);

                await WriteToDatabaseFile(removeUserFromUserGroup_MessageType,
                                          new JObject(
                                              new JProperty("userId",      User.     Id.       ToString()),
                                              new JProperty("edgeLabel",   edge.     EdgeLabel.ToString()),
                                              new JProperty("userGroupId", UserGroup.Id.       ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            edge.EdgeLabel,
                                            UserGroup,
                                            removeUserFromUserGroup_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);

            }


            return edges.Any()

                       ? RemoveUserFromUserGroupResult.Success(User,
                                                               UserGroup,
                                                               eventTrackingId)

                       : RemoveUserFromUserGroupResult.Failed(User,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              "No edges had been found!");

        }

        #endregion

        #region RemoveUserFromUserGroup             (User,            UserGroup,                                CurrentUserId = null)

        public async Task<RemoveUserFromUserGroupResult> RemoveUserFromUserGroup(User              User,
                                                                                 UserGroup         UserGroup,
                                                                                 EventTracking_Id? EventTrackingId   = null,
                                                                                 User_Id?          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await deleteUserFromUserGroup(User,
                                                              UserGroup,
                                                              EventTrackingId,
                                                              SuppressNotifications:  false,
                                                              CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return RemoveUserFromUserGroupResult.Failed(User,
                                                                    UserGroup,
                                                                    eventTrackingId,
                                                                    e);

                    }
                    finally
                    {
                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return RemoveUserFromUserGroupResult.Failed(User,
                                                        UserGroup,
                                                        eventTrackingId,
                                                        "Internal locking failed!");

        }

        #endregion

        #endregion

        #region Users         <> Organizations

        #region (private) CheckImpersonate(currentOrg, Astronaut, AstronautFound, Member, VetoUsers)

        private Boolean? CheckImpersonate(IOrganization   currentOrg,
                                          IUser           Astronaut,
                                          Boolean         AstronautFound,
                                          IUser           Member,
                                          HashSet<IUser>  VetoUsers)
        {

            var currentUsers = new HashSet<IUser>(currentOrg.User2OrganizationEdges.Select(edge => edge.Source));

            AstronautFound |= currentUsers.Contains(Astronaut);

            if (!AstronautFound)
            {

                // Fail early!
                if (currentUsers.Contains(Member))
                    return false;

            }

            else if (currentUsers.Contains(Member))
            {

                // Astronaut and member are on the same level, e.g. both admin of the same organization!
                if (currentUsers.Contains(Astronaut))
                {
                    // Currently this is allowed!
                }

                return !VetoUsers.Contains(Member);

            }

            // Everyone found so far can no longer be impersonated!
            foreach (var currentUser in currentUsers)
                VetoUsers.Add(currentUser);



            var childResults = currentOrg.Organization2OrganizationInEdges.Where(edge => edge.EdgeLabel == Organization2OrganizationEdgeLabel.IsChildOf).
                                          Select(edge => CheckImpersonate(edge.Source, Astronaut, AstronautFound, Member, new HashSet<IUser>(VetoUsers))).ToArray();

            return childResults.Any(result => result == true);

        }

        #endregion

        #region CanImpersonate(SuperUser, Member, RequestedAccessLevel = Access_Levels.ReadWrite)

        public Boolean CanImpersonate(IUser          SuperUser,
                                      IUser          Member,
                                      Access_Levels  RequestedAccessLevel = Access_Levels.ReadWrite)
        {

            if (SuperUser == Member)
                return false;

            var adminOrganization = GetOrganization(AdminOrganizationId);

            if (adminOrganization is null)
                return false;

            // API admins can never be impersonated!
            if (Member.HasAccessToOrganization(Access_Levels.Admin, AdminOrganizationId) && RequestedAccessLevel != Access_Levels.ReadOnly)
                return false;

            // API admins can impersonate everyone!
            if (SuperUser.HasAccessToOrganization(Access_Levels.Admin, AdminOrganizationId))
                return true;

            // An astronaut must be at least an admin of some parent organization!
            if (!SuperUser.User2Organization_OutEdges.Any(edge => edge.EdgeLabel == User2OrganizationEdgeLabel.IsAdmin))
                return false;

            var VetoUsers             = new HashSet<IUser>();
            var AstronautFound        = false;
            var CurrentOrganizations  = new HashSet<IOrganization>(Organizations.Where(org => !org.Organization2OrganizationOutEdges.
                                                                                                   Any(edge => edge.EdgeLabel == Organization2OrganizationEdgeLabel.IsChildOf)));

            var childResults = CurrentOrganizations.Select(org => CheckImpersonate(org, SuperUser, AstronautFound, Member, VetoUsers)).ToArray();

            return childResults.Any(result => result == true);


            //do
            //{

            //    var NextOrgs  = new HashSet<Organization>(CurrentOrganizations.SelectMany(org => org.Organization2OrganizationInEdges.Where(edge => edge.EdgeLabel == Organization2OrganizationEdgeTypes.IsChildOf)).Select(edge => edge.Source));

            //    foreach (var currentOrg in NextOrgs)
            //    {

            //        var currentUsers = new HashSet<User>(currentOrg.User2OrganizationEdges.Select(edge => edge.Source));

            //        AstronautFound |= currentUsers.Contains(Astronaut);

            //        if (!AstronautFound)
            //        {

            //            // Fail early!
            //            if (currentUsers.Contains(Member))
            //                return false;

            //        }

            //        else if (currentUsers.Contains(Member))
            //        {

            //            // Astronaut and member are on the same level, e.g. both admin of the same organization!
            //            if (currentUsers.Contains(Astronaut))
            //            {
            //                // Currently this is allowed!
            //            }

            //            return !VetoUsers.Contains(Member);

            //        }

            //        // Everyone found so far can no longer be impersonated!
            //        currentUsers.ForEach(user => VetoUsers.Add(user));

            //    }

            //    CurrentOrganizations.Clear();
            //    NextOrgs.ForEach(org => CurrentOrganizations.Add(org));

            //}
            //while (CurrentOrganizations.Count > 0);

            //// The member was not found within the organizational hierarchy!
            //return false;

        }

        #endregion


        #region (protected internal) SendNotifications      (User, EdgeLabel, Organization, MessageType(s), ...)

        /// <summary>
        /// Send user &lt;-- edge --&gt; organization notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="Organization">The organization.</param>
        /// <param name="MessageType">The notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification</param>
        protected internal virtual Task SendNotifications(IUser                       User,
                                                          User2OrganizationEdgeLabel  EdgeLabel,
                                                          IOrganization               Organization,
                                                          NotificationMessageType     MessageType,
                                                          EventTracking_Id?           EventTrackingId    = null,
                                                          User_Id?                    CurrentUserId      = null)

            => SendNotifications(User,
                                 EdgeLabel,
                                 Organization,
                                 new NotificationMessageType[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user &lt;-- edge --&gt; organization notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="Organization">The organization.</param>
        /// <param name="MessageTypes">The notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification.</param>
        protected internal async virtual Task SendNotifications(IUser                                 User,
                                                                User2OrganizationEdgeLabel            EdgeLabel,
                                                                IOrganization                         Organization,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id?                     EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (User is null)
                throw new ArgumentNullException(nameof(User),          "The given user must not be null or empty!");

            if (Organization is null)
                throw new ArgumentNullException(nameof(Organization),  "The given organization must not be null or empty!");


            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            var messageTypes = messageTypesHash.ToArray();

            if (!DisableNotifications)
            {

                var membership = EdgeLabel switch {
                    User2OrganizationEdgeLabel.IsAdmin  => " as admin",
                    User2OrganizationEdgeLabel.IsMember => " as member",
                    User2OrganizationEdgeLabel.IsGuest  => " as guest",
                    _                                   => ""
                };

                #region Telegram Notifications

                //if (TelegramClient != null)
                //{
                //    try
                //    {

                //        var AllTelegramNotifications  = Organization.GetNotificationsOf<TelegramNotification>(messageTypes).
                //                                             ToSafeHashSet();

                //        if (AllTelegramNotifications.SafeAny())
                //        {

                //            if (MessageTypes.Contains(addUserToOrganization_MessageType))
                //                await TelegramClient.SendTelegrams(String.Concat("User ", UserHTMLInfo(User), " was added to organization ", OrganizationHTMLInfo(Organization), membership, "."),
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                //            if (MessageTypes.Contains(removeUserFromOrganization_MessageType))
                //                await TelegramClient.SendTelegrams(String.Concat("User ", UserHTMLInfo(User), " was removed from organization ", OrganizationHTMLInfo(Organization), "."),
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                //        }

                //    }
                //    catch (Exception e)
                //    {
                //        DebugX.LogException(e);
                //    }
                //}

                #endregion

                #region SMS Notifications

                //try
                //{

                //    var AllSMSNotifications  = Organization.GetNotificationsOf<SMSNotification>(messageTypes).
                //                                    ToSafeHashSet();

                //    if (AllSMSNotifications.SafeAny())
                //    {

                //        if (MessageTypes.Contains(addUserToOrganization_MessageType))
                //            SendSMS(String.Concat("User ", UserTextInfo(User), " was added to organization ", OrganizationTextInfo(Organization), membership, "."),
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);

                //        if (MessageTypes.Contains(removeUserFromOrganization_MessageType))
                //            SendSMS(String.Concat("User ", UserTextInfo(User), " was removed from organization ", OrganizationTextInfo(Organization), "."),
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);

                //    }

                //}
                //catch (Exception e)
                //{
                //    DebugX.LogException(e);
                //}

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications  = Organization.GetNotificationsOf<HTTPSNotification>(messageTypes).
                                                      ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (MessageTypes.Contains(addUserToOrganization_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("addUserToOrganization",
                                                                 new JObject(
                                                                     new JProperty("organization", Organization.ToJSON(true)),
                                                                     new JProperty("user",         User.        ToJSON())
                                                                 )
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                        if (MessageTypes.Contains(removeUserFromOrganization_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("removeUserFromOrganization",
                                                                 new JObject(
                                                                     new JProperty("organization", Organization.ToJSON(true)),
                                                                     new JProperty("user",         User.        ToJSON())
                                                                 )
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                try
                {

                    var AllEMailNotifications  = Organization.GetNotificationsOf<EMailNotification>(messageTypes).
                                                              ToSafeHashSet();

                    if (AllEMailNotifications.SafeAny())
                    {

                        if (MessageTypes.Contains(addUserToOrganization_MessageType))
                            await SMTPClient.Send(
                                     new HTMLEMailBuilder() {

                                         From           = Robot.EMail,
                                         To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                         Passphrase     = APIRobotGPGPassphrase,
                                         Subject        = String.Concat("User ", UserTextInfo(User), " was added to organization ", Organization.Name.FirstText(), membership, "."),

                                         HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserHTMLInfo(User), " has been added to organization ", OrganizationHTMLInfo(Organization), membership, ".<br />",
                                                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserTextInfo(User), " has been added to organization ", OrganizationTextInfo(Organization), membership, ".\r\n",
                                                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         SecurityLevel  = EMailSecurity.autosign

                                     });

                        if (MessageTypes.Contains(removeUserFromOrganization_MessageType))
                            await SMTPClient.Send(
                                     new HTMLEMailBuilder() {

                                         From           = Robot.EMail,
                                         To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                         Passphrase     = APIRobotGPGPassphrase,
                                         Subject        = String.Concat("User ", UserTextInfo(User), " was removed from organization ", Organization.Name.FirstText(), "."),

                                         HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserHTMLInfo(User), " has been removed from organization ", OrganizationHTMLInfo(Organization), ".<br />",
                                                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserTextInfo(User), " has been removed from organization ", OrganizationTextInfo(Organization), ".\r\n",
                                                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         SecurityLevel  = EMailSecurity.autosign

                                     });

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

            }

        }

        #endregion


        #region (protected) addUserToOrganization     (User, EdgeLabel, Organization, SuppressNotifications = false, CurrentUserId  = null)

        protected async Task<AddUserToOrganizationResult>

            addUserToOrganization(IUser                       User,
                                   User2OrganizationEdgeLabel  EdgeLabel,
                                   IOrganization               Organization,
                                   EventTracking_Id?           EventTrackingId         = null,
                                   Boolean                     SuppressNotifications   = false,
                                   User_Id?                    CurrentUserId           = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(User),
                                                                 "The given user must not be null!");

            if (User.API is not null && User.API != this)
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(User),
                                                                 "The given user is not attached to this API!");

            if (!users.ContainsKey(User.Id))
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(User),
                                                                 "The given user '" + User.Id + "' does not exists within this API!");


            //if (EdgeLabel.IsNullOrEmpty())
            //    return AddUserToOrganizationResult.ArgumentError(User,
            //                                                     EdgeLabel,
            //                                                     Organization,
            //                                                     eventTrackingId,
            //                                                     nameof(EdgeLabel),
            //                                                     "The given edge label must not be null or empty!");


            if (Organization is null)
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(Organization),
                                                                 "The given organization must not be null!");

            if (Organization.API is not null && Organization.API != this)
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(Organization),
                                                                 "The given organization is not attached to this API!");

            if (!organizations.ContainsKey(Organization.Id))
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(Organization),
                                                                 "The given organization '" + Organization.Id + "' does not exists within this API!");


            if (!User.        EdgeLabels                   (Organization).Any(edgelabel => edgelabel == EdgeLabel) &&
                !Organization.User2OrganizationInEdgeLabels(User).        Any(edgelabel => edgelabel == EdgeLabel))
            {

                await WriteToDatabaseFile(addUserToOrganization_MessageType,
                                          new JObject(
                                              new JProperty("user",         User.        Id.ToString()),
                                              new JProperty("edge",         EdgeLabel.      ToString()),
                                              new JProperty("organization", Organization.Id.ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);


                var edge = User.AddOutgoingEdge(EdgeLabel, Organization);
                Organization.AddUser(edge);


                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            EdgeLabel,
                                            Organization,
                                            addUserToOrganization_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);


                return AddUserToOrganizationResult.Success(User,
                                                           EdgeLabel,
                                                           Organization,
                                                           eventTrackingId);

            }

            return AddUserToOrganizationResult.Failed(User,
                                                      EdgeLabel,
                                                      Organization,
                                                      eventTrackingId,
                                                      "The given edge already exists!");

        }

        #endregion

        #region AddUserToOrganization                  (User, EdgeLabel, Organization,                                CurrentUserId  = null)

        public async Task<AddUserToOrganizationResult>

            AddUserToOrganization(IUser                       User,
                                  User2OrganizationEdgeLabel  EdgeLabel,
                                  IOrganization               Organization,
                                  EventTracking_Id?           EventTrackingId   = null,
                                  User_Id?                    CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await addUserToOrganization(User,
                                                            EdgeLabel,
                                                            Organization,
                                                            eventTrackingId,
                                                            SuppressNotifications:  false,
                                                            CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return AddUserToOrganizationResult.Failed(User,
                                                                  EdgeLabel,
                                                                  Organization,
                                                                  eventTrackingId,
                                                                  e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserToOrganizationResult.Failed(User,
                                                      EdgeLabel,
                                                      Organization,
                                                      eventTrackingId,
                                                      "Internal locking failed!");

        }

        #endregion


        #region (protected) deleteUserFromOrganization(User, EdgeLabel, Organization, SuppressNotifications = false, ...)

        protected async Task<RemoveUserFromOrganizationResult>

            deleteUserFromOrganization(IUser                       User,
                                        User2OrganizationEdgeLabel  EdgeLabel,
                                        IOrganization               Organization,
                                        EventTracking_Id?           EventTrackingId         = null,
                                        Boolean                     SuppressNotifications   = false,
                                        User_Id?                    CurrentUserId           = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user must not be null!");

            if (User.API is not null && User.API != this)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user is not attached to this API!");

            if (!users.ContainsKey(User.Id))
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user '" + User.Id + "' does not exists within this API!");


            //if (EdgeLabel.IsNullOrEmpty())
            //    return AddUserToOrganizationResult.ArgumentError(User,
            //                                                     EdgeLabel,
            //                                                     Organization,
            //                                                     eventTrackingId,
            //                                                     nameof(EdgeLabel),
            //                                                     "The given edge label must not be null or empty!");


            if (Organization is null)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization must not be null!");

            if (Organization.API is not null && Organization.API != this)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization is not attached to this API!");

            if (!organizations.ContainsKey(Organization.Id))
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization '" + Organization.Id + "' does not exists within this API!");

            var edges = new HashSet<User2OrganizationEdge>();

            foreach (var edge in User.Edges(Organization).Where(_edge => _edge.EdgeLabel == EdgeLabel))
                edges.Add(edge);

            foreach (var edge in Organization.User2OrganizationInEdges(User).Where(_edge => _edge.EdgeLabel == EdgeLabel))
                edges.Add(edge);


            foreach (var edge in edges)
            {

                User.        RemoveOutEdge(edge);
                Organization.RemoveUser   (edge.EdgeLabel, User);

                await WriteToDatabaseFile(removeUserFromOrganization_MessageType,
                                          new JObject(
                                              new JProperty("user",         User.        Id.ToString()),
                                              new JProperty("edge",         EdgeLabel.      ToString()),
                                              new JProperty("organization", Organization.Id.ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            EdgeLabel,
                                            Organization,
                                            removeUserFromOrganization_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);

            }


            return edges.Any()

                       ? RemoveUserFromOrganizationResult.Success(User,
                                                                  EdgeLabel,
                                                                  Organization,
                                                                  eventTrackingId)

                       : RemoveUserFromOrganizationResult.Failed(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 "The requested edge was not found!");

        }

        #endregion

        #region RemoveUserFromOrganization             (User, EdgeLabel, Organization,                                CurrentUserId = null)

        public async Task<RemoveUserFromOrganizationResult>

            RemoveUserFromOrganization(IUser                       User,
                                       User2OrganizationEdgeLabel  EdgeLabel,
                                       IOrganization               Organization,
                                       EventTracking_Id?           EventTrackingId   = null,
                                       User_Id?                    CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await deleteUserFromOrganization(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 EventTrackingId,
                                                                 SuppressNotifications:  false,
                                                                 CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return RemoveUserFromOrganizationResult.Failed(User,
                                                                       EdgeLabel,
                                                                       Organization,
                                                                       eventTrackingId,
                                                                       e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return RemoveUserFromOrganizationResult.Failed(User,
                                                           EdgeLabel,
                                                           Organization,
                                                           eventTrackingId,
                                                           "Internal locking failed!");

        }

        #endregion


        #region (protected) deleteUserFromOrganization(User,            Organization, SuppressNotifications = false, ...)

        protected async Task<RemoveUserFromOrganizationResult>

            deleteUserFromOrganization(IUser              User,
                                        IOrganization      Organization,
                                        EventTracking_Id?  EventTrackingId         = null,
                                        Boolean            SuppressNotifications   = false,
                                        User_Id?           CurrentUserId           = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User.API is not null && User.API != this)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user is not attached to this API!");

            if (!users.ContainsKey(User.Id))
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user '" + User.Id + "' does not exists within this API!");

            if (Organization is null)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization must not be null!");

            if (Organization.API is not null && Organization.API != this)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization is not attached to this API!");

            if (!organizations.ContainsKey(Organization.Id))
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization '" + Organization.Id + "' does not exists within this API!");

            var edges = new HashSet<User2OrganizationEdge>();

            foreach (var edge in User.Edges(Organization))
                edges.Add(edge);

            foreach (var edge in Organization.User2OrganizationInEdges(User))
                edges.Add(edge);


            foreach (var edge in edges)
            {

                User.        RemoveOutEdge(edge);
                Organization.RemoveUser   (edge.EdgeLabel, User);

                await WriteToDatabaseFile(removeUserFromOrganization_MessageType,
                                          new JObject(
                                              new JProperty("user",          User.        Id.       ToString()),
                                              new JProperty("edge",          edge.        EdgeLabel.ToString()),
                                              new JProperty("organization",  Organization.Id.       ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            edge.EdgeLabel,
                                            Organization,
                                            removeUserFromOrganization_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);

            }


            return edges.Any()

                       ? RemoveUserFromOrganizationResult.Success(User,
                                                                  Organization,
                                                                  eventTrackingId)

                       : RemoveUserFromOrganizationResult.Failed(User,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 "No edges had been found!");

        }

        #endregion

        #region RemoveUserFromOrganization             (User,            Organization,                                CurrentUserId = null)

        public async Task<RemoveUserFromOrganizationResult>

            RemoveUserFromOrganization(IUser              User,
                                       IOrganization      Organization,
                                       EventTracking_Id?  EventTrackingId   = null,
                                       User_Id?           CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await deleteUserFromOrganization(User,
                                                                 Organization,
                                                                 EventTrackingId,
                                                                 SuppressNotifications:  false,
                                                                 CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return RemoveUserFromOrganizationResult.Failed(User,
                                                                       Organization,
                                                                       eventTrackingId,
                                                                       e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return RemoveUserFromOrganizationResult.Failed(User,
                                                           Organization,
                                                           eventTrackingId,
                                                           "Internal locking failed!");

        }

        #endregion

        #endregion

        #region Organizations <> Organizations

        #region (protected internal) SendNotifications(OrganizationOut, EdgeLabel, OrganizationIn, MessageType, ...)

        /// <summary>
        /// Send organization &lt;-- edge --&gt; organization notifications.
        /// </summary>
        /// <param name="OrganizationOut">The outgoing organization.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="OrganizationIn">The incoming organization.</param>
        /// <param name="MessageType">The notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification</param>
        protected internal virtual Task SendNotifications(IOrganization                       OrganizationOut,
                                                          Organization2OrganizationEdgeLabel  EdgeLabel,
                                                          IOrganization                       OrganizationIn,
                                                          NotificationMessageType             MessageType,
                                                          EventTracking_Id?                   EventTrackingId    = null,
                                                          User_Id?                            CurrentUserId      = null)

            => SendNotifications(OrganizationOut,
                                 EdgeLabel,
                                 OrganizationIn,
                                 new[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send organization &lt;-- edge --&gt; organization notifications.
        /// </summary>
        /// <param name="OrganizationOut">The outgoing organization.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="OrganizationIn">The incoming organization.</param>
        /// <param name="MessageTypes">The notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification.</param>
        protected internal async virtual Task SendNotifications(IOrganization                         OrganizationOut,
                                                                Organization2OrganizationEdgeLabel    EdgeLabel,
                                                                IOrganization                         OrganizationIn,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id?                     EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (OrganizationOut is null)
                throw new ArgumentNullException(nameof(OrganizationOut),  "The given OrganizationOut must not be null or empty!");

            if (OrganizationIn is null)
                throw new ArgumentNullException(nameof(OrganizationIn),   "The given OrganizationIn must not be null or empty!");

            //if (EdgeLabel.IsNullOrEmpty)
            //    throw new ArgumentNullException(nameof(EdgeLabel),        "The given EdgeLabel must not be null or empty!");


            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),   "The given enumeration of message types must not be null or empty!");

            //if (messageTypesHash.Contains(addServiceTicketIfNotExists_MessageType))
            //    messageTypesHash.Add(addServiceTicket_MessageType);

            //if (messageTypesHash.Contains(addOrUpdateServiceTicket_MessageType))
            //    messageTypesHash.Add(OldServiceTicket == null
            //                           ? addServiceTicket_MessageType
            //                           : updateServiceTicket_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                //if (TelegramClient != null)
                //{
                //    try
                //    {

                //        var AllTelegramNotifications  = OrganizationIn. GetNotificationsOf<TelegramNotification>(messageTypes).Concat(
                //                                        OrganizationOut.GetNotificationsOf<TelegramNotification>(messageTypes)).
                //                                        ToSafeHashSet();

                //        if (AllTelegramNotifications.SafeAny())
                //        {

                //            if (messageTypes.Contains(linkOrganizations_MessageType))
                //            {
                //                await TelegramClient.SendTelegrams(String.Concat("Organization ", OrganizationHTMLInfo(OrganizationOut), " was linked to organization ", OrganizationHTMLInfo(OrganizationIn), "."),
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);
                //            }

                //            if (messageTypes.Contains(unlinkOrganizations_MessageType))
                //            {
                //                await TelegramClient.SendTelegrams(String.Concat("Organization ", OrganizationHTMLInfo(OrganizationOut), " was unlinked from organization ", OrganizationHTMLInfo(OrganizationIn), "."),
                //                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                //                                                   Telegram.Bot.Types.Enums.ParseMode.Html);
                //            }

                //        }

                //    }
                //    catch (Exception e)
                //    {
                //        DebugX.LogException(e);
                //    }
                //}

                #endregion

                #region SMS Notifications

                //try
                //{

                //    var AllSMSNotifications  = OrganizationIn. GetNotificationsOf<SMSNotification>(messageTypes).Concat(
                //                               OrganizationOut.GetNotificationsOf<SMSNotification>(messageTypes)).
                //                               ToSafeHashSet();

                //    if (AllSMSNotifications.SafeAny())
                //    {

                //        if (messageTypes.Contains(linkOrganizations_MessageType))
                //        {
                //            SendSMS(String.Concat("Organization ", OrganizationTextInfo(OrganizationOut), " was linked to organization ", OrganizationTextInfo(OrganizationIn), "."),
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);
                //        }

                //        if (messageTypes.Contains(unlinkOrganizations_MessageType))
                //        {
                //            SendSMS(String.Concat("Organization ", OrganizationTextInfo(OrganizationOut), " was unlinked from organization ", OrganizationTextInfo(OrganizationIn), "."),
                //                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                //                    SMSSenderName);
                //        }

                //    }

                //}
                //catch (Exception e)
                //{
                //    DebugX.LogException(e);
                //}

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications  = OrganizationIn. GetNotificationsOf<HTTPSNotification>(messageTypes).Concat(
                                                 OrganizationOut.GetNotificationsOf<HTTPSNotification>(messageTypes)).
                                                 ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(linkOrganizations_MessageType))
                        {

                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("linkOrganizations",
                                                                 new JObject(
                                                                     new JProperty("organization",       OrganizationOut.ToJSON(true)),
                                                                     new JProperty("parentOrganization", OrganizationIn. ToJSON(true))
                                                                 )
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                        }

                        if (messageTypes.Contains(unlinkOrganizations_MessageType))
                        {

                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("unlinkOrganizations",
                                                                 new JObject(
                                                                     new JProperty("organization",       OrganizationOut.ToJSON(true)),
                                                                     new JProperty("parentOrganization", OrganizationIn. ToJSON(true))
                                                                 )
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                        }

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications  = OrganizationIn. GetNotificationsOf<EMailNotification>(messageTypes).Concat(
                                                     OrganizationOut.GetNotificationsOf<EMailNotification>(messageTypes)).
                                                     ToSafeHashSet();

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(linkOrganizations_MessageType))
                            {
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIRobotGPGPassphrase,
                                             Subject        = String.Concat("Organization ", OrganizationTextInfo(OrganizationOut), " was linked to organization ", OrganizationTextInfo(OrganizationIn), "."),

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "Organization ", OrganizationHTMLInfo(OrganizationOut), " had been linked to organization ", OrganizationTextInfo(OrganizationIn), ".<br />",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "Organization ", OrganizationTextInfo(OrganizationOut), " had been linked to organization ", OrganizationTextInfo(OrganizationIn), ".\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });
                            }

                            if (messageTypes.Contains(unlinkOrganizations_MessageType))
                            {
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIRobotGPGPassphrase,
                                             Subject        = String.Concat("Organization ", OrganizationTextInfo(OrganizationOut), " was unlinked from organization ", OrganizationTextInfo(OrganizationIn), "."),

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "Organization ", OrganizationHTMLInfo(OrganizationOut), " had been unlinked from organization ", OrganizationTextInfo(OrganizationIn), ".<br />",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "Organization ", OrganizationTextInfo(OrganizationOut), " had been unlinked from organization ", OrganizationTextInfo(OrganizationIn), ".\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });
                            }

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion


        #region (protected) _LinkOrganizations  (OrganizationOut, EdgeLabel, OrganizationIn, EventTrackingId = null, SuppressNotifications = false, ...)

        protected async Task<LinkOrganizationsResult> _LinkOrganizations(IOrganization                       OrganizationOut,
                                                                         Organization2OrganizationEdgeLabel  EdgeLabel,
                                                                         IOrganization                       OrganizationIn,
                                                                         EventTracking_Id?                   EventTrackingId         = null,
                                                                         Boolean                             SuppressNotifications   = false,
                                                                         User_Id?                            CurrentUserId           = null)
        {

                if (!OrganizationOut.
                        Organization2OrganizationOutEdges.
                        Where(edge => edge.Target    == OrganizationIn).
                        Any  (edge => edge.EdgeLabel == EdgeLabel))
                {

                    var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                    await WriteToDatabaseFile(linkOrganizations_MessageType,
                                              new JObject(
                                                  new JProperty("organizationOut", OrganizationOut.Id.ToString()),
                                                  new JProperty("edge",            EdgeLabel.         ToString()),
                                                  new JProperty("organizationIn",  OrganizationIn. Id.ToString())
                                              ),
                                              EventTrackingId,
                                              CurrentUserId);

                    OrganizationOut.AddOutEdge(EdgeLabel, OrganizationIn);

                    if (!OrganizationIn.
                            Organization2OrganizationInEdges.
                            Where(edge => edge.Source    == OrganizationOut).
                            Any  (edge => edge.EdgeLabel == EdgeLabel))
                    {
                        OrganizationIn.AddInEdge(EdgeLabel, OrganizationOut);
                    }

                    if (!SuppressNotifications)
                        await SendNotifications(OrganizationOut,
                                                EdgeLabel,
                                                OrganizationIn,
                                                linkOrganizations_MessageType,
                                                eventTrackingId,
                                                CurrentUserId);

                    return LinkOrganizationsResult.Success(OrganizationOut,
                                                           EdgeLabel,
                                                           OrganizationIn,
                                                           EventTrackingId);

                }

                return LinkOrganizationsResult.Failed(OrganizationOut,
                                                      EdgeLabel,
                                                      OrganizationIn,
                                                      EventTrackingId,
                                                      "!");

        }

        #endregion

        #region LinkOrganizations               (OrganizationOut, EdgeLabel, OrganizationIn, EventTrackingId = null,                                CurrentUserId = null)

        public async Task<LinkOrganizationsResult> LinkOrganizations(IOrganization                       OrganizationOut,
                                                                     Organization2OrganizationEdgeLabel  EdgeLabel,
                                                                     IOrganization                       OrganizationIn,
                                                                     EventTracking_Id?                   EventTrackingId   = null,
                                                                     User_Id?                            CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _LinkOrganizations(OrganizationOut,
                                                    EdgeLabel,
                                                    OrganizationIn,
                                                    eventTrackingId,
                                                    SuppressNotifications:  false,
                                                    CurrentUserId:          CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return LinkOrganizationsResult.Failed(OrganizationOut,
                                                          EdgeLabel,
                                                          OrganizationIn,
                                                          eventTrackingId,
                                                          e);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return LinkOrganizationsResult.Failed(OrganizationOut,
                                                  EdgeLabel,
                                                  OrganizationIn,
                                                  eventTrackingId,
                                                  "Internal locking failed!");

        }

        #endregion


        #region (protected) _UnlinkOrganizations(OrganizationOut, EdgeLabel, OrganizationIn, SuppressNotifications = false, ...)

        protected async Task<UnlinkOrganizationsResult> _UnlinkOrganizations(IOrganization                       OrganizationOut,
                                                                             Organization2OrganizationEdgeLabel  EdgeLabel,
                                                                             IOrganization                       OrganizationIn,
                                                                             EventTracking_Id?                   EventTrackingId         = null,
                                                                             Boolean                             SuppressNotifications   = false,
                                                                             User_Id?                            CurrentUserId           = null)
        {

            if (OrganizationOut.
                    Organization2OrganizationOutEdges.
                    Where(edge => edge.Target    == OrganizationIn).
                    Any  (edge => edge.EdgeLabel == EdgeLabel))
            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                await WriteToDatabaseFile(unlinkOrganizations_MessageType,
                                          new JObject(
                                              new JProperty("organizationOut", OrganizationOut.Id.ToString()),
                                              new JProperty("edge",            EdgeLabel.         ToString()),
                                              new JProperty("organizationIn",  OrganizationIn. Id.ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                OrganizationOut.RemoveOutEdges(EdgeLabel, OrganizationIn);

                if (OrganizationIn.
                        Organization2OrganizationInEdges.
                        Where(edge => edge.Source    == OrganizationOut).
                        Any  (edge => edge.EdgeLabel == EdgeLabel))
                {
                    OrganizationIn.RemoveInEdges(EdgeLabel, OrganizationOut);
                }

                if (!SuppressNotifications)
                    await SendNotifications(OrganizationOut,
                                            EdgeLabel,
                                            OrganizationIn,
                                            unlinkOrganizations_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);

                return UnlinkOrganizationsResult.Success(OrganizationOut,
                                                         EdgeLabel,
                                                         OrganizationIn,
                                                         EventTrackingId);

            }

            return UnlinkOrganizationsResult.Failed(OrganizationOut,
                                                    EdgeLabel,
                                                    OrganizationIn,
                                                    EventTrackingId,
                                                    "!");

        }

        #endregion

        #region UnlinkOrganizations             (OrganizationOut, EdgeLabel, OrganizationIn,                                CurrentUserId = null)

        public async Task<UnlinkOrganizationsResult> UnlinkOrganizations(IOrganization                       OrganizationOut,
                                                                         Organization2OrganizationEdgeLabel  EdgeLabel,
                                                                         IOrganization                       OrganizationIn,
                                                                         EventTracking_Id?                   EventTrackingId   = null,
                                                                         User_Id?                            CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _UnlinkOrganizations(OrganizationOut,
                                                      EdgeLabel,
                                                      OrganizationIn,
                                                      eventTrackingId,
                                                      SuppressNotifications:  false,
                                                      CurrentUserId:          CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return UnlinkOrganizationsResult.Failed(OrganizationOut,
                                                            EdgeLabel,
                                                            OrganizationIn,
                                                            eventTrackingId,
                                                            e);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UnlinkOrganizationsResult.Failed(OrganizationOut,
                                                    EdgeLabel,
                                                    OrganizationIn,
                                                    eventTrackingId,
                                                    "Internal locking failed!");

        }

        #endregion

        #endregion


        #region DataLicenses

        #region Data

        /// <summary>
        /// An enumeration of all data licenses.
        /// </summary>
        protected internal readonly ConcurrentDictionary<OpenDataLicense_Id, OpenDataLicense> dataLicenses = new ();

        /// <summary>
        /// Return an enumeration of all data licenses.
        /// </summary>
        public IEnumerable<OpenDataLicense> DataLicenses
            => dataLicenses.Values;

        #endregion


        #region CreateDataLicense           (Id, Description, params URLs)

        /// <summary>
        /// Create a new data license.
        /// </summary>
        /// <param name="Id">The unique identification of the data license.</param>
        /// <param name="Description">The description of the data license.</param>
        /// <param name="URLs">Optional URLs for more information on the data license.</param>
        public OpenDataLicense CreateDataLicense(OpenDataLicense_Id  Id,
                                                 I18NString          Description,
                                                 params URL[]        URLs)
        {

            lock (dataLicenses)
            {

                if (dataLicenses.ContainsKey(Id))
                    throw new ArgumentException("The given data license already exists!", nameof(Id));


                var DataLicense = new OpenDataLicense(Id,
                                                      Description,
                                                      URLs);

                WriteToDatabaseFile(NotificationMessageType.Parse("createDataLicense"),
                                    DataLicense.ToJSON(),
                                    EventTracking_Id.New,
                                    Robot.Id);

                return dataLicenses.AddAndReturnValue(DataLicense.Id, DataLicense);

            }

        }

        #endregion

        #region CreateDataLicenseIfNotExists(Id, Description, params URLs)

        /// <summary>
        /// Create a new data license.
        /// </summary>
        /// <param name="Id">The unique identification of the data license.</param>
        /// <param name="Description">The description of the data license.</param>
        /// <param name="URLs">Optional URLs for more information on the data license.</param>
        public OpenDataLicense CreateDataLicenseIfNotExists(OpenDataLicense_Id  Id,
                                                            I18NString          Description,
                                                            params URL[]        URLs)
        {

            lock (dataLicenses)
            {

                if (dataLicenses.ContainsKey(Id))
                    return dataLicenses[Id];

                return CreateDataLicense(Id,
                                         Description,
                                         URLs);

            }

        }

        #endregion


        #region GetDataLicense   (DataLicenseId)

        /// <summary>
        /// Get the data license having the given unique identification.
        /// </summary>
        /// <param name="DataLicenseId">The unique identification of the data license.</param>
        public OpenDataLicense? GetDataLicense(OpenDataLicense_Id  DataLicenseId)
        {
            lock (dataLicenses)
            {

                if (dataLicenses.TryGetValue(DataLicenseId, out var dataLicense))
                    return dataLicense;

                return null;

            }
        }

        #endregion

        #region TryGetDataLicense(DataLicenseId, out DataLicense)

        /// <summary>
        /// Try to get the data license having the given unique identification.
        /// </summary>
        /// <param name="DataLicenseId">The unique identification of the data license.</param>
        /// <param name="DataLicense">The data license.</param>
        public Boolean TryGetDataLicense(OpenDataLicense_Id    DataLicenseId,
                                         out OpenDataLicense?  DataLicense)
        {
            lock (dataLicenses)
            {
                return dataLicenses.TryGetValue(DataLicenseId, out DataLicense);
            }
        }

        #endregion

        #endregion


    }

}
