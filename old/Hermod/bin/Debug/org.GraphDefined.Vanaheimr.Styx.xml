<?xml version="1.0"?>
<doc>
    <assembly>
        <name>org.GraphDefined.Vanaheimr.Styx</name>
    </assembly>
    <members>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations">
            <summary>
            A bunch of extention methods to transform geo coordinates
            into their corresponding tile identification.
            </summary>
            <summary>
            A bunch of extention methods to transform geo coordinates
            into their corresponding screen positions.
            </summary>
            <summary>
            A bunch of extention methods to transform geo coordinates
            into their corresponding tile identification.
            </summary>
            <summary>
            A bunch of extention methods to transform
            geo coordinates into shape definitions.
            </summary>
            <summary>
            A bunch of extention methods to transform the current
            mouse position into a geo coordinate.
            </summary>
            <summary>
            A bunch of extention methods to transform geo coordinates
            into their corresponding tile identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.GeoCoordinate2BoundingBox(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate})">
            <summary>
            Get the corresponding tile for the given geo coordinate.
            </summary>
            <param name="GeoCoordinates">An enumeration of geo coordinates.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.GeoCoordinate2ScreenXY(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.UInt32)">
            <summary>
            Get the corresponding screen position for the given geo coordinate.
            </summary>
            <param name="GeoCoordinate">The geo coordinate.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.GeoCoordinate2ScreenXY(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,System.UInt32)">
            <summary>
            Get the corresponding screen position for the given geo coordinate.
            </summary>
            <param name="Latitude">The latitude.</param>
            <param name="Longitude">The longitude.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.ToScreenXY(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate},System.UInt32)">
            <summary>
            Transform the given enumeration of geo coordinates
            into their corresponding screen positions.
            </summary>
            <param name="GeoCoordinates">An enumeration of geo coordinates.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.ToScreenXY(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate},System.UInt32,System.Func{System.Exception,System.Exception})">
            <summary>
            Transform the given enumeration of geo coordinates
            into their corresponding screen positions.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.GeoCoordinate2TilesXY(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.UInt32)">
            <summary>
            Get the corresponding tile for the given geo coordinate.
            </summary>
            <param name="GeoCoordinate">The geo coordinate.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.GeoCoordinate2TilesXY(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,System.UInt32)">
            <summary>
            Get the corresponding tile for the given geo coordinate.
            </summary>
            <param name="Latitude">The latitude.</param>
            <param name="Longitude">The longitude.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.ToTilesXY(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate},System.UInt32)">
            <summary>
            Transform the given enumeration of geo coordinates
            into their corresponding tile identification.
            </summary>
            <param name="GeoCoordinates">An enumeration of geo coordinates.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.ToTilesXY(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate},System.UInt32,System.Func{System.Exception,System.Exception})">
            <summary>
            Transform the given enumeration of geo coordinates
            into their corresponding tile identification.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.GeoCoordinates2ShapeDefinition(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate},org.GraphDefined.Vanaheimr.Aegir.ScreenXY,System.UInt32,System.Boolean)">
            <summary>
            Transform the given enumeration of geo coordinates into a shape definition.
            </summary>
            <param name="GeoCoordinates">An enumeration of geo coordinates.</param>
            <param name="OnScreenUpperLeft">The upper-left screen offset.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="CloseShape">Whether to close the shape (polygon), or not (line).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.ToShapeDefinition(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate}},org.GraphDefined.Vanaheimr.Aegir.ScreenXY,System.UInt32,System.Boolean)">
            <summary>
            Transform the given enumeration of geo coordinates into a shape definition.
            </summary>
            <param name="GeoCoordinates">An enumeration of geo coordinates.</param>
            <param name="OnScreenUpperLeft">The upper-left screen offset.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="CloseShape">Whether to close the shape (polygon), or not (line).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.ToShapeDefinition(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate}},org.GraphDefined.Vanaheimr.Aegir.ScreenXY,System.UInt32,System.Boolean,System.Func{System.Exception,System.Exception})">
            <summary>
            Transform the given enumeration of geo coordinates into a shape definition.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="OnScreenUpperLeft">The upper-left screen offset.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="CloseShape">Whether to close the shape (polygon), or not (line).</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.Mouse2GeoCoordinate(System.Double,System.Double,System.UInt32)">
            <summary>
            Get the geo coordinate for the given mouse position on the map.
            </summary>
            <param name="MouseX">The X position of the mouse on the map.</param>
            <param name="MouseY">The Y position of the mouse on the map.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.ToGeoCoordinates(System.Collections.Generic.IEnumerable{System.Tuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Transform the given enumeration of mouse positions
            into their corresponding geo coordinates.
            </summary>
            <param name="MousePositions">An enumeration of geo coordinates.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.ToTilesXY(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{System.Tuple{System.Double,System.Double}},System.UInt32,System.Func{System.Exception,System.Exception})">
            <summary>
            Transform the given enumeration of mouse positions
            into their corresponding geo coordinates.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.TilesXY2GeoCoordinate(org.GraphDefined.Vanaheimr.Aegir.TilesXY,System.UInt32)">
            <summary>
            Get the corresponding geo coordinate for the given tile.
            </summary>
            <param name="Tile">A mapping tile.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.ToGeoCoordinate(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.TilesXY},System.UInt32)">
            <summary>
            Transform the given enumeration of tiles
            into their corresponding geo coordinates.
            </summary>
            <param name="Tiles">An enumeration of mapping tiles.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCalculations.ToGeoCoordinate(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{org.GraphDefined.Vanaheimr.Aegir.TilesXY},System.UInt32,System.Func{System.Exception,System.Exception})">
            <summary>
            Transform the given enumeration of tiles
            into their corresponding geo coordinates.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate2ScreenXYPipe">
            <summary>
            A pipe transforming an enumeration of geo coordinates
            into their corresponding screen positions.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate2ScreenXYPipe.#ctor(System.UInt32,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate},System.Collections.Generic.IEnumerator{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate})">
            <summary>
            Create a new pipe to transform an enumeration of geo coordinates
            into their corresponding screen positions.
            </summary>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate2ScreenXYArrow">
            <summary>
            An arrow transforming an enumeration of geo coordinates
            into their corresponding screen positions.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate2ScreenXYArrow.#ctor(System.UInt32,System.Func{System.Exception,System.Exception},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate})">
            <summary>
            Create a new arrow to transform an enumeration of geo coordinates
            into their corresponding screen positions.
            </summary>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate2TilesXYPipe">
            <summary>
            A pipe transforming an enumeration of geo coordinates
            into their corresponding tile identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate2TilesXYPipe.#ctor(System.UInt32,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate},System.Collections.Generic.IEnumerator{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate})">
            <summary>
            Create a new pipe to transform an enumeration of geo coordinates
            into their corresponding tile identification.
            </summary>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate2TilesXYArrow">
            <summary>
            An arrow transforming an enumeration of geo coordinates
            into their corresponding tile identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate2TilesXYArrow.#ctor(System.UInt32,System.Func{System.Exception,System.Exception},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate})">
            <summary>
            Create a new arrow to transform an enumeration of geo coordinates
            into their corresponding tile identification.
            </summary>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.SDL">
            <summary>
            A class representing a shape definition.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.SDL.Value">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.SDL.#ctor(System.String)">
            <summary>
            Create a new shape definition.
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.SDL.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinates2ShapeDefinitionPipe">
            <summary>
            A pipe transforming an enumeration of
            geo coordinates into shape definitions.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinates2ShapeDefinitionPipe.#ctor(org.GraphDefined.Vanaheimr.Aegir.ScreenXY,System.UInt32,System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate}},System.Collections.Generic.IEnumerator{System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate}})">
            <summary>
            Create a new pipe to transform an enumeration of
            geo coordinates into shape definitions.
            </summary>
            <param name="OnScreenUpperLeft">The upper-left screen offset.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="CloseShape">Whether to close the shape (polygon), or not (line).</param>
            <param name="IEnumerable">An optional IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinates2ShapeDefinitionArrow">
            <summary>
            An arrow transforming an enumeration of
            geo coordinates into shape definitions.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinates2ShapeDefinitionArrow.#ctor(org.GraphDefined.Vanaheimr.Aegir.ScreenXY,System.UInt32,System.Boolean,System.Func{System.Exception,System.Exception},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate}})">
            <summary>
            Create a new arrow to transform an enumeration of
            geo coordinates into shape definitions.
            </summary>
            <param name="OnScreenUpperLeft">The upper-left screen offset.</param>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="CloseShape">Whether to close the shape (polygon), or not (line).</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.Mouse2GeoCoordinatePipe">
            <summary>
            A pipe transforming an enumeration of mouse positions
            on the map into their corresponding geo coordinates.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Mouse2GeoCoordinatePipe.#ctor(System.UInt32,System.Collections.Generic.IEnumerable{System.Tuple{System.Double,System.Double}},System.Collections.Generic.IEnumerator{System.Tuple{System.Double,System.Double}})">
            <summary>
            Create a new pipe to transform an enumeration of mouse positions
            on the map into their corresponding geo coordinates.
            </summary>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.Mouse2GeoCoordinateArrow">
            <summary>
            An arrow transforming an enumeration of mouse positions
            on the map into their corresponding geo coordinates.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Mouse2GeoCoordinateArrow.#ctor(System.UInt32,System.Func{System.Exception,System.Exception},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{System.Tuple{System.Double,System.Double}})">
            <summary>
            Create a new arrow to transform an enumeration of mouse positions
            on the map into their corresponding geo coordinates.
            </summary>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.TilesXY2GeoCoordinatePipe">
            <summary>
            A pipe transforming an enumeration of tiles
            into their corresponding geo coordinates.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.TilesXY2GeoCoordinatePipe.#ctor(System.UInt32,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.TilesXY},System.Collections.Generic.IEnumerator{org.GraphDefined.Vanaheimr.Aegir.TilesXY})">
            <summary>
            Create a new pipe to transform an enumeration of tiles
            into their corresponding geo coordinates.
            </summary>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.TilesXY2GeoCoordinateArrow">
            <summary>
            An arrow transforming an enumeration of tiles
            into their corresponding geo coordinates.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.TilesXY2GeoCoordinateArrow.#ctor(System.UInt32,System.Func{System.Exception,System.Exception},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{org.GraphDefined.Vanaheimr.Aegir.TilesXY})">
            <summary>
            Create a new arrow to transform an enumeration of tiles
            into their corresponding geo coordinates.
            </summary>
            <param name="ZoomLevel">The current zoom level of the Aegir map.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.Altitude">
            <summary>
            An altitude.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.Altitude.Value">
            <summary>
            The value of the altitude.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.#ctor(System.Double)">
            <summary>
            Create a new altitude.
            </summary>
            <param name="Value">The value of the altitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.DistanceTo(org.GraphDefined.Vanaheimr.Aegir.Altitude)">
            <summary>
            A method to calculate the distance between two altitude.
            </summary>
            <param name="OtherAltitude">Another Altitude.</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.op_Equality(org.GraphDefined.Vanaheimr.Aegir.Altitude,org.GraphDefined.Vanaheimr.Aegir.Altitude)">
            <summary>
            Compares two altitudes for equality.
            </summary>
            <param name="Altitude1">A altitude.</param>
            <param name="Altitude2">Another altitude.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.Altitude,org.GraphDefined.Vanaheimr.Aegir.Altitude)">
            <summary>
            Compares two vertices for inequality.
            </summary>
            <param name="Altitude1">A altitude.</param>
            <param name="Altitude2">Another altitude.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.op_LessThan(org.GraphDefined.Vanaheimr.Aegir.Altitude,org.GraphDefined.Vanaheimr.Aegir.Altitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Altitude1">A altitude.</param>
            <param name="Altitude2">Another altitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Aegir.Altitude,org.GraphDefined.Vanaheimr.Aegir.Altitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Altitude1">A altitude.</param>
            <param name="Altitude2">Another altitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.op_GreaterThan(org.GraphDefined.Vanaheimr.Aegir.Altitude,org.GraphDefined.Vanaheimr.Aegir.Altitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Altitude1">A altitude.</param>
            <param name="Altitude2">Another altitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Aegir.Altitude,org.GraphDefined.Vanaheimr.Aegir.Altitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Altitude1">A altitude.</param>
            <param name="Altitude2">Another altitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.CompareTo(org.GraphDefined.Vanaheimr.Aegir.Altitude)">
            <summary>
            Compares two altitudes.
            </summary>
            <param name="Altitude">Another altitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.Equals(org.GraphDefined.Vanaheimr.Aegir.Altitude)">
            <summary>
            Compares two altitudes for equality.
            </summary>
            <param name="Altitude">Another altitude.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Altitude.ToString">
            <summary>
            Returns a string representation of the given object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.DistanceMetricTypes">
            <summary>
            The distance metric.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.DistanceMetricTypes.unkown">
            <summary>
            Unknown distance metric.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.DistanceMetricTypes.air">
            <summary>
            Air-line distance.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.DistanceMetricTypes.foot">
            <summary>
            Walking distance.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.DistanceMetricTypes.bike">
            <summary>
            Distance via bikes.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.DistanceMetricTypes.car">
            <summary>
            Distance for (self-driving) cars.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.WithDistance`1">
            <summary>
            An element with distance information.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.WithDistance`1.Element">
            <summary>
            An element.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.WithDistance`1.Distance">
            <summary>
            The distance to the given element.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.WithDistance`1.DistanceMetric">
            <summary>
            The distance metric towards the given element.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.WithDistance`1.TravelTime">
            <summary>
            The expected time to reach the given element.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.WithDistance`1.#ctor(`0,System.Double,System.Nullable{org.GraphDefined.Vanaheimr.Aegir.DistanceMetricTypes},System.Nullable{System.TimeSpan})">
            <summary>
            An element with distance information.
            </summary>
            <param name="Element">An element.</param>
            <param name="Distance">The distance to the given News.</param>
            <param name="DistanceMetric">The distance metric towards the given News.</param>
            <param name="TravelTime">The expected time to reach the given News.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.WithDistance`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinateExtensions">
            <summary>
            JSON I/O.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinateExtensions.ToJSON(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Return a JSON representation of the given GeoLocation.
            </summary>
            <param name="GeoLocation">A geographical location.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinateExtensions.ToJSON(System.Nullable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate})">
            <summary>
            Return a JSON representation of the given GeoLocation.
            </summary>
            <param name="GeoLocation">A geographical location.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinateExtensions.ToJSON(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.String)">
            <summary>
            Return a JSON representation of the given GeoLocation.
            </summary>
            <param name="GeoLocation">A geographical location.</param>
            <param name="JPropertyKey">The name of the JSON property key to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinateExtensions.ToJSON(System.Nullable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate},System.String)">
            <summary>
            Return a JSON representation of the given GeoLocation.
            </summary>
            <param name="GeoLocation">A GeoLocation.</param>
            <param name="JPropertyKey">The name of the JSON property key to use.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate">
            <summary>
            A geographical coordinate or position on a map.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.IsDecimal_RegExprString">
            <summary>
            The regular expression init string for matching decimal numbers.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.IsSignedDecimal_RegExprString">
            <summary>
            The regular expression init string for matching signed decimal numbers.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.MayBeSeperator_RegExprString">
            <summary>
            The regular expression init string for matching comma seperators.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.IsDecimalGeoPosition_RegExprString">
            <summary>
            The regular expression init string for matching decimal geo positions/coordinates.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.IsSignedDecimalGeoPosition_RegExprString">
            <summary>
            The regular expression init string for matching signed decimal geo positions/coordinates.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.IsSexagesimalGeoPosition_RegExprString">
            <summary>
            The regular expression init string for matching sexagesimal geo positions/coordinates.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.IsDecimalRegExpr">
            <summary>
            A regular expression for matching decimal geo positions/coordinates.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.IsDecimalGeoPositionRegExpr">
            <summary>
            A regular expression for matching decimal geo positions/coordinates.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.IsSignedDecimalGeoPositionRegExpr">
            <summary>
            A regular expression for matching signed decimal geo positions/coordinates.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.IsSexagesimalGeoPositionRegExpr">
            <summary>
            A regular expression for matching sexagesimal geo positions/coordinates.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Planet">
            <summary>
            The planet.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Latitude">
            <summary>
            The Latitude (south to nord).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Longitude">
            <summary>
            The Longitude (parallel to equator).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Altitude">
            <summary>
            The Altitude.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Projection">
            <summary>
            The gravitational model.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.#ctor(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,System.Nullable{org.GraphDefined.Vanaheimr.Aegir.Altitude},org.GraphDefined.Vanaheimr.Aegir.GravitationalModel,org.GraphDefined.Vanaheimr.Aegir.Planets)">
            <summary>
            Create a new geographical coordinate or position on a map.
            </summary>
            <param name="Latitude">The Latitude (south to nord).</param>
            <param name="Longitude">The Longitude (parallel to equator).</param>
            <param name="Altitude">The (optional) Altitude.</param>
            <param name="Projection">The gravitational model or projection of the geo coordinates.</param>
            <param name="Planet">The planet.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Zero">
            <summary>
            The zero coordinate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Create(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,System.Nullable{org.GraphDefined.Vanaheimr.Aegir.Altitude})">
            <summary>
            Create a new geographical coordinate or position on a map.
            </summary>
            <param name="Latitude">The Latitude (south to nord).</param>
            <param name="Longitude">The Longitude (parallel to equator).</param>
            <param name="Altitude">The (optional) Altitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Create(System.Nullable{org.GraphDefined.Vanaheimr.Aegir.Latitude},System.Nullable{org.GraphDefined.Vanaheimr.Aegir.Longitude},System.Nullable{org.GraphDefined.Vanaheimr.Aegir.Altitude})">
            <summary>
            Create a new geographical coordinate or position on a map.
            </summary>
            <param name="Latitude">The Latitude (south to nord).</param>
            <param name="Longitude">The Longitude (parallel to equator).</param>
            <param name="Altitude">The (optional) Altitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.FromLatLng(System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Create a new geographical coordinate or position on a map.
            </summary>
            <param name="Latitude">The Latitude (south to nord).</param>
            <param name="Longitude">The Longitude (parallel to equator).</param>
            <param name="Altitude">The (optional) Altitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.FromLngLat(System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Create a new geographical coordinate or position on a map.
            </summary>
            <param name="Longitude">The Longitude (parallel to equator).</param>
            <param name="Latitude">The Latitude (south to nord).</param>
            <param name="Altitude">The (optional) Altitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Parse(System.String,System.String,System.String)">
            <summary>
            Parse the given latitude and longitude string representations.
            </summary>
            <param name="LatitudeString">The Latitude (south to nord).</param>
            <param name="LongitudeString">The Longitude (parallel to equator).</param>
            <param name="AltitudeString">The Altitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Parse(System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Parse the given latitude and longitude string representations.
            </summary>
            <param name="LatitudeDouble">The Latitude (south to nord).</param>
            <param name="LongitudeDouble">The Longitude (parallel to equator).</param>
            <param name="AltitudeDouble">The Altitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.TryParse(System.String,System.String,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate@)">
            <summary>
            Parse the given latitude and longitude string representations.
            </summary>
            <param name="LatitudeString">The Latitude (south to nord).</param>
            <param name="LongitudeString">The Longitude (parallel to equator).</param>
            <param name="GeoCoordinate">The resulting geo coordinate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.TryParse(System.String,System.String,System.String,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate@)">
            <summary>
            Parse the given latitude and longitude string representations.
            </summary>
            <param name="LatitudeString">The Latitude (south to nord).</param>
            <param name="LongitudeString">The Longitude (parallel to equator).</param>
            <param name="AltitudeString">The Altitude.</param>
            <param name="GeoCoordinate">The resulting geo coordinate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.ParseString(System.String)">
            <summary>
            Parses the given string as a geo position/coordinate.
            </summary>
            <param name="GeoString">A string to parse.</param>
            <returns>A new geo position or null.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.ParseString``1(System.String,System.Func{org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,``0})">
            <summary>
            Parses the given string as a geo position/coordinate.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="GeoString">A string to parse.</param>
            <returns>A new geo position or null.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.TryParseString(System.String,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate@)">
            <summary>
            Attempts to parse the given string as a geo position/coordinate.
            </summary>
            <param name="GeoString">A string to parse.</param>
            <param name="GeoCoordinate">The parsed geo coordinate.</param>
            <returns>True if success, false otherwise</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.TryParseString(System.String,System.Action{org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude})">
            <summary>
            Attempts to parse the given string as a geo position/coordinate.
            </summary>
            <param name="GeoString">A string to parse.</param>
            <param name="Processor">A delegate to process the parsed latitude and longitude.</param>
            <returns>True if success, false otherwise</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.TryParseString``1(System.String,System.Func{org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,``0},``0@)">
            <summary>
            Attempts to parse the given string as a geo position/coordinate.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="GeoString">A string to parse.</param>
            <param name="Processor">A delegate to process the parsed latitude and longitude.</param>
            <param name="Value">The processed value.</param>
            <returns>True if success, false otherwise</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.ToJSON">
            <summary>
            Return a JSON representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.DistanceTo(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Calculate the distance between two geo coordinates.
            </summary>
            <param name="Target">Another geo coordinate</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.DistanceKM(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.UInt32)">
            <summary>
            Calculate the distance between two geo coordinates in kilometers.
            </summary>
            <remarks>See also: http://www.movable-type.co.uk/scripts/latlong.html and http://en.wikipedia.org/wiki/Haversine_formula </remarks>
            <param name="Target">Another geo coordinate</param>
            <param name="EarthRadiusInKM">The currently accepted (WGS84) earth radius at the equator is 6378.137 km and 6356.752 km at the polar caps. For aviation purposes the FAI uses a radius of 6371.0 km.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.MidPoint(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Returns the midpoint between this point and the supplied point.
            </summary>
            <remarks>
            http://www.movable-type.co.uk/scripts/latlong.html
            http://mathforum.org/library/drmath/view/51822.html
            </remarks>
            <param name="Target">Anothre geo coordinate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Swap(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate@,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate@)">
            <summary>
            Swaps two pixels.
            </summary>
            <param name="Pixel1">The first pixel.</param>
            <param name="Pixel2">The second pixel.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.ToGeoString(org.GraphDefined.Vanaheimr.Aegir.GeoFormat,System.UInt16)">
            <summary>
            Returns a user-friendly string representaion.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.op_Equality(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Compares two geo coordinates for equality.
            </summary>
            <param name="GeoCoordinate1">A geo coordinate.</param>
            <param name="GeoCoordinate2">Another geo coordinate.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Compares two geo coordinates for inequality.
            </summary>
            <param name="GeoCoordinate1">A geo coordinate.</param>
            <param name="GeoCoordinate2">Another geo coordinate.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.CompareTo(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Compares two geo coordinates.
            </summary>
            <param name="GeoCoordinate">Another geo coordinate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Equals(System.Object)">
            <summary>
            Compares two geo coordinates for equality.
            </summary>
            <param name="Object">Another geo coordinate.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Equals(org.GraphDefined.Vanaheimr.Aegir.IGeoCoordinate)">
            <summary>
            Compares two geo coordinates for equality.
            </summary>
            <param name="IGeoCoordinate">Another geo coordinate.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.Equals(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Compares two geo coordinates for equality.
            </summary>
            <param name="GeoCoordinate">Another geo coordinate.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate.ToString">
            <summary>
            Returns a string representation of the given object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoHashExtensions">
            <summary>
            Extension methods for the GeoHash data structure.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHashExtensions.ToGeoHash(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.Byte)">
            <summary>
            Transform the given geo coordinate into a geohash64.
            </summary>
            <param name="GeoCoordinate">The geo coordinate.</param>
            <param name="Precision">An optional precision aka number of characters of the resulting geohash.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoHash">
            <summary>
            A base32-encoded alphanumeric geohash.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoHash.GeoHashAlphabet">
            <summary>
            Special GeoHash Base32 alphabet
            </summary>
            <see cref="!:http://en.wikipedia.org/wiki/Geohash"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoHash.InternalGeoHash">
            <summary>
            The internal geohash.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash.Digits">
            <summary>
            Rounds the double-precision value to the given number of fractional digits.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash.Latitude">
            <summary>
            The latitude (south to nord).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash.Longitude">
            <summary>
            The longitude (parallel to equator).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash.Value">
            <summary>
            Returns the value of the geohash.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.Byte)">
            <summary>
            Create a new base32-encoded alphanumeric geohash.
            </summary>
            <param name="GeoCoordinate">A geocoordinate.</param>
            <param name="Precision">An optional precision aka number of characters of the resulting geohash.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.#ctor(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,System.Byte)">
            <summary>
            Create a new base32-encoded alphanumeric geohash.
            </summary>
            <param name="Latitude">The latitude.</param>
            <param name="Longitude">The longitude.</param>
            <param name="Precision">An optional precision aka number of characters of the resulting geohash.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.Encode(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,System.Byte)">
            <summary>
            Encode the given latitude and longitude as geohash.
            </summary>
            <param name="Latitude">The latitude.</param>
            <param name="Longitude">The longitude.</param>
            <param name="Precision">An optional precision aka number of characters of the resulting geohash.</param>
            <returns>The latitude and longitude encoded as geohash.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.Decode``1(System.Func{org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,``0},System.Byte)">
            <summary>
            Decode the geohash into latitude and longitude using the given
            delegate to transfor it into the resulting data structure.
            </summary>
            <typeparam name="T">The type of the resulting data structure.</typeparam>
            <param name="Processor">A delegate to transform the decoded latitude and longitude into the resulting data structure.</param>
            <param name="Digits">Rounds the double-precision latitude and longitude to the given number of fractional digits.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.CalculateAdjacent(org.GraphDefined.Vanaheimr.Aegir.GeoHash.Direction)">
            <summary>
            Calculate the adjacent geohashes.
            </summary>
            <param name="Direction">The direction.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.op_Equality(org.GraphDefined.Vanaheimr.Aegir.GeoHash,org.GraphDefined.Vanaheimr.Aegir.GeoHash)">
            <summary>
            Compares two geohashs for equality.
            </summary>
            <param name="GeoHash1">A geohash.</param>
            <param name="GeoHash2">Another geohash.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.GeoHash,org.GraphDefined.Vanaheimr.Aegir.GeoHash)">
            <summary>
            Compares two vertices for inequality.
            </summary>
            <param name="GeoHash1">A geohash.</param>
            <param name="GeoHash2">Another geohash.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.CompareTo(org.GraphDefined.Vanaheimr.Aegir.GeoHash)">
            <summary>
            Compares two geohashes.
            </summary>
            <param name="GeoHash">Another geohash.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.Equals(org.GraphDefined.Vanaheimr.Aegir.IGeoCoordinate)">
            <summary>
            Compares two geo coordinates for equality.
            </summary>
            <param name="IGeoCoordinate">Another geo coordinate.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.Equals(org.GraphDefined.Vanaheimr.Aegir.GeoHash)">
            <summary>
            Compares two geohashes for equality.
            </summary>
            <param name="GeoHash">Another geohash.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash.ToString">
            <summary>
            Returns a string representation of the given object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoHash32Extensions">
            <summary>
            Extension methods for the GeoHash32 data structure.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32Extensions.ToGeoHash32(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.Byte)">
            <summary>
            Transform the given geo coordinate into a geohash32.
            </summary>
            <param name="GeoCoordinate">The geo coordinate.</param>
            <param name="Precision">TAn optional precision aka number of bits of the resulting geohash (1-16 bit).</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoHash32">
            <summary>
            An UInt32-encoded geohash, which has a
            precision of approx 611 m = 40075m/2^16.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.InternalGeoHash">
            <summary>
            The internal geohash.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.Digits">
            <summary>
            Rounds the double-precision value to the given number of fractional digits.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.Latitude">
            <summary>
            The latitude (south to nord).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.Longitude">
            <summary>
            The longitude (parallel to equator).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.Value">
            <summary>
            Returns the value of the geohash.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.Byte)">
            <summary>
            Create a new base32-encoded alphanumeric geohash.
            </summary>
            <param name="GeoCoordinate">A geocoordinate.</param>
            <param name="Precision">An optional precision aka number of bits of the resulting geohash (1-16 bit).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.#ctor(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,System.Byte)">
            <summary>
            Create a new base32-encoded alphanumeric geohash.
            </summary>
            <param name="Latitude">The latitude.</param>
            <param name="Longitude">The longitude.</param>
            <param name="Precision">An optional precision aka number of bits of the resulting geohash (1-16 bit).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.Encode(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,System.Byte)">
            <summary>
            Encode the given latitude and longitude as geohash.
            </summary>
            <param name="Latitude">The latitude.</param>
            <param name="Longitude">The longitude.</param>
            <param name="Precision">An optional precision aka number of bits of the resulting geohash.</param>
            <returns>The latitude and longitude encoded as geohash.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.Decode``1(System.Func{org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,``0},System.Byte)">
            <summary>
            Decode the geohash into latitude and longitude using the given
            delegate to transfor it into the resulting data structure.
            </summary>
            <typeparam name="T">The type of the resulting data structure.</typeparam>
            <param name="Processor">A delegate to transform the decoded latitude and longitude into the resulting data structure.</param>
            <param name="Digits">Rounds the double-precision latitude and longitude to the given number of fractional digits.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.op_Equality(org.GraphDefined.Vanaheimr.Aegir.GeoHash32,org.GraphDefined.Vanaheimr.Aegir.GeoHash32)">
            <summary>
            Compares two geohashs for equality.
            </summary>
            <param name="GeoHash321">A geohash.</param>
            <param name="GeoHash322">Another geohash.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.GeoHash32,org.GraphDefined.Vanaheimr.Aegir.GeoHash32)">
            <summary>
            Compares two vertices for inequality.
            </summary>
            <param name="GeoHash321">A geohash.</param>
            <param name="GeoHash322">Another geohash.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.CompareTo(org.GraphDefined.Vanaheimr.Aegir.GeoHash32)">
            <summary>
            Compares two geohashes.
            </summary>
            <param name="GeoHash32">Another geohash.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.Equals(org.GraphDefined.Vanaheimr.Aegir.IGeoCoordinate)">
            <summary>
            Compares two geo coordinates for equality.
            </summary>
            <param name="IGeoCoordinate">Another geo coordinate.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.Equals(org.GraphDefined.Vanaheimr.Aegir.GeoHash32)">
            <summary>
            Compares two geohashes for equality.
            </summary>
            <param name="GeoHash32">Another geohash.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash32.ToString">
            <summary>
            Returns a string representation of the given object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoHash64Extensions">
            <summary>
            Extension methods for the GeoHash64 data structure.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64Extensions.ToGeoHash64(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.Byte)">
            <summary>
            Transform the given geo coordinate into a geohash64.
            </summary>
            <param name="GeoCoordinate">The geo coordinate.</param>
            <param name="Precision">An optional precision aka number of bits of the resulting geohash (1-32 bit).</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoHash64">
            <summary>
            An UInt64-encoded geohash, which has a
            precision of approx 9,3 mm = 40075m/2^32.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.InternalGeoHash">
            <summary>
            The internal geohash.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.Digits">
            <summary>
            Rounds the double-precision value to the given number of fractional digits.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.Latitude">
            <summary>
            The latitude (south to nord).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.Longitude">
            <summary>
            The longitude (parallel to equator).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.Value">
            <summary>
            Returns the value of the geohash.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.Byte)">
            <summary>
            Create a new base32-encoded alphanumeric geohash.
            </summary>
            <param name="GeoCoordinate">A geocoordinate.</param>
            <param name="Precision">An optional precision aka number of bits of the resulting geohash (1-32 bit).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.#ctor(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,System.Byte)">
            <summary>
            Create a new base32-encoded alphanumeric geohash.
            </summary>
            <param name="Latitude">The latitude.</param>
            <param name="Longitude">The longitude.</param>
            <param name="Precision">An optional precision aka number of bits of the resulting geohash (1-32 bit).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.Encode(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,System.Byte)">
            <summary>
            Encode the given latitude and longitude as geohash.
            </summary>
            <param name="Latitude">The latitude.</param>
            <param name="Longitude">The longitude.</param>
            <param name="Precision">An optional precision aka number of bits of the resulting geohash (1-32 bit).</param>
            <returns>The latitude and longitude encoded as geohash.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.Decode``1(System.Func{org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,``0},System.Byte)">
            <summary>
            Decode the geohash into latitude and longitude using the given
            delegate to transfor it into the resulting data structure.
            </summary>
            <typeparam name="T">The type of the resulting data structure.</typeparam>
            <param name="Processor">A delegate to transform the decoded latitude and longitude into the resulting data structure.</param>
            <param name="Digits">Rounds the double-precision latitude and longitude to the given number of fractional digits.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.op_Equality(org.GraphDefined.Vanaheimr.Aegir.GeoHash64,org.GraphDefined.Vanaheimr.Aegir.GeoHash64)">
            <summary>
            Compares two geohashs for equality.
            </summary>
            <param name="GeoHash641">A geohash.</param>
            <param name="GeoHash642">Another geohash.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.GeoHash64,org.GraphDefined.Vanaheimr.Aegir.GeoHash64)">
            <summary>
            Compares two vertices for inequality.
            </summary>
            <param name="GeoHash641">A geohash.</param>
            <param name="GeoHash642">Another geohash.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.CompareTo(org.GraphDefined.Vanaheimr.Aegir.GeoHash64)">
            <summary>
            Compares two geohashes.
            </summary>
            <param name="GeoHash64">Another geohash.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.Equals(org.GraphDefined.Vanaheimr.Aegir.IGeoCoordinate)">
            <summary>
            Compares two geo coordinates for equality.
            </summary>
            <param name="IGeoCoordinate">Another geo coordinate.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.Equals(org.GraphDefined.Vanaheimr.Aegir.GeoHash64)">
            <summary>
            Compares two geohashes for equality.
            </summary>
            <param name="GeoHash64">Another geohash.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoHash64.ToString">
            <summary>
            Returns a string representation of the given object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoPositions">
            <summary>
            Geographical positions (e.g. for debugging).
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoPositions.Germany">
            <summary>
            Geographical positions in Germany.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoPositions.Germany.Berlin">
            <summary>
            The geographical position of Berlin, Germany.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoPositions.Germany.Jena">
            <summary>
            The geographical position of Jena, Germany.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.IGeoCoordinate">
            <summary>
            The interface for all latitude/longitude/altitude based geo coordinates.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.IGeoCoordinate.Latitude">
            <summary>
            The latitude (south to nord).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.IGeoCoordinate.Longitude">
            <summary>
            The longitude (parallel to equator).
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.IGeoCoordinate.ToString">
            <summary>
            Returns a string representation of the given object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.IGeoHashExtensions">
            <summary>
            Extensionmethods for the IGeoHash interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.IGeoHashExtensions.ToGeoCoordinate``1(org.GraphDefined.Vanaheimr.Aegir.IGeoHash{``0},System.Byte)">
            <summary>
            Decode this geohash to a geocoordinate.
            </summary>
            <param name="Digits">Rounds the double-precision value to the given number of fractional digits.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.IGeoHash`1">
            <summary>
            The common interface for all geohashes.
            </summary>
            <typeparam name="T">The type of the geohash.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.IGeoHash`1.Decode``1(System.Func{org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Longitude,``0},System.Byte)">
            <summary>
            Decode the geohash into latitude and longitude using the given
            delegate to transfor it into the resulting data structure.
            </summary>
            <typeparam name="TReturn">The type of the resulting data structure.</typeparam>
            <param name="Processor">A delegate to transform the decoded latitude and longitude into the resulting data structure.</param>
            <param name="Digits">Rounds the double-precision latitude and longitude to the given number of fractional digits.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.IGeoHash`1.Value">
            <summary>
            The value of the geohash.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.IGeoPosition">
            <summary>
            The interface for anything having a position.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.IGeoPosition.Latitude">
            <summary>
            The latitude of something.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.IGeoPosition.Longitude">
            <summary>
            The longitude of something.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.IGeoPosition.Altitude">
            <summary>
            The altitude of something.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.IReadonlyGeoPosition">
            <summary>
            The interface for anything having a position.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.IReadonlyGeoPosition.Latitude">
            <summary>
            The latitude of something.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.IReadonlyGeoPosition.Longitude">
            <summary>
            The longitude of something.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.IReadonlyGeoPosition.Altitude">
            <summary>
            The altitude of something.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate">
            <summary>
            A geographical coordinate with additional information.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.GeoCoordinate">
            <summary>
            The geographical coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.Description">
            <summary>
            An optional description of the geographical coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.AttachedImages">
            <summary>
            Optional images attached to this geographical coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.AttachedFiles">
            <summary>
            Optional files attached to this geographical coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.CustomData">
            <summary>
            Optional custom data at this geographical coordinate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Illias.I18NString,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a new geographical coordinate with additional information.
            </summary>
            <param name="GeoCoordinate">The geographical coordinate.</param>
            <param name="Description">An optional description of the geographical coordinate.</param>
            <param name="AttachedImages">Optional images attached to this geographical coordinate.</param>
            <param name="AttachedFiles">Optional files attached to this geographical coordinate.</param>
            <param name="CustomData">Optional custom data at this geographical coordinate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.ToJSON(org.GraphDefined.Vanaheimr.Illias.CustomJObjectSerializerDelegate{org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate})">
            <summary>
            Return a JSON representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.TryParseJSON(Newtonsoft.Json.Linq.JObject,org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate@,System.String@)">
            <summary>
            Try to parse the given communicator group JSON.
            </summary>
            <param name="JSONObject">A JSON object.</param>
            <param name="NamedGeoCoordinate">The parsed named geo coordinate.</param>
            <param name="ErrorResponse">An error message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.op_Equality(org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate)">
            <summary>
            Compares two latitudes for equality.
            </summary>
            <param name="NamedGeoCoordinate1">A geographical coordinate with additional information.</param>
            <param name="NamedGeoCoordinate2">Another geographical coordinate with additional information.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate)">
            <summary>
            Compares two vertices for inequality.
            </summary>
            <param name="NamedGeoCoordinate1">A geographical coordinate with additional information.</param>
            <param name="NamedGeoCoordinate2">Another geographical coordinate with additional information.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.op_LessThan(org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="NamedGeoCoordinate1">A geographical coordinate with additional information.</param>
            <param name="NamedGeoCoordinate2">Another geographical coordinate with additional information.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="NamedGeoCoordinate1">A geographical coordinate with additional information.</param>
            <param name="NamedGeoCoordinate2">Another geographical coordinate with additional information.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.op_GreaterThan(org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="NamedGeoCoordinate1">A geographical coordinate with additional information.</param>
            <param name="NamedGeoCoordinate2">Another geographical coordinate with additional information.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="NamedGeoCoordinate1">A geographical coordinate with additional information.</param>
            <param name="NamedGeoCoordinate2">Another geographical coordinate with additional information.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.CompareTo(org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate)">
            <summary>
            Compares two latitudes.
            </summary>
            <param name="NamedGeoCoordinate">Another geographical coordinate with additional information.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.Equals(org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate)">
            <summary>
            Compares two latitudes for equality.
            </summary>
            <param name="NamedGeoCoordinate">Another geographical coordinate with additional information.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.NamedGeoCoordinate.ToString">
            <summary>
            Returns a string representation of the given object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.Latitude">
            <summary>
            A geographical latitude.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.Latitude.Value">
            <summary>
            Returns the value of the latitude.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.#ctor(System.Double)">
            <summary>
            Create a new latitude.
            </summary>
            <param name="Value">The value of the latitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.DistanceTo(org.GraphDefined.Vanaheimr.Aegir.Latitude)">
            <summary>
            A method to calculate the distance between two latitudes.
            </summary>
            <param name="OtherLatitude">Another latitude.</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.op_Equality(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Latitude)">
            <summary>
            Compares two latitudes for equality.
            </summary>
            <param name="Latitude1">A latitude.</param>
            <param name="Latitude2">Another latitude.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Latitude)">
            <summary>
            Compares two vertices for inequality.
            </summary>
            <param name="Latitude1">A latitude.</param>
            <param name="Latitude2">Another latitude.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.op_LessThan(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Latitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Latitude1">A latitude.</param>
            <param name="Latitude2">Another latitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Latitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Latitude1">A latitude.</param>
            <param name="Latitude2">Another latitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.op_GreaterThan(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Latitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Latitude1">A latitude.</param>
            <param name="Latitude2">Another latitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Aegir.Latitude,org.GraphDefined.Vanaheimr.Aegir.Latitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Latitude1">A latitude.</param>
            <param name="Latitude2">Another latitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.CompareTo(org.GraphDefined.Vanaheimr.Aegir.Latitude)">
            <summary>
            Compares two latitudes.
            </summary>
            <param name="Latitude">Another latitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.Equals(org.GraphDefined.Vanaheimr.Aegir.Latitude)">
            <summary>
            Compares two latitudes for equality.
            </summary>
            <param name="Latitude">Another latitude.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.ToString">
            <summary>
            Returns a string representation of the given object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of the given object.
            </summary>
            <param name="FormatProvider">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Latitude.ToString(System.String)">
            <summary>
            Returns a string representation of the given object.
            </summary>
            <param name="Format">A composite format string</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.Longitude">
            <summary>
            A geographical longitude.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.Longitude.Value">
            <summary>
            Returns the value of the longitude.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.#ctor(System.Double)">
            <summary>
            Create a new longitude.
            </summary>
            <param name="Value">The value of the longitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.DistanceTo(org.GraphDefined.Vanaheimr.Aegir.Longitude)">
            <summary>
            A method to calculate the distance between two longitude.
            </summary>
            <param name="OtherLongitude">Another longitude.</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.op_Equality(org.GraphDefined.Vanaheimr.Aegir.Longitude,org.GraphDefined.Vanaheimr.Aegir.Longitude)">
            <summary>
            Compares two longitudes for equality.
            </summary>
            <param name="Longitude1">A longitude.</param>
            <param name="Longitude2">Another longitude.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.Longitude,org.GraphDefined.Vanaheimr.Aegir.Longitude)">
            <summary>
            Compares two vertices for inequality.
            </summary>
            <param name="Longitude1">A longitude.</param>
            <param name="Longitude2">Another longitude.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.op_LessThan(org.GraphDefined.Vanaheimr.Aegir.Longitude,org.GraphDefined.Vanaheimr.Aegir.Longitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Longitude1">A longitude.</param>
            <param name="Longitude2">Another longitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Aegir.Longitude,org.GraphDefined.Vanaheimr.Aegir.Longitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Longitude1">A longitude.</param>
            <param name="Longitude2">Another longitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.op_GreaterThan(org.GraphDefined.Vanaheimr.Aegir.Longitude,org.GraphDefined.Vanaheimr.Aegir.Longitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Longitude1">A longitude.</param>
            <param name="Longitude2">Another longitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Aegir.Longitude,org.GraphDefined.Vanaheimr.Aegir.Longitude)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Longitude1">A longitude.</param>
            <param name="Longitude2">Another longitude.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.CompareTo(org.GraphDefined.Vanaheimr.Aegir.Longitude)">
            <summary>
            Compares two longitudes.
            </summary>
            <param name="Longitude">Another longitude.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.Equals(org.GraphDefined.Vanaheimr.Aegir.Longitude)">
            <summary>
            Compares two longitudes for equality.
            </summary>
            <param name="Longitude">Another longitude.</param>
            <returns>True if both are equal; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.ToString">
            <summary>
            Returns a string representation of the given object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of the given object.
            </summary>
            <param name="FormatProvider">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.Longitude.ToString(System.String)">
            <summary>
            Returns a string representation of the given object.
            </summary>
            <param name="Format">A composite format string</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.NumericExtensions">
            <summary>
            Convert to Radians.
            </summary>
            <param name="val">The value to convert to radians</param>
            <returns>The value in radians</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.Planets">
            <summary>
            Planets as GPS prefixes.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.Planets.Earth">
            <summary>
            You home planet.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.Planets.Moon">
            <summary>
            Ok, not a real planet, but maybe the first rock in the sky having a Tesla charging station.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.Planets.Mars">
            <summary>
            The red planet.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoFenceExtensions">
            <summary>
            JSON I/O.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoFenceExtensions.ToJSON(System.Nullable{org.GraphDefined.Vanaheimr.Aegir.GeoFence})">
            <summary>
            Return a JSON representation of the given GeoLocation.
            </summary>
            <param name="GeoLocation">A geographical location.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoFenceExtensions.ToJSON(org.GraphDefined.Vanaheimr.Aegir.GeoFence,System.String)">
            <summary>
            Return a JSON representation of the given GeoLocation.
            </summary>
            <param name="GeoFence">A geographical location.</param>
            <param name="JPropertyKey">The name of the JSON property key to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoFenceExtensions.ToJSON(System.Nullable{org.GraphDefined.Vanaheimr.Aegir.GeoFence},System.String)">
            <summary>
            Return a JSON representation of the given GeoLocation.
            </summary>
            <param name="GeoLocation">A GeoLocation.</param>
            <param name="JPropertyKey">The name of the JSON property key to use.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoFence">
            <summary>
            A geo fenche.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoFence.GeoCoordinates">
            <summary>
            An enumeration of geo coordinates.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoFence.Distance">
            <summary>
            An optional geographical distance.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoFence.Description">
            <summary>
            An optional description.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoFence.#ctor(org.GraphDefined.Vanaheimr.Illias.Meter,org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Create a new geo fence.
            </summary>
            <param name="Distance">A geographical distance.</param>
            <param name="Description">An optional description.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoFence.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate},System.Nullable{org.GraphDefined.Vanaheimr.Illias.Meter},org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Create a new geo fence.
            </summary>
            <param name="GeoCoordinates">An enumeration of geo coordinates.</param>
            <param name="Distance">An optional geographical distance.</param>
            <param name="Description">An optional description.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoFence.ToJSON">
            <summary>
            Return a JSON representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoFence.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoFence.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoFormat">
            <summary>
            Different representations of geographical coordinates/positions.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoFormat.Decimal">
            <summary>
            A decimal (h ddd.dddddd°) representation of a geographical position using the World Geodetic System 84 (WGS 84),
            e.g. 49.449030° N, 11.074880° E
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Aegir.GeoFormat.Sexagesimal">
            <summary>
            A sexagesimal (h dd° mm' ss.s'' or degrees, minutes, secondes) representation of a geographical position,
            e.g. 49° 26' 56.5'' N, 11° 4' 29.6'' E
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoJSONHelper">
            <summary>
            http://www.geojson.org/geojson-spec.html
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoJSONHelper.DouglasPeuckerReduction(System.Collections.Generic.IList{org.GraphDefined.Vanaheimr.Aegir.Point},System.Double)">
            <summary>
            Uses the Douglas Peucker algorithim to reduce the number of points.
            https://gist.github.com/oliverheilig/7777382
            </summary>
            <param name="Points">The points.</param>
            <param name="Tolerance">The tolerance.</param>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoJSONHelper.DouglasPeuckerReduction(System.Collections.Generic.IList{org.GraphDefined.Vanaheimr.Aegir.Point},System.Int32,System.Int32,System.Double,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Douglases the peucker reduction.
            https://gist.github.com/oliverheilig/7716793
            </summary>
            <param name="points">The points.</param>
            <param name="firstPoint">The first point.</param>
            <param name="lastPoint">The last point.</param>
            <param name="tolerance">The tolerance.</param>
            <param name="pointIndexsToKeep">The point indexs to keep.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoJSONHelper.PerpendicularDistance(org.GraphDefined.Vanaheimr.Aegir.Point,org.GraphDefined.Vanaheimr.Aegir.Point,org.GraphDefined.Vanaheimr.Aegir.Point)">
            <summary>
            The distance of a point from a line made from point1 and point2.
            </summary>
            <param name="pt1">The PT1.</param>
            <param name="pt2">The PT2.</param>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.MultiPointFeature">
            <summary>
            http://www.geojson.org/geojson-spec.html
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.MultiPointFeature.GeoCoordinates">
            <summary>
            The geo coordinates of this feature.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.MultiPointFeature.Parse(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Parse the given JSON as GeoJSON.
            </summary>
            <param name="GeoJSON">A valid GeoJSON JSON.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.LineStringFeature">
            <summary>
            http://www.geojson.org/geojson-spec.html
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.LineStringFeature.GeoCoordinates">
            <summary>
            The geo coordinates of this feature.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.LineStringFeature.Parse(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Parse the given JSON as GeoJSON.
            </summary>
            <param name="GeoJSON">A valid GeoJSON JSON.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.PointFeature">
            <summary>
            http://www.geojson.org/geojson-spec.html
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.PointFeature.GeoCoordinate">
            <summary>
            The geo coordinates of this feature.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.PointFeature.Parse(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Parse the given JSON as GeoJSON.
            </summary>
            <param name="GeoJSON">A valid GeoJSON JSON.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.MultiLineStringFeature">
            <summary>
            http://www.geojson.org/geojson-spec.html
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.MultiLineStringFeature.Rings">
            <summary>
            An array of LinearRing coordinate arrays.
            For Polygons with multiple rings, the first must be the exterior ring
            and any others must be interior rings or holes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.MultiLineStringFeature.Parse(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Parse the given JSON as GeoJSON.
            </summary>
            <param name="GeoJSON">A valid GeoJSON JSON.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.PolygonFeature">
            <summary>
            http://www.geojson.org/geojson-spec.html
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.PolygonFeature.Rings">
            <summary>
            An array of LinearRing coordinate arrays.
            For Polygons with multiple rings, the first must be the exterior ring
            and any others must be interior rings or holes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.PolygonFeature.Parse(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Parse the given JSON as GeoJSON.
            </summary>
            <param name="GeoJSON">A valid GeoJSON JSON.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.AGeoJSONFeature">
            <summary>
            http://www.geojson.org/geojson-spec.html
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.AGeoJSONFeature.Properties">
            <summary>
            An enumeration of all geo json properties.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.AGeoJSONFeature.Id">
            <summary>
            The GeoJSON feature identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.AGeoJSONFeature.Type">
            <summary>
            The GeoJSON feature type.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.AGeoJSONFeature.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoJSON">
            <summary>
            http://www.geojson.org/geojson-spec.html
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoJSON.Properties">
            <summary>
            An enumeration of all GeoJSON properties.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoJSON.Features">
            <summary>
            An enumeration of all GeoJSON features.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoJSON.Parse(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Parse the given JSON as GeoJSON.
            </summary>
            <param name="GeoJSON">A valid GeoJSON JSON.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoJSON.LoadFile(System.String)">
            <summary>
            Read the given GeoJSON file.
            </summary>
            <param name="Filename">The GeoJSON file name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoJSON.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoCircle">
            <summary>
            A circle of type T.
            </summary>
            <typeparam name="T">The internal type of the circle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.Center">
            <summary>
            The center of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.Radius">
            <summary>
            The radius of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.Diameter">
            <summary>
            The diameter of the circle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,System.Double)">
            <summary>
            Create a circle of type T.
            </summary>
            <param name="Center">The center of the circle.</param>
            <param name="Radius">The radius of the circle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Creates a circumcircle of type T based on three pixels.
            </summary>
            <param name="Pixel1">The first pixel of the triangle.</param>
            <param name="Pixel2">The second pixel of the triangle.</param>
            <param name="Pixel3">The third pixel of the triangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.IsInCircle(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Checks if the given first pixel is within the circle
            defined by the remaining three edge pixels.
            </summary>
            <param name="Pixel">The pixel to be checked.</param>
            <param name="EdgePixel1">The first edge pixel defining a circle.</param>
            <param name="EdgePixel2">The second edge pixel defining a circle.</param>
            <param name="EdgePixel3">The third edge pixel defining a circle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.Contains(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Checks if the given x- and y-coordinates are
            located within this circle.
            </summary>
            <param name="GeoCoordinate">The geo coordinate.</param>
            <returns>True if the coordinates are located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.Contains(org.GraphDefined.Vanaheimr.Aegir.GeoCircle)">
            <summary>
            Checks if the given circle is located
            within this circle.
            </summary>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the circle is located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.Overlaps(org.GraphDefined.Vanaheimr.Aegir.GeoCircle)">
            <summary>
            Checks if the given circle shares some
            area with this circle.
            </summary>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the circle shares some area with this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.op_Equality(org.GraphDefined.Vanaheimr.Aegir.GeoCircle,org.GraphDefined.Vanaheimr.Aegir.GeoCircle)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Circle1">A Circle&lt;T&gt;.</param>
            <param name="Circle2">Another Circle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.GeoCircle,org.GraphDefined.Vanaheimr.Aegir.GeoCircle)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Circle1">A Circle&lt;T&gt;.</param>
            <param name="Circle2">Another Circle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.Equals(org.GraphDefined.Vanaheimr.Aegir.GeoCircle)">
            <summary>
            Compares two circles for equality.
            </summary>
            <param name="ICircle">A circle to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoCircle.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoLine">
            <summary>
            A line with geo coordinates.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoLine.P1">
            <summary>
            The first geo coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoLine.P2">
            <summary>
            The second geo coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoLine.Length">
            <summary>
            The length of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoLine.Gradient">
            <summary>
            The gradient/inclination of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoLine.YIntercept">
            <summary>
            The interception of the line with the y-axis.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoLine.Center">
            <summary>
            The center pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoLine.Vector">
            <summary>
            The vector of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoLine.Normale">
            <summary>
            The normale vector of the line.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoVector)">
            <summary>
            Create line with geo coordinates.
            </summary>
            <param name="GeoCoordinate1">A geo coordinate.</param>
            <param name="GeoVector">A geo vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Create line with geo coordinates.
            </summary>
            <param name="GeoCoordinate1">A geo coordinate.</param>
            <param name="GeoCoordinate2">A geo coordinate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.Contains(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Checks if the given pixel is located on this line.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <returns>True if the pixel is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.IntersectsWith(org.GraphDefined.Vanaheimr.Aegir.GeoLine,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate@,System.Boolean,System.Boolean)">
            <summary>
            Checks if and where the given lines intersect.
            </summary>
            <param name="Line">A line.</param>
            <param name="IntersectionGeoCoordinate">The intersection of both lines.</param>
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
            <returns>True if the lines intersect; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.IntersectsWith(org.GraphDefined.Vanaheimr.Aegir.GeoLine,System.Boolean,System.Boolean)">
            <summary>
            Checks if the given lines intersect.
            </summary>
            <param name="Line1">A line.</param>
            <param name="Line2">A line.</param>
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
            <returns>True if the lines intersect; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.Intersection(org.GraphDefined.Vanaheimr.Aegir.GeoLine,System.Boolean,System.Boolean)">
            <summary>
            Returns the intersection of both lines.
            </summary>
            <param name="Line1">A line.</param>
            <param name="Line2">A line.</param>
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.IsJustAPixel">
            <summary>
            Checks if the given line is "just a pixel".
            </summary>
            <param name="Line">A line.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.op_Equality(org.GraphDefined.Vanaheimr.Aegir.GeoLine,org.GraphDefined.Vanaheimr.Aegir.GeoLine)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Line1">A Line&lt;T&gt;.</param>
            <param name="Line2">Another Line&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.GeoLine,org.GraphDefined.Vanaheimr.Aegir.GeoLine)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Line1">A Line&lt;T&gt;.</param>
            <param name="Line2">Another Line&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.Equals(org.GraphDefined.Vanaheimr.Aegir.GeoLine)">
            <summary>
            Compares two lines for equality.
            </summary>
            <param name="ILine">A line to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoLine.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle">
            <summary>
            A triangle with geo coordinates.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.P1">
            <summary>
            The first geo coordinate of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.P2">
            <summary>
            The second geo coordinate of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.P3">
            <summary>
            The third geo coordinate of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.E12">
            <summary>
            The first geo coordinate of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.E23">
            <summary>
            The second geo coordinate of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.E31">
            <summary>
            The third geo coordinate of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.CircumCenter">
            <summary>
            Return the cirumcenter of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.CircumCircle">
            <summary>
            Return the circumcircle of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the triangle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Create a triangle of type T.
            </summary>
            <param name="Pixel1">The first pixel of the triangle.</param>
            <param name="Pixel2">The second pixel of the triangle.</param>
            <param name="Pixel3">The third pixel of the triangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.op_Equality(org.GraphDefined.Vanaheimr.Aegir.GeoTriangle,org.GraphDefined.Vanaheimr.Aegir.GeoTriangle)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Triangle1">A Triangle&lt;T&gt;.</param>
            <param name="Triangle2">Another Triangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.GeoTriangle,org.GraphDefined.Vanaheimr.Aegir.GeoTriangle)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Triangle1">A Triangle&lt;T&gt;.</param>
            <param name="Triangle2">Another Triangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.CompareTo(org.GraphDefined.Vanaheimr.Aegir.GeoTriangle)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ITriangle">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.Equals(org.GraphDefined.Vanaheimr.Aegir.GeoTriangle)">
            <summary>
            Compares two triangles for equality.
            </summary>
            <param name="ITriangle">A triangle to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoTriangle.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.GeoVector">
            <summary>
            A vector of geo coordinates.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoVector.P">
            <summary>
            The x-component of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoVector.Length">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.GeoVector.NormVector">
            <summary>
            Return a normalized vector.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoVector.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="GeoCoordinate">The x-component of the vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoVector.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate,org.GraphDefined.Vanaheimr.Aegir.GeoCoordinate)">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="GeoCoordinate1">A pixel of type T.</param>
            <param name="GeoCoordinate2">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoVector.#ctor(org.GraphDefined.Vanaheimr.Aegir.GeoVector,org.GraphDefined.Vanaheimr.Aegir.GeoVector)">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="GeoVector1">A vector of type T.</param>
            <param name="GeoVector2">A vector of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoVector.IsParallelTo(org.GraphDefined.Vanaheimr.Aegir.GeoVector)">
            <summary>
            Determines if the given vector is parallel or
            antiparallel to this vector.
            </summary>
            <param name="Vector">A vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoVector.op_Equality(org.GraphDefined.Vanaheimr.Aegir.GeoVector,org.GraphDefined.Vanaheimr.Aegir.GeoVector)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Vector1">A Vector&lt;T&gt;.</param>
            <param name="Vector2">Another Vector&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoVector.op_Inequality(org.GraphDefined.Vanaheimr.Aegir.GeoVector,org.GraphDefined.Vanaheimr.Aegir.GeoVector)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Vector1">A Vector&lt;T&gt;.</param>
            <param name="Vector2">Another Vector&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoVector.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoVector.Equals(org.GraphDefined.Vanaheimr.Aegir.GeoVector)">
            <summary>
            Compares two vectors for equality.
            </summary>
            <param name="IVector">A vector to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoVector.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Aegir.GeoVector.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.Semantics">
            <summary>
            The Aegir ontology.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Aegir.ShapeInfo">
            <summary>
            A class holding all neccesary 
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.ShapeInfo.Description">
            <summary>
            The description of this shape.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.ShapeInfo.Latitude_Start">
            <summary>
            The minimal latitude of this shape.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.ShapeInfo.Longitude_Start">
            <summary>
            The minimal longitude of this shape.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.ShapeInfo.Latitude_End">
            <summary>
            The maximal latitude of this shape.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.ShapeInfo.Longitude_End">
            <summary>
            The maximal longitude of this shape.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Aegir.ShapeInfo.PathAtZoomLevel">
            <summary>
            A dictionary 
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ComparizionResult">
            <summary>
            An object comparizion result.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.ComparizionResult.Added">
            <summary>
            The enumeration of added properties.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.ComparizionResult.Updated">
            <summary>
            The enumeration of updated properties.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.ComparizionResult.Removed">
            <summary>
            The enumeration of removed properties.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ComparizionResult.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.ComparizionResult.PropertyWithValue},System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.ComparizionResult.PropertyWithValues},System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.ComparizionResult.PropertyWithValue})">
            <summary>
            Create a new object comparizion result.
            </summary>
            <param name="Added">An enumeration of added properties.</param>
            <param name="Updated">An enumeration of updated properties.</param>
            <param name="Removed">An enumeration of removed properties.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.JSONLDContext">
            <summary>
            A JSON-LD context.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.InternalContext">
            <summary>
            The internal JSON-LD context.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.IsNullOrEmpty">
            <summary>
            Indicates whether this JSON-LD context is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.IsNotNullOrEmpty">
            <summary>
            Indicates whether this JSON-LD context is NOT null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.Length">
            <summary>
            The length of the JSON-LD context.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.#ctor(System.String)">
            <summary>
            Create a new JSON-LD context based on the given string.
            </summary>
            <param name="String">The string representation of the JSON-LD context.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.Parse(System.String)">
            <summary>
            Parse the given string as a JSON-LD context.
            </summary>
            <param name="Text">A text representation of a JSON-LD context.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.TryParse(System.String)">
            <summary>
            Try to parse the given text as a JSON-LD context.
            </summary>
            <param name="Text">A text representation of a JSON-LD context.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.JSONLDContext@)">
            <summary>
            Try to parse the given text as a JSON-LD context.
            </summary>
            <param name="Text">A text representation of a JSON-LD context.</param>
            <param name="JSONLDContext">The parsed JSON-LD context.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.Clone">
            <summary>
            Clone this JSON-LD context.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.op_Equality(org.GraphDefined.Vanaheimr.Illias.JSONLDContext,org.GraphDefined.Vanaheimr.Illias.JSONLDContext)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="JSONLDContext1">A JSON-LD context.</param>
            <param name="JSONLDContext2">Another JSON-LD context.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.op_Inequality(org.GraphDefined.Vanaheimr.Illias.JSONLDContext,org.GraphDefined.Vanaheimr.Illias.JSONLDContext)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="JSONLDContext1">A JSON-LD context.</param>
            <param name="JSONLDContext2">Another JSON-LD context.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.op_LessThan(org.GraphDefined.Vanaheimr.Illias.JSONLDContext,org.GraphDefined.Vanaheimr.Illias.JSONLDContext)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="JSONLDContext1">A JSON-LD context.</param>
            <param name="JSONLDContext2">Another JSON-LD context.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.JSONLDContext,org.GraphDefined.Vanaheimr.Illias.JSONLDContext)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="JSONLDContext1">A JSON-LD context.</param>
            <param name="JSONLDContext2">Another JSON-LD context.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.JSONLDContext,org.GraphDefined.Vanaheimr.Illias.JSONLDContext)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="JSONLDContext1">A JSON-LD context.</param>
            <param name="JSONLDContext2">Another JSON-LD context.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.JSONLDContext,org.GraphDefined.Vanaheimr.Illias.JSONLDContext)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="JSONLDContext1">A JSON-LD context.</param>
            <param name="JSONLDContext2">Another JSON-LD context.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.op_Addition(org.GraphDefined.Vanaheimr.Illias.JSONLDContext,System.String)">
            <summary>
            Combines a JSON-LD prefix and a suffix.
            </summary>
            <param name="JSONLDPrefix">A JSON-LD context prefix.</param>
            <param name="JSONLDSuffix">Another JSON-LD context suffix.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.CompareTo(org.GraphDefined.Vanaheimr.Illias.JSONLDContext)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="JSONLDContext">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.Equals(org.GraphDefined.Vanaheimr.Illias.JSONLDContext)">
            <summary>
            Compares two JSON-LD contexts for equality.
            </summary>
            <param name="JSONLDContext">An JSON-LD context to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONLDContext.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1">
            <summary>
            A factory which uses reflection to generate a appropriate
            implementation of T for you.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.SearchingFor">
            <summary>
            Returns the Name of the interface T.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.RegisteredNames">
            <summary>
            Returns an enumeration of the names of all registered types of T.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.RegisteredTypes">
            <summary>
            Returns an enumeration of activated instances of all registered types of T.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.Count">
            <summary>
            Returns the number of registered implementations of the interface T.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.#ctor">
            <summary>
            Create a new AutoDiscovery instance and start the discovery.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.#ctor(System.Boolean,System.Func{`0,System.String})">
            <summary>
            Create a new AutoDiscovery instance. An automatic discovery
            can be avoided.
            </summary>
            <param name="Autostart">Automatically start the reflection process.</param>
            <param name="IdentificatorFunc">A transformation delegate to provide an unique identification for every matching class.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.FindAndRegister(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Func{`0,System.String})">
            <summary>
            Searches all matching files at the given paths for classes implementing the interface &lt;T&gt;.
            </summary>
            <param name="ClearTypeDictionary">Clears the TypeDictionary before adding new implementations.</param>
            <param name="Paths">An enumeration of paths to search for implementations.</param>
            <param name="FileExtensions">A enumeration of file extensions for filtering.</param>
            <param name="IdentificatorFunc">A transformation delegate to provide an unique identification for every matching class.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.TryGetInstance(System.String,`0@)">
            <summary>
            Attempts to get an instance associated with the identificator.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.AutoDiscoveryException">
            <summary>
            The class for all errors within the AutoDiscovery&lt;T&gt; class
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscoveryException.#ctor">
            <summary>
            Initializes a new instance of the AutoDiscoveryException class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscoveryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AutoDiscoveryException class with a
            specified error message.
            </summary>
            <param name="myMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscoveryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AutoDiscoveryException class with a
            specified error message and a reference to the inner exception that is
            the cause of this exception.
            </summary>
            <param name="myMessage">The error message that explains the reason for the exception.</param>
            <param name="myInnerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.BooleanComment">
            <summary>
            A boolean with a comment.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.BooleanComment.Boolean">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.BooleanComment.Comment">
            <summary>
            The comment text.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.BooleanComment.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new boolean with a comment.
            </summary>
            <param name="myBoolean">The boolean value.</param>
            <param name="myComment">The maximum value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.BooleanComment.op_Implicit(org.GraphDefined.Vanaheimr.Illias.BooleanComment)~System.Boolean">
            <summary>
            Convert this object to a Boolean.
            </summary>
            <param name="BooleanWithComment">A BooleanComment object.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.BooleanComment.True">
            <summary>
            Will return a value of 'true' without any comment text.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesExtensions">
            <summary>
            Extensions to the IProperties interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesExtensions.SetProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Assign a KeyValuePair to the given IProperties object.
            If a value already exists for this key, then the previous key/value is overwritten.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValuePair">A KeyValuePair of type string and object</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesExtensions.SetProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Assign the given enumeration of KeyValuePairs to the IProperties object.
            If a value already exists for a key, then the previous key/value is overwritten.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValuePairs">A enumeration of KeyValuePairs of type string and object</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesExtensions.SetProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Assign the given IDictionary to the IProperties object.
            If a value already exists for a key, then the previous key/value is overwritten.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="IDictionary">A IDictionary of type TKey and TValue</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesExtensions.Remove``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Remove the given KeyValuePair.
            </summary>
            <param name="KeyValuePair">A KeyValuePair.</param>
            <returns>The value associated with that key prior to the removal.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyAddingEventHandler`2">
            <summary>
            An event handler called whenever a property value will be added.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the property to be added.</param>
            <param name="Value">The value of the property to be added.</param>
            <param name="Vote">A veto vote is a simple way to ask multiple event subscribers if the edge should be added or not.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyAddedEventHandler`2">
            <summary>
            An event handler called whenever a property value was added.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the added property.</param>
            <param name="Value">The value of the added property.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyChangingEventHandler`2">
            <summary>
            An event handler called whenever a property value will be changed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the property to be changed.</param>
            <param name="OldValue">The old value of the property to be changed.</param>
            <param name="NewValue">The new value of the property to be changed.</param>
            <param name="Vote">A veto vote is a simple way to ask multiple event subscribers if the edge should be added or not.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyChangedEventHandler`2">
            <summary>
            An event handler called whenever a property value was changed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the changed property.</param>
            <param name="OldValue">The old value of the changed property.</param>
            <param name="NewValue">The new value of the changed property.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyRemovingEventHandler`2">
            <summary>
            An event handler called whenever a property will be removed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the property to be removed.</param>
            <param name="Value">The value of the property to be removed.</param>
            <param name="Vote">A veto vote is a simple way to ask multiple event subscribers if the edge should be added or not.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyRemovedEventHandler`2">
            <summary>
            An event handler called whenever a property was removed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the removed property.</param>
            <param name="Value">The value of the removed property.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2">
            <summary>
            A generic interface maintaining a collection of key/value properties
            within the given datastructure.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyAdding">
            <summary>
            Called whenever a property value will be added.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyAdded">
            <summary>
            Called whenever a property value was added.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyChanging">
            <summary>
            Called whenever a property value will be changed.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyChanged">
            <summary>
            Called whenever a property value was changed.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyRemoving">
            <summary>
            Called whenever a property value will be removed.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyRemoved">
            <summary>
            Called whenever a property value was removed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.Set(`0,`1)">
            <summary>
            Add a KeyValuePair to the graph element.
            If a value already exists for the given key, then the previous value is overwritten.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.Remove(`0)">
            <summary>
            Removes all KeyValuePairs associated with the given key.
            </summary>
            <param name="Key">A key.</param>
            <returns>The value associated with that key prior to the removal.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.Remove(`0,`1)">
            <summary>
            Remove the given key and value pair.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
            <returns>The value associated with that key prior to the removal.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.Remove(org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{`0,`1})">
            <summary>
            Remove all KeyValuePairs specified by the given KeyValueFilter.
            </summary>
            <param name="KeyValueFilter">A delegate to remove properties based on their keys and values.</param>
            <returns>A enumeration of all key/value pairs removed by the given KeyValueFilter before their removal.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesInitializer`2">
            <summary>
            A delegate for IProperties initializing.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">The properties object.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2">
            <summary>
            A generic interface maintaining a collection of key/value properties
            within the given datastructure.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.IdKey">
            <summary>
            The property key of the identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.RevIdKey">
            <summary>
            The property key of the revision identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.LabelKey">
            <summary>
            The property key of the label.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.Keys">
            <summary>
            An enumeration of all property keys.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.Values">
            <summary>
            An enumeration of all property values.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.ContainsKey(`0)">
            <summary>
            Determines if the given key exists.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.ContainsValue(`1)">
            <summary>
            Determines if the given value exists.
            </summary>
            <param name="Value">A value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.Contains(`0,`1)">
            <summary>
            Determines if the given key and value exists.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if the given KeyValuePair exists.
            </summary>
            <param name="KeyValuePair">A KeyValuePair.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.Item(`0)">
            <summary>
            Return the value associated with the given key.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.TryGetProperty(`0,`1@)">
            <summary>
            Return the value associated with the given key.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">The associated value.</param>
            <returns>True if the returned value is valid. False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.TryGetProperty``1(`0,``0@)">
            <summary>
            Return the value associated with the given key.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">The associated value.</param>
            <typeparam name="T">Check if the value is of the given type.</typeparam>
            <returns>True if the returned value is valid. False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.GetProperties(org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{`0,`1})">
            <summary>
            Return a filtered enumeration of all KeyValuePairs.
            </summary>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <returns>A enumeration of all key/value pairs matching the given KeyValueFilter.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions">
            <summary>
            Extensions to the IProperties interface.
            </summary>
            <summary>
            Extensions to the IProperties interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Action{``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccess">A delegate to call for the associated value of the given property key and its value.</param>
            <param name="OnError">A delegate to call for the associated value of the given property key when an error occurs.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Action{``0,``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccess">A delegate to call for the associated value of the given property key and its value.</param>
            <param name="OnError">A delegate to call for the associated value of the given property key when an error occurs.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Func{``1,``2},System.Func{``0,``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccessFunc">A delegate to call for the associated property value of the given property key.</param>
            <param name="OnErrorFunc">A delegate to call for the associated property key when the key was not found.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Func{``0,``1,``2},System.Func{``0,``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccessFunc">A delegate to call for the key and associated value of the given property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Type)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetString``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetDouble``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Type,System.Action{``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccess">A delegate to call for the associated value of the given property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Type,System.Action{``0,``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccess">A delegate to call for the key and associated value of the given property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Type,System.Func{``1,System.Object})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccessFunc">A delegate to call for the associated value of the given property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Type,System.Func{``0,``1,System.Object})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccessFunc">A delegate to call for the key and associated value of the given property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetCastedProperty``3(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TCast">The casted type of the properety values.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetKeyValuePair``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccess">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetKeyValuePair``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Type,System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccess">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.KeyValuePairFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccessFunc">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.KeyValuePairFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Type,System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccessFunc">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Action{``1})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccess">A delegate called for the associated value of each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Action{``0,``1})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccess">A delegate to call for each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccess">A delegate to call for each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertiesFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Func{``1,``2})">
            <summary>
            Call the given func delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccessFunc">A delegate returning an object for the associated value of each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertiesFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccessFunc">A delegate returning an object for each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertiesFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccessFunc">A delegate returning an object for each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.FilteredKeys``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Get a filtered enumeration of all property keys.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter KeyValuePairs based on their keys and values.</param>
            <returns>An enumeration of all selected property values.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.FilteredValues``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Get a filtered enumeration of all property values.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter KeyValuePairs based on their keys and values.</param>
            <returns>An enumeration of all selected property values.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.CompareProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1})">
            <summary>
            Compares the properties of two different IElement objects (vertices or edges).
            </summary>
            <param name="myIProperties1">A vertex or edge</param>
            <param name="myIProperties2">Another vertex or edge</param>
            <returns>true if both IElement objects carry the same properties</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetDynamicProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0)">
            <summary>
            Return the object value associated with the provided property key as dynamic.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetDynamicProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Type)">
            <summary>
            Return the object value of type TValue associated with the provided property key as dynamic.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesException">
            <summary>
            An exception during property processing occurred!
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesException.#ctor(System.String,System.Exception)">
            <summary>
            An exception during property processing occurred!
            </summary>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IdentificationChangeException">
            <summary>
            Changing the Id property is not allowed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IdentificationChangeException.#ctor(System.String,System.Exception)">
            <summary>
            Throw a new IdentificationChangeException when
            someone tries to change the identification.
            </summary>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.RevIdentificationChangeException">
            <summary>
            Changing the RevId property is not allowed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.RevIdentificationChangeException.#ctor(System.String,System.Exception)">
            <summary>
            Throw a new IdentificationChangeException when
            someone tries to change the revision identification.
            </summary>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesMaps">
            <summary>
            Extension methods for PropertiesMaps.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesMaps.PMap``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesMaps.PMap``2(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1}},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesMaps.PMap``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesMaps.PMap``2(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1}},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesTables">
            <summary>
            Extension methods for PropertiesTables.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesTables.PTable``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesTables.PTable``2(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1}},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1">
            <summary>
            A thread-safe, lock-free queue.
            </summary>
            <typeparam name="T">The type of the values stored within the queue.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.QueueElement">
            <summary>
            An element within a queue.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.QueueElement.Next">
            <summary>
            Return the next element within the queue.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.QueueElement.Value">
            <summary>
            Return the value stored within the element.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.QueueElement.#ctor(`0)">
            <summary>
            Create a single queue element.
            </summary>
            <param name="Value">The value stored within the node.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.First">
            <summary>
            The first element of the queue.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.MaxNumberOfElements">
            <summary>
            The maximal number of values within the queue.
            RemoveOldestQueueElement() will be called to remove dispensable elements.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.Count">
            <summary>
            The current number of elements within the queue.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.QueueDelegate">
            <summary>
            A delegate called whenever an element was added to or removed from the queue.
            </summary>
            <param name="Sender">The sender of the event.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.OnAdded">
            <summary>
            Called whenever an element was added to the queue.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.OnRemoved">
            <summary>
            Called whenever an element of the queue was removed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.#ctor(System.UInt64)">
            <summary>
            Create a new thread-safe, lock-free queue.
            </summary>
            <param name="MaxNumberOfElements">The maximal number of values within the queue.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.Push(`0)">
            <summary>
            Push a new value into the queue.
            </summary>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.Peek">
            <summary>
            Return the oldest value of the queue without removing it.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.Pop">
            <summary>
            Return the oldest value of the queue and remove it.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.GetEnumerator">
            <summary>
            Get an enumerator for the queue..
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IDictionaryInitializer`2">
            <summary>
            A delegate for IDictionary initializing.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ImmutableMap`2">
            <summary>
            A simple implementation of a immutable map.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ImmutableMap`2.#ctor">
            <summary>
            Creates a simple implementation of a immutable map.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ImmutableMap`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a simple implementation of a immutable map.
            </summary>
            <param name="InternalIDictionary">An user-defined internal map.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IImmutableMap`2">
            <summary>
            Provides a generic immutable map/dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IMap`2">
            <summary>
            Provides a generic mutable map/dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MultiString.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MultiString.CompareTo(org.GraphDefined.Vanaheimr.Illias.MultiString)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="OtherMultiString">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MultiString.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MultiString.Equals(org.GraphDefined.Vanaheimr.Illias.MultiString)">
            <summary>
            Compares two MultiStrings for equality.
            </summary>
            <param name="MultiString">A MultiString to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MultiString.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1">
            <summary>
            A reactive set.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Count">
            <summary>
            The number of items stored within this reactive set.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.OnItemAddedDelegate">
            <summary>
            A delegate called whenever the aggregated dynamic status of all subordinated EVSEs changed.
            </summary>
            <param name="Timestamp">The timestamp when this change was detected.</param>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.OnItemAdded">
            <summary>
            An event fired whenever the aggregated dynamic status of all subordinated EVSEs changed.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.OnItemRemovedDelegate">
            <summary>
            A delegate called whenever the aggregated dynamic status of all subordinated EVSEs changed.
            </summary>
            <param name="Timestamp">The timestamp when this change was detected.</param>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.OnItemRemoved">
            <summary>
            An event fired whenever the aggregated dynamic status of all subordinated EVSEs changed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.#ctor(`0[])">
            <summary>
            Create a new reactive set storing on the given items.
            </summary>
            <param name="Items">An optional array of items to store.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new reactive set storing on the given items.
            </summary>
            <param name="Items">An optional enumeration of items to store.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Add(`0[])">
            <summary>
            Add the given array of items to the reactive set.
            </summary>
            <param name="Items">An array of items.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add the given enumeration of items to the reactive set.
            </summary>
            <param name="Items">An enumeration of items.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.AddAndReturn(`0)">
            <summary>
            Add the given item to the reactive set and return it.
            </summary>
            <param name="Item">An item.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Contains(`0)">
            <summary>
            Determines whether the reactive set contains the given item.
            </summary>
            <param name="Item">An item.</param>
            <returns>true if the reactive set contains the specified item; otherwise, false.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Remove(`0[])">
            <summary>
            Remove the given array of items from the reactive set.
            </summary>
            <param name="Items">An array of items.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove the given enumeration of items from the reactive set.
            </summary>
            <param name="Items">An enumeration of items.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Set(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove the given enumeration of items from the reactive set.
            </summary>
            <param name="Items">An enumeration of items.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_LessThan(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.GetEnumerator">
            <summary>
            Enumerate the reactive list.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate the reactive list.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Equals(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two reactive sets for equality.
            </summary>
            <param name="ReactiveSet">A reactive set to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption">
            <summary>
            A fluent interface to add command line parser options.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.ShortOption">
            <summary>
            The short option.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.LongOption">
            <summary>
            The long option.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.RegularExpression">
            <summary>
            An optional regular expression for verification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Verification">
            <summary>
            An optional delegate for verification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Action">
            <summary>
            The action delegate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.#ctor(org.GraphDefined.Vanaheimr.Illias.CommandLineParser)">
            <summary>
            Create a new fluent interface to add command line parser options.
            </summary>
            <param name="CommandLineParser">The command line parser.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.#ctor(System.Char,org.GraphDefined.Vanaheimr.Illias.CommandLineParser)">
            <summary>
            Create a new fluent interface to add command line parser options.
            </summary>
            <param name="ShortOption">The short option.</param>
            <param name="CommandLineParser">The command line parser.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.#ctor(System.String,org.GraphDefined.Vanaheimr.Illias.CommandLineParser)">
            <summary>
            Create a new fluent interface to add command line parser options.
            </summary>
            <param name="LongOption">The long option.</param>
            <param name="CommandLineParser">The command line parser.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Short(System.Char)">
            <summary>
            Set the short option.
            </summary>
            <param name="ShortOption">The short option.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Long(System.String)">
            <summary>
            Set the long option.
            </summary>
            <param name="LongOption">The long option.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Verify(System.String)">
            <summary>
            Set an optional regular expression for verification.
            </summary>
            <param name="RegularExpression">A regular expression for verification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Verify(System.Func{System.String,System.Boolean})">
            <summary>
            Set an optional regular expression for verification.
            </summary>
            <param name="Delegate">A delegate for verification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Do(System.Action{System.String})">
            <summary>
            Set the action delegate.
            </summary>
            <param name="Delegate">What to do with the value of the short and/or long option.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Apply">
            <summary>
            Apply/store this command line parser option.
            </summary>
            <returns></returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.CommandLineParser">
            <summary>
            A command line parser.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.#ctor">
            <summary>
            Create a new command line parser.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddOption">
            <summary>
            Create a new fluent interface to create command line parser options.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddShortOption(System.Char)">
            <summary>
            Create a new fluent interface to create command line parser options.
            </summary>
            <param name="ShortOption">Add a short option.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddLongOption(System.String)">
            <summary>
            Create a new fluent interface to create command line parser options.
            </summary>
            <param name="LongOption">Add a long option.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddOption(System.Char,System.Action{System.String},System.String)">
            <summary>
            Add the given action for the given character,
            e.g. "o" for a "-o" command line option.
            </summary>
            <param name="ShortOption">A short option.</param>
            <param name="Delegate">What to do with the value of the character option.</param>
            <param name="Verification">An optional regular expression for verification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddOption(System.String,System.Action{System.String},System.String)">
            <summary>
            Add the given action for the given string,
            e.g. "output" for a "--output" command line option.
            </summary>
            <param name="LongOption">A long option.</param>
            <param name="Delegate">What to do with the value of the string option.</param>
            <param name="Verification">An optional regular expression for verification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddOption(System.Char,System.String,System.Action{System.String},System.String)">
            <summary>
            Add the given action for the given character and string,
            e.g. "o" and "output" for a "-o" and "--output" command line option.
            </summary>
            <param name="ShortOption">A short option.</param>
            <param name="LongOption">A long option.</param>
            <param name="Delegate">What to do with the value of the short and/or long option.</param>
            <param name="Verification">An optional regular expression for verification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.Parse(System.String[])">
            <summary>
            Parse the given array of arguments.
            </summary>
            <param name="Arguments">An array of arguments.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3">
            <summary>
            A collection of values with the additional possibility
            to group these values.
            </summary>
            <typeparam name="TKey">The type of the collection keys.</typeparam>
            <typeparam name="TValue">The type of the collection values.</typeparam>
            <typeparam name="TGroup">The type of the collection groups.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.#ctor">
            <summary>
            Create a new grouped collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.TryAddValue(`0,`1,`2)">
            <summary>
            Tries to add a KeyValueGroupTriple to the collection.
            </summary>
            <param name="Key">The key of the triple.</param>
            <param name="Value">The value of the triple.</param>
            <param name="Group">The group of the triple.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains the specified key.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.ContainsGroup(`2)">
            <summary>
            Determines whether the collection contains the specified group.
            </summary>
            <param name="Group">A group.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.Count">
            <summary>
            The total number of values in the grouped collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.Count(`2)">
            <summary>
            The number of values in the given group collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.TryGetByKey(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <returns>True, if the key was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.TryGetByGroup(`2,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Attempts to get the values associated with the specified group.
            </summary>
            <param name="Group">The group.</param>
            <param name="Values">An enumeration of values.</param>
            <returns>True, if the group was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.TryRemoveValue(`0,`1,`2)">
            <summary>
            Attempts to remove the given value with the specified
            key and group from the grouped collection.
            </summary>
            <param name="Key">The key of the value.</param>
            <param name="Value">The value to remove.</param>
            <param name="Group">The group of the value.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.Clear">
            <summary>
            Removes all keys, values and groups
            from the grouped collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.GetEnumerator">
            <summary>
            Return an enumerator for the grouped collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumerator for the grouped collection.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3">
            <summary>
            A collection of values with the additional possibility
            to group these values.
            </summary>
            <typeparam name="TKey">The type of the collection keys.</typeparam>
            <typeparam name="TValue">The type of the collection values.</typeparam>
            <typeparam name="TGroup">The type of the collection groups.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.TryAddValue(`0,`1,`2)">
            <summary>
            Tries to add a KeyValueGroupTriple to the collection.
            </summary>
            <param name="Key">The key of the triple.</param>
            <param name="Value">The value of the triple.</param>
            <param name="Group">The group of the triple.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains the specified key.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.ContainsGroup(`2)">
            <summary>
            Determines whether the collection contains the specified group.
            </summary>
            <param name="Group">A group.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.Count">
            <summary>
            The total number of values in the grouped collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.Count(`2)">
            <summary>
            The number of values in the given group collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.TryGetByKey(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <returns>True, if the key was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.TryGetByGroup(`2,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Attempts to get the values associated with the specified group.
            </summary>
            <param name="Group">The group.</param>
            <param name="Values">An enumeration of values.</param>
            <returns>True, if the group was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.TryRemoveValue(`0,`1,`2)">
            <summary>
            Attempts to remove the given value with the specified
            key and group from the grouped collection.
            </summary>
            <param name="Key">The key of the value.</param>
            <param name="Value">The value to remove.</param>
            <param name="Group">The group of the value.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.Clear">
            <summary>
            Removes all keys, values and groups
            from the grouped collection.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.CountedPredicate`1">
            <summary>
            Represents the method that defines a set of criteria and determines whether
            the specified object meets those criteria.
            </summary>
            <typeparam name="T">The type of the object to compare.</typeparam>
            <param name="Object">The object to compare.</param>
            <param name="Counter">An object counter. Starts with 1!</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DelegateHelpers">
            <summary>
            Delegate helpers.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ItemFilter`1">
            <summary>
            A delegate to filter items.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="Item">An item.</param>
            <returns>True if the item should be returned; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.KeyValueFilter`2">
            <summary>
            A delegate to filter KeyValuePairs based on their keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
            <returns>True if the KeyValuePair should be returned; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.KeyValueMapper`2">
            <summary>
            A delegate to map a given KeyValuePair to another KeyValuePair.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="KeyValuePair">A KeyValuePair.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IDescription`1">
            <summary>
            Provides a description of something.
            </summary>
            <typeparam name="TDescription">The type of the description.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IDescription`1.Description">
            <summary>
            Provides a description of something.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell">
            <summary>
            Some utilities to help in the hell of endianness.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.Int16)">
            <summary>
            Swap the byte representation of the given Int16 value.
            </summary>
            <param name="Value">A Int16.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.UInt16)">
            <summary>
            Swap the byte representation of the given UInt16 value.
            </summary>
            <param name="Value">A UInt16.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.Int32)">
            <summary>
            Swap the byte representation of the given Int32 value.
            </summary>
            <param name="Value">A Int32.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.UInt32)">
            <summary>
            Swap the byte representation of the given UInt32 value.
            </summary>
            <param name="Value">A UInt32.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.Int64)">
            <summary>
            Swap the byte representation of the given Int64 value.
            </summary>
            <param name="Value">A Int64.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.UInt64)">
            <summary>
            Swap the byte representation of the given UInt64 value.
            </summary>
            <param name="Value">A UInt64.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.kW">
            <summary>
            A kilo watt.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.kW.Value">
            <summary>
            The value of the kW in kilo watts.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.#ctor(System.Single)">
            <summary>
            Create a new kW.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.Parse(System.String)">
            <summary>
            Parse the given string as a kW.
            </summary>
            <param name="Text">A text representation of a kW.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.Parse(System.Single)">
            <summary>
            Parse the given number as a kW.
            </summary>
            <param name="Number">A numeric representation of a kW.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.kW@)">
            <summary>
            Parse the given string as a kW.
            </summary>
            <param name="Text">A text representation of a kW.</param>
            <param name="kW">The parsed kW.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.TryParse(System.Single,org.GraphDefined.Vanaheimr.Illias.kW@)">
            <summary>
            Parse the given number as a kW.
            </summary>
            <param name="Number">A numeric representation of a kW.</param>
            <param name="kW">The parsed kW.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.kW.Clone">
            <summary>
            Clone this kW.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_Equality(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_Inequality(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_LessThan(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_Addition(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Accumulates two kWs.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_Subtraction(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Substracts two kWs.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.CompareTo(org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.Equals(org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two kWs for equality.
            </summary>
            <param name="kW">A kW to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.kWh">
            <summary>
            A kilo watt hour.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.kWh.Value">
            <summary>
            The value of the kWh in kilo watts.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.#ctor(System.Single)">
            <summary>
            Create a new kWh.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.Parse(System.String)">
            <summary>
            Parse the given string as a kWh.
            </summary>
            <param name="Text">A text representation of a kWh.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.Parse(System.Single)">
            <summary>
            Parse the given number as a kWh.
            </summary>
            <param name="Number">A numeric representation of a kWh.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.kWh@)">
            <summary>
            Parse the given string as a kWh.
            </summary>
            <param name="Text">A text representation of a kWh.</param>
            <param name="kWh">The parsed kWh.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.TryParse(System.Single,org.GraphDefined.Vanaheimr.Illias.kWh@)">
            <summary>
            Parse the given number as a kWh.
            </summary>
            <param name="Number">A numeric representation of a kWh.</param>
            <param name="kWh">The parsed kWh.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.kWh.Clone">
            <summary>
            Clone this kWh.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_Equality(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_Inequality(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_LessThan(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_Addition(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Accumulates two kWhs.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_Subtraction(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Substracts two kWhs.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.CompareTo(org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.Equals(org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two kWhs for equality.
            </summary>
            <param name="kWh">A kWh to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Meter">
            <summary>
            A meter.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Meter.Value">
            <summary>
            The value of the meter.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Meter.IsKiloMeters">
            <summary>
            Value is km, not meters.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.#ctor(System.Double,System.Boolean)">
            <summary>
            Create a new meter.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.Parse(System.String)">
            <summary>
            Parse the given string as a meter.
            </summary>
            <param name="Text">A text representation of a meter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.Parse(System.Single)">
            <summary>
            Parse the given number as a meter.
            </summary>
            <param name="Number">A numeric representation of a meter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.Parse(System.Double)">
            <summary>
            Parse the given number as a meter.
            </summary>
            <param name="Number">A numeric representation of a meter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.TryParse(System.String)">
            <summary>
            Parse the given string as a meter.
            </summary>
            <param name="Text">A text representation of a meter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.TryParse(System.Single)">
            <summary>
            Parse the given number as a meter.
            </summary>
            <param name="Number">A numeric representation of a meter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.TryParse(System.Double)">
            <summary>
            Parse the given number as a meter.
            </summary>
            <param name="Number">A numeric representation of a meter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.Meter@)">
            <summary>
            Parse the given string as a meter.
            </summary>
            <param name="Text">A text representation of a meter.</param>
            <param name="Meter">The parsed Meter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.TryParse(System.Single,org.GraphDefined.Vanaheimr.Illias.Meter@)">
            <summary>
            Parse the given number as a meter.
            </summary>
            <param name="Number">A numeric representation of a meter.</param>
            <param name="Meter">The parsed Meter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.TryParse(System.Double,org.GraphDefined.Vanaheimr.Illias.Meter@)">
            <summary>
            Parse the given number as a meter.
            </summary>
            <param name="Number">A numeric representation of a meter.</param>
            <param name="Meter">The parsed Meter.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Meter.Clone">
            <summary>
            Clone this Meter.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.op_Equality(org.GraphDefined.Vanaheimr.Illias.Meter,org.GraphDefined.Vanaheimr.Illias.Meter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Meter1">A meter.</param>
            <param name="Meter2">Another meter.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Meter,org.GraphDefined.Vanaheimr.Illias.Meter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Meter1">A meter.</param>
            <param name="Meter2">Another meter.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.op_LessThan(org.GraphDefined.Vanaheimr.Illias.Meter,org.GraphDefined.Vanaheimr.Illias.Meter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Meter1">A meter.</param>
            <param name="Meter2">Another meter.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Meter,org.GraphDefined.Vanaheimr.Illias.Meter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Meter1">A meter.</param>
            <param name="Meter2">Another meter.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.Meter,org.GraphDefined.Vanaheimr.Illias.Meter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Meter1">A meter.</param>
            <param name="Meter2">Another meter.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Meter,org.GraphDefined.Vanaheimr.Illias.Meter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Meter1">A meter.</param>
            <param name="Meter2">Another meter.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.op_Addition(org.GraphDefined.Vanaheimr.Illias.Meter,org.GraphDefined.Vanaheimr.Illias.Meter)">
            <summary>
            Accumulates two Meters.
            </summary>
            <param name="Meter1">A meter.</param>
            <param name="Meter2">Another meter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.op_Subtraction(org.GraphDefined.Vanaheimr.Illias.Meter,org.GraphDefined.Vanaheimr.Illias.Meter)">
            <summary>
            Substracts two Meters.
            </summary>
            <param name="Meter1">A meter.</param>
            <param name="Meter2">Another meter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.CompareTo(org.GraphDefined.Vanaheimr.Illias.Meter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Meter">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.Equals(org.GraphDefined.Vanaheimr.Illias.Meter)">
            <summary>
            Compares two Meters for equality.
            </summary>
            <param name="Meter">A meter to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Meter.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ICustomData">
            <summary>
            The interface for custom data stored with an entity.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ICustomData`1">
            <summary>
            The generic interface for custom data stored with an entity.
            </summary>
            <typeparam name="TCustomData">The type of the custom data.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.ICustomData`1.CustomData">
            <summary>
            Custom data stored within this entity.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IEntity">
            <summary>
            The interface of an entity.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IEntity.LastChange">
            <summary>
            The timestamp of the last changes within this entity.
            Can e.g. be used as a HTTP ETag.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IEntity`4">
            <summary>
            The generic interface of an entity.
            </summary>
            <typeparam name="TId">The type of the entity identification.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TCustomData">The type of the custom data.</typeparam>
            <typeparam name="TDataSource">The type of the data source.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IEntityBuilder`4">
            <summary>
            The generic interface of an entity.
            </summary>
            <typeparam name="TId">The type of the entity identification.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TCustomData">The type of the custom data.</typeparam>
            <typeparam name="TDataSource">The type of the data source.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IEntityBuilder`4.Id">
            <summary>
            The unique identification of this entity.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IEntityBuilder`4.DataSource">
            <summary>
            The data source of this entity, e.g. an automatic importer.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.AEntity`2">
            <summary>
            An abstract entity.
            </summary>
            <typeparam name="TId">The type of the entity identification.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AEntity`2.#ctor(`0,org.GraphDefined.Vanaheimr.Illias.JSONLDContext,Newtonsoft.Json.Linq.JObject,System.String,System.Nullable{System.DateTime})">
            <summary>
            Create a new abstract entity.
            </summary>
            <param name="Id">The unique identification of this entity.</param>
            <param name="JSONLDContext">The JSON-LD context of this entity.</param>
            <param name="CustomData">Custom data stored within this entity.</param>
            <param name="DataSource">The source of this information, e.g. an automatic importer.</param>
            <param name="LastChange">The timestamp of the last changes within this entity. Can e.g. be used as a HTTP ETag.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.AEntity`4">
            <summary>
            An abstract entity.
            </summary>
            <typeparam name="TId">The type of the entity identification.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TCustomData">The type of the custom data.</typeparam>
            <typeparam name="TDataSource">The type of the data source.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.Id">
            <summary>
            The unique identification of this entity.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.JSONLDContext">
            <summary>
            The JSON-LD context of this entity.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.CustomData">
            <summary>
            Custom data stored within this entity.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.DataSource">
            <summary>
            The data source of this entity, e.g. an automatic importer.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.LastChange">
            <summary>
            The timestamp of the last changes within this entity.
            Can e.g. be used as a HTTP ETag.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.HashValue">
            <summary>
            The cryptographic hash value of this entity.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AEntity`4.#ctor(`0,org.GraphDefined.Vanaheimr.Illias.JSONLDContext,`2,`3,System.Nullable{System.DateTime})">
            <summary>
            Create a new abstract entity.
            </summary>
            <param name="Id">The unique identification of this entity.</param>
            <param name="JSONLDContext">The JSON-LD context of this entity.</param>
            <param name="CustomData">Custom data stored within this entity.</param>
            <param name="DataSource">The source of this information, e.g. an automatic importer.</param>
            <param name="LastChange">The timestamp of the last changes within this entity. Can e.g. be used as a HTTP ETag.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AEntity`4.ToJSON(System.Boolean,System.Boolean)">
            <summary>
            Return a JSON representation of this object.
            </summary>
            <param name="Embedded">Whether this data is embedded into another data structure.</param>
            <param name="IncludeCryptoHash">Include the crypto hash value of this object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AEntity`4.CalcHash">
            <summary>
            Calculate the hash value of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.AEntity`4.Builder">
            <summary>
            An abstract builder.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.Builder.Id">
            <summary>
            The unique identification of this entity.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.Builder.JSONLDContext">
            <summary>
            The JSON-LD context of this entity.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.Builder.CustomData">
            <summary>
            Custom data stored within this entity.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.Builder.DataSource">
            <summary>
            The data source of this entity, e.g. an automatic importer.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.Builder.LastChange">
            <summary>
            The timestamp of the last changes within this entity.
            Can e.g. be used as a HTTP ETag.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AEntity`4.Builder.HashValue">
            <summary>
            The cryptographic hash value of this entity.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AEntity`4.Builder.#ctor(`0,org.GraphDefined.Vanaheimr.Illias.JSONLDContext,`2,`3,System.Nullable{System.DateTime})">
            <summary>
            Create a new user group builder.
            </summary>
            <param name="Id">The unique identification of this entity.</param>
            <param name="JSONLDContext">The JSON-LD context of this entity.</param>
            <param name="CustomData">Custom data stored within this entity.</param>
            <param name="DataSource">The source of this information, e.g. an automatic importer.</param>
            <param name="LastChange">The timestamp of the last changes within this entity. Can e.g. be used as a HTTP ETag.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DynamicAttribute">
            <summary>
            Tag a struct, class or property as 'dynamic'.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DynamicAttribute.Tags">
            <summary>
            Additional tags of the 'mandatory'-tag.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DynamicAttribute.#ctor(System.String[])">
            <summary>
            Create a new 'dynamic'-tag having the given tags.
            </summary>
            <param name="Tags">Some tags.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.MandatoryAttribute">
            <summary>
            Tag a struct, class or property as 'mandatory'.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.MandatoryAttribute.Tags">
            <summary>
            Additional tags of the 'mandatory'-tag.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MandatoryAttribute.#ctor(System.String[])">
            <summary>
            Create a new 'mandatory'-tag having the given tags.
            </summary>
            <param name="Tags">Additional tags.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.OnPropertyChangedDelegate">
            <summary>
            A delegate called whenever a property of the given object changed.
            </summary>
            <param name="Timestamp">The timestamp of the event.</param>
            <param name="Sender">The changed object.</param>
            <param name="PropertyName">The name of the changed property.</param>
            <param name="OldValue">The old value of the changed property.</param>
            <param name="NewValue">The new value of the changed property.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.OptionalAttribute">
            <summary>
            Tag a struct, class or property as 'optional'.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.OptionalAttribute.Tags">
            <summary>
            Additional tags of the 'optional'-tag.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.OptionalAttribute.#ctor(System.String[])">
            <summary>
            Create a new 'optional'-tag having the given tags.
            </summary>
            <param name="Tags">Some tags.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.PhoneNumberExtensions">
            <summary>
            Extension methods for phone numbers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumberExtensions.IsNullOrEmpty(System.Nullable{org.GraphDefined.Vanaheimr.Illias.PhoneNumber})">
            <summary>
            Indicates whether this phone number is null or empty.
            </summary>
            <param name="PhoneNumber">A phone number.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumberExtensions.IsNotNullOrEmpty(System.Nullable{org.GraphDefined.Vanaheimr.Illias.PhoneNumber})">
            <summary>
            Indicates whether this phone number is null or empty.
            </summary>
            <param name="PhoneNumber">A phone number.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.PhoneNumber">
            <summary>
            A phone number.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.InternalId">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.IsPhoneNumber_RegExprString">
            <summary>
            The regular expression init string for matching phone numbers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.IsNullOrEmpty">
            <summary>
            Indicates whether this phone number is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.IsNotNullOrEmpty">
            <summary>
            Indicates whether this phone number is NOT null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.Length">
            <summary>
            The length of the phone number.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.#ctor(System.String)">
            <summary>
            Create a new phone number based on the given string.
            </summary>
            <param name="String">The string representation of the phone number.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.Parse(System.String)">
            <summary>
            Parse the given string as a phone number.
            </summary>
            <param name="Text">A text-representation of a phone number.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.TryParse(System.String)">
            <summary>
            Try to parse the given string as a phone number.
            </summary>
            <param name="Text">A text-representation of a phone number.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.PhoneNumber@)">
            <summary>
            Try to parse the given string as a phone number.
            </summary>
            <param name="Text">A text-representation of a phone number.</param>
            <param name="PhoneNumber">The parsed phone number.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.Clone">
            <summary>
            Clone this phone number.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.op_Equality(org.GraphDefined.Vanaheimr.Illias.PhoneNumber,org.GraphDefined.Vanaheimr.Illias.PhoneNumber)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PhoneNumber1">A phone number.</param>
            <param name="PhoneNumber2">Another phone number.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.op_Inequality(org.GraphDefined.Vanaheimr.Illias.PhoneNumber,org.GraphDefined.Vanaheimr.Illias.PhoneNumber)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PhoneNumber1">A phone number.</param>
            <param name="PhoneNumber2">Another phone number.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.op_LessThan(org.GraphDefined.Vanaheimr.Illias.PhoneNumber,org.GraphDefined.Vanaheimr.Illias.PhoneNumber)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PhoneNumber1">A phone number.</param>
            <param name="PhoneNumber2">Another phone number.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.PhoneNumber,org.GraphDefined.Vanaheimr.Illias.PhoneNumber)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PhoneNumber1">A phone number.</param>
            <param name="PhoneNumber2">Another phone number.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.PhoneNumber,org.GraphDefined.Vanaheimr.Illias.PhoneNumber)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PhoneNumber1">A phone number.</param>
            <param name="PhoneNumber2">Another phone number.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.PhoneNumber,org.GraphDefined.Vanaheimr.Illias.PhoneNumber)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PhoneNumber1">A phone number.</param>
            <param name="PhoneNumber2">Another phone number.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.CompareTo(org.GraphDefined.Vanaheimr.Illias.PhoneNumber)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PhoneNumber">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.Equals(org.GraphDefined.Vanaheimr.Illias.PhoneNumber)">
            <summary>
            Compares two PhoneNumbers for equality.
            </summary>
            <param name="PhoneNumber">A phone number to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.GetHashCode">
            <summary>
            Return the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.PhoneNumber.ToString">
            <summary>
            Return a text-representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate">
            <summary>
            A delegate called whenever an exception occured.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ExceptionHelpers">
            <summary>
            Some exception helpers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ExceptionHelpers.CheckNull(System.Object,System.String)">
            <summary>
            Checks if the given item is null. 
            </summary>
            <param name="Object">Any object.</param>
            <param name="ObjectName">The name of the object.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ByteExtensions">
            <summary>
            Extensions for byte and byte arrays.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.SubSequence(System.Byte[],System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Converts an array of bytes into its hexadecimal string representation.
            </summary>
            <param name="ByteArray">An array of bytes.</param>
            <param name="StartIndex">The zero-based starting byte position of a subsequence in this instance.</param>
            <param name="Length">The number of bytes in the subsequence.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToHexString(System.Byte[],System.UInt16,System.Nullable{System.UInt16},System.Boolean)">
            <summary>
            Converts an array of bytes into its hexadecimal string representation.
            </summary>
            <param name="ByteArray">An array of bytes.</param>
            <param name="StartIndex">The zero-based starting byte position of a subsequence in this instance.</param>
            <param name="Length">The number of bytes in the subsequence.</param>
            <param name="ToLower">Whether to convert the resulting string to lower case.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.HexStringToByteArray(System.String)">
            <summary>
            Convert a hex representation of an array of bytes
            back into an array of bytes.
            </summary>
            <param name="HexValue">hex representation of a byte array.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.Reverse(System.Byte[])">
            <summary>
            Reverse the given byte array.
            </summary>
            <param name="ByteArray">An array of bytes.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.Reverse(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Reverse the given byte array.
            </summary>
            <param name="ByteArray">An array of bytes.</param>
            <param name="Skip">Skip the given number of bytes in the beginning.</param>
            <param name="Take">Take the given number of bytes.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToInt16s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of Int16s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToUInt16s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of UInt16s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToInt32s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of Int32s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToUInt32s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of UInt32s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToInt64s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of Int64s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToUInt64s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of UInt64s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToSingles(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of Singles.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToDoubles(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of Doubles.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.UNIXTime">
            <summary>
            The beginning of the UNIX universe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToDateTime32s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of four enumerated bytes into an enumeration of DateTimes.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToDateTime64s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of eight enumerated bytes into an enumeration of DateTimes.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ConsoleX">
            <summary>
            Extension methods for Console.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions">
            <summary>
            Extensions to the DateTime class.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.UnixEpoch">
            <summary>
            The UNIX epoch.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.ToUnixTimestamp(System.DateTime)">
            <summary>
            Convert the given DateTime object to UNIX timestamp.
            </summary>
            <param name="DateTime">A DateTime object.</param>
            <returns>The seconds since 1. January 1970</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.FromUnixTimestamp(System.Int64)">
            <summary>
            Convert the given UNIX timestamp to a .NET DateTime object.
            </summary>
            <param name="UnixTimestamp">A UNIX timestamp (seconds since 1. January 1970)</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.ToIso8601(System.DateTime,System.Boolean)">
            <summary>
            Convert the given DateTime object to an ISO 8601 datetime string.
            </summary>
            <param name="DateTime">A DateTime object.</param>
            <param name="Fractions">Iclude the fractions of seconds.</param>
            <returns>The DateTime formated as "yyyy-MM-ddTHH:mm:ss.fff" + "Z"</returns>
            <example>2014-02-01T15:45:00.000Z</example>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.ToIso8601WithOffset(System.DateTime,System.Boolean)">
            <summary>
            Convert the given DateTime object to an ISO 8601 datetime string with timezone offset.
            </summary>
            <param name="DateTime">A DateTime object.</param>
            <param name="Fractions">Iclude the fractions of seconds.</param>
            <returns>The DateTime formated as "yyyy-MM-ddTHH:mm:ss.fffzzz"</returns>
            <example>2014-02-01T15:45:00.000+00:00</example>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.ToRfc1123(System.DateTime)">
            <summary>
            Convert the given DateTime object to an RFC 1123 datetime string.
            </summary>
            <param name="DateTime">A DateTime object.</param>
            <returns>The DateTime formated as e.g. "Wed, 24 Nov 2016 09:44:55 GMT"</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.TryParse(System.String)">
            <summary>
            Try to parse the given text representation of a DateTime object.
            </summary>
            <param name="Text">A text representation of a DateTime object.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DebugX">
            <summary>
            Helpers for the normal Debug class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DebugX.Log(System.String[])">
            <summary>
            Write the current timestamp and given text to Debug.
            </summary>
            <param name="Text">The text to be logged.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DebugX.LogT(System.String[])">
            <summary>
            Write the current timestamp and given text to Debug.
            </summary>
            <param name="Text">The text to be logged.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DebugX.Log(System.String,System.Exception)">
            <summary>
            Write the current timestamp and given exception to Debug.
            </summary>
            <param name="Message">An exception message..</param>
            <param name="Exception">The exception.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DebugX.Log(System.Exception,System.String)">
            <summary>
            Write the current timestamp and given exception to Debug.
            </summary>
            <param name="Exception">The exception.</param>
            <param name="Source">The source of the exception.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DebugX.LogException(System.Exception,System.String)">
            <summary>
            Write the current timestamp and given exception to Debug.
            </summary>
            <param name="Exception">The exception.</param>
            <param name="Source">The source of the exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.EnumExtensions">
            <summary>
            Extension methods for enums.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IComparableExtensions">
            <summary>
            Extensions to the IComparable interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IComparableExtensions.IsLessThan``1(``0,``0)">
            <summary>
            Checks if the first value is less than the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is less than the second value; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IComparableExtensions.IsLessThanOrEquals``1(``0,``0)">
            <summary>
            Checks if the first value is less than or equals the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is less than or equals the second value; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IComparableExtensions.IsLargerThan``1(``0,``0)">
            <summary>
            Checks if the first value is larger than the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is larger than the second value; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IComparableExtensions.IsLargerThanOrEquals``1(``0,``0)">
            <summary>
            Checks if the first value is larger than or equals the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is larger than or equals the second value; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions">
            <summary>
            Extension methods for the IDictionary interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnDictionary``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Another way to add an element to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="Key">The element key.</param>
            <param name="Value">The element value.</param>
            <returns>The changed dictionary.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``0},``1)">
            <summary>
            Another way to add an element to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="KeyCreator">A delegate providing the key.</param>
            <param name="Value">The element value.</param>
            <returns>The changed dictionary.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnKeyValuePair``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="Key">The element key.</param>
            <param name="Value">The element value.</param>
            <returns>The element as key value pair.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnKeyValuePair``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``0},``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="KeyCreator">A delegate providing the key.</param>
            <param name="Value">The element value.</param>
            <returns>The element as key value pair.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="Key">The element key.</param>
            <param name="Value">The element value.</param>
            <returns>The element key.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnKey``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``0},``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="KeyCreator">A delegate providing the key.</param>
            <param name="Value">The element value.</param>
            <returns>The element key.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="Key">The element key.</param>
            <param name="Value">The element value.</param>
            <returns>The element value.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnValue``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``0},``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="KeyCreator">A delegate providing the key.</param>
            <param name="Value">The element value.</param>
            <returns>The element value.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.RemoveAndReturnValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Remove the key and value from the a dictionary and return the value.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="Key">The element key.</param>
            <returns>The element value.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.TryGet``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Try to get return the value for the given key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="Dictionary">A dictionary.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions">
            <summary>
            Extensions to the IEnumerable interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.StdDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the standard deviation of the given enumeration of doubles.
            </summary>
            <param name="IEnumerable">An enumeration of Doubles.</param>
            <returns>The stddev of the given enumeration of doubles.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.AverageAndStdDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the standard deviation of the given enumeration of doubles.
            </summary>
            <param name="IEnumerable">An enumeration of Doubles.</param>
            <returns>The mean and stddev of the given enumeration of doubles.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Calls the given delegate for each element of the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Calls the given delegate for each element of the enumeration,
            but does not fail if any parameter is null.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``1},``0,System.Action{``0,``1})">
            <summary>
            Calls the given delegate for each element of the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ForEachCounted``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.UInt64},System.UInt64)">
            <summary>
            Calls the given delegate for each element of the enumeration
            and count the number of elements.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration and a counter.</param>
            <param name="Counter">The initial value of the counter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Calls the given delegate for each element of the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="First">An action to call for the first element of the enumeration.</param>
            <param name="Remaining">An action to call for each element except the first element of the enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SelectCounted``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64,``1},System.UInt64)">
            <summary>
            Calls the given delegate for each element of the enumeration
            and count the number of elements.
            </summary>
            <typeparam name="T1">The type of the enumeration.</typeparam>
            <typeparam name="T2">The type of the result enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Delegate">A delegate to call for a counter and each element of the enumeration.</param>
            <param name="Counter">The initial value of the counter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Computes the sum of a sequence of System.UInt64 values.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.UInt32)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.UInt32})">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.UInt64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.UInt64})">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.UInt32)">
            <summary>
            Takes the given number of elements from the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.UInt32})">
            <summary>
            Takes the given number of elements from the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.UInt64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.UInt64})">
            <summary>
            Takes the given number of elements from the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int64})">
            <summary>
            Takes the given number of elements from the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SkipTakeFilter``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Return a JSON representation for the given enumeration of roaming networks.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="Enumeration">An enumeration of roaming networks.</param>
            <param name="Skip">The optional number of roaming networks to skip.</param>
            <param name="Take">The optional number of roaming networks to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            The given enumeration is null or empty.
            </summary>
            <typeparam name="T">The type of the elements of the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SafeAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Safely determines whether all elements of a sequence satisfy a condition..
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Check">A delegate to verify the given condition for the given enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SafeAny``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Safely determines whether a sequence contains any elements.
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Filter">An optional delegate to filter the given enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SafeSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Safely selects the given enumeration.
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
            <typeparam name="TResult">The type of the resulting enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="SelectionDelegate">The delegate to select the given enumeration.</param>
            <param name="DefaultValues">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SafeWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Safely filters the given enumeration.
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Filter">An optional delegate to filter the given enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ToSafeHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Safely determines whether a sequence contains any elements.
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SelectIgnoreErrors``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Safely selects the given enumeration.
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
            <typeparam name="TResult">The type of the resulting enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="SelectionDelegate">The delegate to select the given enumeration.</param>
            <param name="DefaultValues">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.MapReduce``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.String)">
            <summary>
            Safely selects the given enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <typeparam name="TResult">The type of the resulting enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="MapDelegate">The delegate to select the given enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SafeSelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Safely selects the given enumeration.
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
            <typeparam name="TResult">The type of the resulting enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of an enumeration.</param>
            <param name="SelectionDelegate">The delegate to select the given enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)">
            <summary>
            Safely aggregates the given enumeration. If the enumeration is null
            or has no elements the default value will be returned.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="Enumeration">An enumeration.</param>
            <param name="AggreationDelegate">The delegate to aggregate the given enumeration.</param>
            <param name="DefaultValue">The default value to return for an empty enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0},System.Func{``0,``0,``0},``0,``0)">
            <summary>
            Safely aggregates the given enumeration. If the enumeration is null
            or has no elements the default value will be returned.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="Enumeration">An enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.AggregateWith``1(System.Collections.Generic.IEnumerable{``0},System.Char,System.String)">
            <summary>
            Safely aggregates the given enumeration. If the enumeration is null
            or has no elements an empty string will be returned.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="Enumeration">An enumeration.</param>
            <param name="Seperator">A string as element seperator.</param>
            <param name="DefaultValue">The default value to return for an empty enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.AggregateWith``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Safely aggregates the given enumeration. If the enumeration is null
            or has no elements an empty string will be returned.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="Enumeration">An enumeration.</param>
            <param name="Seperator">A string as element seperator.</param>
            <param name="DefaultValue">The default value to return for an empty enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ConsumeAll``1(System.Collections.IEnumerator)">
            <summary>
            Consume all elements of the given enumerator.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="Enumerator">An IEnumerator.</param>
            <returns>An enumerable of T.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ConsumeAll``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Consume all elements of the given enumerator.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="Enumerator">An IEnumerator.</param>
            <returns>An enumerable of T.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})">
            <summary>
            Computes the sum of the sequence of System.UInt64 values that are obtained by
            invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="Source">A sequence of values that are used to calculate a sum.</param>
            <param name="Selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ReverseAndReturn``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Reverse and return the given enumeration of elements;
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="Enumeration">An enumeration of elements.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IListExtensions">
            <summary>
            Extension methods for the IList interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.AddAndReturnList``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Another way to add an element to a list.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="List">A list of elements.</param>
            <param name="Element">The element to be added to the list.</param>
            <returns>The changed list.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.AddAndReturnList``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Another way to add an element to a list.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="List">A list of elements.</param>
            <param name="Elements">Another list to be added to this list.</param>
            <returns>The changed list.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.AddAndReturnElement``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Another way to add an value to a list.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="List">A list of elements.</param>
            <param name="Element">The element to be added to the list.</param>
            <returns>The added element.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.RemoveAndReturnElement``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Remove and return an element of the given list;
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="List">A list of elements.</param>
            <param name="Element">An element of the given list.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.RemoveAndReturnFirst``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove and return first element of the given list;
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="List">A list of elements.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.RemoveAndReturnLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove and return last element of the given list;
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="List">A list of elements.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions">
            <summary>
            Extensions methods for integers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int32,System.Action{System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt32,System.Action{System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int64,System.Action{System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt64,System.Action{System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt32,System.Action{System.UInt32,System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt64,System.Action{System.UInt64,System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.JSONExtensions">
            <summary>
            Extension methods to parse JSON.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONExtensions.ValueOrDefault(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Return the value of the JSON property or the given default value.
            </summary>
            <param name="ParentJObject">The JSON parent object.</param>
            <param name="PropertyName">The property name to match.</param>
            <param name="DefaultValue">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONExtensions.ValueOrFail(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Return the value of the JSON property or the given default value.
            </summary>
            <param name="ParentJObject">The JSON parent object.</param>
            <param name="PropertyName">The property name to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONExtensions.MapValueOrDefault``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JToken,``0},``0)">
            <summary>
            Return the mapped value of the JSON property or the given default value.
            </summary>
            <param name="ParentJObject">The JSON parent object.</param>
            <param name="PropertyName">The property name to match.</param>
            <param name="ValueMapper">A delegate to map the JSON property value.</param>
            <param name="DefaultValue">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONExtensions.MapValueOrFail``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JToken,``0},System.String)">
            <summary>
            Return the mapped value of the JSON property or throw an exception
            having the given optional message.
            </summary>
            <param name="ParentJObject">The JSON parent object.</param>
            <param name="PropertyName">The property name to match.</param>
            <param name="ValueMapper">A delegate to map the JSON property value.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.RandomExtensions">
            <summary>
            Extension methods for System.Random.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RandomExtensions.GetBytes(System.Random,System.UInt16)">
            <summary>
            Get an array of random bytes.
            </summary>
            <param name="Random">The source of randomness.</param>
            <param name="NumberOfBytes">The number of random bytes to genrate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RandomExtensions.RandomString(System.Random,System.UInt16)">
            <summary>
            Get random string [a-zA-Z1-9]{Length} (without 'I', 'l', 'O', '0') of the given length.
            </summary>
            <param name="Random">The source of randomness.</param>
            <param name="Length">The expected length of the random string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RandomExtensions.RandomHexString(System.Random,System.UInt16)">
            <summary>
            Get random string [A-F0-9]{Length} of the given length.
            </summary>
            <param name="Random">The source of randomness.</param>
            <param name="Length">The expected length of the random string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RandomExtensions.RandomNumberString(System.Random,System.UInt16)">
            <summary>
            Get random number as string [0-9]{Length} of the given length.
            </summary>
            <param name="Random">The source of randomness.</param>
            <param name="Length">The the length of the string.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.SecureStringExtensions">
            <summary>
            Extensions to the SecureString class.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.StreamExtensions">
            <summary>
            Extensions to the Stream class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StreamExtensions.SeekAndCopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Reads the bytes from the given stream and writes them to another stream.
            May skip the given number of bytes.
            </summary>
            <param name="SourceStream">The source stream.</param>
            <param name="DestinationStream">The destination stream.</param>
            <param name="SkipFromBeginning">Anumber of bytes to skip from the beginning of the source stream.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.StringBuilderExtensions">
            <summary>
            Extensions to the StringBuilder class.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.StringExtensions">
            <summary>
            Extensions to the String class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the given string is null or empty.
            </summary>
            <param name="GivenString">A string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            Indicates whether the given string is not null or empty.
            </summary>
            <param name="GivenString">A string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IfNotNullOrEmpty(System.String,System.Func{System.String,System.String})">
            <summary>
            Mappes the given string if it is not null or empty.
            </summary>
            <param name="GivenString">The string.</param>
            <param name="Mapper">A string mapper delegate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether the given string is null, empty,
            or consists only of white-space characters.
            </summary>
            <param name="GivenString">A string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNotNullAndContains(System.String,System.String)">
            <summary>
            Returns a value indicating whether the specified Substring
            occurs within the given string.
            </summary>
            <param name="String">A string.</param>
            <param name="Substring">A substring to search for.</param>
            <returns>True if the value parameter occurs within this string.</returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StringExtensions.DoubleNewLine">
            <summary>
            NewLine but twice.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.Reverse(System.String)">
            <summary>
            Reverse the given string.
            </summary>
            <param name="String">The string to reverse.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.RemoveQuotes(System.String)">
            <summary>
            Removes leading and/or tailing (double) quotes.
            </summary>
            <param name="String">The string to check.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.RemoveAllBefore(System.String,System.String)">
            <summary>
            Removes everything from the string before the given substring.
            </summary>
            <param name="String">A string.</param>
            <param name="Substring">A substring.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.RemoveAllAfter(System.String,System.String)">
            <summary>
            Removes everything from the string after the given substring.
            </summary>
            <param name="String">A string.</param>
            <param name="Substring">A substring.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.SubstringMax(System.String,System.UInt32)">
            <summary>
            Return a substring of the given maximum length.
            </summary>
            <param name="Text">A text.</param>
            <param name="Length">The maximum length of the substring.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNullOrEmpty(System.String,System.Action{System.String},System.String)">
            <summary>
            Call the given delegate whether the specified string is null or empty.
            </summary>
            <param name="GivenString">The string.</param>
            <param name="Delegate">A delegate to call whenever the given string is null or empty.</param>
            <param name="ParameterName">The parameter name of the given string (CallerMemberName).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNotNullOrEmpty(System.String,System.Action{System.String},System.String)">
            <summary>
            Call the given delegate whether the specified string is not null or empty.
            </summary>
            <param name="GivenString">The string.</param>
            <param name="Delegate">A delegate to call whenever the given string is null or empty.</param>
            <param name="ParameterName">The parameter name of the given string (CallerMemberName).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.FailIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an ArgumentNullException whenever the given string is null or empty.
            </summary>
            <param name="GivenString">The string.</param>
            <param name="ExceptionMessage">An optional message to be added to the exception.</param>
            <param name="ParameterName">The parameter name of the given string (CallerMemberName).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.FailIfNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an ArgumentNullException whenever the given string is not null or empty.
            </summary>
            <param name="GivenString">The string.</param>
            <param name="ExceptionMessage">An optional message to be added to the exception.</param>
            <param name="ParameterName">The parameter name of the given string (CallerMemberName).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.AggregateIndentedLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts the given enumeration of strings into an enumeration of key-value-pairs.
            </summary>
            <param name="Text">An enumeration of strings.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.ToKeyValuePairs(System.Collections.Generic.IEnumerable{System.String},System.Char[])">
            <summary>
            Converts the given enumeration of strings into an enumeration of key-value-pairs.
            </summary>
            <param name="Text">An enumeration of strings.</param>
            <param name="Delimiters">The delimiter(s) between keys and values.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.ContainsIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Determines whether a sequence contains a specified element by using the case-insensitive equality comparer.
            </summary>
            <param name="Strings">An enumeration of strings.</param>
            <param name="Text">The text to search for.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TaskExtensions">
            <summary>
            Extensions to the Task class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TaskExtensions.CallSideeffect``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
            <summary>
            Call the given side effect delegate and continue to process the given Task afterwards.
            </summary>
            <typeparam name="T">The type of the Task.</typeparam>
            <param name="Task">The type of the result produced by the continuation.</param>
            <param name="Action">An action to run when the System.Threading.Tasks.Task completes. When run, the delegate will be passed the completed task as an argument.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.JObjectExtensions">
            <summary>
            Extensions to the JObject class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JObjectExtensions.IsJSONNullOrEmpty(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Checks whether the given JSON token is null or "null".
            </summary>
            <param name="JSONToken">A JSON token</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TypeExtensions">
            <summary>
            Extensions to the String class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TypeExtensions.GetRecursiveInterfaces(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Traverses the interface inheritance tree and collects all found interfaces.
            </summary>
            <param name="Interface">The starting innterface.</param>
            <param name="AllInterfaces">A list of all interfaces found.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.XElementExtensions">
            <summary>
            Extensions to the XElement class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.ElementValueOrDefault(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) child element with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent XML element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="DefaultValue">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.ElementValueOrDefault(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) child element with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent XML element.</param>
            <param name="NestedXName">The nested System.Xml.Linq.XName.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="DefaultValue">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.ElementValueOrFail(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) child element with the
            specified System.Xml.Linq.XName or throw an optional exception.
            </summary>
            <param name="ParentXElement">The XML parent XML element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.AttributeValueOrDefault(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="DefaultValue">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.AttributeValueOrFail(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.MapAttributeValueOrFail``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.String,``0},System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.MapAttributeValueOrDefault``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.String,``0},System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.MapAttributeValueOrDefault(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.MapAttributeValueOrNullable``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.String,``0},System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1">
            <summary>
            A 1-dimensional line of type T.
            </summary>
            <typeparam name="T">The internal type of the line.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Left">
            <summary>
            The left-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Right">
            <summary>
            The right-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Length">
            <summary>
            The length of the line.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.#ctor(`0,`0)">
            <summary>
            Create a 1-dimensional line of type T.
            </summary>
            <param name="Left">The left-coordinate of the line.</param>
            <param name="Right">The right-coordinate of the line.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Contains(`0)">
            <summary>
            Checks if the given element is located on this line.
            </summary>
            <param name="Element">An element.</param>
            <returns>True if the element is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Checks if the given line is located
            within this line.
            </summary>
            <param name="Line">A line of type T.</param>
            <returns>True if the line is located within this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Checks if the given line shares some
            area with this line.
            </summary>
            <param name="Line">A line of type T.</param>
            <returns>True if the line shares some area with this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Line1">A Line&lt;T&gt;.</param>
            <param name="Line2">Another Line&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Line1">A Line&lt;T&gt;.</param>
            <param name="Line2">Another Line&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Compares two lines for equality.
            </summary>
            <param name="ILine">A line to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1">
            <summary>
            A circle of type T.
            </summary>
            <typeparam name="T">The internal type of the circle.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Radius">
            <summary>
            The radius of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Center">
            <summary>
            The center of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Diameter">
            <summary>
            The diameter of the circle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.#ctor(`0,`0,`0)">
            <summary>
            Create a circle of type T.
            </summary>
            <param name="X">The x-coordinate of the circle.</param>
            <param name="Y">The y-coordinate of the circle.</param>
            <param name="Radius">The radius of the circle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`0)">
            <summary>
            Create a circle of type T.
            </summary>
            <param name="Center">The center of the circle.</param>
            <param name="Radius">The radius of the circle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Creates a circumcircle of type T based on three pixels.
            </summary>
            <param name="Pixel1">The first pixel of the triangle.</param>
            <param name="Pixel2">The second pixel of the triangle.</param>
            <param name="Pixel3">The third pixel of the triangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.IsInCircle(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given first pixel is within the circle
            defined by the remaining three edge pixels.
            </summary>
            <param name="Pixel">The pixel to be checked.</param>
            <param name="EdgePixel1">The first edge pixel defining a circle.</param>
            <param name="EdgePixel2">The second edge pixel defining a circle.</param>
            <param name="EdgePixel3">The third edge pixel defining a circle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Contains(`0,`0)">
            <summary>
            Checks if the given x- and y-coordinates are
            located within this circle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the coordinates are located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located
            within this circle.
            </summary>
            <param name="Pixel">A pixel.</param>
            <returns>True if the pixel is located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{`0})">
            <summary>
            Checks if the given circle is located
            within this circle.
            </summary>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the circle is located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{`0})">
            <summary>
            Checks if the given circle shares some
            area with this circle.
            </summary>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the circle shares some area with this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Circle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Circle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Circle1">A Circle&lt;T&gt;.</param>
            <param name="Circle2">Another Circle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Circle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Circle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Circle1">A Circle&lt;T&gt;.</param>
            <param name="Circle2">Another Circle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{`0})">
            <summary>
            Compares two circles for equality.
            </summary>
            <param name="ICircle">A circle to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1">
            <summary>
            A 2-dimensional line of type T.
            </summary>
            <typeparam name="T">The internal type of the line.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.X1">
            <summary>
            The fist x-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Y1">
            <summary>
            The first y-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.X2">
            <summary>
            The second x-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Y2">
            <summary>
            The second y-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Length">
            <summary>
            The length of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Pixel1">
            <summary>
            The left/top pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Pixel2">
            <summary>
            The right/bottom pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Gradient">
            <summary>
            The gradient/inclination of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.YIntercept">
            <summary>
            The interception of the line with the y-axis.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Center">
            <summary>
            The center pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Vector">
            <summary>
            The vector of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Normale">
            <summary>
            The normale vector of the line.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Create a 2-dimensional line of type T.
            </summary>
            <param name="X1">The first x-coordinate of the line.</param>
            <param name="Y1">The first y-coordinate of the line.</param>
            <param name="X2">The second x-coordinate of the line.</param>
            <param name="Y2">The second y-coordinate of the line.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`0,`0)">
            <summary>
            Create a 2-dimensional line of type T.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <param name="X">The x-component.</param>
            <param name="Y">The y-component.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Create a 2-dimensional line of type T.
            </summary>
            <param name="Pixel1">A pixel of type T.</param>
            <param name="Pixel2">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located on this line.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <returns>True if the pixel is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.IntersectsWith(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0}@,System.Boolean)">
            <summary>
            Checks if and where the given lines intersect.
            </summary>
            <param name="Line">A line.</param>
            <param name="Pixel">The intersection of both lines.</param>
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
            <returns>True if the lines intersect; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Line1">A Line&lt;T&gt;.</param>
            <param name="Line2">Another Line&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Line1">A Line&lt;T&gt;.</param>
            <param name="Line2">Another Line&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{`0})">
            <summary>
            Compares two lines for equality.
            </summary>
            <param name="ILine">A line to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1">
            <summary>
            A pixel of type T.
            </summary>
            <typeparam name="T">The internal type of the pixel.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.#ctor(`0,`0)">
            <summary>
            Create a pixel of type T.
            </summary>
            <param name="X">The X-coordinate.</param>
            <param name="Y">The Y-coordinate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.Swap(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0}@,org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0}@)">
            <summary>
            Swaps two pixels.
            </summary>
            <param name="Pixel1">The first pixel.</param>
            <param name="Pixel2">The second pixel.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.DistanceTo(`0,`0)">
            <summary>
            A method to calculate the distance between this
            pixel and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <returns>The distance between this pixel and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            A method to calculate the distance between
            this and another pixel of type T.
            </summary>
            <param name="Pixel">A pixel of type T</param>
            <returns>The distance between this pixel and the given pixel.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Pixel1">A Pixel&lt;T&gt;.</param>
            <param name="Pixel2">Another Pixel&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Pixel1">A Pixel&lt;T&gt;.</param>
            <param name="Pixel2">Another Pixel&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPixelT">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Compares two pixels for equality.
            </summary>
            <param name="IPixel">A pixel to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelSelector`1">
            <summary>
            A delegate selecting which pixels to return.
            </summary>
            <typeparam name="T">The internal datatype of the pixel.</typeparam>
            <param name="Pixel">A pixel of type T.</param>
            <returns>True if the pixel is selected; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2">
            <summary>
            A pixel of type T together with a value of type TValue.
            </summary>
            <typeparam name="T">The internal type of the pixel.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.Value">
            <summary>
            The Value.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.#ctor(`0,`0,`1)">
            <summary>
            Create a pixel of type T together with a value of type TValue.
            </summary>
            <param name="X">The X-coordinate.</param>
            <param name="Y">The Y-coordinate.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PixelValuePair1">A PixelValuePair.</param>
            <param name="PixelValuePair2">Another PixelValuePair.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PixelValuePair1">A PixelValuePair.</param>
            <param name="PixelValuePair2">Another PixelValuePair.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPixelValuePair">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Compares two PixelValuePairs for equality.
            </summary>
            <param name="IPixelValuePair">A PixelValuePair to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1">
            <summary>
            A polygon of type T.
            </summary>
            <typeparam name="T">The internal type of the polygon.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.Pixels">
            <summary>
            The pixels of the polygon.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the polygon.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0}[])">
            <summary>
            Create a polygon of type T.
            </summary>
            <param name="Pixels">The pixels of the polygon.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IPolygon{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPolygon">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IPolygon{`0})">
            <summary>
            Compares two triangles for equality.
            </summary>
            <param name="IPolygon">A polygon to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1">
            <summary>
            A rectangle of type T.
            </summary>
            <typeparam name="T">The internal type of the rectangle.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Left">
            <summary>
            The left-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Top">
            <summary>
            The top-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Right">
            <summary>
            The right-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Bottom">
            <summary>
            The bottom-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Pixel1">
            <summary>
            The left/top pixel of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Pixel2">
            <summary>
            The right/bottom pixel of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Diameter">
            <summary>
            The length of the diagonale (diameter) of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Center">
            <summary>
            The center pixel of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Diagonales">
            <summary>
            Return an enumeration of lines representing the diagonales of the rectangle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Create a rectangle of type T.
            </summary>
            <param name="Left">The left-coordinate of the rectangle.</param>
            <param name="Top">The top-coordinate of the rectangle.</param>
            <param name="Right">The right-coordinate of the rectangle.</param>
            <param name="Bottom">The bottom-coordinate of the rectangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Create a rectangle of type T.
            </summary>
            <param name="Pixel1">The left/top pixel of the rectangle.</param>
            <param name="Pixel2">The right/bottom pixel of the rectangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`0,`0)">
            <summary>
            Create a rectangle of type T.
            </summary>
            <param name="Pixel">A pixel of type T in the upper left corner of the rectangle.</param>
            <param name="Width">The width of the rectangle.</param>
            <param name="Height">The height of the rectangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Contains(`0,`0)">
            <summary>
            Checks if the given x- and y-coordinates are
            located within this rectangle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the coordinates are located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located
            within this rectangle.
            </summary>
            <param name="Pixel">A pixel.</param>
            <returns>True if the pixel is located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Checks if the given rectangle is located
            within this rectangle.
            </summary>
            <param name="Rectangle">A rectangle of type T.</param>
            <returns>True if the rectangle is located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Checks if the given rectangle shares some
            area with this rectangle.
            </summary>
            <param name="Rectangle">A rectangle of type T.</param>
            <returns>True if the rectangle shares some area with this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Rectangle1">A Rectangle&lt;T&gt;.</param>
            <param name="Rectangle2">Another Rectangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Rectangle1">A Rectangle&lt;T&gt;.</param>
            <param name="Rectangle2">Another Rectangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Compares two rectangles for equality.
            </summary>
            <param name="IRectangle">A rectangle to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1">
            <summary>
            A triangle of type T.
            </summary>
            <typeparam name="T">The internal type of the triangle.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.P1">
            <summary>
            The first pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.P2">
            <summary>
            The second pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.P3">
            <summary>
            The third pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.CircumCenter">
            <summary>
            Return the cirumcenter of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.CircumCircle">
            <summary>
            Return the circumcircle of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the triangle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Create a triangle of type T.
            </summary>
            <param name="Pixel1">The first pixel of the triangle.</param>
            <param name="Pixel2">The second pixel of the triangle.</param>
            <param name="Pixel3">The third pixel of the triangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Triangle1">A Triangle&lt;T&gt;.</param>
            <param name="Triangle2">Another Triangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Triangle1">A Triangle&lt;T&gt;.</param>
            <param name="Triangle2">Another Triangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ITriangle">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle{`0})">
            <summary>
            Compares two triangles for equality.
            </summary>
            <param name="ITriangle">A triangle to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2">
            <summary>
            A triangle of type T.
            </summary>
            <typeparam name="T">The internal type of the triangle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.Value">
            <summary>
            The Value.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`1)">
            <summary>
            Create a triangle of type T.
            </summary>
            <param name="Pixel1">The first pixel of the triangle.</param>
            <param name="Pixel2">The second pixel of the triangle.</param>
            <param name="Pixel3">The third pixel of the triangle.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TriangleValuePair1">A Triangle&lt;T&gt;.</param>
            <param name="TriangleValuePair2">Another Triangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TriangleValuePair1">A Triangle&lt;T&gt;.</param>
            <param name="TriangleValuePair2">Another Triangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangleValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPixelValuePair">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangleValuePair{`0,`1})">
            <summary>
            Compares two triangles for equality.
            </summary>
            <param name="ITriangleValuePair">A triangle to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1">
            <summary>
            A 2-dimensional vector of type T.
            </summary>
            <typeparam name="T">The internal type of the vector.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.X">
            <summary>
            The x-component of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Y">
            <summary>
            The y-component of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Length">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.NormVector">
            <summary>
            Return a normalized vector.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.#ctor(`0,`0)">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="X">The x-component of the vector.</param>
            <param name="Y">The y-component of the vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="X1">The first x-coordinate of the vector.</param>
            <param name="Y1">The first y-coordinate of the vector.</param>
            <param name="X2">The second x-coordinate of the vector.</param>
            <param name="Y2">The second y-coordinate of the vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="Pixel1">A pixel of type T.</param>
            <param name="Pixel2">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="Vector1">A vector of type T.</param>
            <param name="Vector2">A vector of type T.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Min(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0}[])">
            <summary>
            A method to get the minimum of an array of Doubles.
            </summary>
            <param name="Values">An array of Doubles.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Max(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0}[])">
            <summary>
            A method to get the maximum of an array of Doubles.
            </summary>
            <param name="Values">An array of Doubles.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0}[])">
            <summary>
            A method to add vectors.
            </summary>
            <param name="Summands">An array of vectors.</param>
            <returns>The addition of all summands: v1 + v2 + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Sub(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to sub two vectors.
            </summary>
            <param name="v1">A vector.</param>
            <param name="v2">A vector.</param>
            <returns>The subtraction of v2 from v1: v1 - v2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Mul(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0}[])">
            <summary>
            A method to multiply vectors.
            </summary>
            <param name="Multiplicators">An array of vectors.</param>
            <returns>The multiplication of all multiplicators: v1 * v2 * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Mul2(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to multiply a vector by 2.
            </summary>
            <param name="v">A vector.</param>
            <returns>The multiplication of v by 2: (2*x, 2*y)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Div(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to divide two vectors.
            </summary>
            <param name="v1">A vector.</param>
            <param name="v2">A vector.</param>
            <returns>The division of v1 by v2: v1 / v2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Div2(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to divide a vector by 2.
            </summary>
            <param name="v">A vector.</param>
            <returns>The division of v by 2: v / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Pow(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate a Double raised to the specified power.
            </summary>
            <param name="v1">A vector.</param>
            <param name="v2">A vector.</param>
            <returns>The values of v1 raised to the specified power of v2: v1^v2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Inv(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the inverse value of the given vector.
            </summary>
            <param name="v">A vector.</param>
            <returns>The inverse value of v: -v</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Abs(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the absolute value of the given vector.
            </summary>
            <param name="v">A vector.</param>
            <returns>The absolute value of v: (|a| |b|)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Sqrt(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the square root of the vector.
            </summary>
            <param name="v">A vector.</param>
            <returns>The square root of v: Sqrt(v)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Distance(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the distance between two vectors.
            </summary>
            <param name="v1">A vector.</param>
            <param name="v2">A vector.</param>
            <returns>The distance between v1 and v2.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.IsParallelTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            Determines if the given vector is parallel or
            antiparallel to this vector.
            </summary>
            <param name="Vector">A vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.DistanceTo(`0,`0)">
            <summary>
            A method to calculate the distance between this
            vector and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <returns>The distance between this vector and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the distance between
            this and another vector of type T.
            </summary>
            <param name="Vector">A vector of type T</param>
            <returns>The distance between this pixel and the given pixel.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Vector1">A Vector&lt;T&gt;.</param>
            <param name="Vector2">Another Vector&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Vector1">A Vector&lt;T&gt;.</param>
            <param name="Vector2">Another Vector&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            Compares two vectors for equality.
            </summary>
            <param name="IVector">A vector to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1">
            <summary>
            A cube of type T.
            </summary>
            <typeparam name="T">The internal type of the cube.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Left">
            <summary>
            The left-coordinate of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Top">
            <summary>
            The top-coordinate of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Front">
            <summary>
            Front
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Behind">
            <summary>
            Behind
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Width">
            <summary>
            The width of the cube.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Height">
            <summary>
            The height of the cube.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Depth">
            <summary>
            The depth of the cube.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.#ctor(`0,`0,`0,`0,`0,`0)">
            <summary>
            Create a cube of type T.
            </summary>
            <param name="Left">The left parameter.</param>
            <param name="Top">The top parameter.</param>
            <param name="Front">The front parameter.</param>
            <param name="Right">The right parameter.</param>
            <param name="Bottom">The bottom parameter.</param>
            <param name="Behind">The behind parameter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0})">
            <summary>
            Create a cube of type T.
            </summary>
            <param name="Voxel1">A Voxel of type T.</param>
            <param name="Voxel2">A Voxel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},`0,`0,`0)">
            <summary>
            Create a cube of type T.
            </summary>
            <param name="Voxel">A Voxel of type T in the upper left front corner of the cube.</param>
            <param name="Width">The width of the cube.</param>
            <param name="Height">The height of the cube.</param>
            <param name="Depth">The depth of the cube.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Contains(`0,`0,`0)">
            <summary>
            Checks if the given x-, y- and z-coordinates
            are located within this cube.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <returns>True if the coordinates are located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Checks if the given voxel is located
            within this cube.
            </summary>
            <param name="IVoxel">A voxel of type T.</param>
            <returns>True if the voxel is located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Checks if the given cube is located
            within this cube.
            </summary>
            <param name="ICube">A cube of type T.</param>
            <returns>True if the cube is located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Checks if the given cube shares some
            area with this cube.
            </summary>
            <param name="ICube">A cube of type T.</param>
            <returns>True if the cube shares some area with this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Cube{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Cube{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Cube1">A Cube&lt;T&gt;.</param>
            <param name="Cube2">Another Cube&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Cube{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Cube{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Cube1">A Cube&lt;T&gt;.</param>
            <param name="Cube2">Another Cube&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Compares two cubes for equality.
            </summary>
            <param name="ICube">A cube to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1">
            <summary>
            A sphere of type T.
            </summary>
            <typeparam name="T">The internal type of the sphere.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Left">
            <summary>
            The left-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Top">
            <summary>
            The top-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Front">
            <summary>
            The front-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Center">
            <summary>
            The center of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Diameter">
            <summary>
            The diameter of the sphere.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Create a sphere of type T.
            </summary>
            <param name="Left">The left-coordinate of the sphere.</param>
            <param name="Top">The top-coordinate of the sphere.</param>
            <param name="Front">The front-coordinate of the sphere.</param>
            <param name="Radius">The radius parameter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Contains(`0,`0,`0)">
            <summary>
            Checks if the given x-, y- and z-coordinates
            are located within this sphere.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <returns>True if the coordinates are located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Checks if the given voxel is located
            within this sphere.
            </summary>
            <param name="Voxel">A voxel.</param>
            <returns>True if the voxel is located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere{`0})">
            <summary>
            Checks if the given sphere is located
            within this sphere.
            </summary>
            <param name="Sphere">A sphere of type T.</param>
            <returns>True if the sphere is located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere{`0})">
            <summary>
            Checks if the given sphere shares some
            area with this sphere.
            </summary>
            <param name="Sphere">A sphere of type T.</param>
            <returns>True if the sphere shares some area with this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Sphere1">A Sphere&lt;T&gt;.</param>
            <param name="Sphere2">Another Sphere&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Sphere1">A Sphere&lt;T&gt;.</param>
            <param name="Sphere2">Another Sphere&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere{`0})">
            <summary>
            Compares two spheres for equality.
            </summary>
            <param name="ISphere">A sphere to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1">
            <summary>
            A voxel of type T.
            </summary>
            <typeparam name="T">The internal type of the voxel.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.Z">
            <summary>
            The Z-coordinate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.#ctor(`0,`0,`0)">
            <summary>
            Create a voxel of type T.
            </summary>
            <param name="X">The X-coordinate.</param>
            <param name="Y">The Y-coordinate.</param>
            <param name="Z">The Z-coordinate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.DistanceTo(`0,`0,`0)">
            <summary>
            A method to calculate the distance between this
            voxel and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <param name="z">A z-coordinate of type T</param>
            <returns>The distance between this voxel and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            A method to calculate the distance between
            this and another voxel of type T.
            </summary>
            <param name="IVoxel">A voxel of type T</param>
            <returns>The distance between this voxel and the given voxel.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Voxel1">A Voxel&lt;T&gt;.</param>
            <param name="Voxel2">Another Voxel&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Voxel1">A Voxel&lt;T&gt;.</param>
            <param name="Voxel2">Another Voxel&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IVoxelT">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Compares two voxels for equality.
            </summary>
            <param name="IVoxel">A voxel to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelSelector`1">
            <summary>
            A delegate selecting which voxels to return.
            </summary>
            <typeparam name="T">The internal datatype of the voxel.</typeparam>
            <param name="Voxel">A voxel of type T.</param>
            <returns>True if the voxel is selected; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2">
            <summary>
            A voxel of type T together with a value of type TValue.
            </summary>
            <typeparam name="T">The internal type of the voxel.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.Value">
            <summary>
            The Value.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.#ctor(`0,`0,`0,`1)">
            <summary>
            Create a voxel of type T together with a value of type TValue.
            </summary>
            <param name="X">The X-coordinate.</param>
            <param name="Y">The Y-coordinate.</param>
            <param name="Z">The Z-coordinate.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="VoxelValuePair1">A VoxelValuePair.</param>
            <param name="VoxelValuePair2">Another VoxelValuePair.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="VoxelValuePair1">A VoxelValuePair.</param>
            <param name="VoxelValuePair2">Another VoxelValuePair.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IVoxelValuePair">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxelValuePair{`0,`1})">
            <summary>
            Compares two voxels for equality.
            </summary>
            <param name="IVoxelValuePair">A voxel to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Delaunay_Triangulation">
            <summary>
            A class for calculating a delaunay triangulation.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Delaunay_Triangulation.DelaunayTriangulation``1(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{``0,org.GraphDefined.Vanaheimr.Illias.Geometry.SensorInfo{``0}}})">
            <summary>
            Calculate a delaunay triangulation for the given enumeration of pixels.
            </summary>
            <typeparam name="T">The type of the pixels.</typeparam>
            <param name="Pixels">An enumeration of pixels of type T.</param>
            <returns>An enumeration of triangles of type T.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.BintreeException`1">
            <summary>
            The base class for all bintree exceptions.
            </summary>
            <typeparam name="T">The internal datatype of the bintree.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.BintreeException`1.Bintree">
            <summary>
            The bintree causing this exception.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.BintreeException`1.Element">
            <summary>
            An optional element causing this exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.BintreeException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree{`0},`0,System.String,System.Exception)">
            <summary>
            A general bintree exception occurred!
            </summary>
            <param name="Bintree">The bintree causing this exception.</param>
            <param name="Element">An optional element causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.BT_ZeroDimensionException`1">
            <summary>
            An exception thrown when at least one dimension
            of the bintree is zero.
            </summary>
            <typeparam name="T">The internal datatype of the bintree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.BT_ZeroDimensionException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when at least one dimension
            of the bintree is zero.
            </summary>
            <param name="Bintree">The bintree causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.BT_OutOfBoundsException`1">
            <summary>
            An exception thrown when the given element is
            located outside of the bintree bounds!
            </summary>
            <typeparam name="T">The internal datatype of the bintree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.BT_OutOfBoundsException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree{`0},`0,System.String,System.Exception)">
            <summary>
            An exception thrown when the given element is
            located outside of the bintree bounds!
            </summary>
            <param name="Bintree">The bintree causing this exception.</param>
            <param name="Element">The element causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.OctreeException`1">
            <summary>
            The base class for all octree exceptions.
            </summary>
            <typeparam name="T">The internal datatype of the octree.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.OctreeException`1.Octree">
            <summary>
            The octree causing this exception.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.OctreeException`1.Voxel">
            <summary>
            An optional voxel causing this exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.OctreeException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Octree{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0},System.String,System.Exception)">
            <summary>
            A general octree exception occurred!
            </summary>
            <param name="Octree">The octree causing this exception.</param>
            <param name="Voxel">An optional voxel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.OT_ZeroDimensionException`1">
            <summary>
            An exception thrown when at least one dimension
            of the octree is zero.
            </summary>
            <typeparam name="T">The internal datatype of the octree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.OT_ZeroDimensionException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Octree{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when at least one dimension
            of the octree is zero.
            </summary>
            <param name="Octree">The octree causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.OT_OutOfBoundsException`1">
            <summary>
            An exception thrown when the given voxel is
            located outside of the octree bounds!
            </summary>
            <typeparam name="T">The internal datatype of the octree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.OT_OutOfBoundsException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Octree{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when the given voxel is
            located outside of the octree bounds!
            </summary>
            <param name="Octree">The octree causing this exception.</param>
            <param name="Voxel">The voxel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`1">
            <summary>
            The base class for all quadtree exceptions.
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`1.Quadtree">
            <summary>
            The quadtree causing this exception.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`1.Pixel">
            <summary>
            An optional pixel causing this exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},System.String,System.Exception)">
            <summary>
            A general quadtree exception occurred!
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Pixel">An optional pixel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`2">
            <summary>
            The base class for all quadtree exceptions.
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`2.Quadtree">
            <summary>
            The quadtree causing this exception.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`2.Pixel">
            <summary>
            An optional pixel causing this exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},System.String,System.Exception)">
            <summary>
            A general quadtree exception occurred!
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Pixel">An optional pixel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_ZeroDimensionException`1">
            <summary>
            An exception thrown when at least one dimension
            of the quadtree is zero.
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_ZeroDimensionException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when at least one dimension
            of the quadtree is zero.
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_ZeroDimensionException`2">
            <summary>
            An exception thrown when at least one dimension
            of the quadtree is zero.
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_ZeroDimensionException`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0,`1},System.String,System.Exception)">
            <summary>
            An exception thrown when at least one dimension
            of the quadtree is zero.
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_OutOfBoundsException`1">
            <summary>
            An exception thrown when the given pixel is
            located outside of the quadtree bounds!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_OutOfBoundsException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when the given pixel is
            located outside of the quadtree bounds!
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Pixel">The pixel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_OutOfBoundsException`2">
            <summary>
            An exception thrown when the given pixel is
            located outside of the quadtree bounds!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_OutOfBoundsException`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when the given pixel is
            located outside of the quadtree bounds!
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Pixel">The pixel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ICubeExtensions">
            <summary>
            Extensions to the ICube interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICubeExtensions.Contains``1(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{``0})">
            <summary>
            Checks if the given voxel is located
            within the given cube.
            </summary>
            <param name="ICube">A cube of type T.</param>
            <param name="IVoxel">A voxel of type T.</param>
            <returns>True if the voxel is located within the given cube; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2DExtensions">
            <summary>
            Extensions to the ILine2D interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2DExtensions.IntersectsWith``1(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{``0},System.Boolean)">
            <summary>
            Checks if the given lines intersect.
            </summary>
            <param name="Line1">A line.</param>
            <param name="Line2">A line.</param>
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
            <returns>True if the lines intersect; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2DExtensions.Intersection``1(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{``0},System.Boolean)">
            <summary>
            Returns the intersection of both lines.
            </summary>
            <param name="Line1">A line.</param>
            <param name="Line2">A line.</param>
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2DExtensions.IsJustAPixel``1(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{``0})">
            <summary>
            Checks if the given line is "just a pixel".
            </summary>
            <param name="Line">A line.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelExtensions">
            <summary>
            Extensions to the IPixel interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelExtensions.IsInRectangle``1(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0},``0,``0,``0,``0)">
            <summary>
            Checks if the given pixel is located
            within the given rectangle.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <param name="X1"></param>
            <param name="Y1"></param>
            <param name="X2"></param>
            <param name="Y2"></param>        
            <returns>True if the pixel is located within the given rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelExtensions.IsInRectangle``1(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0})">
            <summary>
            Checks if the given pixel is located
            within the given rectangle.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <param name="Pixel1">The left/top pixel of the rectangle.</param>
            <param name="Pixel2">The right/bottom pixel of the rectangle.</param>
            <returns>True if the pixel is located within the given rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelExtensions.IsInRectangle``1(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{``0})">
            <summary>
            Checks if the given pixel is located
            within the given rectangle.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <param name="Rectangle">A rectangle of type T.</param>
            <returns>True if the pixel is located within the given rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelExtensions.IsInCircle``1(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{``0})">
            <summary>
            Checks if the given pixel is located
            within the given rectangle.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the pixel is located within the given circle; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangleExtensions">
            <summary>
            Extensions to the IRectangle interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangleExtensions.Contains``1(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0})">
            <summary>
            Checks if the given pixel is located
            within the given rectangle.
            </summary>
            <param name="Rectangle">A rectanlge of type T.</param>
            <param name="Pixel">A pixel of type T.</param>
            <returns>True if the pixel is located within the given rectangle; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ElementSelector`1">
            <summary>
            A delegate selecting which element to return.
            </summary>
            <typeparam name="T">The internal type of the element.</typeparam>
            <param name="Element">An element of type T.</param>
            <returns>True if the element is selected; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.BintreeSplitEventHandler`1">
            <summary>
            An event handler delegate definition whenever an
            bintree splits an internal line.
            </summary>
            <typeparam name="T">The type of the Bintree.</typeparam>
            <param name="Bintree">The sending bintree.</param>
            <param name="Element">The element causing the split.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1">
            <summary>
            A bintree is an indexing structure for 1-dimensional spartial data.
            It stores the given maximum number of elements and forkes itself
            into two subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the Bintree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.OnTreeSplit">
            <summary>
            An event to notify about a bintree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.MaxNumberOfEmbeddedElements">
            <summary>
            The maximum number of embedded elements before
            two subtrees will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.EmbeddedCount">
            <summary>
            Return the number of embedded elements
            stored within this bintree(-node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Count">
            <summary>
            Return the number of elements stored
            within the entire bintree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.#ctor(`0,`0,System.UInt32)">
            <summary>
            Create a bintree of type T.
            </summary>
            <param name="Left">The left-coordinate of the line.</param>
            <param name="Right">The right-coordinate of the line.</param>
            <param name="MaxNumberOfEmbeddedElements">The maximum number of embedded elements before four child node will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Add(`0)">
            <summary>
            Add an element to the bintree.
            </summary>
            <param name="Element">A element of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ElementSelector{`0})">
            <summary>
            Return all elements matching the given elementselector delegate.
            </summary>
            <param name="ElementSelector">A delegate selecting which elements to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Return all elements within the given line.
            </summary>
            <param name="Line">A line selecting which elements to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Remove(`0)">
            <summary>
            Remove an element from the bintree.
            </summary>
            <param name="Element">A element of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Remove all elements located within the given line.
            </summary>
            <param name="Line">A line selecting which elements to remove.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.GetEnumerator">
            <summary>
            Return an enumeration of all stored data.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumeration of all stored data.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.OctreeSplitEventHandler`1">
            <summary>
            An event handler delegate definition whenever an
            octree splits an internal cube.
            </summary>
            <typeparam name="T">The type of the Octree.</typeparam>
            <param name="Octree">The sending octree.</param>
            <param name="Voxel">The voxel causing the split.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1">
            <summary>
            A Octree is an indexing structure for two-dimensional spartial data.
            It stores the given maximum number of voxels and forkes itself
            into eight subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the octree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.OnTreeSplit">
            <summary>
            An event to notify about an octree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.MaxNumberOfEmbeddedVoxels">
            <summary>
            The maximum number of embedded voxels before
            eight subtrees will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.EmbeddedCount">
            <summary>
            Return the number of embedded voxels
            stored within this octree(-node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Count">
            <summary>
            Return the number of voxels stored
            within the entire octree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.#ctor(`0,`0,`0,`0,`0,`0,System.UInt32)">
            <summary>
            Create a octree of type T.
            </summary>
            <param name="Left">The left-coordinate.</param>
            <param name="Top">The top-coordinate.</param>
            <param name="Front">The front-coordinate.</param>
            <param name="Right">The right-coordinate.</param>
            <param name="Bottom">The bottom-coordinate.</param>
            <param name="Behind">The behind-coordinate.</param>
            <param name="MaxNumberOfEmbeddedVoxels">The maximum number of embedded voxels before eight subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},System.UInt32)">
            <summary>
            Create a octree of type T.
            </summary>
            <param name="Voxel1">A voxel of type T.</param>
            <param name="Voxel2">A voxel of type T.</param>
            <param name="MaxNumberOfEmbeddedVoxels">The maximum number of embedded voxels before eight subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},`0,`0,`0,System.UInt32)">
            <summary>
            Create a octree of type T.
            </summary>
            <param name="Voxel">A voxel of type T in the upper left corner of the octree.</param>
            <param name="Width">The width of the octree.</param>
            <param name="Height">The height of the octree.</param>
            <param name="Depth">The depth of the octree.</param>
            <param name="MaxNumberOfEmbeddedVoxels">The maximum number of embedded voxels before eight subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Add a voxel to the octree.
            </summary>
            <param name="Voxel">A voxel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelSelector{`0})">
            <summary>
            Return all voxels matching the given voxelselector delegate.
            </summary>
            <param name="VoxelSelector">A delegate selecting which voxels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Return all voxels within the given cube.
            </summary>
            <param name="Cube">A cube selecting which voxels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Remove a voxel from the octree.
            </summary>
            <param name="Voxel">A voxel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Remove all voxels located within the given cube.
            </summary>
            <param name="Cube">A cube selecting which voxels to remove.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.GetEnumerator">
            <summary>
            Return an enumeration of all stored voxels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumeration of all stored voxels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeSplitEventHandler`1">
            <summary>
            An event handler delegate definition whenever an
            quadtree splits an internal rectangle.
            </summary>
            <typeparam name="T">The type of the Quadtree.</typeparam>
            <param name="Quadtree">The sending quadtree.</param>
            <param name="Pixel">The pixel causing the split.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeSplitEventHandler`2">
            <summary>
            An event handler delegate definition whenever an
            quadtree splits an internal rectangle.
            </summary>
            <typeparam name="T">The type of the Quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
            <param name="Quadtree">The sending quadtree.</param>
            <param name="Pixel">The pixel causing the split.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1">
            <summary>
            A quadtree is an indexing structure for 2-dimensional spartial data.
            It stores the given maximum number of pixels and forkes itself
            into four subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.OnTreeSplit">
            <summary>
            An event to notify about a quadtree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.MaxNumberOfEmbeddedPixels">
            <summary>
            The maximum number of embedded pixels before
            four subtrees will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.EmbeddedCount">
            <summary>
            Return the number of embedded pixels
            stored within this quadtree(-node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Count">
            <summary>
            Return the number of pixels stored
            within the entire quadtree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.#ctor(`0,`0,`0,`0,System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Left">The left-coordinate.</param>
            <param name="Top">The top-coordinate.</param>
            <param name="Right">The right-coordinate.</param>
            <param name="Bottom">The bottom-coordinate.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Pixel1">A pixel of type T.</param>
            <param name="Pixel2">A pixel of type T.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},`0,`0,System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Pixel">A pixel of type T in the upper left corner of the quadtree.</param>
            <param name="Width">The width of the quadtree.</param>
            <param name="Height">The height of the quadtree.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Add(`0,`0)">
            <summary>
            Add a pixel to the quadtree.
            </summary>
            <param name="X">The x-coordinate of a pixel of type T.</param>
            <param name="Y">The y-coordinate of a pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Add a pixel to the quadtree.
            </summary>
            <param name="IPixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelSelector{`0})">
            <summary>
            Return all pixels matching the given pixelselector delegate.
            </summary>
            <param name="PixelSelector">A delegate selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Return all pixels within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Remove a pixel from the quadtree.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Remove all pixels located within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to remove.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.GetEnumerator">
            <summary>
            Return an enumeration of all stored pixels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumeration of all stored pixels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2">
            <summary>
            A quadtree is an indexing structure for 2-dimensional spartial data.
            It stores the given maximum number of pixels and forkes itself
            into four subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.OnTreeSplit">
            <summary>
            An event to notify about a quadtree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.MaxNumberOfEmbeddedPixels">
            <summary>
            The maximum number of embedded pixels before
            four subtrees will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.EmbeddedCount">
            <summary>
            Return the number of embedded pixels
            stored within this quadtree(-node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Count">
            <summary>
            Return the number of pixels stored
            within the entire quadtree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.#ctor(`0,`0,`0,`0,System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Left">The left-coordinate.</param>
            <param name="Top">The top-coordinate.</param>
            <param name="Right">The right-coordinate.</param>
            <param name="Bottom">The bottom-coordinate.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Pixel1">A pixel of type T.</param>
            <param name="Pixel2">A pixel of type T.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},`0,`0,System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Pixel">A pixel of type T in the upper left corner of the quadtree.</param>
            <param name="Width">The width of the quadtree.</param>
            <param name="Height">The height of the quadtree.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Add(`0,`0,`1)">
            <summary>
            Add a pixel together with a value to the quadtree.
            </summary>
            <param name="X">The x-coordinate of a pixel of type T.</param>
            <param name="Y">The y-coordinate of a pixel of type T.</param>
            <param name="Value">A value of type TValue.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`1)">
            <summary>
            Add a pixel together with a value to the quadtree.
            </summary>
            <param name="IPixel">A pixel of type T.</param>
            <param name="Value">A value of type TValue.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Add a PixelValuePair to the quadtree.
            </summary>
            <param name="IPixelValuePair">A PixelValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelSelector{`0})">
            <summary>
            Return all pixels matching the given pixelselector delegate.
            </summary>
            <param name="PixelSelector">A delegate selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Return all pixels within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Remove a pixel from the quadtree.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Remove all pixels located within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to remove.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.GetEnumerator">
            <summary>
            Return an enumeration of all stored pixels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumeration of all stored pixels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1">
            <summary>
            The interface of a 1-dimensional line of type T.
            </summary>
            <typeparam name="T">The internal type of the line.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Left">
            <summary>
            The left-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Right">
            <summary>
            The right-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Length">
            <summary>
            The length of the line.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Contains(`0)">
            <summary>
            Checks if the given element is located on this line.
            </summary>
            <param name="Element">An element.</param>
            <returns>True if the element is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Checks if the given line is located on this line.
            </summary>
            <param name="Line">A line of type T.</param>
            <returns>True if the line is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Checks if the given line shares some
            area with this line.
            </summary>
            <param name="Line">A line of type T.</param>
            <returns>True if the line shares some area with this line; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1">
            <summary>
            The interface of a circle of type T.
            </summary>
            <typeparam name="T">The internal type of the circle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.X">
            <summary>
            The x-coordinate of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Y">
            <summary>
            The y-coordinate of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Center">
            <summary>
            The center of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Radius">
            <summary>
            Radius
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Diameter">
            <summary>
            The diameter of the circle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Contains(`0,`0)">
            <summary>
            Checks if the given x- and y-coordinates are
            located within this circle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the coordinates are located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located
            within this circle.
            </summary>
            <param name="Pixel">A pixel.</param>
            <returns>True if the pixel is located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{`0})">
            <summary>
            Checks if the given circle is located
            within this circle.
            </summary>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the circle is located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{`0})">
            <summary>
            Checks if the given circle shares some
            area with this circle.
            </summary>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the circle shares some area with this circle; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1">
            <summary>
            The interface of a 2-dimensional line of type T.
            </summary>
            <typeparam name="T">The internal type of the line.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.X1">
            <summary>
            The first x-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Y1">
            <summary>
            The first y-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.X2">
            <summary>
            The second x-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Y2">
            <summary>
            The second y-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Pixel1">
            <summary>
            The left/top pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Pixel2">
            <summary>
            The right/bottom pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Length">
            <summary>
            The length of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Gradient">
            <summary>
            The gradient/inclination of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.YIntercept">
            <summary>
            The interception of the line with the y-axis.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Center">
            <summary>
            The center pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Vector">
            <summary>
            The vector of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Normale">
            <summary>
            The normale vector of the line.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located on this line.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <returns>True if the pixel is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.IntersectsWith(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0}@,System.Boolean)">
            <summary>
            Checks if and where the given lines intersect.
            </summary>
            <param name="Line">A line.</param>
            <param name="Pixel">The intersection of both lines.</param>        
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
            <returns>True if the lines intersect; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel`1">
            <summary>
            The interface of a pixel of type T.
            </summary>
            <typeparam name="T">The internal type of the pixel.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel`1.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel`1.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel`1.DistanceTo(`0,`0)">
            <summary>
            A method to calculate the distance between this
            pixel and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <returns>The distance between this pixel and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            A method to calculate the distance between
            this and another pixel of type T.
            </summary>
            <param name="Pixel">A pixel of type T</param>
            <returns>The distance between this pixel and the given pixel.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair`2">
            <summary>
            The interface of a PixelValuePair.
            </summary>
            <typeparam name="T">The internal type of the pixel.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair`2.Value">
            <summary>
            The value stored together with a pixel.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IPolygon`1">
            <summary>
            The interface of a polygon of type T.
            </summary>
            <typeparam name="T">The internal type of the polygon.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IPolygon`1.Pixels">
            <summary>
            The pixels of the polygon.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IPolygon`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the polygon.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1">
            <summary>
            The interface of a rectangle of type T.
            </summary>
            <typeparam name="T">The internal type of the rectangle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Left">
            <summary>
            The left-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Top">
            <summary>
            The top-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Right">
            <summary>
            The right-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Bottom">
            <summary>
            The bottom-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Diameter">
            <summary>
            The length of the diagonale (diameter) of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Center">
            <summary>
            The center pixel of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Diagonales">
            <summary>
            Return an enumeration of lines representing the diagonales of the rectangle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Contains(`0,`0)">
            <summary>
            Checks if the given x- and y-coordinates are
            located within this rectangle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the coordinates are located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located
            within this rectangle.
            </summary>
            <param name="Pixel">A pixel.</param>
            <returns>True if the pixel is located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Checks if the given rectangle is located
            within this rectangle.
            </summary>
            <param name="Rectangle">A rectangle of type T.</param>
            <returns>True if the rectangle is located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Checks if the given rectangle shares some
            area with this rectangle.
            </summary>
            <param name="Rectangle">A rectangle of type T.</param>
            <returns>True if the rectangle shares some area with this rectangle; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1">
            <summary>
            The interface of a triangle of type T.
            </summary>
            <typeparam name="T">The internal type of the triangle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.P1">
            <summary>
            The first pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.P2">
            <summary>
            The second pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.P3">
            <summary>
            The third pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.CircumCenter">
            <summary>
            Return the cirumcenter of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.CircumCircle">
            <summary>
            Return the circumcircle of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the triangle.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangleValuePair`2">
            <summary>
            A triangle of type T together with a value of type TValue.
            </summary>
            <typeparam name="T">The internal type of the triangle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangleValuePair`2.Value">
            <summary>
            The value stored together with a triangle.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1">
            <summary>
            The interface of a 2-dimensional vector of type T.
            </summary>
            <typeparam name="T">The internal type of the vector.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.X">
            <summary>
            The ToLeft-component of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.Y">
            <summary>
            The ToBottom-component of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.Length">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.NormVector">
            <summary>
            Return a normalized vector.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.IsParallelTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            Determines if the given vector is parallel or
            antiparallel to this vector.
            </summary>
            <param name="Vector">A vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.DistanceTo(`0,`0)">
            <summary>
            A method to calculate the distance between this
            vector and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <returns>The distance between this vector and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the distance between
            this and another vector of type T.
            </summary>
            <param name="Vector">A vector of type T</param>
            <returns>The distance between this vector and the given vector.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1">
            <summary>
            The interface of a cube of type T.
            </summary>
            <typeparam name="T">The internal type of the cube.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Front">
            <summary>
            Front
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Behind">
            <summary>
            Behind
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Width">
            <summary>
            The width of the cube.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Height">
            <summary>
            The height of the cube.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Depth">
            <summary>
            The depth of the cube.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Contains(`0,`0,`0)">
            <summary>
            Checks if the given x-, y- and z-coordinates
            are located within this cube.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <returns>True if the coordinates are located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Checks if the given voxel is located
            within this cube.
            </summary>
            <param name="Voxel">A voxel of type T.</param>
            <returns>True if the voxel is located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Checks if the given cube is located
            within this cube.
            </summary>
            <param name="Cube">A cube of type T.</param>
            <returns>True if the cube is located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Checks if the given cube shares some
            area with this cube.
            </summary>
            <param name="Cube">A cube of type T.</param>
            <returns>True if the cube shares some area with this cube; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1">
            <summary>
            The interface of a sphere of type T.
            </summary>
            <typeparam name="T">The internal type of the sphere.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Left">
            <summary>
            The left-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Top">
            <summary>
            The top-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Front">
            <summary>
            The front-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Center">
            <summary>
            The center of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Radius">
            <summary>
            Radius
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Diameter">
            <summary>
            The diameter of the sphere.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Contains(`0,`0,`0)">
            <summary>
            Checks if the given x-, y- and z-coordinates
            are located within this sphere.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <returns>True if the coordinates are located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Checks if the given voxel is located
            within this sphere.
            </summary>
            <param name="Voxel">A voxel.</param>
            <returns>True if the voxel is located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere{`0})">
            <summary>
            Checks if the given sphere is located
            within this sphere.
            </summary>
            <param name="Sphere">A sphere of type T.</param>
            <returns>True if the sphere is located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere{`0})">
            <summary>
            Checks if the given sphere shares some
            area with this sphere.
            </summary>
            <param name="Sphere">A sphere of type T.</param>
            <returns>True if the sphere shares some area with this sphere; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1">
            <summary>
            The interface of a voxel of type T.
            </summary>
            <typeparam name="T">The internal type of the voxel.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1.Z">
            <summary>
            The Z-coordinate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1.DistanceTo(`0,`0,`0)">
            <summary>
            A method to calculate the distance between this
            voxel and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <param name="z">A z-coordinate of type T</param>
            <returns>The distance between this voxel and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            A method to calculate the distance between
            this and another voxel of type T.
            </summary>
            <param name="Voxel">A voxel of type T</param>
            <returns>The distance between this voxel and the given voxel.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxelValuePair`2">
            <summary>
            The interface of a VoxelValuePair.
            </summary>
            <typeparam name="TKey">The internal type of the voxel.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxelValuePair`2.Value">
            <summary>
            The value stored together with a voxel.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1">
            <summary>
            A bintree is an indexing structure for 1-dimensional spartial data.
            It stores the given maximum number of elements and forkes itself
            into two subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the bintree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.OnTreeSplit">
            <summary>
            An event to notify about an bintree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.MaxNumberOfEmbeddedElements">
            <summary>
            The maximum number of embedded elements before
            four child node will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.EmbeddedCount">
            <summary>
            Return the number of embedded pixels
            stored within this Bintree(Node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Count">
            <summary>
            Return the number of pixels stored
            within the entire bintree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Add(`0)">
            <summary>
            Add an element to the bintree.
            </summary>
            <param name="Element">An element of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ElementSelector{`0})">
            <summary>
            Return all elements matching the given elementselector delegate.
            </summary>
            <param name="ElementSelector">A delegate selecting which elements to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Return all elements within the given line.
            </summary>
            <param name="Line">A line selecting which elements to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Remove(`0)">
            <summary>
            Remove a element from the bintree.
            </summary>
            <param name="Element">An element of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Remove all elements located within the given line.
            </summary>
            <param name="Line">A line selecting which elements to remove.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1">
            <summary>
            A octree is an indexing structure for 3-dimensional spartial data.
            It stores the given maximum number of voxels and forkes itself
            into eight subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the octree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.OnTreeSplit">
            <summary>
            An event to notify about an octree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.MaxNumberOfEmbeddedVoxels">
            <summary>
            The maximum number of embedded elements before
            four child node will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.EmbeddedCount">
            <summary>
            Return the number of embedded voxels
            stored within this Octree(Node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Count">
            <summary>
            Return the number of voxels stored
            within the entire octree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Add a voxel to the Octree.
            </summary>
            <param name="Voxel">A voxel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelSelector{`0})">
            <summary>
            Return all voxels matching the given voxelselector delegate.
            </summary>
            <param name="VoxelSelector">A delegate selecting which voxels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Return all voxels within the given cube.
            </summary>
            <param name="Cube">A cube selecting which voxels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Remove a voxel from the Octree.
            </summary>
            <param name="Voxel">A voxel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Remove all voxels located within the given cube.
            </summary>
            <param name="Cube">A cube selecting which voxels to remove.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree">
            <summary>
            A quadtree is an indexing structure for 2-dimensional spartial data.
            It stores the given maximum number of pixels and forkes itself
            into four subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree.MaxNumberOfEmbeddedPixels">
            <summary>
            The maximum number of embedded elements before
            four child node will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree.EmbeddedCount">
            <summary>
            Return the number of embedded pixels
            stored within this Quadtree(Node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree.Count">
            <summary>
            Return the number of pixels stored
            within the entire quadtree.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1">
            <summary>
            A quadtree is an indexing structure for 2-dimensional spartial data.
            It stores the given maximum number of pixels and forkes itself
            into four subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.OnTreeSplit">
            <summary>
            An event to notify about an quadtree split happening.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Add(`0,`0)">
            <summary>
            Add a pixel to the quadtree.
            </summary>
            <param name="X">The x-coordinate of a pixel of type T.</param>
            <param name="Y">The y-coordinate of a pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Add a pixel to the quadtree.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelSelector{`0})">
            <summary>
            Return all pixels matching the given pixelselector delegate.
            </summary>
            <param name="PixelSelector">A delegate selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Return all pixels within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Remove a pixel from the quadtree.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Remove all pixels located within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to remove.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2">
            <summary>
            A quadtree is an indexing structure for 2-dimensional spartial data.
            It stores the given maximum number of pixels and forkes itself
            into four subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.OnTreeSplit">
            <summary>
            An event to notify about an quadtree split happening.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Add(`0,`0,`1)">
            <summary>
            Add a pixel together with a value to the quadtree.
            </summary>
            <param name="X">The x-coordinate of a pixel of type T.</param>
            <param name="Y">The y-coordinate of a pixel of type T.</param>
            <param name="Value">A value of type TValue.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`1)">
            <summary>
            Add a pixel together with a value to the quadtree.
            </summary>
            <param name="IPixel">A pixel of type T.</param>
            <param name="Value">A value of type TValue.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Add a PixelValuePair to the quadtree.
            </summary>
            <param name="IPixelValuePair">A PixelValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelSelector{`0})">
            <summary>
            Return all pixels matching the given pixelselector delegate.
            </summary>
            <param name="PixelSelector">A delegate selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Return all pixels within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Remove a pixel from the quadtree.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Remove all pixels located within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to remove.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1">
            <summary>
            An interface defining maths operations on the given datatype.
            </summary>
            <typeparam name="T">The internal dataype.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Min(`0[])">
            <summary>
            A method to get the minimum of an array of internal datatypes.
            </summary>
            <param name="Values">An array of type T</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Max(`0[])">
            <summary>
            A method to get the maximum of an array of internal datatypes.
            </summary>
            <param name="Values">An array of type T</param>
            <returns>The maximum of all values: Max(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Add(`0[])">
            <summary>
            A method to add internal datatypes.
            </summary>
            <param name="Summands">An array of Doubles.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Sub(`0,`0)">
            <summary>
            A method to sub two internal datatypes.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Mul(`0[])">
            <summary>
            A method to multiply internal datatypes.
            </summary>
            <param name="Multiplicators">An array of type T.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Mul2(`0)">
            <summary>
            A method to multiply the internal datatype by 2.
            </summary>
            <param name="a">An object of type T</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Div(`0,`0)">
            <summary>
            A method to divide two internal datatypes.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Div2(`0)">
            <summary>
            A method to divide the internal datatype by 2.
            </summary>
            <param name="a">An object of type T</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Pow(`0,`0)">
            <summary>
            A method to calculate an internal datatype raised to the specified power.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Inv(`0)">
            <summary>
            A method to calculate the inverse value of the internal datatype.
            </summary>
            <param name="a">An object of type T</param>
            <returns>The inverse value of a: -a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Abs(`0)">
            <summary>
            A method to calculate the absolute value of the internal datatype.
            </summary>
            <param name="a">An object of type T</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Sqrt(`0)">
            <summary>
            A method to calculate the square root of the internal datatype.
            </summary>
            <param name="a">An object of type T</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Distance(`0,`0)">
            <summary>
            A method to calculate the distance between two internal datatypes.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble">
            <summary>
            Defining math operations on Double.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Instance">
            <summary>
            Return a singelton instance of this maths class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Min(System.Double[])">
            <summary>
            A method to get the minimum of an array of Doubles.
            </summary>
            <param name="Values">An array of Doubles.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Max(System.Double[])">
            <summary>
            A method to get the maximum of an array of Doubles.
            </summary>
            <param name="Values">An array of Doubles.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Add(System.Double[])">
            <summary>
            A method to add Doubles.
            </summary>
            <param name="Summands">An array of Doubles.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Sub(System.Double,System.Double)">
            <summary>
            A method to sub two Doubles.
            </summary>
            <param name="a">A Double.</param>
            <param name="b">A Double.</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Mul(System.Double[])">
            <summary>
            A method to multiply Doubles.
            </summary>
            <param name="Multiplicators">An array of Doubles.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Mul2(System.Double)">
            <summary>
            A method to multiply a Double by 2.
            </summary>
            <param name="a">A Double.</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Div(System.Double,System.Double)">
            <summary>
            A method to divide two Doubles.
            </summary>
            <param name="a">A Double.</param>
            <param name="b">A Double.</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Div2(System.Double)">
            <summary>
            A method to divide a Double by 2.
            </summary>
            <param name="a">A Double.</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Pow(System.Double,System.Double)">
            <summary>
            A method to calculate a Double raised to the specified power.
            </summary>
            <param name="a">A Double.</param>
            <param name="b">A Double.</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Inv(System.Double)">
            <summary>
            A method to calculate the inverse value of the given Double.
            </summary>
            <param name="a">A Double.</param>
            <returns>The inverse value of a: -a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Abs(System.Double)">
            <summary>
            A method to calculate the absolute value of the given Double.
            </summary>
            <param name="a">A Double.</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Sqrt(System.Double)">
            <summary>
            A method to calculate the square root of the Double.
            </summary>
            <param name="a">A Double.</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Distance(System.Double,System.Double)">
            <summary>
            A method to calculate the distance between two Doubles.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsFactory`1">
            <summary>
            Build and return an appropriate math object for datatype T.
            </summary>
            <typeparam name="T">The internal type of the maths object.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsFactory`1.Instance">
            <summary>
            Return an appropriate maths object for datatype T.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32">
            <summary>
            Defining math operations on Int32.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Instance">
            <summary>
            Return a singelton instance of this maths class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Min(System.Int32[])">
            <summary>
            A method to get the minimum of an array of Int32s.
            </summary>
            <param name="Values">An array of Int32s.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Max(System.Int32[])">
            <summary>
            A method to get the maximum of an array of Int32s.
            </summary>
            <param name="Values">An array of Int32s.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Add(System.Int32[])">
            <summary>
            A method to add Int32s.
            </summary>
            <param name="Summands">An array of Int32s.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Sub(System.Int32,System.Int32)">
            <summary>
            A method to sub two Int32s.
            </summary>
            <param name="a">A Int32.</param>
            <param name="b">A Int32.</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Mul(System.Int32[])">
            <summary>
            A method to multiply Int32s.
            </summary>
            <param name="Multiplicators">An array of Int32s.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Mul2(System.Int32)">
            <summary>
            A method to multiply an Int32 by 2.
            </summary>
            <param name="a">An Int32.</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Div(System.Int32,System.Int32)">
            <summary>
            A method to divide two Int32s.
            </summary>
            <param name="a">A Int32.</param>
            <param name="b">A Int32.</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Div2(System.Int32)">
            <summary>
            A method to divide an Int32 by 2.
            </summary>
            <param name="a">A Int32.</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Pow(System.Int32,System.Int32)">
            <summary>
            A method to calculate a Int32 raised to the specified power.
            </summary>
            <param name="a">A Int32.</param>
            <param name="b">A Int32.</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Inv(System.Int32)">
            <summary>
            A method to calculate the inverse value of the given Int32.
            </summary>
            <param name="a">An Int32.</param>
            <returns>The inverse value of a: -a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Abs(System.Int32)">
            <summary>
            A method to calculate the absolute value of the given Int32.
            </summary>
            <param name="a">An Int32.</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Sqrt(System.Int32)">
            <summary>
            A method to calculate the square root of the Int32.
            </summary>
            <param name="a">A Int32.</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Distance(System.Int32,System.Int32)">
            <summary>
            A method to calculate the distance between two Int32s.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64">
            <summary>
            Defining math operations on Int64.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Instance">
            <summary>
            Return a singelton instance of this maths class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Min(System.Int64[])">
            <summary>
            A method to get the minimum of an array of Int64s.
            </summary>
            <param name="Values">An array of Int64s.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Max(System.Int64[])">
            <summary>
            A method to get the maximum of an array of Int64s.
            </summary>
            <param name="Values">An array of Int64s.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Add(System.Int64[])">
            <summary>
            A method to add Int64s.
            </summary>
            <param name="Summands">An array of Int64s.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Sub(System.Int64,System.Int64)">
            <summary>
            A method to sub two Int64s.
            </summary>
            <param name="a">A Int64.</param>
            <param name="b">A Int64.</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Mul(System.Int64[])">
            <summary>
            A method to multiply Int64s.
            </summary>
            <param name="Multiplicators">An array of Int64s.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Mul2(System.Int64)">
            <summary>
            A method to multiply an Int64 by 2.
            </summary>
            <param name="a">An Int64.</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Div(System.Int64,System.Int64)">
            <summary>
            A method to divide two Int64s.
            </summary>
            <param name="a">A Int64.</param>
            <param name="b">A Int64.</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Div2(System.Int64)">
            <summary>
            A method to divide an Int64 by 2.
            </summary>
            <param name="a">A Int64.</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Pow(System.Int64,System.Int64)">
            <summary>
            A method to calculate a Int64 raised to the specified power.
            </summary>
            <param name="a">A Int64.</param>
            <param name="b">A Int64.</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Inv(System.Int64)">
            <summary>
            A method to calculate the inverse value of the given Int64.
            </summary>
            <param name="a">An Int64.</param>
            <returns>The inverse value of a: -a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Abs(System.Int64)">
            <summary>
            A method to calculate the absolute value of the given Int64.
            </summary>
            <param name="a">An Int64.</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Sqrt(System.Int64)">
            <summary>
            A method to calculate the square root of the Int64.
            </summary>
            <param name="a">A Int64.</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Distance(System.Int64,System.Int64)">
            <summary>
            A method to calculate the distance between two Int64s.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle">
            <summary>
            Defining math operations on Single.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Instance">
            <summary>
            Return a singelton instance of this maths class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Min(System.Single[])">
            <summary>
            A method to get the minimum of an array of Singles.
            </summary>
            <param name="Values">An array of Singles.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Max(System.Single[])">
            <summary>
            A method to get the maximum of an array of Singles.
            </summary>
            <param name="Values">An array of Singles.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Add(System.Single[])">
            <summary>
            A method to add Singles.
            </summary>
            <param name="Summands">An array of Singles.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Sub(System.Single,System.Single)">
            <summary>
            A method to sub two Singles.
            </summary>
            <param name="a">A Single.</param>
            <param name="b">A Single.</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Mul(System.Single[])">
            <summary>
            A method to multiply Singles.
            </summary>
            <param name="Multiplicators">An array of Singles.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Mul2(System.Single)">
            <summary>
            A method to multiply a Single by 2.
            </summary>
            <param name="a">A Single.</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Div(System.Single,System.Single)">
            <summary>
            A method to divide two Singles.
            </summary>
            <param name="a">A Single.</param>
            <param name="b">A Single.</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Div2(System.Single)">
            <summary>
            A method to divide a Single by 2.
            </summary>
            <param name="a">A Single.</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Pow(System.Single,System.Single)">
            <summary>
            A method to calculate a Single raised to the specified power.
            </summary>
            <param name="a">A Single.</param>
            <param name="b">A Single.</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Inv(System.Single)">
            <summary>
            A method to calculate the inverse value of the given Single.
            </summary>
            <param name="a">A Single.</param>
            <returns>The inverse value of a: -a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Abs(System.Single)">
            <summary>
            A method to calculate the absolute value of the given Single.
            </summary>
            <param name="a">A Single.</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Sqrt(System.Single)">
            <summary>
            A method to calculate the square root of the Single.
            </summary>
            <param name="a">A Single.</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Distance(System.Single,System.Single)">
            <summary>
            A method to calculate the distance between two Singles.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32">
            <summary>
            Defining math operations on UInt32.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Instance">
            <summary>
            Return a singelton instance of this maths class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Min(System.UInt32[])">
            <summary>
            A method to get the minimum of an array of UInt32s.
            </summary>
            <param name="Values">An array of UInt32s.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Max(System.UInt32[])">
            <summary>
            A method to get the maximum of an array of UInt32s.
            </summary>
            <param name="Values">An array of UInt32s.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Add(System.UInt32[])">
            <summary>
            A method to add UInt32s.
            </summary>
            <param name="Summands">An array of UInt32s.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Sub(System.UInt32,System.UInt32)">
            <summary>
            A method to sub two UInt32s.
            </summary>
            <param name="a">A UInt32.</param>
            <param name="b">A UInt32.</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Mul(System.UInt32[])">
            <summary>
            A method to multiply UInt32s.
            </summary>
            <param name="Multiplicators">An array of UInt32s.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Mul2(System.UInt32)">
            <summary>
            A method to multiply an UInt32 by 2.
            </summary>
            <param name="a">An UInt32.</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Div(System.UInt32,System.UInt32)">
            <summary>
            A method to divide two UInt32s.
            </summary>
            <param name="a">A UInt32.</param>
            <param name="b">A UInt32.</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Div2(System.UInt32)">
            <summary>
            A method to divide an UInt32 by 2.
            </summary>
            <param name="a">A UInt32.</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Pow(System.UInt32,System.UInt32)">
            <summary>
            A method to calculate a UInt32 raised to the specified power.
            </summary>
            <param name="a">A UInt32.</param>
            <param name="b">A UInt32.</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Inv(System.UInt32)">
            <summary>
            A method to calculate the inverse value of the given UInt32,
            but actually returns a for unsigned datatypes.
            </summary>
            <param name="a">An UInt32.</param>
            <returns>The inverse value of a: a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Abs(System.UInt32)">
            <summary>
            A method to calculate the absolute value of the given UInt32.
            </summary>
            <param name="a">An UInt32.</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Sqrt(System.UInt32)">
            <summary>
            A method to calculate the square root of the UInt32.
            </summary>
            <param name="a">A UInt32.</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Distance(System.UInt32,System.UInt32)">
            <summary>
            A method to calculate the distance between two UInt32s.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Tools.NumericTypeExtensions">
            <summary>
            Some type extensions to check for numeric types.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Tools.NumericTypeExtensions.IsArithmetic(System.Type)">
            <summary>
            Checks whether the given type is arithmetic or not.
            </summary>
            <param name="Type">A type.</param>
            <returns>True if the type is arithmetic; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Tools.NumericTypeExtensions.IsInteger(System.Type)">
            <summary>
            Checks whether the given type is any kind of an integer or not.
            </summary>
            <param name="Type">A type.</param>
            <returns>True if the type is any kind of an integer; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Tools.NumericTypeExtensions.IsFloatingPoint(System.Type)">
            <summary>
            Checks whether the given type is any kind of a floating point or not.
            </summary>
            <param name="Type">A type.</param>
            <returns>True if the type is any kind of a floating point; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Tools.NumericTypeExtensions.IsNumeric(System.Type)">
            <summary>
            Checks whether the given type is any kind of a numeric or not.
            </summary>
            <param name="Type">A type.</param>
            <returns>True if the type is any kind of a numeric; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Voronoi">
            <summary>
            A class for calculating a voronoi diagram.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.AInternalData">
            <summary>
            An abstract data structure for internal customer-specific data.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AInternalData.internalData">
            <summary>
            An optional dictionary of customer-specific data.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AInternalData.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a new data structure for customer specific data.
            </summary>
            <param name="InternalData">An optional dictionary of customer-specific data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AInternalData.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Create a new data structure for customer specific data.
            </summary>
            <param name="InternalData">An optional dictionary of customer-specific data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AInternalData.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Create a new data structure for customer specific data.
            </summary>
            <param name="InternalData">An optional dictionary of customer-specific data.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.AInternalData.Builder">
            <summary>
            An abstract builder for internal customer-specific data.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AInternalData.Builder.internalData">
            <summary>
            All internal data.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AInternalData.Builder.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a new data structure for internal customer specific data.
            </summary>
            <param name="InternalData">An optional dictionary of internal customer-specific data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AInternalData.Builder.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Create a new data structure for customer specific data.
            </summary>
            <param name="InternalData">An optional dictionary of internal customer-specific data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AInternalData.Builder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Create a new data structure for customer specific data.
            </summary>
            <param name="InternalData">An optional dictionary of internal customer-specific data.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Time_Zone">
            <summary>
            The unique identification of a time zone.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Time_Zone.InternalId">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Time_Zone.IsNullOrEmpty">
            <summary>
            Indicates whether this identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Time_Zone.IsNotNullOrEmpty">
            <summary>
            Indicates whether this identification is NOT null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Time_Zone.Length">
            <summary>
            The length of the time zone identificator.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.#ctor(System.String)">
            <summary>
            Create a new time zone identification.
            based on the given string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.Parse(System.String)">
            <summary>
            Parse the given string as a time zone identification.
            </summary>
            <param name="Text">A text-representation of a time zone identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.TryParse(System.String)">
            <summary>
            Try to parse the given string as a time zone identification.
            </summary>
            <param name="Text">A text-representation of a time zone identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.Time_Zone@)">
            <summary>
            Try to parse the given string as a time zone identification.
            </summary>
            <param name="Text">A text-representation of a time zone identification.</param>
            <param name="TimeZone">The parsed time zone identification.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Time_Zone.Clone">
            <summary>
            Clone this time zone identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.op_Equality(org.GraphDefined.Vanaheimr.Illias.Time_Zone,org.GraphDefined.Vanaheimr.Illias.Time_Zone)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TimeZone1">A time zone identification.</param>
            <param name="TimeZone2">Another time zone identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Time_Zone,org.GraphDefined.Vanaheimr.Illias.Time_Zone)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TimeZone1">A time zone identification.</param>
            <param name="TimeZone2">Another time zone identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.op_LessThan(org.GraphDefined.Vanaheimr.Illias.Time_Zone,org.GraphDefined.Vanaheimr.Illias.Time_Zone)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TimeZone1">A time zone identification.</param>
            <param name="TimeZone2">Another time zone identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Time_Zone,org.GraphDefined.Vanaheimr.Illias.Time_Zone)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TimeZone1">A time zone identification.</param>
            <param name="TimeZone2">Another time zone identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.Time_Zone,org.GraphDefined.Vanaheimr.Illias.Time_Zone)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TimeZone1">A time zone identification.</param>
            <param name="TimeZone2">Another time zone identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Time_Zone,org.GraphDefined.Vanaheimr.Illias.Time_Zone)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TimeZone1">A time zone identification.</param>
            <param name="TimeZone2">Another time zone identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.CompareTo(org.GraphDefined.Vanaheimr.Illias.Time_Zone)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TimeZone">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.Equals(org.GraphDefined.Vanaheimr.Illias.Time_Zone)">
            <summary>
            Compares two TimeZones for equality.
            </summary>
            <param name="TimeZone">A time zone identification to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.GetHashCode">
            <summary>
            Return the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time_Zone.ToString">
            <summary>
            Return a text-representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.AddressExtensions">
            <summary>
            JSON I/O.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Address">
            <summary>
            A WWCP address.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Address.JSONLDContext">
            <summary>
            The JSON-LD context of this object.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Address.Street">
            <summary>
            The name of the street.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Address.HouseNumber">
            <summary>
            The house number.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Address.FloorLevel">
            <summary>
            The floor level.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Address.PostalCode">
            <summary>
            The postal code.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Address.PostalCodeSub">
            <summary>
            The postal code sub.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Address.City">
            <summary>
            The city.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Address.Country">
            <summary>
            The country.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Address.Timezone">
            <summary>
            The timezone.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Address.Comment">
            <summary>
            An optional text/comment to describe the address.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.#ctor(System.String,System.String,System.String,System.String,System.String,org.GraphDefined.Vanaheimr.Illias.I18NString,org.GraphDefined.Vanaheimr.Illias.Country,System.Nullable{org.GraphDefined.Vanaheimr.Illias.Time_Zone},org.GraphDefined.Vanaheimr.Illias.I18NString,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a new address.
            </summary>
            <param name="Street">The name of the street.</param>
            <param name="HouseNumber">The house number.</param>
            <param name="FloorLevel">The floor level.</param>
            <param name="PostalCode">The postal code</param>
            <param name="PostalCodeSub">The postal code sub</param>
            <param name="City">The city.</param>
            <param name="Country">The country.</param>
            <param name="Timezone">The timezone.</param>
            <param name="Comment">An optional text/comment to describe the address.</param>
            
            <param name="CustomData">An optional dictionary of customer-specific data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.Create(org.GraphDefined.Vanaheimr.Illias.Country,System.String,org.GraphDefined.Vanaheimr.Illias.I18NString,System.String,System.String,System.String,System.Nullable{org.GraphDefined.Vanaheimr.Illias.Time_Zone},org.GraphDefined.Vanaheimr.Illias.I18NString,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a new minimal address.
            </summary>
            <param name="Country">The country.</param>
            <param name="PostalCode">The postal code</param>
            <param name="City">The city.</param>
            <param name="Street">The name of the street.</param>
            <param name="HouseNumber">The house number.</param>
            <param name="FloorLevel">The floor level.</param>
            <param name="Comment">A comment to this address.</param>
            <param name="CustomData">An optional dictionary of customer-specific data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.ToJSON(System.Boolean)">
            <summary>
            Return a JSON representation of this object.
            </summary>
            <param name="Embedded">Whether this data is embedded into another data structure.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.op_Equality(org.GraphDefined.Vanaheimr.Illias.Address,org.GraphDefined.Vanaheimr.Illias.Address)">
            <summary>
            Compares two addresses for equality.
            </summary>
            <param name="Address1">An address.</param>
            <param name="Address2">Another address.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Address,org.GraphDefined.Vanaheimr.Illias.Address)">
            <summary>
            Compares two addresses for inequality.
            </summary>
            <param name="Address1">An address.</param>
            <param name="Address2">Another address.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.op_LessThan(org.GraphDefined.Vanaheimr.Illias.Address,org.GraphDefined.Vanaheimr.Illias.Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Address1">An address.</param>
            <param name="Address2">Another address.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Address,org.GraphDefined.Vanaheimr.Illias.Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Address1">An address.</param>
            <param name="Address2">Another address.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.Address,org.GraphDefined.Vanaheimr.Illias.Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Address1">An address.</param>
            <param name="Address2">Another address.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Address,org.GraphDefined.Vanaheimr.Illias.Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Address1">An address.</param>
            <param name="Address2">Another address.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.CompareTo(org.GraphDefined.Vanaheimr.Illias.Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Address">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.Equals(org.GraphDefined.Vanaheimr.Illias.Address)">
            <summary>
            Compares two addresses for equality.
            </summary>
            <param name="Address">An address to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Address.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DataLicense">
            <summary>
            The data licenses within the electric vehicle domain.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DataLicense.Id">
            <summary>
            The unique identification of the data license.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DataLicense.Description">
            <summary>
            The description of the data license.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DataLicense.URIs">
            <summary>
            Optional URIs for more information.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense.#ctor(org.GraphDefined.Vanaheimr.Illias.DataLicense_Id,System.String,System.String[])">
            <summary>
            Create a new data license.
            </summary>
            <param name="Id">The unique identification of the data license.</param>
            <param name="Description">The description of the data license.</param>
            <param name="URIs">Optional URIs for more information.</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.None">
            <summary>
            No license, ask the data source for more details.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.PublicDomainDedicationAndLicense">
            <summary>
            Open Data Commons: Public Domain Dedication and License (PDDL)
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.AttributionLicense">
            <summary>
            Open Data Commons: Attribution License (ODC-By)
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.OpenDatabaseLicense">
            <summary>
            Open Data Commons: Open Data Commons Open Database License (ODbL)
            Attribution and Share-Alike for Data/Databases
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.DatenlizenzDeutschland_BY_2">
            <summary>
            Datenlizenz Deutschland – Namensnennung – Version 2.0
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.DatenlizenzDeutschland_Zero_2">
            <summary>
            Datenlizenz Deutschland – Namensnennung – Version 2.0
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.GeoLizenz_OpenData_1_3_1">
            <summary>
            GeoLizenz V1.3 – Open
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.CreativeCommons_BY_4">
            <summary>
            Creative Commons Attribution 4.0 International (CC BY 4.0)
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.CreativeCommons_BY_SA_4">
            <summary>
            Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.CreativeCommons_BY_ND_4">
            <summary>
            Creative Commons Attribution-NoDerivs 4.0 International (CC BY-ND 4.0)
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.CreativeCommons_BY_NC_4">
            <summary>
            Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.CreativeCommons_BY_NC_SA_4">
            <summary>
            Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense.CreativeCommons_BY_NC_ND_4">
            <summary>
            Creative Commons Attribution-NonCommercial-NoDerivs 4.0 International (CC BY-NC-ND 4.0)
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id">
            <summary>
            The unique identification of a data license.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.InternalId">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.IsNullOrEmpty">
            <summary>
            Indicates whether this identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.IsNotNullOrEmpty">
            <summary>
            Indicates whether this identification is NOT null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.Length">
            <summary>
            The length of the data license.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.#ctor(System.String)">
            <summary>
            Create a new data license.
            based on the given string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.Parse(System.String)">
            <summary>
            Parse the given string as a data license.
            </summary>
            <param name="Text">A text representation of a data license.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.DataLicense_Id@)">
            <summary>
            Parse the given string as a data license.
            </summary>
            <param name="Text">A text representation of a data license.</param>
            <param name="DataLicenseId">The parsed data license.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.Clone">
            <summary>
            Clone this data license.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.op_Equality(org.GraphDefined.Vanaheimr.Illias.DataLicense_Id,org.GraphDefined.Vanaheimr.Illias.DataLicense_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="DataLicenseId1">A data license.</param>
            <param name="DataLicenseId2">Another data license.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.op_Inequality(org.GraphDefined.Vanaheimr.Illias.DataLicense_Id,org.GraphDefined.Vanaheimr.Illias.DataLicense_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="DataLicenseId1">A data license.</param>
            <param name="DataLicenseId2">Another data license.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.op_LessThan(org.GraphDefined.Vanaheimr.Illias.DataLicense_Id,org.GraphDefined.Vanaheimr.Illias.DataLicense_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="DataLicenseId1">A data license.</param>
            <param name="DataLicenseId2">Another data license.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.DataLicense_Id,org.GraphDefined.Vanaheimr.Illias.DataLicense_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="DataLicenseId1">A data license.</param>
            <param name="DataLicenseId2">Another data license.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.DataLicense_Id,org.GraphDefined.Vanaheimr.Illias.DataLicense_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="DataLicenseId1">A data license.</param>
            <param name="DataLicenseId2">Another data license.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.DataLicense_Id,org.GraphDefined.Vanaheimr.Illias.DataLicense_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="DataLicenseId1">A data license.</param>
            <param name="DataLicenseId2">Another data license.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.CompareTo(org.GraphDefined.Vanaheimr.Illias.DataLicense_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="DataLicenseId">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.Equals(org.GraphDefined.Vanaheimr.Illias.DataLicense_Id)">
            <summary>
            Compares two DataLicenseIds for equality.
            </summary>
            <param name="DataLicenseId">A data license to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DataLicense_Id.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax">
            <summary>
            Min/Max values for decimals.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.#ctor(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Creates a new range of decimal values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.FromMin(System.Decimal)">
            <summary>
            Create a new half-open definition having just a minimum value.
            </summary>
            <param name="MinValue">The minimum value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.FromMax(System.Decimal)">
            <summary>
            Create a new half-open definition having just a maximum value.
            </summary>
            <param name="MaxValue">The maximum value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax">
            <summary>
            Min/Max values for doubles.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a new range of double values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Int32MinMax">
            <summary>
            Min/Max values for Int32s.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Int32MinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Int32MinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int32MinMax.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new range of Int32 values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int32MinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int32MinMax.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Int64MinMax">
            <summary>
            Min/Max values for Int64s.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Int64MinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Int64MinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int64MinMax.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Creates a new range of Int64 values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int64MinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int64MinMax.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.JSONObject">
            <summary>
            Extension methods for JSON objects.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONObject.Create(Newtonsoft.Json.Linq.JProperty[])">
            <summary>
            Create a JSON object using the given JSON properties, but filter null values.
            </summary>
            <param name="JProperties">JSON properties.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONObject.Create(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JProperty})">
            <summary>
            Create a JSON object using the given JSON properties, but filter null values.
            </summary>
            <param name="JProperties">JSON properties.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.JSONArray">
            <summary>
            Extension methods for JSON arrays.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONArray.Create(Newtonsoft.Json.Linq.JObject[])">
            <summary>
            Create a JSON array using the given JSON objects, but filter null values.
            </summary>
            <param name="JObjects">JSON objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONArray.Create(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>
            Create a JSON array using the given JSON objects, but filter null values.
            </summary>
            <param name="JObjects">JSON objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONArray.Create(Newtonsoft.Json.Linq.JProperty[])">
            <summary>
            Create a JSON array using the given JSON properties, but filter null values.
            </summary>
            <param name="JProperties">JSON properties.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONArray.Create(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JProperty})">
            <summary>
            Create a JSON array using the given JSON properties, but filter null values.
            </summary>
            <param name="JProperties">JSON properties.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.JSONExtensionsOld">
            <summary>
            Extension methods for JSON representations of common classes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONExtensionsOld.ToJSON(System.Decimal,System.String)">
            <summary>
            Create a Iso8601 representation of the given DateTime.
            </summary>
            <param name="Decimal">A decimal.</param>
            <param name="JPropertyKey">The name of the JSON property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONExtensionsOld.ToJSON(System.DateTime,System.String)">
            <summary>
            Create a Iso8601 representation of the given DateTime.
            </summary>
            <param name="Timestamp">A timestamp.</param>
            <param name="JPropertyKey">The name of the JSON property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONExtensionsOld.ToJSON``1(org.GraphDefined.Vanaheimr.Illias.Timestamped{``0})">
            <summary>
            Return a JSON representation of the given timestamped value.
            </summary>
            <param name="TimestampedT">A timestamped value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.JSONExtensionsOld.ToJSON(org.GraphDefined.Vanaheimr.Illias.IId,System.String)">
            <summary>
            Return a JSON representation of the given identificator.
            </summary>
            <param name="Id">An identificator.</param>
            <param name="JPropertyKey">The name of the JSON property key to use.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Verbosity">
            <summary>
            The verbosity.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Range`1">
            <summary>
            A generic range of values.
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Range`1.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Range`1.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Range`1.#ctor(`0,`0)">
            <summary>
            Creates a new range of values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Range`1.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Range`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax">
            <summary>
            Min/Max values for UInt32s.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax.#ctor(System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a new range of UInt32 values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax">
            <summary>
            Min/Max values for UInt64s.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax.#ctor(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Creates a new range of UInt64 values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Country">
            <summary>
            A country.
            https://laendercode.net
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.CountryName">
            <summary>
            The name of the country.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.Alpha2Code">
            <summary>
            The ISO Alpha-2 code of the country.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.Alpha3Code">
            <summary>
            The ISO Alpha-3 code of the country.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.NumericCode">
            <summary>
            The ISO numeric code UN M49 numerical code of the country.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.TelefonCode">
            <summary>
            Country calling code or dial in code defined by ITU-T recommendations
            E.123 and E.164, also called IDD (International Direct Dialling) or
            ISD (International Subscriber Dialling) code.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.#ctor(org.GraphDefined.Vanaheimr.Illias.I18NString,System.String,System.String,System.UInt16,System.UInt16)">
            <summary>
            Creates a new country based on a country name and its codings.
            </summary>
            <param name="CountryName">The name of the country.</param>
            <param name="Alpha2Code">The ISO Alpha-2 Code of the country.</param>
            <param name="Alpha3Code">The ISO Alpha-3 Code of the country.</param>
            <param name="NumericCode">The ISO numeric code UN M49 Numerical Code of the country.</param>
            <param name="TelefonCode">Country calling code or dial in code defined by ITU-T recommendations E.123 and E.164, also called IDD (International Direct Dialling) or ISD (International Subscriber Dialling) code.</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Country.unknown">
            <summary>
            An unknown country.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.Parse(System.String)">
            <summary>
            Tries to find the appropriate country for the given string.
            </summary>
            <param name="AnyString">Any string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given string.
            </summary>
            <param name="AnyString">Any string.</param>
            <param name="Country">The country.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseCountryName(System.String)">
            <summary>
            Tries to find the appropriate country for the given country name.
            </summary>
            <param name="CountryName">A country name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseCountryName(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given country name.
            </summary>
            <param name="CountryName">A country name.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseAlpha2Code(System.String)">
            <summary>
            Tries to find the appropriate country for the given alpha2code.
            </summary>
            <param name="Alpha2Code">An alpha2code for a country, e.g. "DE" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseAlpha2Code(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given alpha2code.
            </summary>
            <param name="Alpha2Code">An alpha2code for a country, e.g. "DE" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseAlpha3Code(System.String)">
            <summary>
            Tries to find the appropriate country for the given alpha3code.
            </summary>
            <param name="Alpha3Code">An alpha3code for a country, e.g. "DEU" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseAlpha3Code(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given alpha3code.
            </summary>
            <param name="Alpha3Code">An alpha3code for a country, e.g. "DEU" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseNumericCode(System.UInt16)">
            <summary>
            Tries to find the appropriate country for the given numeric code.
            </summary>
            <param name="NumericCode">A numeric code for a country, e.g. "276" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseNumericCode(System.String)">
            <summary>
            Tries to find the appropriate country for the given numeric code.
            </summary>
            <param name="NumericCode">A numeric code for a country, e.g. "276" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseNumericCode(System.UInt16,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given numeric code.
            </summary>
            <param name="NumericCode">A numeric code for a country, e.g. "276" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseNumericCode(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given numeric code.
            </summary>
            <param name="NumericCode">A numeric code for a country, e.g. "276" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseTelefonCode(System.UInt16)">
            <summary>
            Tries to find the appropriate country for the given telefon code.
            </summary>
            <param name="TelefonCode">A telefon code for a country, e.g. "49" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseTelefonCode(System.String)">
            <summary>
            Tries to find the appropriate country for the given telefon code.
            </summary>
            <param name="TelefonCode">A telefon code for a country, e.g. "49" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseTelefonCode(System.UInt16,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given telefon code.
            </summary>
            <param name="TelefonCode">A telefon code for a country, e.g. "49" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseTelefonCode(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given telefon code.
            </summary>
            <param name="TelefonCode">A telefon code for a country, e.g. "49" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.Clone">
            <summary>
            Clone this energy source.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_Equality(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_LessThan(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.CompareTo(org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.Equals(org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two Countrys for equality.
            </summary>
            <param name="Country">A Country to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Money">
            <summary>
            Money: A decimal value with an ISO 4217 currency.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Money.Value">
            <summary>
            The value of the money.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Money.Currency">
            <summary>
            The currency of the money.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.#ctor(System.Decimal,org.GraphDefined.Vanaheimr.Illias.Currency)">
            <summary>
            Create new money.
            </summary>
            <param name="Value">The value of the money.</param>
            <param name="Currency">The currency of the money.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.Create(System.Decimal,org.GraphDefined.Vanaheimr.Illias.Currency)">
            <summary>
            Create new money.
            </summary>
            <param name="Value">The value of the money.</param>
            <param name="Currency">The currency of the money.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.Parse(System.String)">
            <summary>
            Return the appropriate money for the given text-representation of money.
            </summary>
            <param name="Text">The value of the money and the ISO code or name of a currency.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.TryParse(System.String)">
            <summary>
            Return the appropriate money for the given string.
            </summary>
            <param name="Text">The text-representation of the money value and ISO code or name of a currency.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.Money@)">
            <summary>
            Return the appropriate money for the given string.
            </summary>
            <param name="Text">The text-representation of the money value and ISO code or name of a currency.</param>
            <param name="Money">The parsed Money</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.op_Equality(org.GraphDefined.Vanaheimr.Illias.Money,org.GraphDefined.Vanaheimr.Illias.Money)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Money1">A money object.</param>
            <param name="Money2">Another money object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Money,org.GraphDefined.Vanaheimr.Illias.Money)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Money1">A money object.</param>
            <param name="Money2">Another money object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.op_LessThan(org.GraphDefined.Vanaheimr.Illias.Money,org.GraphDefined.Vanaheimr.Illias.Money)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Money1">A money object.</param>
            <param name="Money2">Another money object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Money,org.GraphDefined.Vanaheimr.Illias.Money)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Money1">A money object.</param>
            <param name="Money2">Another money object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.Money,org.GraphDefined.Vanaheimr.Illias.Money)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Money1">A money object.</param>
            <param name="Money2">Another money object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Money,org.GraphDefined.Vanaheimr.Illias.Money)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Money1">A money object.</param>
            <param name="Money2">Another money object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.CompareTo(org.GraphDefined.Vanaheimr.Illias.Money)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Money">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.Equals(org.GraphDefined.Vanaheimr.Illias.Money)">
            <summary>
            Compares two money objects for equality.
            </summary>
            <param name="Money">A money object to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Money.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Currency">
            <summary>
            ISO 4217 currencies.
            </summary>
            <seealso cref="!:https://de.wikipedia.org/wiki/ISO_4217" />
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Currency.Symbol_Location">
            <summary>
            The location of the currency symbol in relation to its numeric value.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Currency.Symbol_Location.NoSymbol">
            <summary>
            No symbol defined.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Currency.Symbol_Location.behind">
            <summary>
            e.g. "15€"
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Currency.Symbol_Location.behindSpace">
            <summary>
            e.g. "15 €"
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Currency.Symbol_Location.before">
            <summary>
            e.g. "$15"
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Currency.Symbol_Location.beforeSpace">
            <summary>
            e.g. "$ 15"
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Currency.ISOCode">
            <summary>
            The ISO code of the currency.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Currency.Numeric">
            <summary>
            The numeric code of the currency.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Currency.Symbol">
            <summary>
            The symbol of the currency, e.g. '€' or '$'.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Currency.SymbolLocation">
            <summary>
            The location of the currency symbol in relation to its numeric value.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Currency.Name">
            <summary>
            The name of the currency.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Currency.Countries">
            <summary>
            Countries using this currency.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.#ctor(System.String,System.String,System.UInt16,System.String,org.GraphDefined.Vanaheimr.Illias.Currency.Symbol_Location,org.GraphDefined.Vanaheimr.Illias.Country[])">
            <summary>
            ISO 4217 currencies.
            </summary>
            <param name="ISOCode">The ISO code of the currency.</param>
            <param name="Numeric">The numeric code of the currency.</param>
            <param name="Symbol">The symbol of the currency, e.g. '€' or '$'.</param>
            <param name="SymbolLocation">The location of the currency symbol in relation to its numeric value.</param>
            <param name="Name">The name of the currency.</param>
            <param name="Countries">Countries using this currency.</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Currency.EUR">
            <summary>
            Euro, €
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Currency.CHF">
            <summary>
            Schweizer Franken
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Currency.USD">
            <summary>
            US Dollar, $
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.Parse(System.String)">
            <summary>
            Return the appropriate currency for the given string.
            </summary>
            <param name="Text">The ISO code or name of a currency.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.Currency@)">
            <summary>
            Return the appropriate currency for the given string.
            </summary>
            <param name="Text">The ISO code or name of a currency.</param>
            <param name="Currency">The parsed Currency</param>
            <returns>true or false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.op_Equality(org.GraphDefined.Vanaheimr.Illias.Currency,org.GraphDefined.Vanaheimr.Illias.Currency)">
            <summary>
            Compares two instances of this object for equality.
            </summary>
            <param name="Currency1">A currency object.</param>
            <param name="Currency2">Another currency object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Currency,org.GraphDefined.Vanaheimr.Illias.Currency)">
            <summary>
            Compares two instances of this object for inequality.
            </summary>
            <param name="Currency1">A currency object.</param>
            <param name="Currency2">Another currency object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.CompareTo(org.GraphDefined.Vanaheimr.Illias.Currency)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Currency">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.Equals(org.GraphDefined.Vanaheimr.Illias.Currency)">
            <summary>
            Compares two currencies for equality.
            </summary>
            <param name="Currency">An Currency to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.I18NPair">
            <summary>
            An internationalized (I18N) language text pair.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.I18NPair.Language">
            <summary>
            The internationalized (I18N) language.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.I18NPair.Text">
            <summary>
            The internationalized (I18N) text.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NPair.#ctor(org.GraphDefined.Vanaheimr.Illias.Languages,System.String)">
            <summary>
            Create a new internationalized (I18N) language text pair.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
            <param name="Text">The internationalized (I18N) text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NPair.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NPair.Equals(org.GraphDefined.Vanaheimr.Illias.I18NPair)">
            <summary>
            Compares two I18NPair for equality.
            </summary>
            <param name="I18NPair">An I18NPair to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NPair.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NPair.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions">
            <summary>
            Extension methods for internationalized (I18N) multi-language texts/strings.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions.IsNullOrEmpty(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            The multi-language string is empty.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions.IsNeitherNullNorEmpty(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            The multi-language string is neither null nor empty.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions.FirstText(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Return the first string of a multi-language string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions.ToI18NString(System.String,org.GraphDefined.Vanaheimr.Illias.Languages)">
            <summary>
            Return the first string of a multi-language string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions.SubstringMax(org.GraphDefined.Vanaheimr.Illias.I18NString,System.Int32)">
            <summary>
            Return a substring of the given maximum length.
            </summary>
            <param name="I18NText">A text.</param>
            <param name="Length">The maximum length of the substring.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions.TrimAll(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Trim all texts.
            </summary>
            <param name="I18NText">A text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions.ToHTML(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Convert the given internationalized (I18N) text/string to HTML.
            </summary>
            <param name="I18NString">An internationalized (I18N) text/string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions.ToHTML(org.GraphDefined.Vanaheimr.Illias.I18NString,System.String,System.String)">
            <summary>
            Convert the given internationalized (I18N) text/string to HTML.
            </summary>
            <param name="I18NString">An internationalized (I18N) text/string.</param>
            <param name="Prefix">A prefix.</param>
            <param name="Postfix">A postfix.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions.ToHTMLLink(org.GraphDefined.Vanaheimr.Illias.I18NString,System.String)">
            <summary>
            Convert the given internationalized (I18N) text/string to a HTML link.
            </summary>
            <param name="I18NString">An internationalized (I18N) text/string.</param>
            <param name="URI">An URI.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtensions.ToJSON(org.GraphDefined.Vanaheimr.Illias.I18NString,System.String)">
            <summary>
            Return a JSON representation of the given internationalized string.
            </summary>
            <param name="I18NString">An internationalized string.</param>
            <param name="JPropertyKey">The name of the JSON property key.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.I18NString">
            <summary>
            An internationalized (I18N) multi-language text/string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.#ctor">
            <summary>
            Create a new internationalized (I18N) multi-language string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.#ctor(org.GraphDefined.Vanaheimr.Illias.Languages,System.String)">
            <summary>
            Create a new internationalized (I18N) multi-language string
            based on the given language and string.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
            <param name="Text">The internationalized (I18N) text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.#ctor(System.Collections.Generic.KeyValuePair{org.GraphDefined.Vanaheimr.Illias.Languages,System.String}[])">
            <summary>
            Create a new internationalized (I18N) multi-language string
            based on the given language and string pairs.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.I18NPair})">
            <summary>
            Create a new internationalized (I18N) multi-language string
            based on the given I18N-pairs.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.#ctor(org.GraphDefined.Vanaheimr.Illias.I18NPair[])">
            <summary>
            Create a new internationalized (I18N) multi-language string
            based on the given I18N-pairs.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Create(org.GraphDefined.Vanaheimr.Illias.Languages,System.String)">
            <summary>
            Create a new internationalized (I18N) multi-language string
            based on the given language and string.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
            <param name="Text">The internationalized (I18N) text.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.I18NString.Empty">
            <summary>
            Create an empty internationalized (I18N) multi-language string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Add(org.GraphDefined.Vanaheimr.Illias.Languages,System.String)">
            <summary>
            Add a new language-text-pair to the given
            internationalized (I18N) multi-language string.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
            <param name="Text">The internationalized (I18N) text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Add(org.GraphDefined.Vanaheimr.Illias.I18NPair)">
            <summary>
            Add a new language-text-pair to the given
            internationalized (I18N) multi-language string.
            </summary>
            <param name="I18NPair">The internationalized (I18N) text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.has(org.GraphDefined.Vanaheimr.Illias.Languages)">
            <summary>
            Checks if the given language representation exists.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.I18NString.Item(org.GraphDefined.Vanaheimr.Illias.Languages)">
            <summary>
            Get the text specified by the given language.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
            <returns>The internationalized (I18N) text or String.Empty</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Remove(org.GraphDefined.Vanaheimr.Illias.Languages)">
            <summary>
            Remove the given language from the internationalized (I18N) multi-language text.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.I18NString.Count">
            <summary>
            The number of language/value pairs.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.ToJSON">
            <summary>
            Return a JSON representation of the given internationalized string.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.I18NString.Clone">
            <summary>
            Clone this energy source.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.GetEnumerator">
            <summary>
            Enumerate all internationalized (I18N) texts.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all internationalized (I18N) texts.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.op_Equality(org.GraphDefined.Vanaheimr.Illias.I18NString,org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Compares two I18N-strings for equality.
            </summary>
            <param name="I18NString1">A I18N-string.</param>
            <param name="I18NString2">Another I18N-string.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.op_Inequality(org.GraphDefined.Vanaheimr.Illias.I18NString,org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Compares two I18N-strings for inequality.
            </summary>
            <param name="I18NString1">A I18N-string.</param>
            <param name="I18NString2">Another I18N-string.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Equals(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Compares two I18NString for equality.
            </summary>
            <param name="i18NString">An I18NString to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.JSONString">
            <summary>
            Return a JSON output representation.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.JSONString.ToJSONString">
            <summary>
            Return a JSON output representation.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Languages">
            <summary>
            ISO 639-1/3 codes for languages.
            http://www.loc.gov/standards/iso639-2/php/code_list.php
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Languages3">
            <summary>
            ISO 639-3 codes for languages.
            http://www-01.sil.org/iso639-3/codes.asp?order=639_3
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id">
            <summary>
            The unique identification for tracking events (EventTrackingId).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.InternalId">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.IsNullOrEmpty">
            <summary>
            Indicates whether this identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.IsNotNullOrEmpty">
            <summary>
            Indicates whether this identification is NOT null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.Length">
            <summary>
            The length of the event tracking identificator.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.#ctor(System.String)">
            <summary>
            Generate a new unique identification for tracking events (EventTrackingId)
            based on the given string.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.New">
            <summary>
            Generate a new unique event tracking identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.Parse(System.String)">
            <summary>
            Parse the given string as a service identification.
            </summary>
            <param name="Text">A text representation of a service identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id@)">
            <summary>
            Parse the given string as an event tracking identification.
            </summary>
            <param name="Text">A text representation of an event tracking identification.</param>
            <param name="EventTrackingId">The parsed event tracking identification.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.Clone">
            <summary>
            Clone an EventTrackingId.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_Equality(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_Inequality(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_LessThan(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.CompareTo(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.Equals(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two EventTrackingIds for equality.
            </summary>
            <param name="EventTrackingId">A EventTrackingId to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IdGenerator_UInt64">
            <summary>
            Generate a new Id.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IdGenerator_UInt64.NewId(System.Func{System.UInt64,System.Boolean})">
            <summary>
            Generate and return a new Id.
            </summary>
            <param name="UniquenessCheckDelegate">A delegate to check the uniqueness of the generated identification.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IdGenerator_String">
            <summary>
            Generate a new Id.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IdGenerator_String.NewId(System.Func{System.String,System.Boolean})">
            <summary>
            Generate and return a new Id.
            </summary>
            <param name="UniquenessCheckDelegate">A delegate to check the uniqueness of the generated identification.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IIdExtensions">
            <summary>
            Extension methods for the Id interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IIdExtensions.StartsWith(org.GraphDefined.Vanaheimr.Illias.IId,System.String)">
            <summary>
            Determines whether the beginning of this string instance matches the specified string.
            </summary>
            <param name="Id">An identificator.</param>
            <param name="Prefix"></param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IId">
            <summary>
            The common interface of a datastructure used as an unique identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IId.IsNullOrEmpty">
            <summary>
            Indicates whether this identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IId.Length">
            <summary>
            The length of the identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IId.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IId`1">
            <summary>
            The common interface of datastructures used as an unique identification.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IHasId">
            <summary>
            The common interface of datastructures having an unique identification.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IHasId`1">
            <summary>
            The common interface of datastructures having an unique identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IHasId`1.Id">
            <summary>
            The unique identification of the data structure.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IHasIds`1">
            <summary>
            The common generic interface of an entity having one or multiple unique identification(s).
            </summary>
            <typeparam name="TId">THe type of the unique identificator.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IHasIds`1.Ids">
            <summary>
            Auxilary unique identifications of this entity.
            (Think of CNAMES in DNS, or brand names for companies)
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IIdGenerator`1">
            <summary>
            An interface for classes generating Ids.
            </summary>
            <typeparam name="TId">The type of the Ids.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IIdGenerator`1.NewId(System.Func{`0,System.Boolean})">
            <summary>
            Generate a new Id.
            </summary>
            <param name="UniquenessCheckDelegate">A delegate to check the uniqueness of the generated identification.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IRevisionId`1">
            <summary>
            Provides a generic revision identifier.
            </summary>
            <typeparam name="TRevId">The type of the revision identifier.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IRevisionId`1.RevId">
            <summary>
            A generic revision identifier.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.RevisionId">
            <summary>
            A RevId is an identificator for a specific IElement revision in
            a distributed system consisting of a timestamp and a SystemId.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.RevisionId.Timestamp">
            <summary>
            The timestamp of this revision.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.RevisionId.SystemId">
            <summary>
            A unique identification of the generating system,
            process or thread of this revision.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.#ctor(org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Generates a RevisionId based on the actual timestamp and the given SystemId.
            </summary>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.#ctor(System.UInt64,org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Generates a RevisionId based on the given UInt64 timestamp and the given SystemId.
            </summary>
            <param name="Timestamp">A timestamp</param>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.#ctor(System.DateTime,org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Generates a RevisionId based on the given DateTime object and the given SystemId.
            </summary>
            <param name="DateTime">A DateTime object</param>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.#ctor(System.String,org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Generates a RevisionId based on the "yyyyddMM.HHmmss.fffffff" formated
            string representation of a DateTime object and the given SystemId.
            </summary>
            <param name="DateTimeString">A DateTime object as "yyyyddMM.HHmmss.fffffff"-formated string</param>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.#ctor(System.String)">
            <summary>
            Generates a RevisionId based on the "yyyyddMM.HHmmss.fffffff(SystemId)"
            formated string representation of a RevId.
            </summary>
            <param name="RevIdString">A RevId object as "yyyyddMM.HHmmss.fffffff(SystemId)"-formated string</param>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_Equality(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_Inequality(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_LessThan(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.CompareTo(org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevisionId">A RevisionId to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.Equals(org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two RevIds for equality.
            </summary>
            <param name="RevisionId">A RevisionId to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.ToString">
            <summary>
            Returns a formated string representation of this revision
            </summary>
            <returns>A formated string representation of this revision</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.SystemIdExtensions">
            <summary>
            Extension methods for system identifications.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemIdExtensions.IsNullOrEmpty(System.Nullable{org.GraphDefined.Vanaheimr.Illias.System_Id})">
            <summary>
            Indicates whether this system identification is null or empty.
            </summary>
            <param name="SystemId">An system identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemIdExtensions.IsNotNullOrEmpty(System.Nullable{org.GraphDefined.Vanaheimr.Illias.System_Id})">
            <summary>
            Indicates whether this system identification is NOT null or empty.
            </summary>
            <param name="SystemId">An system identification.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.System_Id">
            <summary>
            A system identification is unique identification of a single system
            within a larger distributed system.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.System_Id.InternalId">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.System_Id._random">
            <summary>
            Private non-cryptographic random number generator.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.System_Id.IsNullOrEmpty">
            <summary>
            Indicates whether this identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.System_Id.IsNotNullOrEmpty">
            <summary>
            Indicates whether this identification is NOT null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.System_Id.Length">
            <summary>
            The length of the system identificator.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.#ctor(System.String)">
            <summary>
            Create a new system identification based on the given string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.Random(System.Byte)">
            <summary>
            Create a new system identification.
            </summary>
            <param name="Length">The expected length of the system identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.Parse(System.String)">
            <summary>
            Parse the given string as an system identification.
            </summary>
            <param name="Text">A text-representation of an system identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.TryParse(System.String)">
            <summary>
            Try to parse the given string as an system identification.
            </summary>
            <param name="Text">A text-representation of an system identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.System_Id@)">
            <summary>
            Try to parse the given string as an system identification.
            </summary>
            <param name="Text">A text-representation of an system identification.</param>
            <param name="SystemId">The parsed system identification.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.System_Id.Clone">
            <summary>
            Clone this system identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.op_Equality(org.GraphDefined.Vanaheimr.Illias.System_Id,org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemIdId1">An system identification.</param>
            <param name="SystemIdId2">Another system identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.op_Inequality(org.GraphDefined.Vanaheimr.Illias.System_Id,org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemIdId1">An system identification.</param>
            <param name="SystemIdId2">Another system identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.op_LessThan(org.GraphDefined.Vanaheimr.Illias.System_Id,org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemIdId1">An system identification.</param>
            <param name="SystemIdId2">Another system identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.System_Id,org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemIdId1">An system identification.</param>
            <param name="SystemIdId2">Another system identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.System_Id,org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemIdId1">An system identification.</param>
            <param name="SystemIdId2">Another system identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.System_Id,org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemIdId1">An system identification.</param>
            <param name="SystemIdId2">Another system identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.CompareTo(org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.Equals(org.GraphDefined.Vanaheimr.Illias.System_Id)">
            <summary>
            Compares two SystemIds for equality.
            </summary>
            <param name="SystemId">An system identification to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.GetHashCode">
            <summary>
            Return the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.System_Id.ToString">
            <summary>
            Return a text-representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ILabel`1">
            <summary>
            Provides a generic label.
            </summary>
            <typeparam name="TLabel">The type of the label.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.ILabel`1.Label">
            <summary>
            A generic label.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Partly">
            <summary>
            Partly
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Loops">
            <summary>
            Loop methods for integers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int32,System.Action{System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt32,System.Action{System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int64,System.Action{System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt64,System.Action{System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt32,System.Action{System.UInt32,System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt64,System.Action{System.UInt64,System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod">
            <summary>
            Specifies one exceptional period for opening or access hours.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod.Begin">
            <summary>
            Begin of the opening or access hours exception.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod.End">
            <summary>
            End of the opening or access hours exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Create new exceptional period for opening or access hours.
            </summary>
            <param name="Begin">Begin of the opening or access hours exception.</param>
            <param name="End">End of the opening or access hours exception.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod.op_Equality(org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod,org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod)">
            <summary>
            Compares two exceptional periods for equality.
            </summary>
            <param name="ExceptionalPeriod1">An exceptional period.</param>
            <param name="ExceptionalPeriod2">Another exceptional period.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod.op_Inequality(org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod,org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod)">
            <summary>
            Compares two exceptional periods for inequality.
            </summary>
            <param name="ExceptionalPeriod1">An exceptional period.</param>
            <param name="ExceptionalPeriod2">Another exceptional period.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod.Equals(org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod)">
            <summary>
            Compares two exceptional periods for equality.
            </summary>
            <param name="ExceptionalPeriod">An exceptional period to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ExceptionalPeriod.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.HourMin">
            <summary>
            A HourMin.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.HourMin.Hour">
            <summary>
            The hour.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.HourMin.Minute">
            <summary>
            The minute.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.#ctor(System.Byte,System.Byte)">
            <summary>
            Create new hour/minute.
            </summary>
            <param name="Hour">The hour.</param>
            <param name="Minute">The minute.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.Parse(System.String)">
            <summary>
            Parse the given string as a HourMin.
            </summary>
            <param name="Text">A text representation of a HourMin.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.TryParse(System.String)">
            <summary>
            Try to parse the given text as a HourMin.
            </summary>
            <param name="Text">A text representation of a HourMin.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.HourMin.Clone">
            <summary>
            Clone this HourMin.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.op_Equality(org.GraphDefined.Vanaheimr.Illias.HourMin,org.GraphDefined.Vanaheimr.Illias.HourMin)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HourMin1">A HourMin.</param>
            <param name="HourMin2">Another HourMin.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.op_Inequality(org.GraphDefined.Vanaheimr.Illias.HourMin,org.GraphDefined.Vanaheimr.Illias.HourMin)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HourMin1">A HourMin.</param>
            <param name="HourMin2">Another HourMin.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.op_LessThan(org.GraphDefined.Vanaheimr.Illias.HourMin,org.GraphDefined.Vanaheimr.Illias.HourMin)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HourMin1">A HourMin.</param>
            <param name="HourMin2">Another HourMin.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.HourMin,org.GraphDefined.Vanaheimr.Illias.HourMin)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HourMin1">A HourMin.</param>
            <param name="HourMin2">Another HourMin.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.HourMin,org.GraphDefined.Vanaheimr.Illias.HourMin)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HourMin1">A HourMin.</param>
            <param name="HourMin2">Another HourMin.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.HourMin,org.GraphDefined.Vanaheimr.Illias.HourMin)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HourMin1">A HourMin.</param>
            <param name="HourMin2">Another HourMin.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.CompareTo(org.GraphDefined.Vanaheimr.Illias.HourMin)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HourMin">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.Equals(org.GraphDefined.Vanaheimr.Illias.HourMin)">
            <summary>
            Compares two HourMins for equality.
            </summary>
            <param name="HourMin">A HourMin to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.HourMin.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Measurement`1">
            <summary>
            This class represents a timestamp value pair of a measurement.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Measurement`1.Timestamp">
            <summary>
            The timestamp of the measurement;
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Measurement`1.Value">
            <summary>
            The value of the measurement;
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Measurement`1.#ctor(System.DateTime,`0)">
            <summary>
            Create a new timestamp value pair of a measurement.
            </summary>
            <param name="Timestamp">The timestamp of the measurement.</param>
            <param name="Value">The value of the measurement.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.OpeningTimes">
            <summary>
            Opening times.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.OpeningTimes._24_7">
            <summary>
            Open 24/7.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.OpeningTimes.RegularOpenings">
            <summary>
            The regular openings.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.OpeningTimes.IsOpen24Hours">
            <summary>
            24/7 open...
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.OpeningTimes.FreeText">
            <summary>
            An additoonal free text.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.OpeningTimes.Open24Hours">
            <summary>
            Is open for 24 hours a day (7 days a week).
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.OpeningTimes.op_Equality(org.GraphDefined.Vanaheimr.Illias.OpeningTimes,org.GraphDefined.Vanaheimr.Illias.OpeningTimes)">
            <summary>
            Compares two opening times for equality.
            </summary>
            <param name="OpeningTime1">An opening time.</param>
            <param name="OpeningTime2">Another opening time.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.OpeningTimes.op_Inequality(org.GraphDefined.Vanaheimr.Illias.OpeningTimes,org.GraphDefined.Vanaheimr.Illias.OpeningTimes)">
            <summary>
            Compares two opening times for inequality.
            </summary>
            <param name="OpeningTime1">An opening time.</param>
            <param name="OpeningTime2">Another opening time.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.OpeningTimes.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.OpeningTimes.Equals(org.GraphDefined.Vanaheimr.Illias.OpeningTimes)">
            <summary>
            Compares two opening times for equality.
            </summary>
            <param name="OpeningTimes">An opening time to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.OpeningTimes.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.OpeningTimes.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.RegularHours">
            <summary>
            Regular recurring operation or access hours.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.RegularHours.DayOfWeek">
            <summary>
            Day of the week.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.RegularHours.PeriodBegin">
            <summary>
            Begin of the regular period.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.RegularHours.PeriodEnd">
            <summary>
            End of the regular period.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RegularHours.#ctor(System.DayOfWeek,org.GraphDefined.Vanaheimr.Illias.HourMin,org.GraphDefined.Vanaheimr.Illias.HourMin)">
            <summary>
            Create a new regular hours object.
            </summary>
            <param name="DayOfWeek">Day of the week.</param>
            <param name="PeriodBegin">Begin of the regular period.</param>
            <param name="PeriodEnd">End of the regular period.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RegularHours.op_Equality(org.GraphDefined.Vanaheimr.Illias.RegularHours,org.GraphDefined.Vanaheimr.Illias.RegularHours)">
            <summary>
            Compares two regular hourss for equality.
            </summary>
            <param name="RegularHours1">A regular hours.</param>
            <param name="RegularHours2">Another regular hours.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RegularHours.op_Inequality(org.GraphDefined.Vanaheimr.Illias.RegularHours,org.GraphDefined.Vanaheimr.Illias.RegularHours)">
            <summary>
            Compares two regular hourss for inequality.
            </summary>
            <param name="RegularHours1">A regular hours.</param>
            <param name="RegularHours2">Another regular hours.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RegularHours.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RegularHours.Equals(org.GraphDefined.Vanaheimr.Illias.RegularHours)">
            <summary>
            Compares two regular hours objects for equality.
            </summary>
            <param name="RegularHours">A regular hours object to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RegularHours.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RegularHours.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime">
            <summary>
            A structure to store a start and end time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.StartTime">
            <summary>
            The start time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.EndTime">
            <summary>
            The end time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.Duration">
            <summary>
            The duration.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.#ctor(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Create a new start and end time structure.
            </summary>
            <param name="StartTime">The start time.</param>
            <param name="EndTime">The end time.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.Now">
            <summary>
            Return a StartEndDateTime object which start time
            is set to the current date and time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.UtcNow">
            <summary>
            Return a StartEndDateTime object which start time
            is set to the current UTC date and time.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Time">
            <summary>
            A structure to store a simple time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Time.Hour">
            <summary>
            The hour.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Time.Minute">
            <summary>
            The minute.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Time.Second">
            <summary>
            The second.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.#ctor(System.Byte,System.Byte,System.Nullable{System.Byte})">
            <summary>
            Create a simple time.
            </summary>
            <param name="Hour">The hour.</param>
            <param name="Minute">The minute.</param>
            <param name="Second">The second.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.FromHour(System.Byte)">
            <summary>
            Create a new time based on the given hour.
            </summary>
            <param name="Hour">The hour.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.FromHourMin(System.Byte,System.Byte)">
            <summary>
            Create a new time based on the given hour and minute.
            </summary>
            <param name="Hour">The hour.</param>
            <param name="Minute">The minute</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.FromHourMinSec(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a new time based on the given hour and minute.
            </summary>
            <param name="Hour">The hour.</param>
            <param name="Minute">The minute</param>
            <param name="Second">The second.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.Parse(System.String)">
            <summary>
            Parse the given text as time.
            </summary>
            <param name="Text">A text representation of the time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.TryParse(System.String)">
            <summary>
            Try to parse the given text as time.
            </summary>
            <param name="Text">A text representation of the time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.Time@)">
            <summary>
            Try to parse the given text as time.
            </summary>
            <param name="Text">A text representation of the time.</param>
            <param name="Time">The parsed time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_Equality(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_LessThan(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_Addition(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Operator +
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_Subtraction(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Operator -
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.CompareTo(org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Time">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.Equals(org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Compares two price components for equality.
            </summary>
            <param name="Time">A time to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TimeRange">
            <summary>
            A structure to store a start and end time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.TimeRange.StartTime">
            <summary>
            The starting time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.TimeRange.EndTime">
            <summary>
            The ending time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.TimeRange.Duration">
            <summary>
            The duration of the time range.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.#ctor(System.Nullable{org.GraphDefined.Vanaheimr.Illias.Time},System.Nullable{org.GraphDefined.Vanaheimr.Illias.Time})">
            <summary>
            Create a new time range having a start and end time.
            </summary>
            <param name="StartTime">The start time.</param>
            <param name="EndTime">The end time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.From(org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Create a new time range having the given starting time.
            </summary>
            <param name="StartTime">The starting time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.From(System.Byte)">
            <summary>
            Create a new time range having the given starting time.
            </summary>
            <param name="StartTime">The starting time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.From(System.String)">
            <summary>
            Create a new time range having the given starting time.
            </summary>
            <param name="StartTime">The starting time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TimeRangeExtensions">
            <summary>
            Extension methods for time ranges.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRangeExtensions.To(org.GraphDefined.Vanaheimr.Illias.TimeRange,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Return a new time range having the end time set to the given value.
            </summary>
            <param name="TimeRange">A time range object.</param>
            <param name="EndTime">The new ending time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRangeExtensions.To(org.GraphDefined.Vanaheimr.Illias.TimeRange,System.Byte)">
            <summary>
            Return a new time range having the end time set to the given value.
            </summary>
            <param name="TimeRange">A time range object.</param>
            <param name="EndTime">The new ending time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRangeExtensions.To(org.GraphDefined.Vanaheimr.Illias.TimeRange,System.String)">
            <summary>
            Return a new time range having the end time set to the given value.
            </summary>
            <param name="TimeRange">A time range object.</param>
            <param name="EndTime">The new ending time.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax">
            <summary>
            Min/Max values for TimeSpans.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new range of TimeSpan values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.FromMin(System.TimeSpan)">
            <summary>
            Create a new half-open definition having just a minimum value.
            </summary>
            <param name="MinValue">The minimum value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.FromMax(System.TimeSpan)">
            <summary>
            Create a new half-open definition having just a maximum value.
            </summary>
            <param name="MaxValue">The maximum value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Timestamped`1">
            <summary>
            A value with its creation timestamp.
            </summary>
            <typeparam name="T">The type of the timestamped value.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.Timestamp">
            <summary>
            The timestamp of the value creation.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.#ctor(`0)">
            <summary>
            Create a new timestamped value.
            </summary>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.#ctor(System.DateTime,`0)">
            <summary>
            Create a new timestamped value.
            </summary>
            <param name="Timestamp">The timestamp.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Implicit(`0)~org.GraphDefined.Vanaheimr.Illias.Timestamped{`0}">
            <summary>
            Implicit conversatiuon from an non-timestamped value
            to a timestamped value.
            </summary>
            <param name="Value">The value to be timestamped.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},`0)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped">A timestamped value.</param>
            <param name="Value">Another value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},System.DateTime)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped">A timestamped value.</param>
            <param name="Timestamp">Another timestamp.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},`0)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Value">Another value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},System.DateTime)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped">A timestamped value.</param>
            <param name="Timestamp">Another timestamp.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_LessThan(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.CompareTo(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.Equals(`0)">
            <summary>
            Compares two timestamped values for equality.
            </summary>
            <param name="OtherValue"></param>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.Equals(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two timestamped values for equality.
            </summary>
            <param name="Timestamped">A timestamped value to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Timestamped_RW`1">
            <summary>
            A value with its creation timestamp.
            </summary>
            <typeparam name="T">The type of the timestamped value.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Timestamped_RW`1.Timestamp">
            <summary>
            The timestamp of the value creation.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Timestamped_RW`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped_RW`1.#ctor(`0)">
            <summary>
            Create a new timestamped value.
            </summary>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped_RW`1.#ctor(`0,System.DateTime)">
            <summary>
            Create a new timestamped value.
            </summary>
            <param name="Value">The value.</param>
            <param name="Timestamp">The timestamp.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.UniqueTimestamp">
            <summary>
            This class will return the current timestamp, but will ensure its
            uniqueness which means it will never return the same value twice.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UniqueTimestamp.Now">
            <summary>
            Returns an unique timestamp as a DateTime object
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UniqueTimestamp.Ticks">
            <summary>
            Returns an unique timestamp as an UInt64
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UniqueTimestamp.GetUniqueTimestamp">
            <summary>
            Return a unique timestamp
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.IsolationLevel">
            <summary>
            Transaction Isolation Levels
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.IsolationLevel.Read">
            <summary>
            Read
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.IsolationLevel.Write">
            <summary>
            Write
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3">
            <summary>
            A (distributed) transaction.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Id">
            <summary>
            The Id of this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.SystemId">
            <summary>
            The SystemId of the QuadStore initiating this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Name">
            <summary>
            A user-friendly name or identification for this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.ParentTransaction">
            <summary>
            The parent transaction, if this is a nested transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.CreationTime">
            <summary>
            The creation time of this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.IsolationLevel">
            <summary>
            The isolation level of this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Distributed">
            <summary>
            Whether this transaction should be synched within an distributed QuadStore.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.LongRunning">
            <summary>
            Whether this transaction is a long-running transaction.
            Long-running transactions may e.g. be swapped on disc.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.InvalidationTime">
            <summary>
            A timestamp after this transaction will no longer be valid.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.TXObject">
            <summary>
            The transaction object.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.FinishingTime">
            <summary>
            The timestamp when this transaction was finished (committed or rolled-back).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.State">
            <summary>
            The current state of this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.IsNestedTransaction">
            <summary>
            Returns true if this transaction is a nested transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.HasNestedTransactions">
            <summary>
            Returns true if this transaction contains nested transactions.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.#ctor(`0,`1,System.String,System.Boolean,System.Boolean,org.GraphDefined.Vanaheimr.Illias.Transactions.IsolationLevel,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Func{`2})">
            <summary>
            Creates a new transaction having the given parameters.
            </summary>
            <param name="Id"></param>
            <param name="SystemId"></param>
            <param name="Name">A name or identification for this transaction.</param>
            <param name="Distributed">Indicates that this transaction should synched within the entire cluster.</param>
            <param name="LongRunning">Indicates that this transaction is a long-running transaction.</param>
            <param name="IsolationLevel">The isolation level of this transaction.</param>
            <param name="CreationTime"></param>
            <param name="InvalidationTime"></param>
            <param name="TransactionObjectCreator"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.#ctor(`0,`1,org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2})">
            <summary>
            Creates a new nested transaction.
            </summary>
            <param name="Id"></param>
            <param name="SystemId"></param>
            <param name="ParentTransaction"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Commit(System.String,System.Boolean)">
            <summary>
            Mark this transaction as committed.
            Will not invoke the OnDispose event to clean up the ressources
            </summary>
            <param name="Comment">A comment.</param>
            <param name="Async">if true commit will be async; default: false</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Rollback(System.String,System.Boolean)">
            <summary>
            Mark this transaction as rolledback. Will invoke the event OnDispose to clean up ressources.
            </summary>
            <param name="Comment">A comment.</param>
            <param name="Async">if true rollback will be async; default: false</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.BeginNestedTransaction(System.Boolean,System.Boolean,org.GraphDefined.Vanaheimr.Illias.Transactions.IsolationLevel,System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates a nested transaction having the given parameters.
            </summary>
            <param name="Distributed">Indicates that the nested transaction should synched within the entire cluster.</param>
            <param name="LongRunning">Indicates that the nested transaction is a long-running transaction.</param>
            <param name="IsolationLevel">The isolation level of the nested transaction.</param>
            <param name="Name">A name or identification for the nested transaction.</param>
            <param name="TimeStamp">A timestamp.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.GetNestedTransaction">
            <summary>
            Return the current nested transaction.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Dispose">
            <summary>
            Dispose this transaction
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionException`3">
            <summary>
            An exception during transaction processing occurred!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionException`3._Transaction">
            <summary>
            The transaction causing this exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            An exception during transaction processing occurred!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotBeginTransactionException`3">
            <summary>
            A transaction could not be started.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotBeginTransactionException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            A transaction could not be started.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotCommitNestedTransactionException`3">
            <summary>
            A nested transaction could not be committed.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotCommitNestedTransactionException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            A nested transaction could not be committed.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotRolleBackNestedTransactionException`3">
            <summary>
            A nested transaction could not be rolled back.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotRolleBackNestedTransactionException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            A nested transaction could not be rolled back.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyCommitedException`3">
            <summary>
            The transaction was already committed.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyCommitedException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction was already committed.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyRolledbackException`3">
            <summary>
            The transaction was already rolled back!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyRolledbackException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction was already rolled back!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyRunningException`3">
            <summary>
            The transaction is already running!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyRunningException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction is already running!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionCurrentlyCommittingException`3">
            <summary>
            The transaction is currently committing!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionCurrentlyCommittingException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction is currently committing!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionCurrentlyRollingBackException`3">
            <summary>
            The transaction is currently rolling back!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionCurrentlyRollingBackException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction is currently rolling back!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState">
            <summary>
            The state of a transaction.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.Running">
            <summary>
            The transaction is still running.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.NestedTransaction">
            <summary>
            The transaction has nested transactions.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.Committing">
            <summary>
            The transaction is currently comitting.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.Committed">
            <summary>
            The transaction was comitted.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.RollingBack">
            <summary>
            The transaction is currently rolling back.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.RolledBack">
            <summary>
            The transaction was rolled back.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Trinary">
            <summary>
            Trinary
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TypeHelpers">
            <summary>
            TypeHelpers
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TypeHelpers.IsAnonymousType(System.Type)">
            <summary>
            Is the given type an anonymous type?
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote">
            <summary>
            A majority vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If a majority of >50% are okay with it, the result of the vote will be true.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote._NumberOfYesVotes">
            <summary>
            The current number of vetos.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote._NumberOfNoVotes">
            <summary>
            The current total number of votes.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote.VoteEvaluator">
            <summary>
            A delegate to evaluate the result of the voting.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote.TotalNumberOfVotes">
            <summary>
            The current total number of votes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote.Result">
            <summary>
            The result of the voting.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote.#ctor(org.GraphDefined.Vanaheimr.Illias.Votes.VoteEvaluator{System.Boolean})">
            <summary>
            An abstract boolean voting.
            </summary>
            <param name="VoteEvaluator">A delegate to evaluate the result of the voting.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote.VoteFor(System.Boolean)">
            <summary>
            Give your vote.
            </summary>
            <param name="VotingValue">The value of the vote.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.VoteEvaluator`1">
            <summary>
            A delegate for evaluating a vote based on the
            number of yes and no votes.
            </summary>
            <typeparam name="TResult">The type of the voting result.</typeparam>
            <param name="NumberOfYesVotes">The current number of yes votes.</param>
            <param name="NumberOfNoVotes">The current number of no votes.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtensions">
            <summary>
            Extensions methods for the IVote interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtensions.Yes(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow' or 'accept'.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtensions.Ok(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow' or 'accept'.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtensions.Allow(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow' or 'accept'.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtensions.Accept(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow' or 'accept'.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtensions.No(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'no' or 'deny'.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtensions.Deny(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'no' or 'deny'.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.IVote">
            <summary>
            A vote is a simple way to ask multiple event subscribers
            about their opinion and to evaluate the results.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Votes.IVote.TotalNumberOfVotes">
            <summary>
            The current number of votes.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.IVote`1">
            <summary>
            A vote is a simple way to ask multiple event subscribers
            about their opinion and to evaluate the results.
            </summary>
            <typeparam name="TResult">The type of the voting result.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVote`1.VoteFor(`0)">
            <summary>
            Give your vote.
            </summary>
            <param name="VotingValue">The value of the vote.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Votes.IVote`1.Result">
            <summary>
            The result of the voting.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.MajorityVote">
            <summary>
            A majority vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If a majority of >50% is okay with it, the result of the vote will be true.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.MajorityVote.#ctor">
            <summary>
            A majority vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If a majority of >50% is okay with it, the result of the vote will be true.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.VetoVote">
            <summary>
            A veto vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If anyone is unhappy with it, the result of the vote will be false.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.VetoVote.#ctor">
            <summary>
            A veto vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If anyone is unhappy with it, the result of the vote will be false.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.VetoVote.Veto">
            <summary>
            Veto
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.WebLink">
            <summary>
            A web link.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.WebLink.Text">
            <summary>
            The text of the WebLink.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.WebLink.Url">
            <summary>
            The URL of the WebLink.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.WebLink.#ctor(System.String,System.String)">
            <summary>
            Create a new web link.
            </summary>
            <param name="Text">The text of the WebLink.</param>
            <param name="Url">The URL of the WebLink.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.BouncyCastle.SecurityVisualization">
            <summary>
            Security-related visualizations.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.BouncyCastle.SecurityVisualization.DrunkenBishop(System.String,System.Byte,System.Byte)">
            <summary>
            Convert the given fingerprint into a security visualization.
            http://www.dirk-loss.de/sshvis/drunken_bishop.pdf
            </summary>
            <param name="Fingerprint">A fingerprint.</param>
            <param name="SizeX">The x-size of the visualization.</param>
            <param name="SizeY">The y-size of the visualization.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.BouncyCastle.SecurityVisualization.DrunkenBishop(System.Byte[],System.Byte,System.Byte)">
            <summary>
            Convert the given fingerprint into a security visualization.
            http://www.dirk-loss.de/sshvis/drunken_bishop.pdf
            </summary>
            <param name="Fingerprint">A fingerprint.</param>
            <param name="SizeX">The x-size of the visualization.</param>
            <param name="SizeY">The y-size of the visualization.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.BouncyCastle.SecurityVisualization.DrunkenEarl(System.String,System.UInt32,System.UInt32)">
            <summary>
            Convert the given fingerprint into a security visualization.
            http://www.dirk-loss.de/sshvis/drunken_bishop.pdf
            </summary>
            <param name="Fingerprint">A fingerprint.</param>
            <param name="SizeX">The x-size of the visualization.</param>
            <param name="SizeY">The y-size of the visualization.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.BouncyCastle.SecurityVisualization.DrunkenEarl(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Convert the given fingerprint into a security visualization.
            http://www.dirk-loss.de/sshvis/drunken_bishop.pdf
            </summary>
            <param name="Fingerprint">A fingerprint.</param>
            <param name="SizeX">The x-size of the visualization.</param>
            <param name="SizeY">The y-size of the visualization.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.BouncyCastle.SecurityVisualization.DrunkenBishop``1(System.String,``0,System.Action{``0,System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            Convert the given fingerprint into a security visualization.
            http://www.dirk-loss.de/sshvis/drunken_bishop.pdf
            </summary>
            <param name="Fingerprint">A fingerprint.</param>
            <param name="Data">A data structure to work with.</param>
            <param name="Delegate">A delegate which might modify the given data structure at each step.</param>
            <param name="SizeX">The x-size of the visualization.</param>
            <param name="SizeY">The y-size of the visualization.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.BouncyCastle.SecurityVisualization.DrunkenBishop``1(System.Byte[],``0,System.Action{``0,System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            Convert the given fingerprint into a security visualization.
            http://www.dirk-loss.de/sshvis/drunken_bishop.pdf
            </summary>
            <param name="Fingerprint">A fingerprint.</param>
            <param name="Data">A data structure to work with.</param>
            <param name="Delegate">A delegate which might modify the given data structure at each step.</param>
            <param name="SizeX">The x-size of the visualization.</param>
            <param name="SizeY">The y-size of the visualization.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrow`2">
            <summary>
            An AbstractArrow provides most of the functionality that is repeated
            in every instance of an arrow. Any subclass of AbstractArrow should simply
            implement ProcessMessage(MessageIn, out MessageOut).
            An Arrow accepts/consumes messages/objects of type TIn and emits
            messages/objects of type TOut via an event.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrow`2.OnNotification">
            <summary>
            An event called whenever this arrow sends a new message.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrow`2.#ctor(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Create a new abstract arrow.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrow`2.ProcessMessage(`0,`1@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
            <returns>True if the message should be forwarded; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrow`2.ProcessArrow(`0)">
            <summary>
            Process the incoming arrow.
            </summary>
            <param name="Message">The message of the arrow.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowReceiver`1">
            <summary>
            An AbstractArrowReceiver provides most of the functionality that is repeated
            in every instance of an ArrowReceiver. Any subclass of AbstractArrowReceiver
            should simply implement ProcessArrow(MessageIn).
            An arrow accepts/consumes messages/objects of type TIn.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowReceiver`1.OnStarted">
            <summary>
            An event called whenever this arrow started to send messages.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowReceiver`1.OnExceptionOccured">
            <summary>
            An event called whenever an exception occured at this arrow.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowReceiver`1.OnCompleted">
            <summary>
            An event called whenever this arrow will no longer send any messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowReceiver`1.#ctor(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Creates a new abstract arrow receiver.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowReceiver`1.ProcessArrow(`0)">
            <summary>
            Accepts a message of type S from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <param name="MessageIn">The message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowReceiver`1.ProcessStarted(System.Object,System.DateTime,System.String)">
            <summary>
            The sender of the arrows signaled to start sending arrows.
            </summary>
            <param name="Sender">The sender of the started message.</param>
            <param name="Timestamp">The timestamp of the start.</param>
            <param name="Message">An optional message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowReceiver`1.ProcessExceptionOccured(System.Object,System.DateTime,System.Exception)">
            <summary>
            Process an occured exception.
            </summary>
            <param name="Sender">The sender of this exception.</param>
            <param name="Timestamp">The timestamp of the exception.</param>
            <param name="Exception">The occured exception.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowReceiver`1.ProcessCompleted(System.Object,System.DateTime,System.String)">
            <summary>
            The sender of the arrows signaled not to send any more arrows.
            </summary>
            <param name="Sender">The sender of the completed message.</param>
            <param name="Timestamp">The timestamp of the shutdown.</param>
            <param name="Message">An optional message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowReceiver`1.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1">
            <summary>
            An AbstractArrowSender provides most of the functionality that is repeated
            in every instance of an Arrow. Any subclass of AbstractPipe should simply
            implement ProcessMessage(MessageIn, out MessageOut).
            An Arrow accepts/consumes messages/objects of type TIn and emits
            messages/objects of type TOut via an event.
            </summary>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.OnStarted">
            <summary>
            An event for signaling the start of a message delivery.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.OnNotification">
            <summary>
            An event for message delivery.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.OnExceptionOccured">
            <summary>
            An event for signaling an exception.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.OnCompleted">
            <summary>
            An event for signaling the completion of a message delivery.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.RecordMessagePath">
            <summary>
            Turns the recording of the message delivery path ON or OFF.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.Path">
            <summary>
            Returns the message path.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.#ctor">
            <summary>
            Creates a new AbstractArrowSender.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.NotifyRecipients(System.Object,`0)">
            <summary>
            Accepts a message of type S from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="MessageIn">The message.</param>
            <returns>True if the message was accepted and could be processed; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.Complete(System.Object,System.DateTime,System.String)">
            <summary>
            Signale the completion of the message delivery.
            </summary>
            <param name="Sender">The sender of the completion signal.</param>
            <param name="Timestamp">The timestamp of the shutdown.</param>
            <param name="Message">An optional shutdown message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractArrowSender`1.ToString">
            <summary>
            A string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractConcurrentArrow`2">
            <summary>
            An AbstractArrow provides most of the functionality that is repeated
            in every instance of an arrow. Any subclass of AbstractArrow should simply
            implement ProcessMessage(MessageIn, out MessageOut).
            An Arrow accepts/consumes messages/objects of type TIn and emits
            messages/objects of type TOut via an event.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractConcurrentArrow`2.OnNotification">
            <summary>
            An event called whenever this arrow sends a new message.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractConcurrentArrow`2.#ctor(System.UInt32,org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Create a new abstract concurrent arrow.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="MaxQueueSize">The maximum number of queued messages for both arrow senders.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractConcurrentArrow`2.ProcessMessage(`0,`1@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
            <returns>True if the message should be forwarded; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractConcurrentArrow`2.ProcessArrowConcurrently(`0)">
            <summary>
            Process the incoming arrow.
            </summary>
            <param name="Message">The message of the arrow.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractConcurrentArrowReceiver`1">
            <summary>
            An AbstractArrowReceiver provides most of the functionality that is repeated
            in every instance of a concurrent ArrowReceiver. Any subclass of
            AbstractConcurrentArrowReceiver should simply implement ProcessArrow(MessageIn).
            An arrow accepts/consumes messages/objects of type TIn.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractConcurrentArrowReceiver`1.MaxQueueSize">
            <summary>
            The maximum number of queued messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractConcurrentArrowReceiver`1.#ctor(System.UInt32,org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Creates a new abstract concurrent arrow receiver.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="MaxQueueSize">The maximum number of queued messages for both arrow senders.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractConcurrentArrowReceiver`1.ProcessArrowConcurrently(`0)">
            <summary>
            Process the incoming message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractFilterArrow`1">
            <summary>
            An AbstractArrow provides most of the functionality that is repeated
            in every instance of an arrow. Any subclass of AbstractArrow should simply
            implement ProcessMessage(MessageIn, out MessageOut).
            An Arrow accepts/consumes messages/objects of type TIn and emits
            messages/objects of type TOut via an event.
            </summary>
            <typeparam name="TMessage">The type of the filtered messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractFilterArrow`1.#ctor(System.Func{`0,System.Boolean},System.Boolean,org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Create a new abstract filter arrow.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractFilterArrow`1.ForwardMessage(`0)">
            <summary>
            Process the incoming message and decide
            whether to forward or filter out.
            </summary>
            <param name="Message">The message to filter or not.</param>
            <returns>True if the message should be forwarded; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`3">
            <summary>
            The AbstractSideEffectArrow provides the same functionality as the 
            AbstractArrow, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <typeparam name="TSideEffect">The type of the sideeffect.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`3._SideEffect">
            <summary>
            The SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`3.SideEffect">
            <summary>
            The SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`3.#ctor(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Creates a new AbstractSideEffectArrow.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`4">
            <summary>
            The AbstractSideEffectArrow provides the same functionality as the 
            AbstractArrow, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <typeparam name="T1">The type of the first sideeffect.</typeparam>
            <typeparam name="T2">The type of the second sideeffect.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`4._SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`4.SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`4._SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`4.SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`4.#ctor(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Creates a new AbstractSideEffectArrow.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`5">
            <summary>
            The AbstractSideEffectArrow provides the same functionality as the 
            AbstractArrow, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <typeparam name="T1">The type of the first sideeffect.</typeparam>
            <typeparam name="T2">The type of the second sideeffect.</typeparam>
            <typeparam name="T3">The type of the third sideeffect.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`5._SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`5.SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`5._SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`5.SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`5._SideEffect3">
            <summary>
            The third SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`5.SideEffect3">
            <summary>
            The third SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AbstractSideEffectArrow`5.#ctor(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Creates a new AbstractSideEffectArrow.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.LoggerDelegate">
            <summary>
            A delegate called whenever the data processor has something to say.
            </summary>
            <param name="Timestamp">The timestamp of the message.</param>
            <param name="LogLevel">The log level of the message.</param>
            <param name="Arguments">The message arguments.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.LoggerDelegate`1">
            <summary>
            A delegate called whenever the data processor has something to say.
            </summary>
            <param name="Timestamp">The timestamp of the message.</param>
            <param name="LogLevel">The log level of the message.</param>
            <param name="Arguments">The message arguments.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowObject`1">
            <summary>
            An object sending notifications when its value changed.
            </summary>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowObject`1.Value">
            <summary>
            The value of the ArrowObject.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowObject`1.#ctor(`0)">
            <summary>
            Create an new object sending notifications when its value changed.
            </summary>
            <param name="Value">The value of the object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowObject`1.op_Implicit(org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowObject{`0})~`0">
            <summary>
            Implicit conversion from ArrowObject to TOut.
            </summary>
            <param name="ArrowObject">An ArrowObject.</param>
            <returns>The value of the ArrowObject.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowObject`1.op_Implicit(`0)~org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowObject{`0}">
            <summary>
            Implicit conversion from TOut to ArrowObject.
            </summary>
            <param name="Value">A value.</param>
            <returns>A new ArrowObject.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowPipeline`2">
            <summary>
            An delegate representing a pipeline of arrows.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.Arrow">
            <summary>
            A static helper class for styx pipelines.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.Arrow.CreatePipeline``2(org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowPipeline{``0,``1})">
            <summary>
            Create a arrow pipeline.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <param name="Pipeline">The pipeline commands.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.Arrow.AttachPipeline``2(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0},org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowPipeline{``0,``1})">
            <summary>
            Attach the given arrow pipeline to the given arrow sender.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Pipeline">The arrow processing pipeline.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <typeparam name="TIn">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1.BlockingCollection">
            <summary>
            A blocking collection as inter-thread message pipeline.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1.#ctor">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="Func">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1.#ctor(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="Func">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ArrowSink`1.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.CombineArrowExtensions">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.CombineArrow`3">
            <summary>
            An arrow for transforming two incoming messages into a single outgoing message.
            </summary>
            <typeparam name="TIn1">The type of the first consuming messages/objects.</typeparam>
            <typeparam name="TIn2">The type of the second consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.CombineArrow`3.MaxQueueSize">
            <summary>
            The maximum number of queued messages for both arrow senders.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.CombineArrow`3.#ctor(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`1},System.Func{`0,`1,`2},System.UInt32)">
            <summary>
            Create an new arrow for transforming two incoming messages into a single outgoing message.
            </summary>
            <param name="ArrowSender1">The first arrow sender.</param>
            <param name="ArrowSender2">The second arrow sender.</param>
            <param name="MessagesProcessor">A delegate for transforming two incoming messages into a single outgoing message.</param>
            <param name="MaxQueueSize">The maximum number of queued messages for both arrow senders.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.CombineArrow`3.ReceiveMessage1(`0)">
            <summary>
            Accepts a message of type TIn1 from an arrow sender for
            further processing and delivery to the subscribers.
            </summary>
            <param name="MessageIn1">A message from sender 1.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.CombineArrow`3.ReceiveMessage2(`1)">
            <summary>
            Accepts a message of type TIn2 from an arrow sender for
            further processing and delivery to the subscribers.
            </summary>
            <param name="MessageIn2">A message from sender 2.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentActionArrowExtensions">
            <summary>
            Extension methods for the ConcurrentActionArrow&lt;TIn&gt;.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentActionArrowExtensions.CallConcurrently``1(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0},System.Action{``0},System.UInt32)">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;TIn&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="MessageAction">A delegate called concurrently for every incoming message.</param>
            <param name="MaxQueueSize">The maximum number of queued messages for both arrow senders.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentActionArrow`1">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;TIn&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentActionArrow`1.#ctor(System.Action{`0},System.UInt32,org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Create a new arrow calling the given delegate concurrently.
            </summary>
            <param name="MessageAction">A delegate called concurrently for every incoming message.</param>
            <param name="MaxQueueSize">The maximum number of queued messages for both arrow senders.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentCombineArrow`3">
            <summary>
            A concurrent arrow for transforming two incoming messages into a single outgoing message.
            </summary>
            <typeparam name="TIn1">The type of the first consuming messages/objects.</typeparam>
            <typeparam name="TIn2">The type of the second consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentCombineArrow`3.MaxQueueSize">
            <summary>
            The maximum number of queued messages for both arrow senders.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentCombineArrow`3.#ctor(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`1},System.Func{`0,`1,`2},System.UInt32)">
            <summary>
            Create a new concurrent arrow for transforming two incoming messages into a single outgoing message.
            </summary>
            <param name="ArrowSender1">The first arrow sender.</param>
            <param name="ArrowSender2">The second arrow sender.</param>
            <param name="MessagesProcessor">A delegate for transforming two incoming messages into a single outgoing message.</param>
            <param name="MaxQueueSize">The maximum number of queued messages for both arrow senders.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentCombineArrow`3.ReceiveMessage1(`0)">
            <summary>
            Accepts a message of type TIn1 from an arrow sender for
            further processing and delivery to the subscribers.
            </summary>
            <param name="MessageIn1">A message from sender 1.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentCombineArrow`3.ReceiveMessage2(`1)">
            <summary>
            Accepts a message of type TIn2 from an arrow sender for
            further processing and delivery to the subscribers.
            </summary>
            <param name="MessageIn2">A message from sender 2.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentSelectArrowExtensions">
            <summary>
            Extension methods for the ConcurrentSelectArrow.
            </summary>
            <summary>
            Extension methods for the ConcurrentSelectArrow.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentSelectArrowExtensions.ConcurrentMap``2(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0},System.Func{``0,``1},System.UInt32)">
            <summary>
            A concurrent arrow transforming incoming messages into outgoing messages.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
            <param name="MaxQueueSize">The maximum number of queued messages for both arrow senders.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentSelectArrowExtensions.ConcurrentSelect``2(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0},System.Func{``0,``1},System.UInt32)">
            <summary>
            A concurrent arrow transforming incoming messages into outgoing messages.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
            <param name="MaxQueueSize">The maximum number of queued messages for both arrow senders.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentSelectArrow`2">
            <summary>
            A concurrent arrow transforming incoming messages into outgoing messages.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentSelectArrow`2.#ctor(System.Func{`0,`1},System.UInt32,org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            An arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
            <param name="MaxQueueSize">The maximum number of queued messages for both arrow senders.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ConcurrentSelectArrow`2.ProcessMessage(`0,`1@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.BandFilterArrow`1">
            <summary>
            Filters the consuming objects between two values.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.BandFilterArrow`1.Lower">
            <summary>
            The lower bound of the passed values.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.BandFilterArrow`1.Upper">
            <summary>
            The upper bound of the passed values.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.BandFilterArrow`1.#ctor(`0,`0,System.Boolean,org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Sends a message when then received values are not within
            the bounding box of then given Min/Max-values.
            </summary>
            <param name="Lower">The lower bound of the passed values.</param>
            <param name="Upper">The upper bound of the passed values.</param>
            <param name="InvertedFilter">Invert the filter behaviour.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.DuplicateFilterArrow`1">
            <summary>
            The DuplicateFilterArrow will not allow a duplicate object to pass through it.
            This is accomplished by the Arrow maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Arrow, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.DuplicateFilterArrow`1.#ctor">
            <summary>
            The DuplicateFilterArrow will not allow a duplicate object to pass through it.
            This is accomplished by the Arrow maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Arrow, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.DuplicateFilterArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.SameValueFilterArrow`1">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.SameValueFilterArrow`1.LastMessage">
            <summary>
            The last message send.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.SameValueFilterArrow`1.#ctor">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.SameValueFilterArrow`1.#ctor(`0)">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
            <param name="LastMessage">Sets the initial value of LastMessage.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.SameValueFilterArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.SkipArrowExtensions">
            <summary>
            Extension methods for the SkipArrow&lt;TMessage&gt;.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.SkipArrowExtensions.SkipArrow``1(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0},System.UInt32)">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="NumberOfMessagesToSkip">The number of messages to skip.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.SkipArrow`1">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.SkipArrow`1.#ctor(System.UInt32,org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
            <param name="NumberOfMessagesToSkip">The number of messages to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.SkipArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.FuncFilterArrowExtensions">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.FuncFilterArrowExtensions.Where``1(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Include">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.WhereArrow`1">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.WhereArrow`1.#ctor(System.Func{`0,System.Boolean},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="Include">A Func&lt;TMessage, Boolean&gt; filtering the consuming objects. True means forwardfilter (ignore).</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrow">
            <summary>
            The common interface for any Styx arrow implementation.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrow`2">
            <summary>
            The generic interface for any Styx arrow implementation.
            An arrow accepts/consumes messages/objects of type TIn and emits
            messages/objects of type TOut via an event.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver">
            <summary>
            The general interface for everything which
            acts as an arrow target.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver.ProcessExceptionOccured(System.Object,System.DateTime,System.Exception)">
            <summary>
            An exception occured at the arrow sender.
            </summary>
            <param name="Sender">The sender of this exception.</param>
            <param name="ExceptionMessage">The timestamp of the exception.</param>
            <param name="Exception">The occured exception.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver.ProcessCompleted(System.Object,System.DateTime,System.String)">
            <summary>
            The sender of the arrows signaled not to send any more arrows.
            </summary>
            <param name="Sender">The sender of this arrow.</param>
            <param name="Timestamp">The timestamp of the shutdown.</param>
            <param name="Message">An optional message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver`1">
            <summary>
            The interface for arrow targets accepting a single message.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver`1.ProcessArrow(`0)">
            <summary>
            Accept a single message.
            </summary>
            <param name="Message">The message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver`2">
            <summary>
            The interface for targets accepting
            arrows having two messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver`2.ProcessArrow(`0,`1)">
            <summary>
            Accept an arrow having two messages.
            </summary>
            <param name="Message1">The first message.</param>
            <param name="Message2">The second message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver`3">
            <summary>
            The interface for targets accepting
            arrows having three messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver`3.ProcessArrow(`0,`1,`2)">
            <summary>
            Accept an arrow having three messages.
            </summary>
            <param name="Message1">The first message.</param>
            <param name="Message2">The second message.</param>
            <param name="Message3">The third message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver`4">
            <summary>
            The interface for targets accepting
            arrows having four messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver`4.ProcessArrow(`0,`1,`2,`3)">
            <summary>
            Accept an arrow having four messages.
            </summary>
            <param name="Message1">The first message.</param>
            <param name="Message2">The second message.</param>
            <param name="Message3">The third message.</param>
            <param name="Message4">The fourth message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver`5">
            <summary>
            The interface for targets accepting
            arrows having five messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowReceiver`5.ProcessArrow(`0,`1,`2,`3,`4)">
            <summary>
            Accept an arrow having five messages.
            </summary>
            <param name="Message1">The first message.</param>
            <param name="Message2">The second message.</param>
            <param name="Message3">The third message.</param>
            <param name="Message4">The fourth message.</param>
            <param name="Message5">The fifth message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender">
            <summary>
            The interface for object providing a notification service.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender.OnStarted">
            <summary>
            An event for signaling the start of a message delivery.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender.OnCompleted">
            <summary>
            An event for signaling the completion of a message delivery.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender.OnExceptionOccured">
            <summary>
            An event for signaling an exception.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender`1">
            <summary>
            The interface for object providing a single message notification service.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSenderExtensions">
            <summary>
            Extensions for the IArrowSender interface.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangReceiver`2">
            <summary>
            The interface for targets accepting
            arrows having one message.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangReceiver`2.ProcessBoomerang(`0)">
            <summary>
            Accept an arrow having one message.
            </summary>
            <param name="Message1">The first message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangReceiver`3">
            <summary>
            The interface for targets accepting
            arrows having two messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangReceiver`3.ProcessBoomerang(`0,`1)">
            <summary>
            Accept an arrow having two messages.
            </summary>
            <param name="Message1">The first message.</param>
            <param name="Message2">The second message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangReceiver`4">
            <summary>
            The interface for targets accepting
            arrows having three messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangReceiver`4.ProcessBoomerang(`0,`1,`2)">
            <summary>
            Accept an arrow having three messages.
            </summary>
            <param name="Message1">The first message.</param>
            <param name="Message2">The second message.</param>
            <param name="Message3">The third message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangReceiver`5">
            <summary>
            The interface for targets accepting
            arrows having four messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangReceiver`5.ProcessBoomerang(`0,`1,`2,`3)">
            <summary>
            Accept an arrow having four messages.
            </summary>
            <param name="Message1">The first message.</param>
            <param name="Message2">The second message.</param>
            <param name="Message3">The third message.</param>
            <param name="Message4">The fourth message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangReceiver`6">
            <summary>
            The interface for targets accepting
            arrows having five messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangReceiver`6.ProcessBoomerang(`0,`1,`2,`3,`4)">
            <summary>
            Accept an arrow having five messages.
            </summary>
            <param name="Message1">The first message.</param>
            <param name="Message2">The second message.</param>
            <param name="Message3">The third message.</param>
            <param name="Message4">The fourth message.</param>
            <param name="Message4">The fifth message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IBoomerangSenderExtensions">
            <summary>
            Extensions for the IBoomerangSender interface.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IFilterArrow">
            <summary>
            A FilterArrow is much like the IdentityArrow, but may or may not filter 
            some of the messages/objects instead of emitting everything.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IFilterArrow`1">
            <summary>
            A FilterArrow is much like the IdentityArrow, but may or may not filter 
            some of the messages/objects instead of emitting everything.
            </summary>
            <typeparam name="TMessage">The type of the consuming messages/objects.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ISideEffectArrow`3">
            <summary>
            This SideEffectArrow will produce a side effect which can
            be retrieved by the SideEffect property.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISideEffectArrow`3.SideEffect">
            <summary>
            The SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ISideEffectArrow`4">
            <summary>
            This SideEffectArrow will produce two side effects which can
            be retrieved by the SideEffect properties.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISideEffectArrow`4.SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISideEffectArrow`4.SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ISideEffectArrow`5">
            <summary>
            This SideEffectArrow will produce three side effects which can
            be retrieved by the SideEffect properties.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISideEffectArrow`5.SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISideEffectArrow`5.SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISideEffectArrow`5.SideEffect3">
            <summary>
            The third SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1">
            <summary>
            The common interface for any Arrow implementations sending messages of type E.
            </summary>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1.InitialDelay">
            <summary>
            The initial delay before starting to fire asynchronously.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1.IsTask">
            <summary>
            Whether the sniper is running asynchronously or not.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1.FireCancellationTokenSource">
            <summary>
            Signals to a FireCancellationToken that it should be canceled.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1.FireCancellationToken">
            <summary>
            Propogates notification that the asynchronous fireing should be canceled.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1.FireTask">
            <summary>
            The internal task for fireing the messages/objects.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1.Intervall">
            <summary>
            The intervall will throttle the automatic measurement of passive
            sensors and the event notifications of active sensors.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1.ThrottlingSleepDuration">
            <summary>
            The amount of time in milliseconds a passive sensor
            will sleep if it is in throttling mode.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1.LastFireTime">
            <summary>
            The last time the sniper fired.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1.AsTask(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Create as task for the message/object fireing.
            </summary>
            <param name="TaskCreationOption">Specifies flags that control optional behavior for the creation and execution of tasks.</param>
            <returns>The created task.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ISniper`1.StartToFire(System.Boolean)">
            <summary>
            Starts the sniper fire!
            </summary>
            <param name="Async">Whether to run within a seperate task or not.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.AggregatorArrow`1">
            <summary>
            The AggregatorArrow produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorArrow may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AggregatorArrow`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            The AggregatorArrow produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorArrow may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
            <param name="ICollection">An optional ICollection to store the passed messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AggregatorArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.AggregatorArrow`1.ToString">
            <summary>
            Returns a string representation of this Arrow.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.CalcArrowExtensions">
            <summary>
            Extension methods for the CalcArrow.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.CalcArrowExtensions.Calc``1(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0},``0,System.Func{``0,``0,``0})">
            <summary>
            Creat a new sideeffect arrow calculating the new sideeffect
            and the output message based on the current sideeffect and
            the input message.
            </summary>
            <typeparam name="TData">The type of the consuming messages, the sideeffect and the emitted messages.</typeparam>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="InitialValue">The inital value of the sideeffect of this arrow.</param>
            <param name="MessageProcessor">A delegate calculating the new sideeffect and the output message based on the current sideeffect and the input message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.CalcArrow`1">
            <summary>
            A sideeffect arrow calculating the new sideeffect
            and the output message based on the current
            sideeffect and the input message.
            </summary>
            <typeparam name="TData">The type of the consuming messages, the sideeffect and the emitted messages.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.CalcArrow`1.#ctor(`0,System.Func{`0,`0,`0},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Creat a new sideeffect arrow calculating the new sideeffect
            and the output message based on the current sideeffect and
            the input message.
            </summary>
            <param name="InitialValue">The inital value of the sideeffect of this arrow.</param>
            <param name="MessageProcessor">A delegate calculating the new sideeffect and the output message based on the current sideeffect and the input message.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.CalcArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.MinMaxArrowExtensions">
            <summary>
            Extension methods for the MinMaxArrow.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MinMaxArrowExtensions.MinMax``1(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0},``0,``0)">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Min">The initial minimum.</param>
            <param name="Max">The initial maximum.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.MinMaxArrow`1">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of TMessage.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.MinMaxArrow`1.Min">
            <summary>
            The minimum of the passed values.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.MinMaxArrow`1.Max">
            <summary>
            The maximum of the passed values.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MinMaxArrow`1.#ctor(`0,`0,org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of TMessage.
            </summary>
            <param name="Min">The initial minimum.</param>
            <param name="Max">The initial maximum.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MinMaxArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.ActionArrow`1">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;TIn&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <typeparam name="TIn">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ActionArrow`1.#ctor(System.Action{`0},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;TIn&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <param name="Action">An Action &lt;S&gt; to invoke on every accepted message/object before forwarding it.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.ActionArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.CountArrowExtensions">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.CountArrowExtensions.Count``1(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0},System.Int64)">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="InitialValue">The initial value of the counter.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.CountArrow`1">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.CountArrow`1.#ctor(System.Int64,org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
            <param name="InitialValue">The initial value of the counter.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.CountArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.CountArrow`1.ToString">
            <summary>
            Returns a string representation of this Arrow.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IdentityArrowExtensions">
            <summary>
            The IdentityArrow is the most basic arrow.
            It simply sends the incoming message to the recipients without any processing.
            This arrow is useful in various test case situations.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IdentityArrowExtensions.IdentityArrow``1(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0})">
            <summary>
            The IdentityArrow is the most basic arrow.
            It simply sends the incoming message to the recipients without any processing.
            This arrow is useful in various test case situations.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.IdentityArrow`1">
            <summary>
            The IdentityArrow is the most basic arrow.
            It simply sends the incoming message to the recipients without any processing.
            This arrow is useful in various test case situations.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IdentityArrow`1.#ctor(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            The IdentityArrow is the most basic arrow.
            It simply sends the incoming message to the recipients without any processing.
            This arrow is useful in various test case situations.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.IdentityArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrowExtensions">
            <summary>
            Extension methods for the MapArrow.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrowExtensions.Map``2(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0},System.Func{``0,``1},System.Func{System.Exception,System.Exception})">
            <summary>
            Transform the message of every incoming arrow by the given delegate.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="MessageProcessor">A delegate to transform an incoming message into an outgoing message.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrowExtensions.Map``3(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0,``1},System.Func{``0,``1,``2},System.Func{System.Exception,System.Exception})">
            <summary>
            Transform both messages of every incoming arrow by the given delegate.
            </summary>
            <typeparam name="TIn1">The first type of the consuming messages/objects.</typeparam>
            <typeparam name="TIn2">The second type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="MessageProcessor">A delegate to transform two incoming messages into an outgoing message.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrowExtensions.Map``4(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{``0,``1,``2},System.Func{``0,``1,``2,``3},System.Func{System.Exception,System.Exception})">
            <summary>
            Transform three messages of every incoming arrow by the given delegate.
            </summary>
            <typeparam name="TIn1">The first type of the consuming messages/objects.</typeparam>
            <typeparam name="TIn2">The second type of the consuming messages/objects.</typeparam>
            <typeparam name="TIn3">The third type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="MessageProcessor">A delegate to transform two incoming messages into an outgoing message.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrow`2">
            <summary>
            Transform the message of every incoming arrow by the given delegate.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrow`2.#ctor(System.Func{`0,`1},System.Func{System.Exception,System.Exception},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0})">
            <summary>
            Create a new MapArrow transforming the message of every
            incoming arrow by the given delegate.
            </summary>
            <param name="MessageProcessor">A delegate to transform an incoming message into an outgoing message.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrow`2.ProcessMessage(`0,`1@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrow`3">
            <summary>
            Transform both messages of every incoming arrow by the given delegate.
            </summary>
            <typeparam name="TIn1">The first type of the consuming messages/objects.</typeparam>
            <typeparam name="TIn2">The second type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrow`3.#ctor(System.Func{`0,`1,`2},System.Func{System.Exception,System.Exception},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0,`1})">
            <summary>
            Create a new MapArrow transforming two messages of
            every incoming arrow by the given delegate.
            </summary>
            <param name="MessageProcessor">A delegate to transform two incoming messages into an outgoing message.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrow`3.ProcessArrow(`0,`1)">
            <summary>
            Process the incoming messages and send an outgoing message.
            </summary>
            <param name="MessageIn1">The first incoming message.</param>
            <param name="MessageIn2">The second incoming message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrow`4">
            <summary>
            Transform three messages of every incoming arrow by the given delegate.
            </summary>
            <typeparam name="TIn1">The first type of the consuming messages/objects.</typeparam>
            <typeparam name="TIn2">The second type of the consuming messages/objects.</typeparam>
            <typeparam name="TIn3">The third type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrow`4.#ctor(System.Func{`0,`1,`2,`3},System.Func{System.Exception,System.Exception},org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{`0,`1,`2})">
            <summary>
            Create a new MapArrow transforming three messages of
            every incoming arrow by the given delegate.
            </summary>
            <param name="MessageProcessor">A delegate to transform three incoming messages into an outgoing message.</param>
            <param name="OnError">A delegate to transform an incoming error into an outgoing error.</param>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.MapArrow`4.ProcessArrow(`0,`1,`2)">
            <summary>
            Process the incoming messages and send an outgoing message.
            </summary>
            <param name="MessageIn1">The first incoming message.</param>
            <param name="MessageIn2">The second incoming message.</param>
            <param name="MessageIn3">The third incoming message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.UnfoldArrowExtensions.Unfold``1(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Turn a single arrow having multiple notifications into
            multiple arrows having a single notification each.
            </summary>
            <typeparam name="T">The type of the notifications.</typeparam>
            <param name="In">The arrow sender.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.UnfoldArrow`1">
            <summary>
            Turn a single arrow having multiple notifications into
            multiple arrows having a single notification each.
            </summary>
            <typeparam name="T">The type of the notifications.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.SniperExtensions">
            <summary>
            A class of specialized IEnumerable extension methods.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.SniperExtensions.ToSniper``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new Sniper fireing the content of the given IEnumerable.
            </summary>
            <typeparam name="TMessage">The type of the emitted messages/objects.</typeparam>
            <param name="IEnumerable">An enumeration of messages/objects to send.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.SniperExtensions.ToSniper``1(System.Collections.Generic.IEnumerator{``0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new Sniper fireing the content of the given IEnumerable.
            </summary>
            <typeparam name="TMessage">The type of the emitted messages/objects.</typeparam>
            <param name="IEnumerator">An enumerator of messages/objects to send.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
            <returns>A new Sniper.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1">
            <summary>
            The Sniper fetches messages/objects from a pipe, an IEnumerable or
            via an IEnumerator and sends them to the recipients.
            </summary>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.IEnumerator">
            <summary>
            The internal source of messages/objects.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.InitialDelay">
            <summary>
            The initial delay before starting to fire asynchronously.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.IsTask">
            <summary>
            Whether the sniper is running as its own task or not.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.FireCancellationTokenSource">
            <summary>
            Signals to a FireCancellationToken that it should be canceled.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.FireCancellationToken">
            <summary>
            Propogates notification that the asynchronous fireing should be canceled.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.FireTask">
            <summary>
            The internal task for fireing the messages/objects.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.Intervall">
            <summary>
            The intervall will throttle the automatic measurement of passive
            sensors and the event notifications of active sensors.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.ThrottlingSleepDuration">
            <summary>
            The amount of time in milliseconds a passive sensor
            will sleep if it is in throttling mode.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.LastFireTime">
            <summary>
            The last time the sniper fired.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            The Sniper fetches messages/objects from the given IEnumerable
            and sends them to the recipients.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            The Sniper fetches messages/objects from the given IEnumerator
            and sends them to the recipients.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.#ctor(System.Func{`0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            The Sniper fetches messages/objects from the given IEnumerable
            and sends them to the recipients.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.AsTask(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Create as task for the message/object fireing.
            </summary>
            <param name="TaskCreationOption">Specifies flags that control optional behavior for the creation and execution of tasks.</param>
            <returns>The created task.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.StartFireing">
            <summary>
            Starts the fireing.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.Sniper`1.StartToFire(System.Boolean)">
            <summary>
            Starts the sniper fire!
            </summary>
            <param name="StartAsTask">Whether to run within a seperate task or not.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.StatisticsArrow">
            <summary>
            The StdDevArrow consumes doubles and emitts the
            sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.StatisticsArrow.#ctor(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{System.Double})">
            <summary>
            The StdDevArrow consumes doubles and emitts the
            sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.StatisticsArrow.ProcessMessage(System.Double,org.GraphDefined.Vanaheimr.Styx.Arrows.Statistics@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.StatisticsArrow.ToString">
            <summary>
            Returns a string representation of this Arrow.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Arrows.StdDevSideEffectArrow">
            <summary>
            The StdDevSideEffectArrow produces a side effect that
            is the sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.StdDevSideEffectArrow.StdDev">
            <summary>
            The standard deviation of the processed messages.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.StdDevSideEffectArrow.Variance">
            <summary>
            The variance of the processed messages.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.Arrows.StdDevSideEffectArrow.Average">
            <summary>
            The average of the processed messages.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.StdDevSideEffectArrow.#ctor">
            <summary>
            The StdDevSideEffectArrow produces a side effect that
            is the sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.StdDevSideEffectArrow.ProcessMessage(System.Double,System.Double@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Arrows.StdDevSideEffectArrow.ToString">
            <summary>
            Returns a string representation of this Arrow.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ExpandableEnumerator`1">
            <summary>
            ExpandableEnumerator takes an IEnumerator and will emit its elements.
            However, if an object is added to ExpandableEnumerator, then its put into
            an internal queue. The queue has priority over the internal enumerator when
            accessing the current element.
            </summary>
            <typeparam name="T">The type of the stored elements.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ExpandableEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new ExpandableEnumerator based on the given myIEnumerator.
            </summary>
            <param name="myIEnumerator">The enumerator to be wrapped.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.ExpandableEnumerator`1.Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.ExpandableEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ExpandableEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ExpandableEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection and clears
            the internal queue.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ExpandableEnumerator`1.Add(`0)">
            <summary>
            Adds an element to the internal queue.
            </summary>
            <param name="myElement">The element to add.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ExpandableEnumerator`1.Dispose">
            <summary>
            Dispose this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.HistoryEnumerator`1">
            <summary>
            A HistoryEnumerator wraps and behaves like a classical IEnumerator.
            However, it will remember what was last returned out of the IEnumerator.
            </summary>
            <typeparam name="T">The type of the stored elements.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.HistoryEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new HistoryEnumerator based on the given enumerator.
            </summary>
            <param name="IEnumerator">The enumerator to be wrapped.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.HistoryEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new HistoryEnumerator based on the given enumerable.
            </summary>
            <param name="IEnumerable">The enumerable to be wrapped.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.HistoryEnumerator`1.Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.HistoryEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.HistoryEnumerator`1.Last">
            <summary>
            Return the last element of the internal IEnumertor&lt;T&gt;.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.HistoryEnumerator`1.org#GraphDefined#Vanaheimr#Styx#IHistoryEnumerator#Last">
            <summary>
            Return the last element of the internal IEnumertor.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.HistoryEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.HistoryEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.HistoryEnumerator`1.Dispose">
            <summary>
            Dispose this enumerator.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IHistoryEnumerator">
            <summary>
            A helper interface for the HistoryEnumerator&lt;T&gt; class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.IHistoryEnumerator.Last">
            <summary>
            Return the last element of the internal IEnumertor.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ISingleEnumerator">
            <summary>
            A helper interface for the SingleEnumerator&lt;T&gt; class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.ISingleEnumerator.Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.MultiEnumerator`1">
            <summary>
            A MultiEnumerator takes multiple IEnumerators in its constructor
            and makes them behave like a single enumerator.
            The order in which objects are returned from both enumerators are with
            respect to the order of the enumerators passed into the constructor.
            </summary>
            <typeparam name="T">The type of the stored elements.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.MultiEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0}[])">
            <summary>
            Creates a new MultiEnumerator based on the given Enumerators.
            </summary>
            <param name="Enumerators">The enumerators to be wrapped.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.MultiEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerator{`0}})">
            <summary>
            Creates a new MultiEnumerator based on the given Enumerators.
            </summary>
            <param name="Enumerators">The enumerators to be wrapped.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.MultiEnumerator`1.Current">
            <summary>
            Return the current element of the current IEnumertor.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.MultiEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.MultiEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.MultiEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.MultiEnumerator`1.Dispose">
            <summary>
            Dispose this enumerator.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1">
            <summary>
            SingleEnumerator is an iterator that only contains one element
            of type T. This has applications in various metapipes, where
            single objects are manipulated at a time.
            </summary>
            <typeparam name="T">The type of the stored element.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.SingleEnumeratorState">
            <summary>
            The internal state of the SingleEnumerator&lt;T&gt;.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.SingleEnumeratorState.BEFORE">
            <summary>
            Before the element.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.SingleEnumeratorState.AT">
            <summary>
            At the element.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.SingleEnumeratorState.BEHIND">
            <summary>
            Behind the element.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.#ctor(`0)">
            <summary>
            Creates a new single element enumerator based on the given element.
            </summary>
            <param name="myElement">The element within the enumerator.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.Current">
            <summary>
            Return the current element of the current IEnumertor&lt;T&gt;.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.org#GraphDefined#Vanaheimr#Styx#ISingleEnumerator#Current">
            <summary>
            Return the current element of the internal ISingleEnumerator.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SingleEnumerator`1.Dispose">
            <summary>
            Dispose this enumerator.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.PipesException">
            <summary>
            A general pipes exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PipesException.#ctor">
            <summary>
            A general pipes exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PipesException.#ctor(System.String)">
            <summary>
            A general pipes exception.
            </summary>
            <param name="myMessage">An additional message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.NoSuchElementException">
            <summary>
            No such element could be found.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.NoSuchElementException.#ctor">
            <summary>
            No such element could be found.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.NoSuchElementException.#ctor(System.String)">
            <summary>
            No such element could be found.
            </summary>
            <param name="myMessage">An additional message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IllegalStateException">
            <summary>
            An illegal state has been reached.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IllegalStateException.#ctor(System.String)">
            <summary>
            An illegal state has been reached.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AbstractComparisonFilterPipe`2">
            <summary>
            The AbstractComparisonFilterPipe provides the necessary functionality
            that is required of most ComparisonFilterPipe implementations.
            The compareObjects() implementation is useful for comparing two objects
            to determine if the current object in the pipe should be filtered.
            Depending on the type of ComparisonFilterPipe.Filter used, different
            types of comparisons are evaluated.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractComparisonFilterPipe`2.ComparisonFilter">
            <summary>
            The filter used for comparing two objects.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractComparisonFilterPipe`2.#ctor(org.GraphDefined.Vanaheimr.Styx.ComparisonFilter)">
            <summary>
            Creates a new AbstractComparisonFilterPipe using the given filter.
            </summary>
            <param name="ComparisonFilter">The filter used for comparing two objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractComparisonFilterPipe`2.CompareObjects(`1,`1)">
            <summary>
            Compares two objects.
            </summary>
            <param name="LeftObject">The left object.</param>
            <param name="RightObject">The right object.</param>
            <returns>A match based on the defined filter.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractComparisonFilterPipe`2.ToString">
            <summary>
            A string representation of this filter pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2">
            <summary>
            An AbstractPipe provides most of the functionality that is repeated
            in every instance of a Pipe. Any subclass of AbstractPipe should simply
            implement MoveNext().
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.SourcePipe">
            <summary>
            The source pipe.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2._CurrentElement">
            <summary>
            The current element in the pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.#ctor">
            <summary>
            Creates an abstract pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.#ctor(`0)">
            <summary>
            Creates an new abstract pipe using the given single value as element source.
            </summary>
            <param name="SourceElement">A single value as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0})">
            <summary>
            Creates an new abstract pipe using the given pipe as element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an new abstract pipe using the given enumeration as element source.
            </summary>
            <param name="SourceEnumeration">An enumeration as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates an new abstract pipe using the given enumerator as element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates an new abstract pipe using the given enumerable as element source.
            </summary>
            <param name="SourceEnumerable">An enumeration as element source.</param>
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.SetSource(`0)">
            <summary>
            Set the given single value as element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.SetSource(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0})">
            <summary>
            Set the given pipe as element source.
            </summary> 
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.SetSource(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the given enumerator as element source.
            </summary> 
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.SetSource(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the given enumerable as element source.
            </summary> 
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the pipe.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the pipe.
            </returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.Current">
            <summary>
            Return the current element in the pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the pipe.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            pipe.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the pipe. If the pipe has
            no internal state the pipe will just call Reset() on
            its source pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`2.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3">
            <summary>
            An AbstractPipe provides most of the functionality that is repeated
            in every instance of a Pipe. Any subclass of AbstractPipe should simply
            implement MoveNext().
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.SourcePipe1">
            <summary>
            The first source pipe.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.SourcePipe2">
            <summary>
            The second source pipe.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3._CurrentElement">
            <summary>
            The current element in the pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.#ctor">
            <summary>
            Creates a new abstract pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.#ctor(`0,`1)">
            <summary>
            Creates an new abstract pipe using the given single values as element sources.
            </summary>
            <param name="SourceElement1">A single value as first element source.</param>
            <param name="SourceElement2">A single value as second element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},org.GraphDefined.Vanaheimr.Styx.IEndPipe{`1})">
            <summary>
            Creates an new abstract pipe using the given pipes as element sources.
            </summary>
            <param name="SourcePipe1">A pipe as first element source.</param>
            <param name="SourcePipe2">A pipe as second element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.#ctor(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Creates an new abstract pipe using the given enumerators as element sources.
            </summary>
            <param name="SourceEnumerator1">An enumerator as first element source.</param>
            <param name="SourceEnumerator2">An enumerator as second element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Creates an new abstract pipe using the given enumerables as element sources.
            </summary> 
            <param name="SourceEnumerable1">An enumerable as first element source.</param>
            <param name="SourceEnumerable2">An enumerable as second element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.SetSource1(`0)">
            <summary>
            Set the given single value as first element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.SetSource2(`1)">
            <summary>
            Set the given single value as second element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.SetSource1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0})">
            <summary>
            Set the given pipe as first element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.SetSource2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`1})">
            <summary>
            Set the given pipe as second element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the given enumerator as first element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the given enumerator as second element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.SetSource1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the given enumerable as first element source.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.SetSource2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the given enumerable as second element source.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.Reset">
            <summary>
            Sets the enumerators to their initial positions, which
            is before the first element in the collections.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`3.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4">
            <summary>
            An AbstractPipe provides most of the functionality that is repeated
            in every instance of a Pipe. Any subclass of AbstractPipe should simply
            implement MoveNext().
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SourcePipe1">
            <summary>
            The first source pipe.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SourcePipe2">
            <summary>
            The second source pipe.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SourcePipe3">
            <summary>
            The third source pipe.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4._CurrentElement">
            <summary>
            The current element in the pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.#ctor">
            <summary>
            Creates a new abstract pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.#ctor(`0,`1,`2)">
            <summary>
            Creates an new abstract pipe using the given single values as element sources.
            </summary>
            <param name="SourceElement1">A single value as first element source.</param>
            <param name="SourceElement2">A single value as second element source.</param>
            <param name="SourceElement3">A single value as third element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},org.GraphDefined.Vanaheimr.Styx.IEndPipe{`1},org.GraphDefined.Vanaheimr.Styx.IEndPipe{`2})">
            <summary>
            Creates an new abstract pipe using the given pipes as element sources.
            </summary>
            <param name="SourcePipe1">A pipe as first element source.</param>
            <param name="SourcePipe2">A pipe as second element source.</param>
            <param name="SourcePipe3">A pipe as third element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.#ctor(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1},System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Creates an new abstract pipe using the given enumerators as element sources.
            </summary>
            <param name="SourceEnumerator1">An enumerator as first element source.</param>
            <param name="SourceEnumerator2">An enumerator as second element source.</param>
            <param name="SourceEnumerator3">An enumerator as third element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Creates an new abstract pipe using the given enumerables as element sources.
            </summary> 
            <param name="SourceEnumerable1">An enumerable as first element source.</param>
            <param name="SourceEnumerable2">An enumerable as second element source.</param>
            <param name="SourceEnumerable3">An enumerable as third element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource1(`0)">
            <summary>
            Set the given single value as first element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource2(`1)">
            <summary>
            Set the given single value as second element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource3(`2)">
            <summary>
            Set the given single value as third element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0})">
            <summary>
            Set the given pipe as first element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`1})">
            <summary>
            Set the given pipe as second element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource3(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`2})">
            <summary>
            Set the given pipe as third element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the given enumerator as first element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the given enumerator as second element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource3(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Set the given enumerator as second element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the given enumerable as first element source.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the given enumerable as second element source.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.SetSource3(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Set the given enumerable as second element source.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.Reset">
            <summary>
            Sets the enumerators to their initial positions, which
            is before the first element in the collections.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractPipe`4.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`3">
            <summary>
            An AbstractSideEffectPipe provides the same functionality as the 
            AbstractPipe, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T">The type of the sideeffect.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`3.InternalSideEffect">
            <summary>
            The internal side effect produced by this pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref InternalSideEffect);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`3.SideEffect">
            <summary>
            The side effect produced by this pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`3.#ctor">
            <summary>
            Creates an new abstract side effect pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`3.#ctor(`0,`2)">
            <summary>
            Creates an new abstract side effect pipe using the given single value as element source.
            </summary>
            <param name="SourceElement">A single value as element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`3.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},`2)">
            <summary>
            Creates an new abstract side effect pipe using the given pipe as element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`3.#ctor(System.Collections.Generic.IEnumerator{`0},`2)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerator as element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`3.#ctor(System.Collections.Generic.IEnumerable{`0},`2)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerable as element source.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`4">
            <summary>
            An AbstractSideEffectPipe provides the same functionality as the 
            AbstractPipe, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T">The type of the sideeffect.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`4.InternalSideEffect">
            <summary>
            The internal side effect produced by this pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref InternalSideEffect);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`4.SideEffect">
            <summary>
            The side effect produced by this pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`4.#ctor">
            <summary>
            Creates an new abstract side effect pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`4.#ctor(`0,`1,`3)">
            <summary>
            Creates an new abstract side effect pipe using the given single values as element sources.
            </summary>
            <param name="SourceElement1">A single value as first element source.</param>
            <param name="SourceElement2">A single value as second element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`4.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},org.GraphDefined.Vanaheimr.Styx.IEndPipe{`1},`3)">
            <summary>
            Creates an new abstract side effect pipe using the given pipes as element sources.
            </summary>
            <param name="SourcePipe1">A pipe as first element source.</param>
            <param name="SourcePipe2">A pipe as second element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`4.#ctor(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1},`3)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerators as element sources.
            </summary>
            <param name="SourceEnumerator1">An enumerator as first element source.</param>
            <param name="SourceEnumerator2">An enumerator as second element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`4.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},`3)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerables as element sources.
            </summary>
            <param name="SourceEnumerable1">An enumerable as element source.</param>
            <param name="SourceEnumerable2">An enumerable as element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`5">
            <summary>
            An AbstractSideEffectPipe provides the same functionality as the 
            AbstractPipe, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the second consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T">The type of the sideeffect.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`5.InternalSideEffect">
            <summary>
            The internal side effect produced by this pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref InternalSideEffect);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`5.SideEffect">
            <summary>
            The side effect produced by this pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`5.#ctor">
            <summary>
            Creates an new abstract side effect pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`5.#ctor(`0,`1,`2,`4)">
            <summary>
            Creates an new abstract side effect pipe using the given single values as element sources.
            </summary>
            <param name="SourceElement1">A single value as first element source.</param>
            <param name="SourceElement2">A single value as second element source.</param>
            <param name="SourceElement3">A single value as third element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`5.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},org.GraphDefined.Vanaheimr.Styx.IEndPipe{`1},org.GraphDefined.Vanaheimr.Styx.IEndPipe{`2},`4)">
            <summary>
            Creates an new abstract side effect pipe using the given pipes as element sources.
            </summary>
            <param name="SourcePipe1">A pipe as first element source.</param>
            <param name="SourcePipe2">A pipe as second element source.</param>
            <param name="SourcePipe3">A pipe as third element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`5.#ctor(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1},System.Collections.Generic.IEnumerator{`2},`4)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerators as element sources.
            </summary>
            <param name="SourceEnumerator1">An enumerator as first element source.</param>
            <param name="SourceEnumerator2">An enumerator as second element source.</param>
            <param name="SourceEnumerator3">An enumerator as third element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractSideEffectPipe`5.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},`4)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerables as element sources.
            </summary>
            <param name="SourceEnumerable1">An enumerable as first element source.</param>
            <param name="SourceEnumerable2">An enumerable as second element source.</param>
            <param name="SourceEnumerable3">An enumerable as third element source.</param>
            <param name="SideEffect">The initial value of the side effect.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AbstractTwoSideEffectsPipe`4">
            <summary>
            An AbstractSideEffectPipe provides the same functionality as the 
            AbstractPipe, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T1">The type of the first sideeffect.</typeparam>
            <typeparam name="T2">The type of the second sideeffect.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractTwoSideEffectsPipe`4.InternalSideEffect1">
            <summary>
            The first side effect produced by this pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref InternalSideEffect1);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractTwoSideEffectsPipe`4.SideEffect1">
            <summary>
            The first side effect produced by this pipe.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractTwoSideEffectsPipe`4.InternalSideEffect2">
            <summary>
            The second side effect produced by this pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref InternalSideEffect2);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractTwoSideEffectsPipe`4.SideEffect2">
            <summary>
            The second side effect produced by this pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractTwoSideEffectsPipe`4.#ctor">
            <summary>
            Creates an new abstract side effect pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractTwoSideEffectsPipe`4.#ctor(`0,`2,`3)">
            <summary>
            Creates an new abstract side effect pipe using the given single value as element source.
            </summary>
            <param name="SourceElement">A single value as element source.</param>
            <param name="SideEffect1">The initial value of the first side effect.</param>
            <param name="SideEffect2">The initial value of the second side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractTwoSideEffectsPipe`4.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},`2,`3)">
            <summary>
            Creates an new abstract side effect pipe using the given pipe as element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="SideEffect1">The initial value of the first side effect.</param>
            <param name="SideEffect2">The initial value of the second side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractTwoSideEffectsPipe`4.#ctor(System.Collections.Generic.IEnumerator{`0},`2,`3)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerator as element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
            <param name="SideEffect1">The initial value of the first side effect.</param>
            <param name="SideEffect2">The initial value of the second side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractTwoSideEffectsPipe`4.#ctor(System.Collections.Generic.IEnumerable{`0},`2,`3)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerable as element source.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
            <param name="SideEffect1">The initial value of the first side effect.</param>
            <param name="SideEffect2">The initial value of the second side effect.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5">
            <summary>
            An AbstractSideEffectPipe provides the same functionality as the 
            AbstractPipe, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T1">The type of the first sideeffect.</typeparam>
            <typeparam name="T2">The type of the second sideeffect.</typeparam>
            <typeparam name="T3">The type of the third sideeffect.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.InternalSideEffect1">
            <summary>
            The first side effect produced by this pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref InternalSideEffect1);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.SideEffect1">
            <summary>
            The first side effect produced by this pipe.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.InternalSideEffect2">
            <summary>
            The second side effect produced by this pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref InternalSideEffect2);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.SideEffect2">
            <summary>
            The second side effect produced by this pipe.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.InternalSideEffect3">
            <summary>
            The third side effect produced by this pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref InternalSideEffect3);
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.SideEffect3">
            <summary>
            The third side effect produced by this pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.#ctor">
            <summary>
            Creates an new abstract side effect pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.#ctor(`0,`2,`3,`4)">
            <summary>
            Creates an new abstract side effect pipe using the given single value as element source.
            </summary>
            <param name="SourceElement">A single value as element source.</param>
            <param name="SideEffect1">The initial value of the first side effect.</param>
            <param name="SideEffect2">The initial value of the second side effect.</param>
            <param name="SideEffect3">The initial value of the third side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},`2,`3,`4)">
            <summary>
            Creates an new abstract side effect pipe using the given pipe as element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="SideEffect1">The initial value of the first side effect.</param>
            <param name="SideEffect2">The initial value of the second side effect.</param>
            <param name="SideEffect3">The initial value of the third side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.#ctor(System.Collections.Generic.IEnumerator{`0},`2,`3,`4)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerator as element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
            <param name="SideEffect1">The initial value of the first side effect.</param>
            <param name="SideEffect2">The initial value of the second side effect.</param>
            <param name="SideEffect3">The initial value of the third side effect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AbstractThreeSideEffectsPipe`5.#ctor(System.Collections.Generic.IEnumerable{`0},`2,`3,`4)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerable as element source.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
            <param name="SideEffect1">The initial value of the first side effect.</param>
            <param name="SideEffect2">The initial value of the second side effect.</param>
            <param name="SideEffect3">The initial value of the third side effect.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.Concurrent.AndFilterPipeConcurrent`1">
            <summary>
            The AndFilterPipe takes a collection of pipes, where E is boolean.
            Each provided pipe is fed the same incoming S object concurrently.
            If all the pipes emit true, then the AndFilterPipe emits the
            incoming S object. If not, then the incoming S object is not emitted.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Concurrent.AndFilterPipeConcurrent`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IPipe{`0,System.Boolean}[])">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">Multiple IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Concurrent.AndFilterPipeConcurrent`1.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Styx.IPipe{`0,System.Boolean}})">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">A collection of IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.Concurrent.AndFilterPipeConcurrent`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.FairMergePipe`1">
            <summary>
            FairMergePipe will, in a round robin fashion,
            emit the objects of its internal pipes.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FairMergePipe`1.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0}})">
            <summary>
            Creates a new FairMergePipe based on the given Pipes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FairMergePipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0}[])">
            <summary>
            Creates a new FairMergePipe based on the given Pipes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FairMergePipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.FairMergePipe`1.Pipes">
            <summary>
            A MetaPipe is a pipe that "wraps" some collection of pipes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FairMergePipe`1.Reset">
            <summary>
            A pipe may maintain state. Reset is used to remove state.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FairMergePipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SplitPipeExtensions.SplitPipe``1(System.Collections.Generic.IEnumerable{``0},System.Byte)">
            <summary>
            The SplitPipe either allows or disallows all
            Edges that have the provided label.
            </summary>
            <param name="IEnumerable">A collection of objects implementing IPropertyEdge.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SplitPipeExtensions.SplitPipe``1(System.Collections.Generic.IEnumerator{``0},System.Byte)">
            <summary>
            The LabelFilterPipe either allows or disallows all
            Edges that have the provided label.
            </summary>
            <param name="IEnumerator">A enumerator of objects implementing IPropertyEdge.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.SplitPipe`1">
            <summary>
            Converts the consuming objects to emitting objects
            by calling a Func&lt;S, E&gt;.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.SplitPipe`1._InternalEnumerator">
            <summary>
            The internal enumerator of the collection.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.SplitPipe`1._CurrentElement">
            <summary>
            The internal current element in the collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SplitPipe`1.#ctor(System.Byte,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new FuncPipe using the given Func&lt;S, E&gt;.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SplitPipe`1.SetSource(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SplitPipe`1.SetSourceCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SplitPipe`1.MoveNext(System.Byte)">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.CollectionFilterPipe`1">
            <summary>
            A CollectionFilterPipe will take a collection of objects and
            a Filter.NOT_EQUAL or Filter.EQUAL argument.
            If an incoming object is contained (or not contained) in the
            provided collection, then it is emitted (or not emitted).
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CollectionFilterPipe`1.#ctor(System.Collections.Generic.IEnumerable{`0},org.GraphDefined.Vanaheimr.Styx.ComparisonFilter)">
            <summary>
            A CollectionFilterPipe will take a collection of objects and
            a Filter.NOT_EQUAL or Filter.EQUAL argument.
            If an incoming object is contained (or not contained) in the
            provided collection, then it is emitted (or not emitted).
            </summary>
            <param name="myIEnumerable">The IEnumerable for filtering.</param>
            <param name="myComparisonFilter">The ComparisonFilter used for filtering.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CollectionFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CollectionFilterPipe`1.CompareObjects(`0,`0)">
            <summary>
            Compares two objects.
            </summary>
            <param name="myLeftObject">The left object.</param>
            <param name="myRightObject">The right object.</param>
            <returns>A match based on the defined filter.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ObjectFilterPipe`1">
            <summary>
            The ObjectFilterPipe will either allow or disallow all objects that pass
            through it depending on the result of the compareObject() method.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ObjectFilterPipe`1.#ctor(`0,org.GraphDefined.Vanaheimr.Styx.ComparisonFilter)">
            <summary>
            Create a new ObjectFilterPipe.
            </summary>
            <param name="myObject">The Object.</param>
            <param name="myComparisonFilter">The filter to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ObjectFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ObjectFilterPipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.EndPipe">
            <summary>
            Some helper methods to create endpipes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.EndPipe.CreatePipe``1(``0)">
            <summary>
            Create a pipe emitting the given element.
            </summary>
            <typeparam name="E">The type of the emitted element.</typeparam>
            <param name="Element">The single element within the pipe.</param>
            <returns>A pipe emitting the given element.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.EndPipe.CreatePipe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a pipe emitting all elements of the given enumeration.
            </summary>
            <typeparam name="E">The type of the emitted elements.</typeparam>
            <param name="Enumeration">An enumeration of elements.</param>
            <returns>A pipe emitting the given enumeration of elements.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.EndPipe.CreatePipe``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Create a pipe emitting all elements emitted by the given enumerator.
            </summary>
            <typeparam name="E">The type of the emitted elements.</typeparam>
            <param name="Enumerator">A enumerator emitting elements.</param>
            <returns>A pipe emitting the elements emitted by the given enumerator.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.EndPipe`1">
            <summary>
            A pipe emitting elements.
            </summary>
            <typeparam name="E">The type of the emitted elements.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.EndPipe`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a pipe emitting all elements of the given enumeration.
            </summary>
            <param name="Enumeration">An enumeration of elements.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.EndPipe`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Create a pipe emitting all elements emitted by the given enumerator.
            </summary>
            <param name="Enumerator">A enumerator emitting elements.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AndFilterPipe`1">
            <summary>
            The AndFilterPipe takes a collection of pipes, where E is boolean.
            Each provided pipe is fed the same incoming S object. If all the
            pipes emit true, then the AndFilterPipe emits the incoming S object.
            If not, then the incoming S object is not emitted.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AndFilterPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IPipe{`0,System.Boolean}[])">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">Multiple IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AndFilterPipe`1.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Styx.IPipe{`0,System.Boolean}})">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">A collection of IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AndFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.BackFilterPipeExtensions">
            <summary>
            Extension methods for the BackFilterPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.BackFilterPipeExtensions.BackFilter``2(org.GraphDefined.Vanaheimr.Styx.IPipe{``1,``0},System.UInt64)">
            <summary>
            Returns the incomming vertices of the given PropertyEdges.
            </summary>
            <param name="IEnumerable">An enumeration of PropertyEdges.</param>
            <param name="VertexFilter">An optional delegate for vertex filtering.</param>
            <returns>The incomming vertices of the given PropertyEdges.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.BackFilterPipe`2">
            <summary>
            BackFilterPipe will fully process the object through its internal pipe.
            If the internal pipe yields results, then the original object is emitted
            from the BackFilterPipe.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.DistinctPipeExtensions.Distinct``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            The DistinctPipe will filter duplicate entries from the enumeration.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.DistinctPipe`1">
            <summary>
            The DuplicateFilterPipe will not allow a duplicate object to pass through it.
            This is accomplished by the Pipe maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Pipe, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.DistinctPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new DistinctPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.DistinctPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ExceptPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new ExceptPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ExceptPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new ExceptPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ExceptPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new ExceptPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ExceptPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.OrFilterPipe`1">
            <summary>
            The OrFilterPipe takes a collection of pipes that emit boolean objects.
            Each pipe in the collection is fed the same incoming S object. If one
            of the internal pipes emits true, then the OrFilterPipe emits the S
            object. If not, then the incoming object is not emitted.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.OrFilterPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IPipe{`0,System.Boolean}[])">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">Multiple IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.OrFilterPipe`1.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Styx.IPipe{`0,System.Boolean}})">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">A collection of IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.OrFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.RandomFilterPipeExtensions">
            <summary>
            The RandomFilterPipe filters out objects that pass through it using a biased coin.
            For each passing object, a random number generator creates a double value between 0 and 1.
            If the randomly generated double is less than or equal the provided bias, then the object is allowed to pass.
            If the randomly generated double is greater than the provided bias, then the object is not allowed to pass.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RandomFilterPipeExtensions.RandomFilter``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Double,System.Random)">
            <summary>
            The RandomFilterPipe filters out objects that pass through it using a biased coin.
            For each passing object, a random number generator creates a double value between 0 and 1.
            If the randomly generated double is less than or equal the provided bias, then the object is allowed to pass.
            If the randomly generated double is greater than the provided bias, then the object is not allowed to pass.        /// </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="Bias">The bias.</param>
            <param name="Random">An optional source of randomness.</param>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.RandomFilterPipe`1">
            <summary>
            The RandomFilterPipe filters out objects that pass through it using a biased coin.
            For each passing object, a random number generator creates a double value between 0 and 1.
            If the randomly generated double is less than or equal the provided bias, then the object is allowed to pass.
            If the randomly generated double is greater than the provided bias, then the object is not allowed to pass.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RandomFilterPipe`1.#ctor(`0,System.Double,System.Random)">
            <summary>
            Creates an new random filter pipe using the given single value as element source.
            </summary>
            <param name="SourceElement">A single value as element source.</param>
            <param name="Bias">The bias.</param>
            <param name="Random">An optional source of randomness.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RandomFilterPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},System.Double,System.Random)">
            <summary>
            Creates an new random filter pipe using the given pipe as element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="Bias">The bias.</param>
            <param name="Random">An optional source of randomness.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RandomFilterPipe`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Double,System.Random)">
            <summary>
            Creates an new random filter pipe using the given enumerator as element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
            <param name="Bias">The bias.</param>
            <param name="Random">An optional source of randomness.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RandomFilterPipe`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Double,System.Random)">
            <summary>
            Creates an new random filter pipe using the given enumerable as element source.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
            <param name="Bias">The bias.</param>
            <param name="Random">An optional source of randomness.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RandomFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RandomFilterPipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.RangeFilterPipeExtensions">
            <summary>
            The RangeFilterPipe will only allow a sequential subset of its incoming
            objects to be emitted to its output. This pipe can be provided -1 for
            both its high and low range to denote a wildcard for high and/or low.
            Note that -1 for both high and low is equivalent to the IdentityPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RangeFilterPipeExtensions.RangeFilter``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Int32,System.Int32)">
            <summary>
            The RangeFilter will only allow a sequential subset of its incoming
            objects to be emitted to its output. This pipe can be provided -1 for
            both its high and low range to denote a wildcard for high and/or low.
            Note that -1 for both high and low is equivalent to the IdentityPipe.
            </summary>
            <param name="Low">The minimal value.</param>
            <param name="High">The maximum value.</param>
            <param name="IEnumerable">An enumeration of objects of type S.</param>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.RangeFilterPipe`1">
            <summary>
            The RangeFilterPipe will only allow a sequential subset of its incoming
            objects to be emitted to its output. This pipe can be provided -1 for
            both its high and low range to denote a wildcard for high and/or low.
            Note that -1 for both high and low is equivalent to the IdentityPipe.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RangeFilterPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},System.Int32,System.Int32)">
            <summary>
            Creates a new RangeFilterPipe.
            </summary>
            <param name="Low">The minimal value.</param>
            <param name="High">The maximum value.</param>
            <param name="IEnumerable">An optional enumation of directories as element source.</param>
            <param name="IEnumerator">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RangeFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.RangeFilterPipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.UniquePathFilterPipe`1">
            <summary>
            UniquePathFilterPipe will only let an object pass if the path up to
            this point has no repeated elements. Thus, its a way to filter out
            paths that are looping.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.UniquePathFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.WherePipeExtensions">
            <summary>
            Extension methods for where pipes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.WherePipeExtensions.Where``2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},org.GraphDefined.Vanaheimr.Illias.CountedPredicate{``0})">
            <summary>
            Starts with 1!
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.WherePipe`1">
            <summary>
            Maps/converts the consuming objects to emitting objects.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.WherePipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.WhereCountedPipe`1">
            <summary>
            Maps/converts the consuming objects to emitting objects.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.WhereCountedPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions">
            <summary>
            Extensions methods for the IEndPipe interface.
            </summary>
            <summary>
            Extensions methods for the IEndPipe interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions.Aggregate``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Func{``0,``0,``0},``0)">
            <summary>
            Safely aggregates the items emitted by the given pipe. If the pipe is null
            or has no elements the default value will be returned.
            </summary>
            <typeparam name="T">The type of the items emitted by the pipe.</typeparam>
            <param name="SourcePipe">A pipe.</param>
            <param name="AggreationDelegate">The delegate to aggregate the items emitted by the pipe.</param>
            <param name="DefaultValue">The default value to return for an empty pipe.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions.Aggregate``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},``0,System.Func{``0,``0},System.Func{``0,``0,``0},``0,``0)">
            <summary>
            Safely aggregates the items emitted by the given pipe. If the pipe is null
            or has no elements the default value will be returned.
            </summary>
            <typeparam name="T">The type of the items emitted by the pipe.</typeparam>
            <param name="SourcePipe">A pipe.</param>
            <param name="DefaultValue">The default value to return for an empty pipe.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions.All``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all items of a pipe satisfy a condition.
            </summary>
            <typeparam name="T">The type of the items emitted by the pipe.</typeparam>
            <param name="SourcePipe">A pipe.</param>
            <param name="IncludeFilter">A delegate to test each item emitted by the pipe for a condition.</param>
            <returns>True if every item of the pipe passes the specified filter, or if the pipe is empty; otherwise, false.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions.Any``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0})">
            <summary>
            Determines whether a pipe emits any items.
            </summary>
            <typeparam name="T">The type of the items emitted by the pipe.</typeparam>
            <param name="SourcePipe">A pipe.</param>
            <returns>True if the pipe emits any items; otherwise, false.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions.Any``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether any item emitted by a pipe satisfies a condition.
            </summary>
            <typeparam name="T">The type of the items emitted by the pipe.</typeparam>
            <param name="SourcePipe">A pipe.</param>
            <param name="IncludeFilter">A delegate to test each item emitted by the pipe for a condition.</param>
            <returns>True if the pipe emits any matching items; otherwise, false.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions.Contains``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether a pipe emits the specified element by
            using the default equality comparer.
            </summary>
            <typeparam name="T">The type of the items emitted by the pipe.</typeparam>
            <param name="SourcePipe">A pipe.</param>
            <param name="Value">The value to locate in the pipe.</param>
            <param name="ValueComparer">An equality comparer to compare values.</param>
            <returns>True if the pipe contains an item that has the specified value; otherwise, false.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions.Count``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the number of items in the given pipe satisfying an optional condition.
            </summary>
            <typeparam name="T">The type of the items emitted by the pipe.</typeparam>
            <param name="SourcePipe">A pipe.</param>
            <param name="IncludeFilter">A delegate to test each item emitted by the pipe for a condition.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions.FirstOrDefault``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns the first item of the given pipe that satisfies a condition
            or the given default value if no such item was found.
            </summary>
            <typeparam name="T">The type of the items emitted by the pipe.</typeparam>
            <param name="SourcePipe">A pipe.</param>
            <param name="IncludeFilter">A delegate to test each item emitted by the pipe for a condition.</param>
            <param name="DefaultValue">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions.LastOrDefault``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns the last item of the given pipe that satisfies a condition
            or the given default value if no such item was found.
            </summary>
            <typeparam name="T">The type of the items emitted by the pipe.</typeparam>
            <param name="SourcePipe">A pipe.</param>
            <param name="IncludeFilter">A delegate to test each item emitted by the pipe for a condition.</param>
            <param name="DefaultValue">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipeExtensions.ToArray``1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Boolean,System.Boolean)">
            <summary>
            Copies the elements of the given pipe into a new array.
            </summary>
            <typeparam name="T">The type of the emitting objects.</typeparam>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="ResetPipe">Reset the pipe after operation.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ComparisonFilter">
            <summary>
            An enum for pipe filtering purposes.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.ComparisonFilter.EQUAL">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.ComparisonFilter.NOT_EQUAL">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.ComparisonFilter.GREATER_THAN">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.ComparisonFilter.LESS_THAN">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.ComparisonFilter.GREATER_THAN_EQUAL">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Styx.ComparisonFilter.LESS_THAN_EQUAL">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IComparisonFilterPipe`2">
            <summary>
            A ComparisonFilterPipe will allow or disallow objects that pass
            through it depending on some implemented comparison criteria.
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IComparisonFilterPipe`2.CompareObjects(`1,`1)">
            <summary>
            Compares two objects.
            </summary>
            <param name="myLeftObject">The left object.</param>
            <param name="myRightObject">The right object.</param>
            <returns>A match based on the defined filter.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IEndPipe">
            <summary>
            An interface for the element emitting part of a pipe.
            Pipes implementing just this interface do not neccessarily
            consume elements, but e.g. might receive them via network.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.IEndPipe.Path">
            <summary>
            Returns the path traversed to arrive at the current result of the pipe.
            </summary> 
            <returns>A List of all of the objects traversed for the current iterator position of the pipe.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IEndPipe`1">
            <summary>
            An interface for the element emitting part of a pipe.
            Pipes implementing just this interface do not neccessarily
            consume elements, but e.g. might receive them via network.
            </summary>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipe`1.GetEnumerator">
            <summary>
            Return an enumerator to traverse this pipe.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.IEndPipe`1.Current">
            <summary>
            Return the current element in the pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the pipe.
            </summary>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IEndPipe`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the pipe. If the pipe has
            no internal state the pipe will just call Reset() on
            its source pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IFilterPipe">
            <summary>
            A FilterPipe is much like the IdentityPipe, but may or may not filter 
            some of the messages/objects instead of emitting everything.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IFilterPipe`1">
            <summary>
            A FilterPipe is much like the IdentityPipe, but may or may not filter 
            some of the messages/objects instead of emitting everything.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IMetaPipe">
            <summary>
            A MetaPipe is a pipe that "wraps" some collection of pipes.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IMetaPipe`2">
            <summary>
            A MetaPipe is a pipe that "wraps" some collection of pipes.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.IMetaPipe`2.Pipes">
            <summary>
            A list of all wrapped pipes
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IPipe">
            <summary>
            The non-generic interface for any pipe implementation.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IPipe`2">
            <summary>
            The generic interface for any single-element pipe implementation.
            Such a pipe takes/consumes objects of type S and returns/emits objects of type E.
            S refers to <i>starts</i> and the E refers to <i>ends</i>.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IPipe`3">
            <summary>
            The generic interface for any two-element pipe implementation.
            Such a pipe takes/consumes objects of type S1 and S2 and returns/emits objects of type E.
            S1 and S2 refers to <i>starts</i> and the E refers to <i>ends</i>.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IPipe`4">
            <summary>
            The generic interface for any three-element pipe implementation.
            Such a pipe takes/consumes objects of type S1, S2 and S3 and returns/emits objects of type E.
            S1, S2 and S3 refers to <i>starts</i> and the E refers to <i>ends</i>.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IPipe`5">
            <summary>
            The generic interface for any four-element pipe implementation.
            Such a pipe takes/consumes objects of type S1, S2, S3 and S4 and returns/emits objects of type E.
            S1, S2, S3 and S4 refers to <i>starts</i> and the E refers to <i>ends</i>.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="S4">The type of the fourth consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IPipe`6">
            <summary>
            The generic interface for any five-element pipe implementation.
            Such a pipe takes/consumes objects of type S1, S2, S3, S4 and S5 and returns/emits objects of type E.
            S1, S2, S3, S4 and S5 refers to <i>starts</i> and the E refers to <i>ends</i>.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="S4">The type of the fourth consuming objects.</typeparam>
            <typeparam name="S5">The type of the fifth consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ISideEffectPipe">
            <summary>
            A side effect pipe will produce one or more side effects
            which can be retrieved by the SideEffect properties.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ISideEffectPipe`3">
            <summary>
            This side effect pipe produces a controlled side effect
            which can be retrieved by the SideEffect property.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T">The type of the side effect.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.ISideEffectPipe`3.SideEffect">
            <summary>
            The side effect produced by this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ISideEffectPipe`4">
            <summary>
            This side effect pipe produces a controlled side effect
            which can be retrieved by the SideEffect property.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T">The type of the side effect.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.ISideEffectPipe`4.SideEffect">
            <summary>
            The side effect produced by this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ISideEffectPipe`5">
            <summary>
            This side effect pipe produces a controlled side effect
            which can be retrieved by the SideEffect property.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T">The type of the side effect.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.ISideEffectPipe`5.SideEffect">
            <summary>
            The side effect produced by this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ITwoSideEffectsPipe`4">
            <summary>
            This side effect pipe produces two controlled side effects
            which can be retrieved by the SideEffect properties.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T1">The type of the first side effect.</typeparam>
            <typeparam name="T2">The type of the second side effect.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.ITwoSideEffectsPipe`4.SideEffect1">
            <summary>
            The first side effect produced by this pipe.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.ITwoSideEffectsPipe`4.SideEffect2">
            <summary>
            The second side effect produced by this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IThreeSideEffectsPipe`5">
            <summary>
            This side effect pipe produces three controlled side effects
            which can be retrieved by the SideEffect properties.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T1">The type of the first side effect.</typeparam>
            <typeparam name="T2">The type of the second side effect.</typeparam>
            <typeparam name="T3">The type of the third side effect.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.IThreeSideEffectsPipe`5.SideEffect1">
            <summary>
            The first side effect produced by this pipe.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.IThreeSideEffectsPipe`5.SideEffect2">
            <summary>
            The second side effect produced by this pipe.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.IThreeSideEffectsPipe`5.SideEffect3">
            <summary>
            The third side effect produced by this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ISplitPipe">
            <summary>
            A SplitPipe consumes objects of type S and emits objects of type E1 and E2.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ISplitPipe`3">
            <summary>
            A SplitPipe consumes objects of type S and emits objects of type E1 and E2.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E1">The type of the first emitting objects.</typeparam>
            <typeparam name="E2">The type of the second emitting objects.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IStartPipe">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            also emit elements, but e.g. might send them via network
            or write them to disk.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IStartPipe`1">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`1.SetSource(`0)">
            <summary>
            Set the given single value as element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`1.SetSource(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0})">
            <summary>
            Set the given pipe as element source.
            </summary> 
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`1.SetSource(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the given enumerator as element source.
            </summary> 
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`1.SetSource(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the given enumerable as element source.
            </summary> 
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IStartPipe`2">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`2.SetSource1(`0)">
            <summary>
            Set the given single value as first element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`2.SetSource2(`1)">
            <summary>
            Set the given single value as second element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`2.SetSource1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0})">
            <summary>
            Set the given pipe as first element source.
            </summary> 
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`2.SetSource2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`1})">
            <summary>
            Set the given pipe as second element source.
            </summary> 
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`2.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the given enumerator as first element source.
            </summary> 
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`2.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the given enumerator as second element source.
            </summary> 
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`2.SetSource1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the given enumerable as first element source.
            </summary> 
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`2.SetSource2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the given enumerable as second element source.
            </summary> 
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource1(`0)">
            <summary>
            Set the given single value as first element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource2(`1)">
            <summary>
            Set the given single value as second element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource3(`2)">
            <summary>
            Set the given single value as third element source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource1(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0})">
            <summary>
            Set the given pipe as first element source.
            </summary> 
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`1})">
            <summary>
            Set the given pipe as second element source.
            </summary> 
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource3(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`2})">
            <summary>
            Set the given pipe as third element source.
            </summary> 
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the given enumerator as first element source.
            </summary> 
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the given enumerator as second element source.
            </summary> 
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource3(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Set the given enumerator as third element source.
            </summary> 
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the given enumerable as first element source.
            </summary> 
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the given enumerable as second element source.
            </summary> 
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`3.SetSource3(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Set the given enumerable as third element source.
            </summary> 
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="S4">The type of the fourth consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSource1(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSource2(`1)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSource3(`2)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSource4(`3)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSource3(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S3&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSource4(System.Collections.Generic.IEnumerator{`3})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S4&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSourceCollection1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSourceCollection2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSourceCollection3(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S3&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`4.SetSourceCollection4(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S4&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S4&gt; as element source.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="S4">The type of the fourth consuming objects.</typeparam>
            <typeparam name="S5">The type of the fifth consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSource1(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSource2(`1)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSource3(`2)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSource4(`3)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSource5(`4)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSource3(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S3&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSource4(System.Collections.Generic.IEnumerator{`3})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S4&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSource5(System.Collections.Generic.IEnumerator{`4})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S5&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S5&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSourceCollection1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSourceCollection2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSourceCollection3(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S3&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSourceCollection4(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S4&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IStartPipe`5.SetSourceCollection5(System.Collections.Generic.IEnumerable{`4})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S5&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S5&gt; as element source.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.CSV">
            <summary>
            Utilities to read and write CSV files.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CSV.GetLines(System.IO.StreamReader)">
            <summary>
            Yields one line from the given stream reader.
            </summary>
            <param name="StreamReader">The stream to read the lines from.</param>
            <returns>A single line.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CSV.GetMultipleLines(System.IO.StreamReader,System.Int32)">
            <summary>
            Yields multiple lines from the given stream reader.
            </summary>
            <param name="StreamReader">The stream to read the lines from.</param>
            <param name="NumberOfLines">The number of lines to read at once.</param>
            <returns>Multiple lines.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.CSVReaderPipeExtensions">
            <summary>
            Extension methods for CSV pipes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CSVReaderPipeExtensions.ToCSV(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.String},System.Text.RegularExpressions.Regex,System.String[],System.StringSplitOptions,System.Nullable{System.UInt16},System.Boolean,System.Boolean)">
            <summary>
            Splits a given strings into elements by a given sperator.
            </summary>
            <param name="SourcePipe">An enumeration of strings.</param>
            <param name="IgnoreLines">A regular expression indicating which input strings should be ignored. Default: All lines starting with a '#'.</param>
            <param name="Seperators">An array of string used to split the input strings.</param>
            <param name="StringSplitOptions">Split options, e.g. remove empty entries.</param>
            <param name="ExpectedNumberOfColumns">If the CSV file had a schema, a specific number of columns can be expected. If instead it is a list of values no such value can be expected.</param>
            <param name="FailOnWrongNumberOfColumns">What to do when the current and expected number of columns do not match.</param>
            <param name="TrimColumns">Remove leading and trailing whitespaces.</param>
            <returns>An enumeration of string arrays.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.CSVReaderPipe">
            <summary>
            Splits a given strings into elements by a given sperator.
            The side effect is the current line number
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CSVReaderPipe.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.String},System.Text.RegularExpressions.Regex,System.String[],System.StringSplitOptions,System.Nullable{System.UInt16},System.Boolean,System.Boolean)">
            <summary>
            Splits a given strings into elements by a given sperator.
            </summary>
            <param name="SourcePipe"></param>
            <param name="IgnoreLines">A regular expression indicating which input strings should be ignored. Default: All lines starting with a '#'.</param>
            <param name="Seperators">An array of string used to split the input strings.</param>
            <param name="StringSplitOptions">Split options, e.g. remove empty entries.</param>
            <param name="ExpectedNumberOfColumns">If the CSV file had a schema, a specific number of columns can be expected. If instead it is a list of values no such value can be expected.</param>
            <param name="FailOnWrongNumberOfColumns">What to do when the current and expected number of columns do not match.</param>
            <param name="TrimColumns">Remove leading and trailing whitespaces.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CSVReaderPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CSVReaderPipe.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IOPipeExtensions.FileFilterPipe(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.String},System.String,System.IO.SearchOption,org.GraphDefined.Vanaheimr.Styx.FileFilter)">
            <summary>
            Scans the given directories for files matching the given filters.
            </summary>
            <param name="IEnumerable">An enumeration of directories.</param>
            <param name="SearchPattern">A simple search pattern like "*.jpg".</param>
            <param name="SearchOption">Include or do not include subdirectories.</param>
            <param name="FileFilter">A delegate for filtering the found files.</param>
            <returns>An enumeration of file infos.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.FileFilter">
            <summary>
            A delegate to filter files based on their FileInfo.
            </summary>
            <param name="myFileInfo">The FileInfo of a given file.</param>
            <returns>true to filter (ignore) the file, else false.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.FileFilterPipe">
            <summary>
            The FileFilterPipe scans the given directories
            for files matching the given filters.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FileFilterPipe.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.String},System.String,System.IO.SearchOption,org.GraphDefined.Vanaheimr.Styx.FileFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Scans the given directories for files matching the given filters.
            </summary>
            <param name="SearchPattern">A simple search pattern like "*.jpg".</param>
            <param name="SearchOption">Include or do not include subdirectories.</param>
            <param name="FileFilter">A delegate for filtering the found files.</param>
            <param name="IEnumerable">An optional enumation of directories as element source.</param>
            <param name="IEnumerator">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FileFilterPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FileFilterPipe.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.FixLineBreaksPipeExtensions">
            <summary>
            Extension methods for FixLineBreaks pipes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FixLineBreaksPipeExtensions.FixLineBreaks(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.String},System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Sometimes there are unwanted new line characters within CSV files.
            This pipe tries to detect real new lines based on the given regular expression
            and concatenates the dangling lines using the given NewLineSeperator.
            </summary>
            <param name="IEnumerable">An enumeration of lines.</param>
            <param name="StartOfNewLineRegExpr">A regular expression detecting real new lines.</param>
            <param name="NewLineSeperator">The new line seperator between the prior dangling lines.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FixLineBreaksPipeExtensions.FixLineBreaks(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.String},System.String,System.String)">
            <summary>
            Sometimes there are unwanted new line characters within CSV files.
            This pipe tries to detect real new lines based on the given regular expression
            and concatenates the dangling lines using the given NewLineSeperator.
            </summary>
            <param name="IEnumerator">An enumerator of lines.</param>
            <param name="StartOfNewLineRegExprString">A regular expression detecting real new lines.</param>
            <param name="NewLineSeperator">The new line seperator between the prior dangling lines.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FixLineBreaksPipe.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.String},System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Sometimes there are unwanted new line characters within CSV files.
            This pipe tries to detect real new lines based on the given regular expression
            and concatenates the dangling lines using the given NewLineSeperator.
            </summary>
            <param name="StartOfNewLineRegExpr">A regular expression detecting real new lines.</param>
            <param name="NewLineSeperator">The new line seperator between the prior dangling lines.</param>
            <param name="IEnumerable">An enumeration of lines.</param>
            <param name="IEnumerator">An enumerator of lines.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FixLineBreaksPipe.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.String},System.String,System.String)">
            <summary>
            Sometimes there are unwanted new line characters within CSV files.
            This pipe tries to detect real new lines based on the given regular expression
            and concatenates the dangling lines using the given NewLineSeperator.
            </summary>
            <param name="StartOfNewLineRegExprString">A regular expression detecting real new lines.</param>
            <param name="NewLineSeperator">The new line seperator between the prior dangling lines.</param>
            <param name="IEnumerable">An enumeration of lines.</param>
            <param name="IEnumerator">An enumerator of lines.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FixLineBreaksPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.FixLineBreaksPipe.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.OpenStreamPipe">
            <summary>
            The OpenStreamPipe opens the given files
            and returns a stream of bytes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.OpenStreamPipe.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.IO.FileInfo},System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.UInt32,System.IO.FileOptions,System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.Collections.Generic.IEnumerator{System.IO.FileInfo})">
            <summary>
            Opens the given files and returns a stream of bytes.
            </summary>
            <param name="FileMode">A System.IO.FileMode constant that determines how to open or create the file.</param>
            <param name="FileAccess">A System.IO.FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the System.IO.FileStream.CanRead and System.IO.FileStream.CanWrite properties of the FileStream object. System.IO.FileStream.CanSeek is true if path specifies a disk file.</param>
            <param name="FileShare">A System.IO.FileShare constant that determines how the file will be shared by processes.</param>
            <param name="BufferSize">A positive System.Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="FileOptions">A System.IO.FileOptions value that specifies additional file options.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.OpenStreamPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.OpenStreamPipe.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ReadTextStreamPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ReadTextStreamPipe.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ComparisonFilter`1">
            <summary>
            A delegate for comparisions.
            </summary>
            <typeparam name="TValue">The type of the item to compare.</typeparam>
            <param name="Expected">The expected value of the item.</param>
            <returns>True if matches; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.APropertyFilterPipe`3">
            <summary>
            An abstract class for filtering objects by their properties.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="S">The type of the objects to filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.APropertyFilterPipe`3.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`2},`0,org.GraphDefined.Vanaheimr.Styx.ComparisonFilter{`1})">
            <summary>
            Creates a new property filter pipe.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="Key">The property key.</param>
            <param name="ComparisonFilter">The comparison filter to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.APropertyFilterPipe`3.#ctor(System.Collections.Generic.IEnumerator{`2},`0,org.GraphDefined.Vanaheimr.Styx.ComparisonFilter{`1})">
            <summary>
            Creates a new property filter pipe.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
            <param name="Key">The property key.</param>
            <param name="ComparisonFilter">The comparison filter to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.APropertyFilterPipe`3.#ctor(System.Collections.Generic.IEnumerable{`2},`0,org.GraphDefined.Vanaheimr.Styx.ComparisonFilter{`1})">
            <summary>
            Creates a new property filter pipe.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
            <param name="Key">The property key.</param>
            <param name="ComparisonFilter">The comparison filter to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.APropertyFilterPipe`3.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.APropertyFilterPipe`4">
            <summary>
            An abstract class for filtering objects by their properties.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="S">The type of the objects to filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.APropertyFilterPipe`4.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`3},`0,org.GraphDefined.Vanaheimr.Styx.ComparisonFilter{`2})">
            <summary>
            Creates a new PropertyFilterPipe.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="Key">The property key.</param>
            <param name="ComparisonFilter">The comparison filter to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.APropertyFilterPipe`4.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.PropertiesPipeExtensions">
            <summary>
            Extension methods for the PropertiesPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertiesPipeExtensions.Ps``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertiesPipeExtensions.Ps``2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1}},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertiesPipeExtensions.Ps``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertiesPipeExtensions.Ps``2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1}},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.PropertiesPipe`2">
            <summary>
            Emits the property values.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertiesPipe`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{`0,`1},`0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="Keys">The property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertiesPipe`2.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{`0,`1}},`0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="Keys">The property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertiesPipe`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{`0,`1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{`0,`1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertiesPipe`2.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{`0,`1}},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{`0,`1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertiesPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertiesPipe`2.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.PropertyPipeExtensions">
            <summary>
            Extension methods for the PropertyPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertyPipeExtensions.P``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertyPipeExtensions.P``2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1}},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertyPipeExtensions.P``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertyPipeExtensions.P``2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1}},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.PropertyPipe`2">
            <summary>
            Emits the property values.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertyPipe`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{`0,`1},`0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <param name="SourceElement">A single value as element source.</param>
            <param name="Keys">The property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertyPipe`2.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{`0,`1}},`0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <param name="IEnumerable">An optional IEnumerable&lt;IIdentifier&lt;TId&gt;&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;IIdentifier&lt;TId&gt;&gt; as element source.</param>
            <param name="Keys">The property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertyPipe`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{`0,`1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{`0,`1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;...&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;...&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertyPipe`2.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{`0,`1}},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{`0,`1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;...&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;...&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertyPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PropertyPipe`2.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.AggregatorPipe`1">
            <summary>
            The AggregatorPipe produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            Before the first object is emitted from the AggregatorPipe, all of its
            incoming objects have been aggregated into the collection.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorPipe may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AggregatorPipe`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new AggregatorPipe.
            </summary>
            <param name="ICollection">An optional ICollection to store the passed objects.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.AggregatorPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.CountPipe`1">
            <summary>
            The CountPipe produces a side effect that is the total
            number of objects that have passed through it.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CountPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},System.Int64)">
            <summary>
            Creates an new abstract side effect pipe using the given pipe as element source.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="InitialCounterValue">An optional initial counter value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CountPipe`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Int64)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerator as element source.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
            <param name="InitialCounterValue">An optional initial counter value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CountPipe`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int64)">
            <summary>
            Creates an new abstract side effect pipe using the given enumerable as element source.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
            <param name="InitialCounterValue">An optional initial counter value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CountPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CountPipe`1.ToString">
            <summary>
            Returns a string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.GroupCountPipe`1">
            <summary>
            The GroupCountPipe will simply emit the incoming object, but generate a map side effect.
            The map's keys are the objects that come into the pipe.
            The map's values are the number of times that the key object has come into the pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.GroupCountPipe`1.#ctor">
            <summary>
            Creates a new GroupCountPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.GroupCountPipe`1.#ctor(System.Collections.Generic.IDictionary{`0,System.UInt64})">
            <summary>
            Creates a new GroupCountPipe using the given IDictionary&lt;S, UInt64&gt;.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.GroupCountPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.GroupCountPipe`1.SideEffect">
            <summary>
            The sideeffect produced by this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.MinMaxPipe`1">
            <summary>
            The MinMaxPipe produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.MinMaxPipe`1.Min">
            <summary>
            The minimum of the passed values.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.MinMaxPipe`1.Max">
            <summary>
            The maximum of the passed values.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.MinMaxPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{`0},`0,`0)">
            <summary>
            The MinMaxPipe produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
            <param name="Min">The initial minimum.</param>
            <param name="Max">The initial maximum.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.MinMaxPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.MinMaxPipe`1.ToString">
            <summary>
            Returns a string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.SideEffectCapPipe`2">
            <summary>
            The SideEffectCapPipe will yield an E that is the side effect of
            the provided SideEffectPipe. This is useful for when the side
            effect of a Pipe is desired in a computational stream.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="T">The type of the sideeffect.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SideEffectCapPipe`2.#ctor">
            <summary>
            Creates a new SideEffectCapPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SideEffectCapPipe`2.#ctor(org.GraphDefined.Vanaheimr.Styx.ISideEffectPipe{`0,`0,`1})">
            <summary>
            Creates a new SideEffectCapPipe.
            </summary>
            <param name="PipeToCap">A ISideEffectCapPipe.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SideEffectCapPipe`2.SetSource(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SideEffectCapPipe`2.SetSource(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SideEffectCapPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Styx.SideEffectCapPipe`2.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SideEffectCapPipe`2.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ActionPipe`1">
            <summary>
            The ActionPipe is much like the IdentityPipe, but calls
            a delegate for every consuming object.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ActionPipe`1.#ctor(System.Action{`0})">
            <summary>
            Creates a new ActionPipe using the given Action&lt;S&gt;.
            </summary>
            <param name="Delegate">An Action&lt;S&gt; to be called on every consuming object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ActionPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.CharacterCountPipe">
            <summary>
            Returns the number of characters of a string. 
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.CharacterCountPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ConcatPipeExtensions">
            <summary>
            Extension methods for concat pipes.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ConcatPipe`1">
            <summary>
            Maps/converts the consuming objects to emitting objects.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ConcatPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.EventPipe`1">
            <summary>
            The EventPipe is much like the IdentityPipe, but calls
            an evnet for every consuming object.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.EventPipe`1.#ctor">
            <summary>
            Creates a new ActionPipe using the given Action&lt;S&gt;.
            </summary>
            <param name="Delegate">An Action&lt;S&gt; to be called on every consuming object.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.EventPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.IdentityPipe`1">
            <summary>
            The IdentityPipe is the most basic pipe.
            It simply maps the input to the output without any processing.
            This Pipe is useful in various test case situations.
            </summary>
            <typeparam name="S">The type of the elements within the pipe.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.IdentityPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.SelectPipeExtensions">
            <summary>
            Extension methods for select pipes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SelectPipeExtensions.Select``2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},System.Func{``0,System.UInt64,``1})">
            <summary>
            Starts with 1!
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.SelectPipe`2">
            <summary>
            Maps/converts the consuming objects to emitting objects.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SelectPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.SelectCountedPipe`2">
            <summary>
            Maps/converts the consuming objects to emitting objects.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.SelectCountedPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ToLowerPipe">
            <summary>
            The ToUpperPipe converts all incoming strings to lowercase.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ToLowerPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ToUpperPipe">
            <summary>
            The ToUpperPipe converts all incoming strings to uppercase.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ToUpperPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ZipMergePipeExtensions">
            <summary>
            Extension methods for zip-merge pipes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ZipMergePipeExtensions.Zip``3(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},org.GraphDefined.Vanaheimr.Styx.IEndPipe{``1},System.Func{``0,``1,System.UInt64,``2})">
            <summary>
            Starts with 1!
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ZipMergePipeExtensions.Zip``4(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},org.GraphDefined.Vanaheimr.Styx.IEndPipe{``1},org.GraphDefined.Vanaheimr.Styx.IEndPipe{``2},System.Func{``0,``1,``2,System.UInt64,``3})">
            <summary>
            Starts with 1!
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ZipMergePipe`3">
            <summary>
            Maps/converts pairs of consuming objects to emitting objects.
            </summary>
            <typeparam name="S1">The type of the consuming objects.</typeparam>
            <typeparam name="S2">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ZipMergePipe`3.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ZipMergePipe`4">
            <summary>
            Maps/converts pairs of consuming objects to emitting objects.
            </summary>
            <typeparam name="S1">The type of the consuming objects.</typeparam>
            <typeparam name="S2">The type of the consuming objects.</typeparam>
            <typeparam name="S3">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ZipMergePipe`4.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ZipTuplePipeExtensions">
            <summary>
            Extension methods for zip pipes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ZipTuplePipeExtensions.Zip``2(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},org.GraphDefined.Vanaheimr.Styx.IEndPipe{``1},System.Func{``0,``1,System.UInt64,org.GraphDefined.Vanaheimr.Illias.Collections.Tuple{``0,``1}})">
            <summary>
            Starts with 1!
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ZipTuplePipeExtensions.Zip``3(org.GraphDefined.Vanaheimr.Styx.IEndPipe{``0},org.GraphDefined.Vanaheimr.Styx.IEndPipe{``1},org.GraphDefined.Vanaheimr.Styx.IEndPipe{``2},System.Func{``0,``1,``2,System.UInt64,org.GraphDefined.Vanaheimr.Illias.Collections.Tuple{``0,``1}})">
            <summary>
            Starts with 1!
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ZipTuplePipe`2">
            <summary>
            Maps/converts pairs of consuming objects to emitting objects.
            </summary>
            <typeparam name="S1">The type of the consuming objects.</typeparam>
            <typeparam name="S2">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ZipTuplePipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.ZipTuplePipe`3">
            <summary>
            Maps/converts pairs of consuming objects to emitting objects.
            </summary>
            <typeparam name="S1">The type of the consuming objects.</typeparam>
            <typeparam name="S2">The type of the consuming objects.</typeparam>
            <typeparam name="S3">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.ZipTuplePipe`3.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.StdDevPipe">
            <summary>
            The StdDevPipe produces a side effect that is the
            sliding standard deviation and the average of the input.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.StdDevPipe.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.Double})">
            <summary>
            Creates a new StdDevPipe calculating a side effect that is the
            sliding standard deviation and the average of the input.
            </summary>
            <param name="SourcePipe">A pipe as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.StdDevPipe.#ctor(System.Collections.Generic.IEnumerator{System.Double})">
            <summary>
            Creates a new StdDevPipe calculating a side effect that is the
            sliding standard deviation and the average of the input.
            </summary>
            <param name="SourceEnumerator">An enumerator as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.StdDevPipe.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Creates a new StdDevPipe calculating a side effect that is the
            sliding standard deviation and the average of the input.
            </summary>
            <param name="SourceEnumerable">An enumerable as element source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.StdDevPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.StdDevPipe.ToString">
            <summary>
            Returns a string representation of this pipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.BackPipeExtensions">
            <summary>
            Extension methods for the BackPipe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.BackPipeExtensions.Back``2(org.GraphDefined.Vanaheimr.Styx.IPipe{``1,``0},System.UInt64)">
            <summary>
            Returns the incomming vertices of the given PropertyEdges.
            </summary>
            <param name="IEnumerable">An enumeration of PropertyEdges.</param>
            <param name="VertexFilter">An optional delegate for vertex filtering.</param>
            <returns>The incomming vertices of the given PropertyEdges.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.BackPipe`2">
            <summary>
            BackPipe will fully process the object through its internal pipe.
            If the internal pipe yields results, then the original object is emitted
            from the BackPipe.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.BackPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.GatherPipe`1">
            <summary>
            GatherPipe 
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.GatherPipe`1.#ctor">
            <summary>
            Creates a new GatherPipe.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.HasCountPipe`1">
            <summary>
            The pipe must emit at least min and not more than max elements.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.HasCountPipe`1.#ctor(System.Int64,System.Int64)">
            <summary>
            Creates a new HasCountPipe.
            </summary>
            <param name="Minimum">Minimal number of elements. Use -1 for no minimum.</param>
            <param name="Maximum">Maximal number of elements. Use -1 for no maximum.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.HasCountPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.PathPipe`1">
            <summary>
            Emits the path that the traverser has taken up to this object.
            In other words, it uses the Path property of the previous pipe
            to emit the transformation stages.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.PathPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Styx.UnrollPipe`1">
            <summary>
            The UnrollPipe will unroll any IEnumerator/IEnumerable of IEnumerable that is inputted into it.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.UnrollPipe`1.#ctor(org.GraphDefined.Vanaheimr.Styx.IEndPipe{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            The UnrollPipe will unroll any IEnumerator/IEnumerable of IEnumerable that is inputted into it.
            </summary>
            <param name="IEnumerable"></param>
            <param name="IEnumerator"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Styx.UnrollPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
    </members>
</doc>
