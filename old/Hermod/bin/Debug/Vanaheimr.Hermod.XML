<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanaheimr.Hermod</name>
    </assembly>
    <members>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU">
            <summary>
            An abstract HTTP protocol data unit.
            A HTTP pdu has three parts:
             - First a request/response specific first line
             - A collection of key-value pairs of type &lt;string,object&gt;
               for any kind of metadata
             - A body hosting the transmitted content
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU._HeaderFields">
            <summary>
            The collection of all HTTP headers.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.DefaultHTTPBodyReceiveBufferSize">
            <summary>
            The default size of the HTTP body receive buffer (==8 KByte).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.MaxHTTPBodyReceiveBufferSize">
            <summary>
            The maximum size of the HTTP body receive buffer (==1 MByte).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.Timestamp">
            <summary>
            The timestamp of the HTTP request generation.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.CancellationToken">
            <summary>
            The cancellation token.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.EventTrackingId">
            <summary>
            An unique event tracking identification for correlating this request with other events.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.HTTPSource">
            <summary>
            The remote TCP/IP socket.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.RemoteSocket">
            <summary>
            The IP socket of the HTTP packet.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.ForwardedFor">
            <summary>
            An additional enumeration of IP addresses, when the message has been forwarded between HTTP servers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.LocalSocket">
            <summary>
            The local TCP/IP socket.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.RawHTTPHeader">
            <summary>
            The RAW, unparsed and unverified HTTP header.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.RawPDU">
            <summary>
            The raw unparsed HTTP protocol data unit.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.FirstPDULine">
            <summary>
            The first line of a HTTP request or response.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.ConstructedHTTPHeader">
            <summary>
            Return a string representation of this HTTPHeader.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.EntirePDU">
            <summary>
            The entire HTTP protocol data unit.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.HTTPBody">
            <summary>
            The HTTP body/content as an array of bytes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.HTTPBodyAsUTF8String">
            <summary>
            The HTTP body/content as an UTF8 string.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.HTTPBodyStream">
            <summary>
            The HTTP body as a stream of bytes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.HTTPBodyReceiveBufferSize">
            <summary>
            The size of the HTTP body receive buffer.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.#ctor">
            <summary>
            Creates a new HTTP header.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU)">
            <summary>
            Creates a new HTTP header.
            </summary>
            <param name="HTTPPDU">Another HTTP PDU.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.#ctor(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource,org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket,System.String,System.Byte[],System.IO.Stream,System.UInt32,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Creates a new HTTP header.
            </summary>
            <param name="Timestamp">The timestamp of the request.</param>
            <param name="HTTPSource">The HTTP source.</param>
            <param name="LocalSocket">The local TCP/IP socket.</param>
            <param name="RemoteSocket">The remote TCP/IP socket.</param>
            <param name="HTTPHeader">A valid string representation of a http request header.</param>
            <param name="HTTPBody">The HTTP body as an array of bytes.</param>
            <param name="HTTPBodyStream">The HTTP body as an stream of bytes.</param>
            <param name="HTTPBodyReceiveBufferSize">The size of the HTTP body receive buffer.</param>
            <param name="CancellationToken">A token to cancel the HTTP request processing.</param>
            <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.TryGetHeaderField(System.String,System.Object@)">
            <summary>
            Return a http header field.
            </summary>
            <param name="FieldName">The key of the requested header field.</param>
            <param name="Value">The value of the requested header field.</param>
            <returns>True if the requested header exists; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.TryGetHeaderField(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField,System.Object@)">
            <summary>
            Return a http header field.
            </summary>
            <param name="HeaderField">The key of the requested header field.</param>
            <param name="Value">The value of the requested header field.</param>
            <returns>True if the requested header exists; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.TryGet``1(System.String,``0@)">
            <summary>
            Return a http header field.
            </summary>
            <typeparam name="T">The type of the value of the requested header field.</typeparam>
            <param name="Key">The key of the requested header field.</param>
            <param name="Value">The value of the requested header field.</param>
            <returns>True if the requested header exists; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.TryParseHeaderField``1(System.String,org.GraphDefined.Vanaheimr.Illias.TryParser{``0})">
            <summary>
            Parse the given http header field.
            </summary>
            <param name="HeaderField">The key of the requested header field.</param>
            <param name="TryParser">The header field parser.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.TryParseHeaderField``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField,org.GraphDefined.Vanaheimr.Illias.TryParser{``0})">
            <summary>
            Parse the given http header field.
            </summary>
            <param name="HeaderField">The key of the requested header field.</param>
            <param name="TryParser">The header field parser.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.TryParseHeaderField``1(System.String,org.GraphDefined.Vanaheimr.Illias.TryParser{``0},``0@)">
            <summary>
            Return a http header field.
            </summary>
            <param name="HeaderField">The key of the requested header field.</param>
            <param name="Value">The value of the requested header field.</param>
            <returns>True if the requested header exists; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.TryParseHeaderField``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField,org.GraphDefined.Vanaheimr.Illias.TryParser{``0},``0@)">
            <summary>
            Return a http header field.
            </summary>
            <param name="HeaderField">The key of the requested header field.</param>
            <param name="Value">The value of the requested header field.</param>
            <returns>True if the requested header exists; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.GetHeaderField(System.String)">
            <summary>
            Return the value of the given HTTP header field.
            </summary>
            <param name="FieldName">The name of the header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.GetHeaderField``1(System.String)">
            <summary>
            Return the given HTTP header field.
            </summary>
            <typeparam name="T">The expected type of the field value.</typeparam>
            <param name="FieldName">The name of the header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.GetHeaderField(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField)">
            <summary>
            Return the value of the given HTTP header field.
            </summary>
            <param name="HeaderField">The HTTP header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.GetHeaderField``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField)">
            <summary>
            Return the value of the given HTTP header field.
            </summary>
            <typeparam name="T">The expected type of the field value.</typeparam>
            <param name="HeaderField">The HTTP header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.GetHeaderField_Int64(System.String)">
            <summary>
            Return the given HTTP header field.
            </summary>
            <param name="FieldName">The name of the header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.GetHeaderField_Int64(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField)">
            <summary>
            Return the given HTTP header field.
            </summary>
            <param name="HeaderField">The HTTP header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.GetHeaderField_UInt64(System.String)">
            <summary>
            Return the given HTTP header field.
            </summary>
            <param name="FieldName">The name of the header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.GetHeaderField_UInt64(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField)">
            <summary>
            Return the given HTTP header field.
            </summary>
            <param name="HeaderField">The HTTP header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.RemoveHeaderField(System.String)">
            <summary>
            Remove a HTTP header field.
            </summary>
            <param name="FieldName">The name of the header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.SetHeaderField(System.String,System.Object)">
            <summary>
            Set a HTTP header field.
            A field value of NULL will remove the field from the header.
            </summary>
            <param name="FieldName">The name of the header field.</param>
            <param name="Value">The value. NULL will remove the field from the header.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.SetHeaderField(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField,System.Object)">
            <summary>
            Set a HTTP header field.
            A field value of NULL will remove the field from the header.
            </summary>
            <param name="HeaderField">The HTTP header field.</param>
            <param name="Value">The value. NULL will remove the field from the header.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.GetEnumerator">
            <summary>
            Return a HTTP header enumerator.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDU.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return a HTTP header enumerator.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder">
            <summary>
            An abstract HTTP protocol data unit builder.
            A HTTP pdu has three parts:
             - First a request/response specific first line
             - A collection of key-value pairs of type &lt;string,object&gt;
               for any kind of metadata
             - A body hosting the transmitted content
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.HeaderFields">
            <summary>
            The collection of all HTTP headers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.EventTrackingId">
            <summary>
            A unique identification for tracking related events.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.ConstructedHTTPHeader">
            <summary>
            Return a string representation of this HTTPHeader.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder._HTTPStatusCode">
            <summary>
            The HTTP status code.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.HTTPStatusCode">
            <summary>
            The HTTP status code.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.ProtocolName">
            <summary>
            The HTTP protocol name field.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.ProtocolVersion">
            <summary>
            The HTTP protocol version.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.Content">
            <summary>
            The HTTP body/content as an array of bytes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.ContentStream">
            <summary>
            The HTTP body/content as a stream.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.Date">
            <summary>
            The date and time of the request/response in rfc1123 format.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.X_FrameOptions">
            <summary>
            The X-Frame-Options HTTP response header can be used to indicate whether or not a browser
            should be allowed to render a page in a &lt;frame&gt;, &lt;iframe&gt; or &lt;object&gt;.
            Sites can use this to avoid clickjacking attacks, by ensuring that their content is not
            embedded into other sites.
            </summary>
            <example>DENY, SAMEORIGIN, ALLOW-FROM https://example.com</example>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.PropertyChanged">
            <summary>
            Raise an event whenever a property is changed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.#ctor">
            <summary>
            Create a new HTTP header builder.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Change a property value and raises an PropertyChanged event.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="Field">The internal field.</param>
            <param name="NewValue">The new value of the property.</param>
            <param name="PropertyName">The name of the property.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.PrepareImmutability">
            <summary>
            Prepares the immutability of an HTTP PDU, e.g. calculates
            and set the Content-Length header.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.TryGetHeaderField(System.String,System.Object@)">
            <summary>
            Return a http header field.
            </summary>
            <param name="FieldName">The key of the requested header field.</param>
            <param name="Value">The value of the requested header field.</param>
            <returns>True if the requested header exists; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.TryGetHeaderField(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField,System.Object@)">
            <summary>
            Return a http header field.
            </summary>
            <param name="FieldName">The key of the requested header field.</param>
            <param name="Value">The value of the requested header field.</param>
            <returns>True if the requested header exists; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.TryGet``1(System.String,``0@)">
            <summary>
            Return a http header field.
            </summary>
            <typeparam name="T">The type of the value of the requested header field.</typeparam>
            <param name="Key">The key of the requested header field.</param>
            <param name="Value">The value of the requested header field.</param>
            <returns>True if the requested header exists; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.GetHeaderField(System.String)">
            <summary>
            Return the value of the given HTTP header field.
            </summary>
            <param name="FieldName">The name of the header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.GetHeaderField``1(System.String)">
            <summary>
            Return the given HTTP header field.
            </summary>
            <typeparam name="T">The expected type of the field value.</typeparam>
            <param name="FieldName">The name of the header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.GetHeaderField(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField)">
            <summary>
            Return the value of the given HTTP header field.
            </summary>
            <param name="HeaderField">The HTTP header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.GetHeaderFields(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField)">
            <summary>
            Return the values of the given HTTP header field.
            </summary>
            <param name="HeaderField">The HTTP header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.GetHeaderField``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField)">
            <summary>
            Return the value of the given HTTP header field.
            </summary>
            <typeparam name="T">The expected type of the field value.</typeparam>
            <param name="HeaderField">The HTTP header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.GetHeaderField_Int64(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField)">
            <summary>
            Return the given HTTP header field.
            </summary>
            <param name="HeaderField">The HTTP header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.GetHeaderField_UInt64(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField)">
            <summary>
            Return the given HTTP header field.
            </summary>
            <param name="HeaderField">The HTTP header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.SetHeaderField(System.String,System.Object)">
            <summary>
            Set a HTTP header field.
            A field value of NULL will remove the field from the header.
            </summary>
            <param name="FieldName">The name of the header field.</param>
            <param name="Value">The value. NULL will remove the field from the header.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.SetHeaderField(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField,System.Object)">
            <summary>
            Set a HTTP header field.
            A field value of NULL will remove the field from the header.
            </summary>
            <param name="HeaderField">The header field.</param>
            <param name="Value">The value. NULL will remove the field from the header.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.RemoveHeaderField(System.String)">
            <summary>
            Remove a HTTP header field.
            </summary>
            <param name="FieldName">The name of the header field.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.GetEnumerator">
            <summary>
            Return an enumeration of all header lines.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPPDUBuilder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumeration of all header lines.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientFactory">
            <summary>
            A factory to create a HTTPClient or HTTPSClient based on the given URL protocol.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientFactory.Create(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new HTTP/HTTPS client.
            </summary>
            <param name="RemoteURL">The remote URL of the OICP HTTP endpoint to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSClient">
            <summary>
            A HTTPS client.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSClient.DefaultHTTPUserAgent">
            <summary>
            The default HTTPS user agent.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new HTTPS client.
            </summary>
            <param name="RemoteURL">The remote URL of the OICP HTTP endpoint to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new HTTPS client.
            </summary>
            <param name="RemoteIPAddress">The remote IP address to connect to.</param>
            <param name="RemotePort">An optional remote TCP port to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPSocket,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new HTTPS client.
            </summary>
            <param name="RemoteSocket">The remote IP socket to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new HTTPS client.
            </summary>
            <param name="RemoteHost">The remote hostname to connect to.</param>
            <param name="RemotePort">An optional remote TCP port to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClient">
            <summary>
            A http client.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClient.DefaultHTTPUserAgent">
            <summary>
            The default HTTPS user agent.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new HTTP client.
            </summary>
            <param name="RemoteURL">The remote URL of the OICP HTTP endpoint to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new HTTP client.
            </summary>
            <param name="RemoteIPAddress">The remote IP address to connect to.</param>
            <param name="RemotePort">An optional remote TCP port to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPSocket,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new HTTP client.
            </summary>
            <param name="RemoteSocket">The remote IP socket to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new HTTP client.
            </summary>
            <param name="RemoteHost">The remote hostname to connect to.</param>
            <param name="RemotePort">An optional remote TCP port to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions">
            <summary>
            A HTTP client extension methods.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.DELETE(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP DELETE request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.DELETERequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP DELETE request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.GET(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP GET request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.GETRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP GET request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.COUNT(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP COUNT request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.COUNTRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP COUNT request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.CREATE(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP CREATE request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.CREATERequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP CREATE request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.ADD(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP ADD request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.ADDRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP ADD request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.SET(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP SET request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.SETRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP SET request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.HEAD(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP HEAD request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.HEADRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP HEAD request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.OPTIONS(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP OPTIONS request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.OPTIONSRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP OPTIONS request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.POST(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP POST request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.POSTRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP POST request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.PUT(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP PUT request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.PUTRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP PUT request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.TRACE(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP TRACE request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.TRACERequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP TRACE request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.PATCH(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP PATCH request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.PATCHRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP PATCH request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.TRAVERSE(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP TRAVERSE request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientExtensions.TRAVERSERequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP TRAVERSE request.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="Path">An URL path.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A HTTP request object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient">
            <summary>
            The HTTP client interface.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.RemoteURL">
            <summary>
            The remote URL of the OICP HTTP endpoint to connect to.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.VirtualHostname">
            <summary>
            An optional HTTP virtual hostname.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.Description">
            <summary>
            An optional description of this CPO client.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.RemoteCertificateValidator">
            <summary>
            The remote SSL/TLS certificate validator.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.ClientCert">
            <summary>
            The SSL/TLS client certificate to use of HTTP authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.HTTPUserAgent">
            <summary>
            The HTTP user agent identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.RequestTimeout">
            <summary>
            The timeout for HTTP requests.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.TransmissionRetryDelay">
            <summary>
            The delay between transmission retries.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.MaxNumberOfRetries">
            <summary>
            The maximum number of transmission retries for HTTP request.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.UseHTTPPipelining">
            <summary>
            Make use of HTTP pipelining.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.HTTPLogger">
            <summary>
            The CPO client (HTTP client) logger.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient.DNSClient">
            <summary>
            The DNS client to use.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookies">
            <summary>
            Multiple HTTP cookies.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookies.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie})">
            <summary>
            Create new HTTP cookies.
            </summary>
            <param name="Cookies">An enumeration of HTTP cookies.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookies.Parse(System.String)">
            <summary>
            Parse the given text as multiple HTTP cookies.
            </summary>
            <param name="Text">A text representation of multiple HTTP cookies.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookies.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookies@)">
            <summary>
            Parse the given string as multiple HTTP cookies.
            </summary>
            <param name="Text">A text representation of multiple HTTP cookies.</param>
            <param name="HTTPCookies">The parsed enumeration of HTTP cookies.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName">
            <summary>
            The unique name of a HTTP cookie.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.InternalName">
            <summary>
            The internal name.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.IsNullOrEmpty">
            <summary>
            Indicates whether this identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.Length">
            <summary>
            The length of the HTTP cookie name.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.#ctor(System.String)">
            <summary>
            Create a new HTTP cookie name based on the given text.
            </summary>
            <param name="Name">The text representation of the HTTP cookie name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.Parse(System.String)">
            <summary>
            Parse the given string as a HTTP cookie name.
            </summary>
            <param name="Text">A text representation of a HTTP cookie name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.TryParse(System.String)">
            <summary>
            Try to parse the given string as a HTTP cookie name.
            </summary>
            <param name="Text">A text representation of a HTTP cookie name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName@)">
            <summary>
            Try to parse the given string as a HTTP cookie name.
            </summary>
            <param name="Text">A text representation of a HTTP cookie name.</param>
            <param name="HTTPCookieName">The parsed HTTP cookie name.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.Clone">
            <summary>
            Clone this HTTP cookie name.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookieName1">A HTTP cookie name.</param>
            <param name="HTTPCookieName2">Another HTTP cookie name.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookieName1">A HTTP cookie name.</param>
            <param name="HTTPCookieName2">Another HTTP cookie name.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookieName1">A HTTP cookie name.</param>
            <param name="HTTPCookieName2">Another HTTP cookie name.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookieName1">A HTTP cookie name.</param>
            <param name="HTTPCookieName2">Another HTTP cookie name.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookieName1">A HTTP cookie name.</param>
            <param name="HTTPCookieName2">Another HTTP cookie name.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookieName1">A HTTP cookie name.</param>
            <param name="HTTPCookieName2">Another HTTP cookie name.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName)">
            <summary>
            Combines two HTTP cookies names.
            </summary>
            <param name="HTTPCookieName1">A HTTP cookie name.</param>
            <param name="HTTPCookieName2">Another HTTP cookie name.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName,System.String)">
            <summary>
            Combines a HTTP cookies name with a text.
            </summary>
            <param name="HTTPCookieName">A HTTP cookie name.</param>
            <param name="Text">A text.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.op_Addition(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName)">
            <summary>
            Combines a HTTP cookies name with a text.
            </summary>
            <param name="Text">A text.</param>
            <param name="HTTPCookieName">A HTTP cookie name.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookieName">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName)">
            <summary>
            Compares two HTTP cookie names for equality.
            </summary>
            <param name="HTTPCookieName">A HTTP cookie name to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType">
            <summary>
            HTTP content type.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.MediaMainType">
            <summary>
            The media main type.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.MediaSubType">
            <summary>
            The media sub type.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.CharSet">
            <summary>
            The (optional) character set.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.FileExtensions">
            <summary>
            Well-known file extentions using this HTTP content type.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.MIMEBoundary">
            <summary>
            The (optional) MIME boundary.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.Action">
            <summary>
            The (optional) (SOAP) action.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.DebugView">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Creates a new HTTP content type based on the given media type,
            character set and file extentions.
            </summary>
            <param name="MediaMainType">The media main type for the HTTP content type.</param>
            <param name="MediaSubType">The media sub type for the HTTP content type.</param>
            <param name="CharSet">The char set of the HTTP content type.</param>
            <param name="FileExtensions">Well-known file extentions using this HTTP content type.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPContentType">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType)">
            <summary>
            Compares two HTTPContentTypes for equality.
            </summary>
            <param name="HTTPContentType">A HTTPContentType to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.GetHashCode">
            <summary>
            Get the HashCode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie">
            <summary>
            A single HTTP cookie.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.crumbs">
            <summary>
            The data stored within the cookie.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.Name">
            <summary>
            The name of the cookie.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookieName,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Create a new HTTP cookie.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.Parse(System.String)">
            <summary>
            Parse the given text as a single HTTP cookie.
            </summary>
            <param name="Text">A text representation of a single HTTP cookie.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie@)">
            <summary>
            Parse the given string as a single HTTP cookie.
            </summary>
            <param name="Text">A text representation of a single HTTP cookie.</param>
            <param name="HTTPCookie">The parsed HTTP cookie.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.Item(System.String)">
            <summary>
            Return the value of the given crumb.
            </summary>
            <param name="Crumb">The key/name of the crumb.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.Get(System.String)">
            <summary>
            Return the value of the given crumb.
            </summary>
            <param name="Crumb">The key/name of the crumb.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.TryGet(System.String,System.String@)">
            <summary>
            Try to return the value of the given crumb.
            </summary>
            <param name="Crumb">The key/name of the crumb.</param>
            <param name="Value">The value of the crumb.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookie1">A HTTP cookie.</param>
            <param name="HTTPCookie2">Another HTTP cookie.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookie1">A HTTP cookie.</param>
            <param name="HTTPCookie2">Another HTTP cookie.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookie1">A HTTP cookie.</param>
            <param name="HTTPCookie2">Another HTTP cookie.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookie1">A HTTP cookie.</param>
            <param name="HTTPCookie2">Another HTTP cookie.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookie1">A HTTP cookie.</param>
            <param name="HTTPCookie2">Another HTTP cookie.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookie1">A HTTP cookie.</param>
            <param name="HTTPCookie2">Another HTTP cookie.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPCookie">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie)">
            <summary>
            Compares two HTTPCookies for equality.
            </summary>
            <param name="HTTPCookie">A HTTPCookie to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPCookie.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostnameExtensions">
            <summary>
            Extension methods for HTTP hostnames.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostnameExtensions.IsNullOrEmpty(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname})">
            <summary>
            Indicates whether this HTTP hostname is null or empty.
            </summary>
            <param name="HTTPHostname">A HTTP hostname.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostnameExtensions.IsNotNullOrEmpty(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname})">
            <summary>
            Indicates whether this HTTP hostname is null or empty.
            </summary>
            <param name="HTTPHostname">A HTTP hostname.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname">
            <summary>
            The unique identification of a HTTP hostname.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.Name">
            <summary>
            The hostname.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.Port">
            <summary>
            The TCP/IP port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.IsNullOrEmpty">
            <summary>
            Indicates whether this user identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.IsNotNullOrEmpty">
            <summary>
            Indicates whether this user identification is NOT null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.Length">
            <summary>
            Returns the length of the identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.SimpleString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.Any">
            <summary>
            The HTTP 'ANY' host or "*".
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.AnyHost">
            <summary>
            Return an new HTTP hostname having a hostname wildcard, e.g. "*:443".
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.AnyPort">
            <summary>
            Return an new HTTP hostname having a port wildcard, e.g. "localhost:*".
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.Localhost">
            <summary>
            The HTTP 'localhost' host.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.#ctor(System.String,System.Nullable{System.UInt16})">
            <summary>
            Generate a new HTTP hostname based on the given name and port.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.Parse(System.String)">
            <summary>
            Parse the given text as HTTP hostname.
            </summary>
            <param name="Text">The text representation of a HTTP hostname.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.Parse(System.String,System.UInt16)">
            <summary>
            Parse the given name and port as HTTP hostname.
            </summary>
            <param name="Text">The text representation of a HTTP hostname.</param>
            <param name="Port">The TCP/IP port.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.TryParse(System.String)">
            <summary>
            Try to parse the given text as HTTP hostname.
            </summary>
            <param name="Text">The text representation of a HTTP hostname.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.TryParse(System.String,System.UInt16)">
            <summary>
            Parse the given string as a HTTP hostname.
            </summary>
            <param name="Text">The text representation of a HTTP hostname.</param>
            <param name="Port">The TCP/IP port.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname@)">
            <summary>
            Parse the given string as a HTTP hostname.
            </summary>
            <param name="Text">The text representation of a HTTP hostname.</param>
            <param name="Hostname">The parsed HTTP hostname.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.TryParse(System.String,System.UInt16,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname@)">
            <summary>
            Parse the given string as a HTTP hostname.
            </summary>
            <param name="Text">The text representation of a HTTP hostname.</param>
            <param name="Port">The TCP/IP port.</param>
            <param name="Hostname">The parsed HTTP hostname.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.Clone">
            <summary>
            Clone this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname1">A HTTPHostname.</param>
            <param name="Hostname2">Another HTTPHostname.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,System.String)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname1">A HTTPHostname.</param>
            <param name="Hostname2">Another HTTPHostname.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname1">A HTTPHostname.</param>
            <param name="Hostname2">Another HTTPHostname.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,System.String)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname1">A HTTPHostname.</param>
            <param name="Hostname2">Another HTTPHostname.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname1">A HTTPHostname.</param>
            <param name="Hostname2">Another HTTPHostname.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname1">A HTTPHostname.</param>
            <param name="Hostname2">Another HTTPHostname.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname1">A HTTPHostname.</param>
            <param name="Hostname2">Another HTTPHostname.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname1">A HTTPHostname.</param>
            <param name="Hostname2">Another HTTPHostname.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Compares two Hostnames for equality.
            </summary>
            <param name="Hostname">A Hostname to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode">
            <summary>
            HTTP status codes as defined within RFC 2616 (Hypertext Transfer Protocol v1.1) and other resources.
            http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
            http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Code">
            <summary>
            The code of this HTTP status code
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Name">
            <summary>
            The name of this HTTP status code
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Description">
            <summary>
            A description of this HTTP status code
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.IsInformational">
            <summary>
            Is informational.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.IsSuccessful">
            <summary>
            Is successful.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.IsRedirection">
            <summary>
            Is redirection.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.IsClientError">
            <summary>
            Is client error.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.IsServerError">
            <summary>
            Is server error.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.SimpleString">
            <summary>
            SimpleString.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.HTTPResponseString">
            <summary>
            Create a status code line from a HTTPStatusCode.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.#ctor(System.UInt32,System.String,System.String)">
            <summary>
            Creates a new HTTP status coded based on a code, name and an optional description.
            </summary>
            <param name="Code">The code of the HTTP status code</param>
            <param name="Name">The name of the HTTP status code</param>
            <param name="Description">An optional description of the HTTP status code</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Continue">
            <summary>
            Indicates that the client can continue with its request.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.SwitchingProtocols">
            <summary>
            Indicates that the protocol version or protocol is being changed.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.OK">
            <summary>
            Indicates that the request succeeded and that the requested information
            is in the response.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Created">
            <summary>
            The request has been fulfilled and resulted in a new resource being created.
            The newly created resource can be referenced by the URI(s) returned in the Location header field.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Accepted">
            <summary>
            The request has been accepted for processing, but the processing has
            not been completed. The request might or might not eventually be acted
            upon, as it might be disallowed when processing actually takes place.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.NonAuthoritativeInformation">
            <summary>
            The returned metainformation in the entity-header is not the
            definitive set as available from the origin server, but is gathered
            from a local or a third-party copy. The set presented MAY be a subset
            or superset of the original version. Use of this response code is not
            required and is only appropriate when the response would otherwise be
            200 (OK).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.NoContent">
            <summary>
            The server has fulfilled the request but does not need to return an
            entity-body, and might want to return updated metainformation.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.ResetContent">
            <summary>
            The server has fulfilled the request and the user agent SHOULD reset
            the document view which caused the request to be sent. The response
            MUST NOT include an entity.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.PartialContent">
            <summary>
            The server has fulfilled the partial GET request for the resource.
            The request MUST have included a Range header field indicating the
            desired range, and MAY have included an If-Range header field to
            make the request conditional.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.MultiStatus">
            <summary>
            The response is a MultiStatus response as requested by a WebDAV PROPFIND
            request that contains the content of a requested destination.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.MultipleChoices">
            <summary>
            The requested resource corresponds to any one of a set of representations,
            each with its own specific location. The client can select a preferred
            representation and redirect its request to that location.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.MovedPermanently">
            <summary>
            The requested resource has been assigned a new permanent URI and any
            future references to this resource SHOULD use one of the returned URIs
            provided in the location field of the response header.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Found">
            <summary>
            The requested resource resides temporarily under a different URI
            provided in the location field of the response header.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.SeeOther">
            <summary>
            The response to the request can be found under a different URI and
            SHOULD be retrieved using a GET method on that resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.NotModified">
            <summary>
            If the client has performed a conditional GET request and access is
            allowed, but the document has not been modified, the server SHOULD
            respond with this status code and MUST NOT send a message-body.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.UseProxy">
            <summary>
            The requested resource MUST be accessed through the proxy given by
            the Location field.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.SwitchProxy">
            <summary>
            Switch Proxy
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.TemporaryRedirect">
            <summary>
            The requested resource resides temporarily under a different URI.
            Since the redirection MAY be altered on occasion, the client SHOULD
            continue to use the Request-URI for future requests.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.BadRequest">
            <summary>
            The request could not be understood by the server due to malformed
            syntax. The client SHOULD NOT repeat the request without modifications.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Unauthorized">
            <summary>
            The request requires user authentication. The response MUST include a
            WWW-Authenticate header field containing a challenge applicable to
            the requested resource. If the request already included Authorization
            credentials, then the 401 response indicates that authorization has
            been refused for those credentials.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.PaymentRequired">
            <summary>
            This code is reserved for future use.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Forbidden">
            <summary>
            The server understood the request, but is refusing to fulfill it.
            Authorization will not help and the request SHOULD NOT be repeated.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.NotFound">
            <summary>
            The server has not found anything matching the Request-URI.
            No indication is given of whether the condition is temporary or permanent.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.MethodNotAllowed">
            <summary>
            The method specified in the Request-Line is not allowed for the
            resource identified by the Request-URI. The response MUST include an
            Allow header containing a list of valid methods for the requested resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.NotAcceptable">
            <summary>
            The client has indicated with Accept headers that it will not
            accept any of the available representations of the resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.ProxyAuthenticationRequired">
            <summary>
            This code is similar to 401 (Unauthorized), but indicates that the
            client must first authenticate itself with the proxy. The proxy MUST
            return a Proxy-Authenticate header field containing a challenge
            applicable to the proxy for the requested resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.RequestTimeout">
            <summary>
            The client did not produce a request within the time that the server
            was prepared to wait. The client MAY repeat the request without
            modifications at any later time.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Conflict">
            <summary>
            The request could not be completed due to a conflict with the current
            state of the resource. This code is only allowed in situations where
            it is expected that the user might be able to resolve the conflict
            and resubmit the request.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Gone">
            <summary>
            The requested resource is no longer available at the server and
            no forwarding address is known. This condition is expected to be
            considered permanent.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.LengthRequired">
            <summary>
            The server refuses to accept the request without a
            content-length header.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.PreconditionFailed">
            <summary>
            The precondition given in one or more of the request-header
            fields evaluated to false when it was tested on the server.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.RequestEntityTooLarge">
            <summary>
            The server is refusing to process a request because the request
            entity is larger than the server is willing or able to process. The
            server MAY close the connection to prevent the client from continuing
            the request.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.RequestURITooLong">
            <summary>
            The server is refusing to service the request because the
            Request-URI is longer than the server is willing to interpret.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.UnsupportedMediaType">
            <summary>
            The server is refusing to service the request because the entity of
            the request is in a format not supported by the requested resource
            for the requested method.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.RequestedRangeNotSatisfiable">
            <summary>
            A server SHOULD return a response with this status code if a request
            included a Range request-header field, and none of the range-specifier
            values in this field overlap the current extent of the selected
            resource, and the request did not include an If-Range request-header field.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.ExpectationFailed">
            <summary>
            The expectation given in an Expect request-header field could not be met
            by this server, or, if the server is a proxy, the server has unambiguous
            evidence that the request could not be met by the next-hop server.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.ImATeapot">
            <summary>
            Unfortunately this coffee machine is out of coffee.
            See RFC 2324 for details!
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.UnprocessableEntity">
            <summary>
            The server understands the media type of the request entity,
            but was unable to process the contained instructions.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Locked">
            <summary>
            The requested resource is currently locked.
            The lock must be released or proper identification
            given before the method can be applied.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.FailedDependency">
            <summary>
            The method could not be performed on the resource because the
            requested action depended on another action and that other
            action failed.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.NoCode">
            <summary>
            No code
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.UpgradeRequired">
            <summary>
            The requested resource can only be retrieved using SSL.
            The server is willing to upgrade the current connection to SSL,
            but your client doesn't support it. Either upgrade your client,
            or try requesting the page using https://
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.PreconditionRequired">
            <summary>
            The 428 status code indicates that the origin server requires the
            request to be conditional.
            Its typical use is to avoid the "lost update" problem, where a client
            GETs a resource's state, modifies it, and PUTs it back to the server,
            when meanwhile a third party has modified the state on the server,
            leading to a conflict.  By requiring requests to be conditional, the
            server can assure that clients are working with the correct copies.
            Responses using this status code SHOULD explain how to resubmit the
            request successfully.
            For example: This request is required to be conditional;
            try using the 'If-Match'-header.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.InternalServerError">
            <summary>
            The server encountered an unexpected condition which
            prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.NotImplemented">
            <summary>
            The server does not support the functionality required to fulfill the
            request. This is the appropriate response when the server does not
            recognize the request method and is not capable of supporting it for
            any resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.BadGateway">
            <summary>
            The server, while acting as a gateway or proxy, received an invalid
            response from the upstream server it accessed in attempting to
            fulfill the request.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.ServiceUnavailable">
            <summary>
            The server is currently unable to handle the request due to a
            temporary overloading or maintenance of the server. The implication
            is that this is a temporary condition which will be alleviated after
            some delay. If known, the length of the delay MAY be indicated in a
            Retry-After header. If no Retry-After is given, the client SHOULD
            handle the response as it would for a 500 response.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.GatewayTimeout">
            <summary>
            The server, while acting as a gateway or proxy, did not receive a
            timely response from the upstream server specified or some other
            auxiliary server (e.g. DNS) it needed to access in attempting to
            complete the request.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.HTTPVersionNotSupported">
            <summary>
            The server does not support, or refuses to support, the HTTP
            protocol version that was used in the request message.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.VariantAlsoNegotiates">
            <summary>
            Transparent content negotiation for the request results in a circular reference.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.InsufficientStorage">
            <summary>
            Indicates a InsufficientStorage of a WebDAV upload request.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.BandwidthLimitExceeded">
            <summary>
            Bandwidth Limit Exceeded
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.NotExtended">
            <summary>
            Further extensions to the request are required for the server to fulfill it.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.ParseInt(System.UInt16)">
            <summary>
            Tries to find the appropriate HTTPStatusCode for the given integer
            or returns HTTPStatusCode.BadRequest.
            </summary>
            <param name="myCode">A HTTPStatusCode code</param>
            <returns>A HTTPStatusCode</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.ParseString(System.String)">
            <summary>
            Tries to find the appropriate HTTPStatusCode for the given string
            or returns HTTPStatusCode.BadRequest.
            </summary>
            <param name="myCode">A HTTPStatusCode code as string</param>
            <returns>A HTTPStatusCode</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.TryParseInt(System.UInt16,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode@)">
            <summary>
            Tries to find the appropriate HTTPStatusCode for the given integer.
            </summary>
            <param name="myCode">A HTTPStatusCode code</param>
            <param name="myHTTPStatusCode">The parsed HTTPStatusCode</param>
            <returns>true or false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.TryParseString(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode@)">
            <summary>
            Tries to find the appropriate HTTPStatusCode for the given string.
            </summary>
            <param name="myCode">A HTTPStatusCode code</param>
            <param name="myHTTPStatusCode">The parsed HTTPStatusCode</param>
            <returns>true or false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPStatusCode">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode)">
            <summary>
            Compares two HTTPStatusCodes for equality.
            </summary>
            <param name="HTTPStatusCode">A HTTPStatusCode to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource">
            <summary>
            A HTTP source.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.Socket">
            <summary>
            The IP socket of the HTTP source.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.IPAddress">
            <summary>
            The IP address of the HTTP source.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.Port">
            <summary>
            The port of the HTTP source.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.ForwardedFor">
            <summary>
            An additional enumeration of IP addresses, when the message had been forwarded between HTTP servers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPSocket,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.IIPAddress})">
            <summary>
            Create a new HTTP source.
            </summary>
            <param name="Socket">The IP socket of the HTTP source.</param>
            <param name="ForwardedFor">An additional enumeration of IP addresses, when the message had been forwarded between HTTP servers.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.Parse(System.String)">
            <summary>
            Parse the given text representation of an IP socket.
            </summary>
            <param name="Text">A text representation of an IP socket.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPSource1">A HTTP source.</param>
            <param name="HTTPSource2">Another HTTP source.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPSource1">A HTTP source.</param>
            <param name="HTTPSource2">Another HTTP source.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPSource">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource)">
            <summary>
            Compares two HTTPSources for equality.
            </summary>
            <param name="HTTPSource">A HTTPSource to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2">
            <summary>
            A HTTP uniform resource identifier.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.InternalId">
            <summary>
            The internal identifier.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.URI_RegEx">
            <summary>
            The regular expression for parsing a HTTP URI.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.Hostname">
            <summary>
            The HTTP hostname part of the HTTP URI.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.Length">
            <summary>
            The length of the HTTP uniform resource identifier.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.#ctor(System.String)">
            <summary>
            Create a new HTTP uniform resource identifier
            </summary>
            <param name="URI">The uniform resource identifier.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.Parse(System.String)">
            <summary>
            Parse the given text representation of a HTTP uniform resource identifier.
            </summary>
            <param name="Text">A text representation of a HTTP uniform resource identifier.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.TryParse(System.String)">
            <summary>
            Try to parse the given text representation of a HTTP uniform resource identifier.
            </summary>
            <param name="Text">A text representation of a HTTP uniform resource identifier.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2@)">
            <summary>
            Try to parse the given text representation of a HTTP uniform resource identifier.
            </summary>
            <param name="Text">A text representation of a HTTP uniform resource identifier.</param>
            <param name="URI">The parsed HTTP uniform resource identifier.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI21">A HTTP uniform resource identifier.</param>
            <param name="HTTPURI22">Another HTTP uniform resource identifier.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2,System.String)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI21">A HTTP uniform resource identifier.</param>
            <param name="Text">Another HTTP uniform resource identifier.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI21">A HTTP uniform resource identifier.</param>
            <param name="HTTPURI22">Another HTTP uniform resource identifier.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2,System.String)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI21">A HTTP uniform resource identifier.</param>
            <param name="Text">Another HTTP uniform resource identifier.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI21">A HTTP uniform resource identifier.</param>
            <param name="HTTPURI22">Another HTTP uniform resource identifier.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI21">A HTTP uniform resource identifier.</param>
            <param name="HTTPURI22">Another HTTP uniform resource identifier.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI21">A HTTP uniform resource identifier.</param>
            <param name="HTTPURI22">Another HTTP uniform resource identifier.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI21">A HTTP uniform resource identifier.</param>
            <param name="HTTPURI22">Another HTTP uniform resource identifier.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2,System.String)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI21">A HTTP uniform resource identifier.</param>
            <param name="Text">Another HTTP uniform resource identifier.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI21">A HTTP uniform resource identifier.</param>
            <param name="HTTPURI22">Another HTTP uniform resource identifier.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPURI2">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2)">
            <summary>
            Compares two HTTPURI2s for equality.
            </summary>
            <param name="HTTPURI2">A HTTPURI2 to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPURI2.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath">
            <summary>
            The path of a HTTP path.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.InternalId">
            <summary>
            The internal identifier.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.Length">
            <summary>
            The length of the HTTP path.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.#ctor(System.String)">
            <summary>
            Create a new HTTP path
            </summary>
            <param name="URI">The uniform resource identifier.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.Parse(System.String)">
            <summary>
            Parse the given text representation of a HTTP path.
            </summary>
            <param name="Text">A text representation of a HTTP path.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.TryParse(System.String)">
            <summary>
            Try to parse the given text representation of a HTTP path.
            </summary>
            <param name="Text">A text representation of a HTTP path.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath@)">
            <summary>
            Try to parse the given text representation of a HTTP path.
            </summary>
            <param name="Text">A text representation of a HTTP path.</param>
            <param name="HTTPPath">The parsed HTTP path.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.Clone">
            <summary>
            Clone this object.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.Root">
            <summary>
            /
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="HTTPPath2">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.String)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="Text">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="HTTPPath2">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.String)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="Text">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="HTTPPath2">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="HTTPPath2">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="HTTPPath2">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="HTTPPath2">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.String)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="Text">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Addition(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.String)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="Text">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname">Another HTTP path.</param>
            <param name="HTTPPath1">A HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Hostname">Another HTTP path.</param>
            <param name="HTTPPath1">A HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Addition(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Text">Another HTTP path.</param>
            <param name="HTTPPath1">A HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Addition(System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Text">Another HTTP path.</param>
            <param name="HTTPPath1">A HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="HTTPPath2">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Addition(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="HTTPPath2">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="HTTPPath2">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.op_Addition(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath1">A HTTP path.</param>
            <param name="HTTPPath2">Another HTTP path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPPath">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two HTTPPaths for equality.
            </summary>
            <param name="HTTPPath">A HTTPPath to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion">
            <summary>
            A HTTP version identifier.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.Major">
            <summary>
            The major of this HTTP version
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.Minor">
            <summary>
            The minor of this HTTP version
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Create a new HTTP version identifier.
            </summary>
            <param name="Major">The major number.</param>
            <param name="Minor">The minor number.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.Parse(System.String)">
            <summary>
            Parse the given text representation of a HTTP version, e.g. "HTTP/1.1".
            </summary>
            <param name="Text">A text representation of a HTTP version, e.g. "HTTP/1.1".</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.TryParse(System.String)">
            <summary>
            Try to parse the given text representation of a HTTP version, e.g. "HTTP/1.1".
            </summary>
            <param name="Text">A text representation of a HTTP version, e.g. "HTTP/1.1".</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion@)">
            <summary>
            Try to parse the given text representation of a HTTP version, e.g. "HTTP/1.1".
            </summary>
            <param name="Text">A text representation of a HTTP version, e.g. "HTTP/1.1".</param>
            <param name="Version">The parsed HTTP version</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.HTTP_1_0">
            <summary>
            HTTP 1.0
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.HTTP_1_1">
            <summary>
            HTTP 1.1
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPVersion1">A HTTP version.</param>
            <param name="HTTPVersion2">Another HTTP version.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPVersion1">A HTTP version.</param>
            <param name="HTTPVersion2">Another HTTP version.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPVersion1">A HTTP version.</param>
            <param name="HTTPVersion2">Another HTTP version.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPVersion1">A HTTP version.</param>
            <param name="HTTPVersion2">Another HTTP version.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPVersion1">A HTTP version.</param>
            <param name="HTTPVersion2">Another HTTP version.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPVersion1">A HTTP version.</param>
            <param name="HTTPVersion2">Another HTTP version.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPVersion">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion)">
            <summary>
            Compares two HTTPVersions for equality.
            </summary>
            <param name="HTTPVersion">A HTTPVersion to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.URLProtocols">
            <summary>
            Well-known protocols.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.URLProtocols.http">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.URLProtocols.https">
            <summary>
            HTTPS
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.URLProtocols.ws">
            <summary>
            Web Sockets
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.URLProtocols.wss">
            <summary>
            Web Sockets Secure
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL">
            <summary>
            An uniform resource location (URL).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.InternalId">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.IsNullOrEmpty">
            <summary>
            Indicates whether this identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.Length">
            <summary>
            The length of the uniform resource location.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLProtocols,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Create a new uniform resource location based on the given string.
            </summary>
            <param name="String">The string representation of the uniform resource location.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.Parse(System.String)">
            <summary>
            Parse the given string as an uniform resource location.
            </summary>
            <param name="Text">A text representation of an uniform resource location.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.TryParse(System.String)">
            <summary>
            Try to parse the given text as an uniform resource location.
            </summary>
            <param name="Text">A text representation of an uniform resource location.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.URL@)">
            <summary>
            Try to parse the given text as an uniform resource location.
            </summary>
            <param name="Text">A text representation of an uniform resource location.</param>
            <param name="URL">The parsed uniform resource location.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.Clone">
            <summary>
            Clone this uniform resource location.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,org.GraphDefined.Vanaheimr.Hermod.HTTP.URL)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="URL1">A uniform resource location.</param>
            <param name="URL2">Another uniform resource location.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,org.GraphDefined.Vanaheimr.Hermod.HTTP.URL)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="URL1">A uniform resource location.</param>
            <param name="URL2">Another uniform resource location.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,org.GraphDefined.Vanaheimr.Hermod.HTTP.URL)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="URL1">A uniform resource location.</param>
            <param name="URL2">Another uniform resource location.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,org.GraphDefined.Vanaheimr.Hermod.HTTP.URL)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="URL1">A uniform resource location.</param>
            <param name="URL2">Another uniform resource location.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,org.GraphDefined.Vanaheimr.Hermod.HTTP.URL)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="URL1">A uniform resource location.</param>
            <param name="URL2">Another uniform resource location.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,org.GraphDefined.Vanaheimr.Hermod.HTTP.URL)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="URL1">A uniform resource location.</param>
            <param name="URL2">Another uniform resource location.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="URL">A uniform resource location.</param>
            <param name="PathSuffix">A path suffix which will be added to the existing path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.op_Addition(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,System.String)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="URL">A uniform resource location.</param>
            <param name="PathSuffix">A path suffix which will be added to the existing path.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="URL">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL)">
            <summary>
            Compares two uniform resource locations for equality.
            </summary>
            <param name="URL">An uniform resource location to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.GetHashCode">
            <summary>
            Return the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HeaderFieldType">
            <summary>
            The type of a HTTP header field.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.RequestPathSemantic">
            <summary>
            Whether a header field has and end-to-end or
            an hop-to-hop semantic.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.StringParsers">
            <summary>
            A collection of delegates to parse the value of the header field from a string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.StringParsers.NullableUInt64(System.String,System.Object@)">
            <summary>
            A delegate to parse a UInt64? value from a string.
            </summary>
            <param name="String">The string to be parsed.</param>
            <param name="Object">The parsed UInt64? value.</param>
            <returns>True if the value could be parsed; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField">
            <summary>
            Defines a field within the HTTP header.
            </summary>
            <seealso cref="!:http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html"/>
            <seealso cref="!:http://restpatterns.org"/>
            <seealso cref="!:http://en.wikipedia.org/wiki/List_of_HTTP_header_fields"/>
            <seealso cref="!:http://www.and.org/texts/server-http"/>
            <seealso cref="!:http://www.iana.org/assignments/message-headers/message-headers.xhtml"/>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Name">
            <summary>
            The name of this HTTP request field
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Type">
            <summary>
            The C# type of this HTTP header field.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.HeaderFieldType">
            <summary>
            The type of a HTTP header field.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.RequestPathSemantic">
            <summary>
            Whether a header field has and end-to-end or
            an hop-to-hop semantic.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.StringParserDelegate">
            <summary>
            A delegate definition to parse the value of the header field from a string.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.StringParser">
            <summary>
            A delegate to parse the value of the header field from a string.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ValueSerializerDelegate">
            <summary>
            A delegate definition to serialize the value of the header field to a string.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ValueSerializer">
            <summary>
            A delegate to serialize the value of the header field to a string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.#ctor(System.String,System.Type,org.GraphDefined.Vanaheimr.Hermod.HTTP.HeaderFieldType,org.GraphDefined.Vanaheimr.Hermod.HTTP.RequestPathSemantic,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.StringParserDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ValueSerializerDelegate)">
            <summary>
            Creates a new HTTP header field.
            </summary>
            <param name="Name">The name of the HTTP header field.</param>
            <param name="Type">The type of the HTTP header field value.</param>
            <param name="HeaderFieldType">The type of the header field (general|request|response).</param>
            <param name="RequestPathSemantic">Whether a header field has and end-to-end or an hop-to-hop semantic.</param>
            <param name="StringParser">Parse this HTTPHeaderField from a string.</param>
            <param name="ValueSerializer">A delegate to serialize the value of the header field to a string.</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.CacheControl">
            <summary>
            The Cache-Control general-header field is used to specify
            directives that MUST be obeyed by all caching mechanisms
            along the request/response chain. The directives specify
            behavior intended to prevent caches from adversely
            interfering with the request or response.
            </summary>
            <example>Cache-Control: no-cache</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Connection">
            <summary>
            The Connection general-header field allows the sender
            to specify options that are desired for that particular
            connection and MUST NOT be communicated by proxies over
            further connections.
            HTTP/1.1 applications that do not support persistent
            connections MUST include the "close" connection option
            in every message.
            </summary>
            <example>Connection: close</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ContentEncoding">
            <summary>
            The Content-Encoding entity-header field is used as a modifier
            to the media-type. When present, its value indicates what
            additional content codings have been applied to the entity-body,
            and thus what decoding mechanisms must be applied in order to
            obtain the media-type referenced by the Content-Type header
            field.
            If the content-encoding of an entity in a request message is not
            acceptable to the origin server, the server SHOULD respond with
            a status code of 415 (Unsupported Media Type).
            </summary>
            <example>Content-Encoding: gzip</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ContentLanguage">
            <summary>
            The Content-Language entity-header field describes the natural
            language(s) of the intended audience for the enclosed entity.
            </summary>
            <example>Content-Language: en, de</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ContentLength">
            <summary>
            The Content-Length entity-header field indicates the size of
            the entity-body, in decimal number of OCTETs, sent to the
            recipient or, in the case of the HEAD method, the size of the
            entity-body that would have been sent if the request had been
            a GET request.
            </summary>
            <example>Content-Length: 3495</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ContentLocation">
            <summary>
            The Content-Location entity-header field MAY be used to supply
            the resource location for the entity enclosed in the message
            when that entity is accessible from a location separate from
            the requested resource's URI.
            If the Content-Location is a relative URI, the relative URI is
            interpreted relative to the Request-URI. 
            </summary>
            <example>Content-Location: ../test.html</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ContentMD5">
            <summary>
            The Content-MD5 entity-header field, is an MD5 digest of the
            entity-body for the purpose of providing an end-to-end
            message integrity check (MIC) of the entity-body.
            Note: a MIC is good for detecting accidental modification
            of the entity-body in transit, but is not proof against
            malicious attacks.
            </summary>
            <example>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
            <seealso cref="!:http://tools.ietf.org/html/rfc1864"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ContentRange">
            <summary>
            The Content-Range entity-header is sent with a partial
            entity-body to specify where in the full entity-body the
            partial body should be applied.
            The header SHOULD indicate the total length of the full
            entity-body, unless this length is unknown or difficult
            to determine. The asterisk "*" character means that the
            instance-length is unknown at the time when the response
            was generated.
            Partinal content replies must be sent using the response
            code 206 (Partial content). When an HTTP message includes
            the content of multiple ranges, these are transmitted as a
            multipart message using the media type "multipart/byteranges".
            Syntactically invalid content-range reqeuests, SHOULD be
            treated as if the invalid Range header field did not exist.
            Normally, this means return a 200 response containing the
            full entity.
            If the server receives a request (other than one including
            an If-Range request-header field) with an unsatisfiable
            Range request-header field, it SHOULD return a response
            code of 416 (Requested range not satisfiable).
            </summary>
            <example>Content-Range: bytes 21010-47021/47022</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ContentType">
            <summary>
            The Content-Type entity-header field indicates the media
            type of the entity-body sent to the recipient or, in the
            case of the HEAD method, the media type that would have
            been sent had the request been a GET.
            </summary>
            <example>Content-Type: text/html; charset=ISO-8859-4</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ContentDisposition">
            <summary>
            The Content-Disposition response header field is used to convey
            additional information about how to process the response payload, and
            also can be used to attach additional metadata, such as the filename
            to use when saving the response payload locally.
            </summary>
            <example>Content-Disposition: attachment; filename="filename.jpg"</example>
            <seealso cref="!:https://tools.ietf.org/html/rfc6266"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Date">
            <summary>
            The Date general-header field represents the date and time
            at which the message was originated, having the same semantics
            as orig-date in RFC 822. The field value is an HTTP-date, as
            described in section 3.3.1; it MUST be sent in RFC 1123 [8]-date
            format.
            
            Origin servers MUST include a Date header field in all responses,
            except in these cases:
            
            If the response status code is 100 (Continue) or 101 (Switching
            Protocols), the response MAY include a Date header field, at the
            server's option.
            
            If the response status code conveys a server error, e.g. 500
            (Internal Server Error) or 503 (Service Unavailable), and it is
            inconvenient or impossible to generate a valid Date.
            
            If the server does not have a clock that can provide a reasonable
            approximation of the current time, its responses MUST NOT include
            a Date header field. In this case, the rules in section 14.18.1
            MUST be followed.
            
            A received message that does not have a Date header field MUST be
            assigned one by the recipient if the message will be cached by that
            recipient or gatewayed via a protocol which requires a Date. An HTTP
            implementation without a clock MUST NOT cache responses without
            revalidating them on every use. An HTTP cache, especially a shared
            cache, SHOULD use a mechanism, such as NTP [28], to synchronize its
            clock with a reliable external standard.
            
            Clients SHOULD only send a Date header field in messages that include
            an entity-body, as in the case of the PUT and POST requests, and even
            then it is optional. A client without a clock MUST NOT send a Date
            header field in a request.
            
            The HTTP-date sent in a Date header SHOULD NOT represent a date and
            time subsequent to the generation of the message. It SHOULD represent
            the best available approximation of the date and time of message
            generation, unless the implementation has no means of generating a
            reasonably accurate date and time. In theory, the date ought to
            represent the moment just before the entity is generated. In practice,
            the date can be generated at any time during the message origination
            without affecting its semantic value.
            
            Clockless Origin Server Operation
            Some origin server implementations might not have a clock available.
            An origin server without a clock MUST NOT assign Expires or Last-Modified
            values to a response, unless these values were associated with the
            resource by a system or user with a reliable clock. It MAY assign an
            Expires value that is known, at or before server configuration time,
            to be in the past (this allows "pre-expiration" of responses without
            storing separate Expires values for each resource).
            </summary>
            <example>Date: Tue, 15 Nov 1994 08:12:31 GMT</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Pragma">
            <summary>
            The Pragma general-header field is used to include implementation-
            specific directives that might apply to any recipient along the
            request/response chain. All pragma directives specify optional
            behavior from the viewpoint of the protocol; however, some systems
            MAY require that behavior be consistent with the directives.
            
            When the no-cache directive is present in a request message, an
            application SHOULD forward the request toward the origin server
            even if it has a cached copy of what is being requested. This
            pragma directive has the same semantics as the no-cache cache-
            directive (see section 14.9) and is defined here for backward
            compatibility with HTTP/1.0. Clients SHOULD include both header
            fields when a no-cache request is sent to a server not known to
            be HTTP/1.1 compliant. 
            
            Pragma directives MUST be passed through by a proxy or gateway
            application, regardless of their significance to that application,
            since the directives might be applicable to all recipients along
            the request/response chain. It is not possible to specify a pragma
            for a specific recipient; however, any pragma directive not relevant
            to a recipient SHOULD be ignored by that recipient.
            
            HTTP/1.1 caches SHOULD treat "Pragma: no-cache" as if the client
            had sent "Cache-Control: no-cache". No new Pragma directives will
            be defined in HTTP. 
            </summary>
            <example>Pragma: no-cache</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Trailer">
            <summary>
            The Trailer general field value indicates that the given
            set of header fields is present in the trailer of a
            message encoded with chunked transfer-coding.
            
            An HTTP/1.1 message SHOULD include a Trailer header field
            in a message using chunked transfer-coding with a non-empty
            trailer. Doing so allows the recipient to know which header
            fields to expect in the trailer.
            
            If no Trailer header field is present, the trailer SHOULD NOT
            include any header fields. See section 3.6.1 for restrictions
            on the use of trailer fields in a "chunked" transfer-coding.
            
            Message header fields listed in the Trailer header field MUST
            NOT include the following header fields:
              - Transfer-Encoding
              - Content-Length
              - Trailer
            </summary>
            <example>Trailer : Max-Forwards</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Via">
            <summary>
            The Via general-header field MUST be used by gateways
            and proxies to indicate the intermediate protocols and
            recipients between the user agent and the server on
            requests, and between the origin server and the client
            on responses.
            </summary>
            <example>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.TransferEncoding">
            <summary>
            The Transfer-Encoding general-header field indicates what (if any)
            type of transformation has been applied to the message body in
            order to safely transfer it between the sender and the recipient.
            This differs from the content-coding in that the transfer-coding
            is a property of the message, not of the entity. 
            
            If multiple encodings have been applied to an entity, the transfer-
            codings MUST be listed in the order in which they were applied.
            Additional information about the encoding parameters MAY be
            provided by other entity-header fields not defined by this
            specification. 
            </summary>
            <example>Transfer-Encoding: chunked</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Upgrade">
            <summary>
            The Upgrade general-header allows the client to specify what
            additional communication protocols it supports and would like
            to use if the server finds it appropriate to switch protocols.
            The server MUST use the Upgrade header field within a 101
            (Switching Protocols) response to indicate which protocol(s)
            are being switched.
            
            The Upgrade header field is intended to provide a simple
            mechanism for transition from HTTP/1.1 to some other,
            incompatible protocol. It does so by allowing the client to
            advertise its desire to use another protocol, such as a later
            version of HTTP with a higher major version number, even though
            the current request has been made using HTTP/1.1. This eases
            the difficult transition between incompatible protocols by
            allowing the client to initiate a request in the more commonly
            supported protocol while indicating to the server that it would
            like to use a "better" protocol if available (where "better"
            is determined by the server, possibly according to the nature
            of the method and/or resource being requested).
            
            The Upgrade header field only applies to switching application-
            layer protocols upon the existing transport-layer connection.
            Upgrade cannot be used to insist on a protocol change; its
            acceptance and use by the server is optional. The capabilities
            and nature of the application-layer communication after the
            protocol change is entirely dependent upon the new protocol
            chosen, although the first action after changing the protocol
            MUST be a response to the initial HTTP request containing the
            Upgrade header field.
            
            The Upgrade header field only applies to the immediate
            connection. Therefore, the upgrade keyword MUST be supplied
            within a Connection header field (section 14.10) whenever
            Upgrade is present in an HTTP/1.1 message.
            
            The Upgrade header field cannot be used to indicate a switch
            to a protocol on a different connection. For that purpose, it
            is more appropriate to use a 301, 302, 303, or 305 redirection
            response.
            
            This specification only defines the protocol name "HTTP" for
            use by the family of Hypertext Transfer Protocols, as defined
            by the HTTP version rules of section 3.1 and future updates
            to this specification. Any token can be used as a protocol
            name; however, it will only be useful if both the client and
            server associate the name with the same protocol.
            </summary>
            <example>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.SecWebSocketKey">
            <summary>
            Sec-Web-SocketKey.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.SecWebSocketProtocol">
            <summary>
            Sec-Web-SocketProtocol.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.SecWebSocketVersion">
            <summary>
            Sec-WebSocket-Version.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.SecWebSocketAccept">
            <summary>
            Sec-WebSocket-Accept.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Accept">
            <summary>
            The Accept request-header field can be used to specify certain
            media types which are acceptable for the response. Accept
            headers can be used to indicate that the request is specifically
            limited to a small set of desired types, as in the case of a
            request for an in-line image.
            
            The asterisk '*' character is used to group media types into
            ranges, with '*/*' indicating all media types and 'type/*'
            indicating all subtypes of that type. The media-range MAY include
            media type parameters that are applicable to that range.
            
            Each media-range MAY be followed by one or more accept-params,
            beginning with the 'q' parameter for indicating a relative quality
            factor. The first 'q' parameter (if any) separates the media-range
            parameter(s) from the accept-params. Quality factors allow the user
            or user agent to indicate the relative degree of preference for
            that media-range, using the qvalue scale from 0 to 1 (section 3.9).
            The default value is q=1.
            
            Note: Use of the 'q' parameter name to separate media type
            parameters from Accept extension parameters is due to historical
            practice. Although this prevents any media type parameter named
            'q' from being used with a media range, such an event is believed
            to be unlikely given the lack of any 'q' parameters in the IANA
            media type registry and the rare usage of any media type parameters
            in Accept. Future media types are discouraged from registering any
            parameter named 'q'.
            
            The example Accept: audio/*; q=0.2, audio/basic
            SHOULD be interpreted as 'I prefer audio/basic, but send me any
            audio type if it is the best available after an 80% mark-down in
            quality.'
            
            If no Accept header field is present, then it is assumed that the
            client accepts all media types. If an Accept header field is present,
            and if the server cannot send a response which is acceptable
            according to the combined Accept field value, then the server SHOULD
            send a 406 (not acceptable) response.
            
            A more elaborate example is:
               Accept: text/plain; q=0.5, text/html,
                       text/x-dvi; q=0.8, text/x-c
            Verbally, this would be interpreted as 'text/html and text/x-c are
            the preferred media types, but if they do not exist, then send the
            text/x-dvi entity, and if that does not exist, send the text/plain
            entity.'
            
            Media ranges can be overridden by more specific media ranges or
            specific media types. If more than one media range applies to a
            given type, the most specific reference has precedence. For example,
            
               Accept: text/*, text/html, text/html;level=1, */*
               have the following precedence:
                  1) text/html;level=1
                  2) text/html
                  3) text/*
                  4) */*
                  
            The media type quality factor associated with a given type is
            determined by finding the media range with the highest precedence
            which matches that type. For example, 
            
               Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,
                       text/html;level=2;q=0.4, */*;q=0.5
                       
            would cause the following values to be associated:
            
               text/html;level=1         = 1
               text/html                 = 0.7
               text/plain                = 0.3
               image/jpeg                = 0.5
               text/html;level=2         = 0.4
               text/html;level=3         = 0.7
               
            Note: A user agent might be provided with a default set of
            quality values for certain media ranges. However, unless the
            user agent is a closed system which cannot interact with other
            rendering agents, this default set ought to be configurable by
            the user.
            </summary>
            <example>Accept: text/plain; q=0.5, text/html</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.AcceptCharset">
            <summary>
            The Accept-Charset request-header field can be used to indicate
            what character sets are acceptable for the response. This field
            allows clients capable of understanding more comprehensive or
            special- purpose character sets to signal that capability to a
            server which is capable of representing documents in those
            character sets.
            
            Character set values are described in section 3.4. Each charset
            MAY be given an associated quality value which represents the
            user's preference for that charset. The default value is q=1.
            
            An example is Accept-Charset: iso-8859-5, unicode-1-1;q=0.8
            
            The special value '*', if present in the Accept-Charset field,
            matches every character set (including ISO-8859-1) which is not
            mentioned elsewhere in the Accept-Charset field. If no '*' is
            present in an Accept-Charset field, then all character sets not
            explicitly mentioned get a quality value of 0, except for
            ISO-8859-1, which gets a quality value of 1 if not explicitly
            mentioned.
            
            If no Accept-Charset header is present, the default is that any
            character set is acceptable. If an Accept-Charset header is
            present, and if the server cannot send a response which is
            acceptable according to the Accept-Charset header, then the
            server SHOULD send an error response with the 406 (not
            acceptable) status code, though the sending of an unacceptable
            response is also allowed.
            </summary>
            <example>Accept-Charset: iso-8859-5, unicode-1-1;q=0.8</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.AcceptEncoding">
            <summary>
            The Accept-Encoding request-header field is similar to Accept,
            but restricts the content-codings (section 3.5) that are
            acceptable in the response.
            
            A server tests whether a content-coding is acceptable, according
            to an Accept-Encoding field, using these rules:
            
            If the content-coding is one of the content-codings listed in
            the Accept-Encoding field, then it is acceptable, unless it is
            accompanied by a qvalue of 0. (As defined in section 3.9, a
            qvalue of 0 means "not acceptable.")
            
            The special "*" symbol in an Accept-Encoding field matches any
            available content-coding not explicitly listed in the header field.
            
            If multiple content-codings are acceptable, then the acceptable
            content-coding with the highest non-zero qvalue is preferred.
            
            The "identity" content-coding is always acceptable, unless
            specifically refused because the Accept-Encoding field includes
            "identity;q=0", or because the field includes "*;q=0" and does
            not explicitly include the "identity" content-coding. If the
            Accept-Encoding field-value is empty, then only the "identity"
            encoding is acceptable.
            
            If an Accept-Encoding field is present in a request, and if the
            server cannot send a response which is acceptable according to
            the Accept-Encoding header, then the server SHOULD send an error
            response with the 406 (Not Acceptable) status code.
            
            If no Accept-Encoding field is present in a request, the server
            MAY assume that the client will accept any content coding. In
            this case, if "identity" is one of the available content-codings,
            then the server SHOULD use the "identity" content-coding, unless
            it has additional information that a different content-coding is
            meaningful to the client.
            
            Note: If the request does not include an Accept-Encoding field, and
            if the "identity" content-coding is unavailable, then content-codings
            commonly understood by HTTP/1.0 clients (i.e., "gzip" and "compress")
            are preferred; some older clients improperly display messages sent
            with other content-codings. The server might also make this decision
            based on information about the particular user-agent or client.
            </summary>
            <example>Accept-Encoding: compress, gzip</example>
            <example>Accept-Encoding:</example>
            <example>Accept-Encoding: *</example>
            <example>Accept-Encoding: compress;q=0.5, gzip;q=1.0</example>
            <example>Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.AcceptLanguage">
            <summary>
            The Accept-Language request-header field is similar to Accept,
            but restricts the set of natural languages that are preferred
            as a response to the request. Language tags are defined in
            section 3.10.
            
            Each language-range MAY be given an associated quality value
            which represents an estimate of the user's preference for the
            languages specified by that range. The quality value defaults
            to "q=1". For example,
               Accept-Language: da, en-gb;q=0.8, en;q=0.7
            would mean: "I prefer Danish, but will accept British English
            and other types of English." A language-range matches a
            language-tag if it exactly equals the tag, or if it exactly
            equals a prefix of the tag such that the first tag character
            following the prefix is "-". The special range "*", if present
            in the Accept-Language field, matches every tag not matched by
            any other range present in the Accept-Language field.
            
            Note: This use of a prefix matching rule does not imply that
            language tags are assigned to languages in such a way that it
            is always true that if a user understands a language with a
            certain tag, then this user will also understand all languages
            with tags for which this tag is a prefix. The prefix rule simply
            allows the use of prefix tags if this is the case.
            
            The language quality factor assigned to a language-tag by the
            Accept-Language field is the quality value of the longest
            language-range in the field that matches the language-tag. If
            no language-range in the field matches the tag, the language
            quality factor assigned is 0. If no Accept-Language header is
            present in the request, the server SHOULD assume that all
            languages are equally acceptable. If an Accept-Language header
            is present, then all languages which are assigned a quality
            factor greater than 0 are acceptable.
            
            It might be contrary to the privacy expectations of the user
            to send an Accept-Language header with the complete linguistic
            preferences of the user in every request. For a discussion of
            this issue, see section 15.1.4.
            
            As intelligibility is highly dependent on the individual user,
            it is recommended that client applications make the choice of
            linguistic preference available to the user. If the choice is
            not made available, then the Accept-Language header field MUST
            NOT be given in the request.
            
            Note: When making the choice of linguistic preference available
            to the user, we remind implementors of the fact that users are
            not familiar with the details of language matching as described
            above, and should provide appropriate guidance. As an example,
            users might assume that on selecting "en-gb", they will be served
            any kind of English document if British English is not available.
            A user agent might suggest in such a case to add "en" to get the
            best matching behavior.
            </summary>
            <example>Accept-Language: da, en-gb;q=0.8, en;q=0.7</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.AcceptRanges">
            <summary>
            The Accept-Ranges response-header field allows the server to
            indicate its acceptance of range requests for a resource:
            
            Origin servers that accept byte-range requests MAY send
               Accept-Ranges: bytes
            but are not required to do so. Clients MAY generate byte-range
            requests without having received this header for the resource
            involved. Range units are defined in section 3.12.
            
            Servers that do not accept any kind of range request for a
            resource MAY send
               Accept-Ranges: none
            to advise the client not to attempt a range request.
            </summary>
            <example>Accept-Ranges: bytes</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Authorization">
            <summary>
            A user agent that wishes to authenticate itself with a
            server--usually, but not necessarily, after receiving a 401
            response--does so by including an Authorization request-header
            field with the request. The Authorization field value consists
            of credentials containing the authentication information of
            the user agent for the realm of the resource being requested.
            
            HTTP access authentication is described in "HTTP Authentication:
            Basic and Digest Access Authentication" [43]. If a request is
            authenticated and a realm specified, the same credentials SHOULD
            be valid for all other requests within this realm (assuming that
            the authentication scheme itself does not require otherwise, such
            as credentials that vary according to a challenge value or using
            synchronized clocks).
            
            When a shared cache (see section 13.7) receives a request
            containing an Authorization field, it MUST NOT return the
            corresponding response as a reply to any other request, unless
            one of the following specific exceptions holds:
            
            If the response includes the "s-maxage" cache-control directive,
            the cache MAY use that response in replying to a subsequent
            request. But (if the specified maximum age has passed) a proxy
            cache MUST first revalidate it with the origin server, using the
            request-headers from the new request to allow the origin server
            to authenticate the new request. (This is the defined behavior
            for s-maxage.) If the response includes "s-maxage=0", the proxy
            MUST always revalidate it before re-using it.
            
            If the response includes the "must-revalidate" cache-control
            directive, the cache MAY use that response in replying to a
            subsequent request. But if the response is stale, all caches
            MUST first revalidate it with the origin server, using the
            request-headers from the new request to allow the origin
            server to authenticate the new request.
            
            If the response includes the "public" cache-control directive,
            it MAY be returned in reply to any subsequent request.
            </summary>
            <example>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Depth">
            <summary>
            The Depth request header is used with methods executed on
            resources that could potentially have internal members to
            indicate whether the method is to be applied only to the
            resource ("Depth: 0"), to the resource and its internal
            members only ("Depth: 1"), or the resource and all its
            members ("Depth: infinity").
            
            The Depth header is only supported if a method's definition
            explicitly provides for such support.
            
            The following rules are the default behavior for any method
            that supports the Depth header. A method may override these
            defaults by defining different behavior in its definition.
            
            Methods that support the Depth header may choose not to
            support all of the header's values and may define, on a
            case-by-case basis, the behavior of the method if a Depth
            header is not present. For example, the MOVE method only
            supports "Depth: infinity", and if a Depth header is not
            present, it will act as if a "Depth: infinity" header had
            been applied.
            
            Clients MUST NOT rely upon methods executing on members of
            their hierarchies in any particular order or on the execution
            being atomic unless the particular method explicitly provides
            such guarantees.
            
            Upon execution, a method with a Depth header will perform as
            much of its assigned task as possible and then return a
            response specifying what it was able to accomplish and what
            it failed to do.
            
            So, for example, an attempt to COPY a hierarchy may result
            in some of the members being copied and some not.
            
            By default, the Depth header does not interact with other
            headers. That is, each header on a request with a Depth
            header MUST be applied only to the Request-URI if it applies
            to any resource, unless specific Depth behavior is defined
            for that header.
            
            If a source or destination resource within the scope of the
            Depth header is locked in such a way as to prevent the
            successful execution of the method, then the lock token for
            that resource MUST be submitted with the request in the If
            request header.
            
            The Depth header only specifies the behavior of the method
            with regards to internal members. If a resource does not
            have internal members, then the Depth header MUST be ignored.
            </summary>
            <example>Depth: 0</example>
            <example>Depth: 1</example>
            <example>Depth: infinity</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Destination">
            <summary>
            The Destination request header specifies the URI that
            identifies a destination resource for methods such as
            COPY and MOVE, which take two URIs as parameters.
            
            If the Destination value is an absolute-URI (Section 4.3
            of [RFC3986]), it may name a different server (or different
            port or scheme). If the source server cannot attempt a copy
            to the remote server, it MUST fail the request. Note that
            copying and moving resources to remote servers is not fully
            defined in this specification (e.g., specific error conditions).
            
            If the Destination value is too long or otherwise unacceptable,
            the server SHOULD return 400 (Bad Request), ideally with helpful
            information in an error body.
            </summary>
            <example>Destination : index-old.html</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Expect">
            <summary>
            The Expect request-header field is used to indicate that
            particular server behaviors are required by the client.
            
            A server that does not understand or is unable to comply
            with any of the expectation values in the Expect field of
            a request MUST respond with appropriate error status. The
            server MUST respond with a 417 (Expectation Failed) status
            if any of the expectations cannot be met or, if there are
            other problems with the request, some other 4xx status.
            
            This header field is defined with extensible syntax to
            allow for future extensions. If a server receives a request
            containing an Expect field that includes an expectation-
            extension that it does not support, it MUST respond with
            a 417 (Expectation Failed) status.
            
            Comparison of expectation values is case-insensitive for
            unquoted tokens (including the 100-continue token), and
            is case-sensitive for quoted-string expectation-extensions.
            
            The Expect mechanism is hop-by-hop: that is, an HTTP/1.1
            proxy MUST return a 417 (Expectation Failed) status if it
            receives a request with an expectation that it cannot meet.
            However, the Expect request-header itself is end-to-end;
            it MUST be forwarded if the request is forwarded.
            
            Many older HTTP/1.0 and HTTP/1.1 applications do not
            understand the Expect header.
            
            See section 8.2.3 for the use of the 100 (continue) status.
            </summary>
            <example>Expect: 100-continue</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.From">
            <summary> 
            The From request-header field, if given, SHOULD contain an 
            Internet e-mail address for the human user who controls the 
            requesting user agent. The address SHOULD be machine-usable, 
            as defined by "mailbox" in RFC 822 [9] as updated by 
            RFC 1123 [8]: 
             
            This header field MAY be used for logging purposes and as a 
            means for identifying the source of invalid or unwanted 
            requests. It SHOULD NOT be used as an insecure form of 
            access protection. The interpretation of this field is that 
            the request is being performed on behalf of the person given, 
            who accepts responsibility for the method performed. In 
            particular, robot agents SHOULD include this header so that 
            the person responsible for running the robot can be contacted 
            if problems occur on the receiving end. 
             
            The Internet e-mail address in this field MAY be separate 
            from the Internet host which issued the request. For example, 
            when a request is passed through a proxy the original issuer's 
            address SHOULD be used. 
             
            The client SHOULD NOT send the From header field without the 
            user's approval, as it might conflict with the user's privacy 
            interests or their site's security policy. It is strongly 
            recommended that the user be able to disable, enable, and 
            modify the value of this field at any time prior to a request. 
            </summary> 
            <example>From: webmaster@w3.org</example> 
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/> 
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Host">
            <summary>
            The Host request-header field specifies the Internet host
            and port number of the resource being requested, as obtained
            from the original URI given by the user or referring
            resource (generally an HTTP URL, as described in section
            3.2.2). The Host field value MUST represent the naming
            authority of the origin server or gateway given by the
            original URL. This allows the origin server or gateway to
            differentiate between internally-ambiguous URLs, such as the
            root "/" URL of a server for multiple host names on a single
            IP address. 
            
            A "host" without any trailing port information implies the
            default port for the service requested (e.g., "80" for an
            HTTP URL). For example, a request on the origin server for
            &lt;http://www.w3.org/pub/WWW/&gt; would properly include:
            
            GET /pub/WWW/ HTTP/1.1
            Host: www.w3.org
            
            A client MUST include a Host header field in all HTTP/1.1
            request messages . If the requested URI does not include
            an Internet host name for the service being requested,
            then the Host header field MUST be given with an empty
            value. An HTTP/1.1 proxy MUST ensure that any request
            message it forwards does contain an appropriate Host
            header field that identifies the service being requested
            by the proxy. All Internet-based HTTP/1.1 servers MUST
            respond with a 400 (Bad Request) status code to any
            HTTP/1.1 request message which lacks a Host header field.
            
            See sections 5.2 and 19.6.1.1 for other requirements
            relating to Host.
            </summary>
            <example>Host: www.w3.org</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <!-- Badly formed XML comment ignored for member "F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.If" -->
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.IfMatch">
            <summary>
            The If-Match request-header field is used with a method to make
            it conditional. A client that has one or more entities previously
            obtained from the resource can verify that one of those entities
            is current by including a list of their associated entity tags in
            the If-Match header field. Entity tags are defined in section
            3.11. The purpose of this feature is to allow efficient updates
            of cached information with a minimum amount of transaction
            overhead. It is also used, on updating requests, to prevent
            inadvertent modification of the wrong version of a resource.
            As a special case, the value "*" matches any current entity of
            the resource.
            
            If any of the entity tags match the entity tag of the entity that
            would have been returned in the response to a similar GET request
            (without the If-Match header) on that resource, or if "*" is given
            and any current entity exists for that resource, then the server
            MAY perform the requested method as if the If-Match header field
            did not exist.
            
            A server MUST use the strong comparison function (see section
            13.3.3) to compare the entity tags in If-Match.
            
            If none of the entity tags match, or if "*" is given and no current
            entity exists, the server MUST NOT perform the requested method,
            and MUST return a 412 (Precondition Failed) response. This behavior
            is most useful when the client wants to prevent an updating method,
            such as PUT, from modifying a resource that has changed since the
            client last retrieved it.
            
            If the request would, without the If-Match header field, result in
            anything other than a 2xx or 412 status, then the If-Match header
            MUST be ignored. 
            
            The meaning of "If-Match: *" is that the method SHOULD be performed
            if the representation selected by the origin server (or by a cache,
            possibly using the Vary mechanism, see section 14.44) exists, and
            MUST NOT be performed if the representation does not exist.
            
            A request intended to update a resource (e.g., a PUT) MAY include
            an If-Match header field to signal that the request method MUST NOT
            be applied if the entity corresponding to the If-Match value (a
            single entity tag) is no longer a representation of that resource.
            This allows the user to indicate that they do not wish the request
            to be successful if the resource has been changed without their
            knowledge.
            
            The result of a request having both an If-Match header field and
            either an If-None-Match or an If-Modified-Since header fields is
            undefined by this specification. 
            </summary>
            <example>If-Match: "xyzzy"</example>
            <example>If-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"</example>
            <example>If-Match: *</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.IfModifiedSince">
            <summary>
            The If-Modified-Since request-header field is used with a method
            to make it conditional: if the requested variant has not been
            modified since the time specified in this field, an entity will
            not be returned from the server; instead, a 304 (not modified)
            response will be returned without any message-body.
            
            If-Modified-Since = "If-Modified-Since" ":" HTTP-date
            An example of the field is: 
            
            If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT
            A GET method with an If-Modified-Since header and no Range header
            requests that the identified entity be transferred only if it has
            been modified since the date given by the If-Modified-Since
            header. The algorithm for determining this includes the following
            cases: 
            
            If the request would normally result in anything other than a 200
            (OK) status, or if the passed If-Modified-Since date is invalid,
            the response is exactly the same as for a normal GET. A date which
            is later than the server's current time is invalid.
            
            If the variant has been modified since the If-Modified-Since date,
            the response is exactly the same as for a normal GET.
            
            If the variant has not been modified since a valid If-Modified-Since
            date, the server SHOULD return a 304 (Not Modified) response.
            
            The purpose of this feature is to allow efficient updates of cached
            information with a minimum amount of transaction overhead.
            
            Note: The Range request-header field modifies the meaning of
            If-Modified-Since; see section 14.35 for full details.
            
            Note: If-Modified-Since times are interpreted by the server, whose
            clock might not be synchronized with the client.
            
            Note: When handling an If-Modified-Since header field, some servers
            will use an exact date comparison function, rather than a less-than
            function, for deciding whether to send a 304 (Not Modified) response.
            To get best results when sending an If-Modified-Since header field
            for cache validation, clients are advised to use the exact date
            string received in a previous Last-Modified header field whenever
            possible.
            
            Note: If a client uses an arbitrary date in the If-Modified-Since
            header instead of a date taken from the Last-Modified header for
            the same request, the client should be aware of the fact that this
            date is interpreted in the server's understanding of time. The
            client should consider unsynchronized clocks and rounding problems
            due to the different encodings of time between the client and
            server. This includes the possibility of race conditions if the
            document has changed between the time it was first requested and
            the If-Modified-Since date of a subsequent request, and the
            possibility of clock-skew-related problems if the If-Modified-Since
            date is derived from the client's clock without correction to the
            server's clock. Corrections for different time bases between
            client and server are at best approximate due to network latency.
            
            The result of a request having both an If-Modified-Since header
            field and either an If-Match or an If-Unmodified-Since header
            fields is undefined by this specification.
            </summary>
            <example>If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.IfNoneMatch">
            <summary>
            The If-None-Match request-header field is used with a method to
            make it conditional. A client that has one or more entities
            previously obtained from the resource can verify that none of
            those entities is current by including a list of their associated
            entity tags in the If-None-Match header field. The purpose of
            this feature is to allow efficient updates of cached information
            with a minimum amount of transaction overhead. It is also used
            to prevent a method (e.g. PUT) from inadvertently modifying an
            existing resource when the client believes that the resource
            does not exist.
            
            As a special case, the value "*" matches any current entity of
            the resource.
            
            If any of the entity tags match the entity tag of the entity
            that would have been returned in the response to a similar GET
            request (without the If-None-Match header) on that resource,
            or if "*" is given and any current entity exists for that
            resource, then the server MUST NOT perform the requested method,
            unless required to do so because the resource's modification
            date fails to match that supplied in an If-Modified-Since header
            field in the request. Instead, if the request method was GET or
            HEAD, the server SHOULD respond with a 304 (Not Modified)
            response, including the cache- related header fields
            (particularly ETag) of one of the entities that matched. For all
            other request methods, the server MUST respond with a status of
            412 (Precondition Failed).
            
            See section 13.3.3 for rules on how to determine if two entities
            tags match. The weak comparison function can only be used with
            GET or HEAD requests.
            
            If none of the entity tags match, then the server MAY perform
            the requested method as if the If-None-Match header field did
            not exist, but MUST also ignore any If-Modified-Since header
            field(s) in the request. That is, if no entity tags match,
            then the server MUST NOT return a 304 (Not Modified) response.
            
            If the request would, without the If-None-Match header field,
            result in anything other than a 2xx or 304 status, then the
            If-None-Match header MUST be ignored. (See section 13.3.4 for
            a discussion of server behavior when both If-Modified-Since
            and If-None-Match appear in the same request.)
            
            The meaning of "If-None-Match: *" is that the method MUST NOT
            be performed if the representation selected by the origin
            server (or by a cache, possibly using the Vary mechanism, see
            section 14.44) exists, and SHOULD be performed if the
            representation does not exist. This feature is intended to be
            useful in preventing races between PUT operations.
            
            The result of a request having both an If-None-Match header
            field and either an If-Match or an If-Unmodified-Since header
            fields is undefined by this specification.
            </summary>
            <example>If-None-Match: "xyzzy"</example>
            <example>If-None-Match: W/"xyzzy"</example>
            <example>If-None-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"</example>
            <example>If-None-Match: W/"xyzzy", W/"r2d2xxxx", W/"c3piozzzz"</example>
            <example>If-None-Match: *</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.IfRange">
            <summary>
            If a client has a partial copy of an entity in its cache, and wishes
            to have an up-to-date copy of the entire entity in its cache, it could
            use the Range request-header with a conditional GET (using either or
            both of If-Unmodified-Since and If-Match.) However, if the condition
            fails because the entity has been modified, the client would then
            have to make a second request to obtain the entire current entity-body.
            
            The If-Range header allows a client to "short-circuit" the second
            request. Informally, its meaning is `if the entity is unchanged, send
            me the part(s) that I am missing; otherwise, send me the entire new
            entity'.
            
               If-Range = "If-Range" ":" ( entity-tag | HTTP-date )
               
            If the client has no entity tag for an entity, but does have a
            Last-Modified date, it MAY use that date in an If-Range header. (The
            server can distinguish between a valid HTTP-date and any form of
            entity-tag by examining no more than two characters.) The If-Range
            header SHOULD only be used together with a Range header, and MUST be
            ignored if the request does not include a Range header, or if the
            server does not support the sub-range operation.
            
            If the entity tag given in the If-Range header matches the current
            entity tag for the entity, then the server SHOULD provide the
            specified sub-range of the entity using a 206 (Partial content)
            response. If the entity tag does not match, then the server SHOULD
            return the entire entity using a 200 (OK) response.
            </summary>
            <example>If-Range: "737060cd8c284d8af7ad3082f209582d"</example>
            <example>If-Range: Sat, 29 Oct 1994 19:43:31 GMT</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.IfUnmodifiedSince">
            <summary>
            The If-Unmodified-Since request-header field is used with a method
            to make it conditional. If the requested resource has not been
            modified since the time specified in this field, the server SHOULD
            perform the requested operation as if the If-Unmodified-Since
            header were not present.
            
            If the requested variant has been modified since the specified time,
            the server MUST NOT perform the requested operation, and MUST return
            a 412 (Precondition Failed).
            
            If the request normally (i.e., without the If-Unmodified-Since
            header) would result in anything other than a 2xx or 412 status,
            the If-Unmodified-Since header SHOULD be ignored.
            
            If the specified date is invalid, the header is ignored.
            
            The result of a request having both an If-Unmodified-Since header
            field and either an If-None-Match or an If-Modified-Since header
            fields is undefined by this specification.
            </summary>
            <example>If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.LockToken">
            <summary>
            The Lock-Token request header is used with the UNLOCK method
            to identify the lock to be removed. The lock token in the
            Lock-Token request header MUST identify a lock that contains
            the resource identified by Request-URI as a member.
            
            The Lock-Token response header is used with the LOCK method
            to indicate the lock token created as a result of a successful
            LOCK request to create a new lock.
            </summary>
            <example>Lock-Token: Coded-URL</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.MaxForwards">
            <summary>
            The Max-Forwards request-header field provides a mechanism
            with the TRACE (section 9.8) and OPTIONS (section 9.2)
            methods to limit the number of proxies or gateways that can
            forward the request to the next inbound server. This can be
            useful when the client is attempting to trace a request
            chain which appears to be failing or looping in mid-chain.
            
            The Max-Forwards value is a decimal integer indicating the
            remaining number of times this request message may be
            forwarded.
            
            Each proxy or gateway recipient of a TRACE or OPTIONS request
            containing a Max-Forwards header field MUST check and update
            its value prior to forwarding the request. If the received
            value is zero (0), the recipient MUST NOT forward the request;
            instead, it MUST respond as the final recipient. If the
            received Max-Forwards value is greater than zero, then the
            forwarded message MUST contain an updated Max-Forwards field
            with a value decremented by one (1).
            
            The Max-Forwards header field MAY be ignored for all other
            methods defined by this specification and for any extension
            methods for which it is not explicitly referred to as part of
            that method definition.
            </summary>
            <example>Max-Forwards: 10</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Overwrite">
            <summary>
            The Overwrite request header specifies whether the server should
            overwrite a resource mapped to the destination URL during a COPY
            or MOVE. A value of "F" states that the server must not perform
            the COPY or MOVE operation if the destination URL does map to a
            resource. If the overwrite header is not included in a COPY or
            MOVE request, then the resource MUST treat the request as if it
            has an overwrite header of value "T". While the Overwrite header
            appears to duplicate the functionality of using an "If-Match: *"
            header (see [RFC2616]), If-Match applies only to the Request-URI,
            and not to the Destination of a COPY or MOVE.
            
            If a COPY or MOVE is not performed due to the value of the Overwrite
            header, the method MUST fail with a 412 (Precondition Failed) status
            code. The server MUST do authorization checks before checking this
            or any conditional header.
            
            All DAV-compliant resources MUST support the Overwrite header.
            </summary>
            <example>Overwrite: T</example>
            <example>Overwrite: F</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ProxyAuthorization">
            <summary>
            The Proxy-Authorization request-header field allows the client
            to identify itself (or its user) to a proxy which requires
            authentication. The Proxy-Authorization field value consists
            of credentials containing the authentication information of
            the user agent for the proxy and/or realm of the resource
            being requested.
            
            The HTTP access authentication process is described in "HTTP
            Authentication: Basic and Digest Access Authentication" [43].
            Unlike Authorization, the Proxy-Authorization header field
            applies only to the next outbound proxy that demanded
            authentication using the Proxy- Authenticate field. When
            multiple proxies are used in a chain, the Proxy-Authorization
            header field is consumed by the first outbound proxy that was
            expecting to receive credentials. A proxy MAY relay the
            credentials from the client request to the next proxy if that
            is the mechanism by which the proxies cooperatively
            authenticate a given request.
            </summary>
            <example>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Range">
            <summary>
            Since all HTTP entities are represented in HTTP messages as
            sequences of bytes, the concept of a byte range is meaningful
            for any HTTP entity. (However, not all clients and servers
            need to support byte- range operations.)
            
            Byte range specifications in HTTP apply to the sequence of
            bytes in the entity-body (not necessarily the same as the
            message-body).
            
            A byte range operation MAY specify a single range of bytes,
            or a set of ranges within a single entity.
            
            The first-byte-pos value in a byte-range-spec gives the
            byte-offset of the first byte in a range. The last-byte-pos
            value gives the byte-offset of the last byte in the range;
            that is, the byte positions specified are inclusive. Byte
            offsets start at zero.
            
            If the last-byte-pos value is present, it MUST be greater
            than or equal to the first-byte-pos in that byte-range-spec,
            or the byte- range-spec is syntactically invalid. The
            recipient of a byte-range- set that includes one or more
            syntactically invalid byte-range-spec values MUST ignore the
            header field that includes that byte-range- set.
            
            If the last-byte-pos value is absent, or if the value is
            greater than or equal to the current length of the entity-body,
            last-byte-pos is taken to be equal to one less than the current
            length of the entity- body in bytes.
            
            By its choice of last-byte-pos, a client can limit the number
            of bytes retrieved without knowing the size of the entity.
            
            A suffix-byte-range-spec is used to specify the suffix of the
            entity-body, of a length given by the suffix-length value. (That
            is, this form specifies the last N bytes of an entity-body.) If
            the entity is shorter than the specified suffix-length, the
            entire entity-body is used.
            
            If a syntactically valid byte-range-set includes at least one
            byte- range-spec whose first-byte-pos is less than the current
            length of the entity-body, or at least one suffix-byte-range-spec
            with a non- zero suffix-length, then the byte-range-set is
            satisfiable. Otherwise, the byte-range-set is unsatisfiable.
            If the byte-range-set is unsatisfiable, the server SHOULD return
            a response with a status of 416 (Requested range not satisfiable).
            Otherwise, the server SHOULD return a response with a status of
            206 (Partial Content) containing the satisfiable ranges of the
            entity-body.
            
            Examples of byte-ranges-specifier values (assuming an entity-body
            of length 10000):
            
            The first 500 bytes (byte offsets 0-499, inclusive):
            bytes=0-499
            
            The second 500 bytes (byte offsets 500-999, inclusive):
            bytes=500-999
            
            The final 500 bytes (byte offsets 9500-9999, inclusive):
            bytes=-500
            bytes=9500-
            
            The first and last bytes only (bytes 0 and 9999):
            bytes=0-0,-1
            
            Several legal but not canonical specifications of the second
            500 bytes (byte offsets 500-999, inclusive):
            bytes=500-600,601-999
            bytes=500-700,601-999
            
            HTTP retrieval requests using conditional or unconditional GET
            methods MAY request one or more sub-ranges of the entity, instead
            of the entire entity, using the Range request header, which
            applies to the entity returned as the result of the request:
            
            A server MAY ignore the Range header. However, HTTP/1.1 origin
            servers and intermediate caches ought to support byte ranges when
            possible, since Range supports efficient recovery from partially
            failed transfers, and supports efficient partial retrieval of
            large entities.
            
            If the server supports the Range header and the specified range or
            ranges are appropriate for the entity:
            
            The presence of a Range header in an unconditional GET modifies what
            is returned if the GET is otherwise successful. In other words, the
            response carries a status code of 206 (Partial Content) instead of
            200 (OK).
            
            The presence of a Range header in a conditional GET (a request using
            one or both of If-Modified-Since and If-None-Match, or one or both
            of If-Unmodified-Since and If-Match) modifies what is returned if
            the GET is otherwise successful and the condition is true. It does
            not affect the 304 (Not Modified) response returned if the
            conditional is false.
            
            In some cases, it might be more appropriate to use the If-Range
            header (see section 14.27) in addition to the Range header.
            
            If a proxy that supports ranges receives a Range request, forwards
            the request to an inbound server, and receives an entire entity in
            reply, it SHOULD only return the requested range to its client. It
            SHOULD store the entire received response in its cache if that is
            consistent with its cache allocation policies.
            </summary>
            <example>Range: bytes=500-999</example>
            <example>Range: bytes=500-600,601-999</example>
            <example>Range: bytes=500-</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Referer">
            <summary>
            The Referer[sic] request-header field allows the client to specify,
            for the server's benefit, the address (URI) of the resource from
            which the Request-URI was obtained (the "referrer", although the
            header field is misspelled.) The Referer request-header allows a
            server to generate lists of back-links to resources for interest,
            logging, optimized caching, etc. It also allows obsolete or
            mistyped links to be traced for maintenance. The Referer field
            MUST NOT be sent if the Request-URI was obtained from a source
            that does not have its own URI, such as input from the user
            keyboard.
            
            If the field value is a relative URI, it SHOULD be interpreted
            relative to the Request-URI. The URI MUST NOT include a fragment.
            See section 15.1.3 for security considerations.
            </summary>
            <example>Referer: DataSources/Overview.html</example>
            <example>Referer: http://www.w3.org/hypertext/DataSources/Overview.html </example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.TE">
            <summary>
            The TE request-header field indicates what extension transfer-codings
            it is willing to accept in the response and whether or not it is
            willing to accept trailer fields in a chunked transfer-coding. Its
            value may consist of the keyword "trailers" and/or a comma-separated
            list of extension transfer-coding names with optional accept
            parameters (as described in section 3.6).
            
            The presence of the keyword "trailers" indicates that the client is
            willing to accept trailer fields in a chunked transfer-coding, as
            defined in section 3.6.1. This keyword is reserved for use with
            transfer-coding values even though it does not itself represent a
            transfer-coding.
            
            The TE header field only applies to the immediate connection.
            Therefore, the keyword MUST be supplied within a Connection header
            field (section 14.10) whenever TE is present in an HTTP/1.1 message.
            
            A server tests whether a transfer-coding is acceptable, according to
            a TE field, using these rules:
            
            The "chunked" transfer-coding is always acceptable. If the keyword
            "trailers" is listed, the client indicates that it is willing to
            accept trailer fields in the chunked response on behalf of itself
            and any downstream clients. The implication is that, if given, the
            client is stating that either all downstream clients are willing to
            accept trailer fields in the forwarded response, or that it will
            attempt to buffer the response on behalf of downstream recipients.
            
            Note: HTTP/1.1 does not define any means to limit the size of a
            chunked response such that a client can be assured of buffering
            the entire response.
            
            If the transfer-coding being tested is one of the transfer-codings
            listed in the TE field, then it is acceptable unless it is accompanied
            by a qvalue of 0. (As defined in section 3.9, a qvalue of 0 means
            "not acceptable.")
            
            If multiple transfer-codings are acceptable, then the acceptable
            transfer-coding with the highest non-zero qvalue is preferred. The
            "chunked" transfer-coding always has a qvalue of 1.
            
            If the TE field-value is empty or if no TE field is present, the only
            transfer-coding is "chunked". A message with no transfer-coding is
            always acceptable.
            </summary>
            <example>TE: deflate</example>
            <example>TE: trailers, deflate;q=0.5</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Timeout">
            <summary>
            Clients MAY include Timeout request headers in their LOCK requests.
            However, the server is not required to honor or even consider these
            requests. Clients MUST NOT submit a Timeout request header with any
            method other than a LOCK method.
            
            The "Second" TimeType specifies the number of seconds that will
            elapse between granting of the lock at the server, and the automatic
            removal of the lock. The timeout value for TimeType "Second" MUST
            NOT be greater than 2^32-1.
            
            See Section 6.6 for a description of lock timeout behavior.
            </summary>
            <example>Timeout: 120</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.UserAgent">
            <summary>
            The User-Agent request-header field contains information about
            the user agent originating the request. This is for statistical
            purposes, the tracing of protocol violations, and automated
            recognition of user agents for the sake of tailoring responses
            to avoid particular user agent limitations. User agents SHOULD
            include this field with requests. The field can contain multiple
            product tokens (section 3.8) and comments identifying the agent
            and any subproducts which form a significant part of the user
            agent. By convention, the product tokens are listed in order of
            their significance for identifying the application. 
            </summary>
            <example>User-Agent: CERN-LineMode/2.15 libwww/2.17b3</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.LastEventId">
            <summary>
            This specification defines an API for opening an HTTP connection
            for receiving push notifications from a server in the form of DOM
            events. The API is designed such that it can be extended to work
            with other push notification schemes such as Push SMS.
            </summary>
            <example>Last-Event-Id: 123</example>
            <seealso cref="!:http://dev.w3.org/html5/eventsource/"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Cookie">
            <summary>
            Send a HTTP cookie.
            </summary>
            <example>Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</example>
            <seealso cref="!:http://en.wikipedia.org/wiki/HTTP_cookie"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.DNT">
            <summary>
            With Do Not Track: A user enables Do Not Track in her web browser.
            She navigates a sequence of popular websites, many of which
            incorporate content from a major advertising network.  The
            advertising network delivers advertisements, but refrains from THIRD-
            PARTY TRACKING of the user.
            </summary>
            <example>DNT: 1</example>
            <seealso cref="!:https://tools.ietf.org/html/draft-mayer-do-not-track-00"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.X_Real_IP">
            <summary>
            Intermediary HTTP proxies might include this field to
            indicate the real IP address of the HTTP client.
            </summary>
            <example>X-Real-IP: 95.91.73.30</example>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.X_Forwarded_For">
            <summary>
            Intermediary HTTP proxies might include this field to
            indicate the real IP address of the HTTP client.
            </summary>
            <example>X-Forwarded-For: 95.91.73.30</example>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.API_Key">
            <summary>
            An API key for authentication.
            </summary>
            <example>API-Key: vfsf87wefh8743tzfgw9f489fh9fgs9z9z237hd208du79ehcv86egfsrf</example>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.X_ClientId">
            <summary>
            A client identification for better logging.
            </summary>
            <example>X-ClientId: Hello world</example>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.X_ExpectedTotalNumberOfItems">
            <summary>
            The expected total number of items within a resource collection.
            </summary>
            <example>X-ExpectedTotalNumberOfItems: 42</example>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.X_FrameOptions">
            <summary>
            The X-Frame-Options HTTP response header can be used to indicate whether or not a browser
            should be allowed to render a page in a &lt;frame&gt;, &lt;iframe&gt; or &lt;object&gt;.
            Sites can use this to avoid clickjacking attacks, by ensuring that their content is not
            embedded into other sites.
            </summary>
            <example>DENY, SAMEORIGIN, ALLOW-FROM https://example.com</example>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.X_Portal">
            <summary>
            This is a non-standard HTTP header to idicate that the intended
            HTTP portal is calling. By this a special HTTP content type processing
            might be implemented, which is different from the processing of other
            HTTP client requests.
            </summary>
            <example>X-Portal: true</example>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Age">
            <summary>
            The Age response-header field conveys the sender's estimate of
            the amount of time since the response (or its revalidation)
            was generated at the origin server. A cached response is
            "fresh" if its age does not exceed its freshness lifetime. Age
            values are calculated as specified in section 13.2.3.
            
            Age values are non-negative decimal integers, representing
            time in seconds.
            
            If a cache receives a value larger than the largest positive
            integer it can represent, or if any of its age calculations
            overflows, it MUST transmit an Age header with a value of
            2147483648 (2^31). An HTTP/1.1 server that includes a cache
            MUST include an Age header field in every response generated
            from its own cache. Caches SHOULD use an arithmetic type of
            at least 31 bits of range.
            </summary>
            <example>Age: 1234</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Allow">
            <summary>
            The Allow entity-header field lists the set of methods
            supported by the resource identified by the Request-URI.
            The purpose of this field is strictly to inform the
            recipient of valid methods associated with the resource.
            An Allow header field MUST be present in a 405 (Method
            Not Allowed) response.
            
            This field cannot prevent a client from trying other
            methods. However, the indications given by the Allow
            header field value SHOULD be followed. The actual set of
            allowed methods is defined by the origin server at the
            time of each request.
            
            The Allow header field MAY be provided with a PUT request
            to recommend the methods to be supported by the new or
            modified resource. The server is not required to support
            these methods and SHOULD include an Allow header in the
            response giving the actual supported methods.
            
            A proxy MUST NOT modify the Allow header field even if it
            does not understand all the methods specified, since the
            user agent might have other means of communicating with
            the origin server.
            </summary>
            <example>Allow: GET, HEAD, PUT</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.DAV">
            <summary>
            This general-header appearing in the response indicates that
            the resource supports the DAV schema and protocol as specified.
            All DAV-compliant resources MUST return the DAV header with
            compliance-class "1" on all OPTIONS responses. In cases where
            WebDAV is only supported in part of the server namespace, an
            OPTIONS request to non-WebDAV resources (including "/") SHOULD
            NOT advertise WebDAV support.
            
            The value is a comma-separated list of all compliance class
            identifiers that the resource supports. Class identifiers may
            be Coded-URLs or tokens (as defined by [RFC2616]). Identifiers
            can appear in any order. Identifiers that are standardized
            through the IETF RFC process are tokens, but other identifiers
            SHOULD be Coded-URLs to encourage uniqueness.
            
            A resource must show class 1 compliance if it shows class 2 or
            3 compliance. In general, support for one compliance class does
            not entail support for any other, and in particular, support for
            compliance class 3 does not require support for compliance class
            2. Please refer to Section 18 for more details on compliance
            classes defined in this specification.
            
            Note that many WebDAV servers do not advertise WebDAV support
            in response to "OPTIONS *".
            
            As a request header, this header allows the client to advertise
            compliance with named features when the server needs that
            information. Clients SHOULD NOT send this header unless a
            standards track specification requires it. Any extension that
            makes use of this as a request header will need to carefully
            consider caching implications.
            </summary>
            <example>DAV : 1</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ETag">
            <summary>
            The ETag response-header field provides the current value
            of the entity tag for the requested variant. The headers
            used with entity tags are described in sections 14.24,
            14.26 and 14.44. The entity tag MAY be used for comparison
            with other entities from the same resource (see section 13.3.3). 
            </summary>
            <example>ETag: "737060cd8c284d8af7ad3082f209582d"</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Expires">
            <summary>
            The Expires entity-header field gives the date/time after
            which the response is considered stale. A stale cache entry
            may not normally be returned by a cache (either a proxy
            cache or a user agent cache) unless it is first validated
            with the origin server (or with an intermediate cache that
            has a fresh copy of the entity). See section 13.2 for
            further discussion of the expiration model.
            
            The presence of an Expires field does not imply that the
            original resource will change or cease to exist at, before,
            or after that time.
            
            The format is an absolute date and time as defined by HTTP-
            date in section 3.3.1; it MUST be in RFC 1123 date format.
            
            If a response includes a Cache-Control field with the
            max-age directive (see section 14.9.3), that directive
            overrides the Expires field.
            
            HTTP/1.1 clients and caches MUST treat other invalid date
            formats, especially including the value "0", as in the past
            (i.e., "already expired").
            
            To mark a response as "already expired," an origin server
            sends an Expires date that is equal to the Date header
            value. (See the rules for expiration calculations in
            section 13.2.4.)
            
            To mark a response as "never expires," an origin server
            sends an Expires date approximately one year from the time
            the response is sent. HTTP/1.1 servers SHOULD NOT send
            Expires dates more than one year in the future.
            
            The presence of an Expires header field with a date value of
            some time in the future on a response that otherwise would
            by default be non-cacheable indicates that the response is
            cacheable, unless indicated otherwise by a Cache-Control
            header field (section 14.9).
            </summary>
            <example>Expires: Thu, 01 Dec 1994 16:00:00 GMT</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.KeepAlive">
            <summary>
            The Keep-Alive general-header field may be used to include diagnostic information and
            other optional parameters associated with the "keep-alive" keyword of the Connection
            header field (Section 10.9). This Keep-Alive field must only be used when the
            "keep-alive" keyword is present (Section 10.9.1).
            
            The Keep-Alive header field and the additional information it provides are optional
            and do not need to be present to indicate a persistent connection has been established.
            The semantics of the Connection header field prevent the Keep-Alive field from being
            accidentally forwarded to downstream connections.
            
            HTTP/1.1 defines semantics for the optional "timeout" and "max" parameters on responses;
            other parameters may be added and the field may also be used on request messages. The
            "timeout" parameter allows the server to indicate, for diagnostic purposes only, the
            amount of time in seconds it is currently allowing between when the response was
            generated and when the next request is received from the client (i.e., the request
            timeout limit). Similarly, the "max" parameter allows the server to indicate the
            maximum additional requests that it will allow on the current persistent connection.
            
            For example, the server may respond to a request for a persistent connection with
            
              Connection: Keep-Alive
              Keep-Alive: timeout=10, max=5
            
            to indicate that the server has selected (perhaps dynamically) a maximum of 5 requests,
            but will timeout the connection if the next request is not received within 10 seconds.
            Although these parameters have no affect on the operational requirements of the
            connection, they are sometimes useful for testing functionality and monitoring server
            behavior.
            </summary>
            <example>Keep-Alive: timeout=10, max=5</example>
            <seealso cref="!:http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01.html"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.LastModified">
            <summary>
            The Last-Modified entity-header field indicates the date
            and time at which the origin server believes the variant
            was last modified.
            
            The exact meaning of this header field depends on the
            implementation of the origin server and the nature of
            the original resource. For files, it may be just the
            file system last-modified time. For entities with
            dynamically included parts, it may be the most recent
            of the set of last-modify times for its component parts.
            For database gateways, it may be the last-update time
            stamp of the record. For virtual objects, it may be the
            last time the internal state changed.
            
            An origin server MUST NOT send a Last-Modified date which
            is later than the server's time of message origination.
            In such cases, where the resource's last modification
            would indicate some time in the future, the server MUST
            replace that date with the message origination date.
            
            An origin server SHOULD obtain the Last-Modified value of
            the entity as close as possible to the time that it
            generates the Date value of its response. This allows a
            recipient to make an accurate assessment of the entity's
            modification time, especially if the entity changes near
            the time that the response is generated.
            
            HTTP/1.1 servers SHOULD send Last-Modified whenever feasible.
            </summary>
            <example>Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Location">
            <summary>
            The Location response-header field is used to redirect the
            recipient to a location other than the Request-URI for
            completion of the request or identification of a new
            resource. For 201 (Created) responses, the Location is that
            of the new resource which was created by the request. For
            3xx responses, the location SHOULD indicate the server's
            preferred URI for automatic redirection to the resource.
            The field value consists of a single absolute URI.
            
            Note: The Content-Location header field (section 14.14)
            differs from Location in that the Content-Location identifies
            the original location of the entity enclosed in the request.
            It is therefore possible for a response to contain header
            fields for both Location and Content-Location. Also see
            section 13.10 for cache requirements of some methods.
            </summary>
            <example>Location: http://www.w3.org/pub/WWW/People.html </example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ProxyAuthenticate">
            <summary>
            The Proxy-Authenticate response-header field MUST be included
            as part of a 407 (Proxy Authentication Required) response. The
            field value consists of a challenge that indicates the
            authentication scheme and parameters applicable to the proxy
            for this Request-URI.
            
            The HTTP access authentication process is described in "HTTP
            Authentication: Basic and Digest Access Authentication" [43].
            Unlike WWW-Authenticate, the Proxy-Authenticate header field
            applies only to the current connection and SHOULD NOT be passed
            on to downstream clients. However, an intermediate proxy might
            need to obtain its own credentials by requesting them from the
            downstream client, which in some circumstances will appear as
            if the proxy is forwarding the Proxy-Authenticate header field.
            </summary>
            <example>Proxy-Authenticate: Basic</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.RetryAfter">
            <summary>
            The Retry-After response-header field can be used with a
            503 (Service Unavailable) response to indicate how long
            the service is expected to be unavailable to the requesting
            client. This field MAY also be used with any 3xx (Redirection)
            response to indicate the minimum time the user-agent is asked
            wait before issuing the redirected request. The value of this
            field can be either an HTTP-date or an integer number of
            seconds (in decimal) after the time of the response. 
            </summary>
            <example>Retry-After: Fri, 31 Dec 1999 23:59:59 GMT</example>
            <example>Retry-After: 120</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Server">
            <summary>
            The Server response-header field contains information about
            the software used by the origin server to handle the request.
            The field can contain multiple product tokens (section 3.8)
            and comments identifying the server and any significant
            subproducts. The product tokens are listed in order of their
            significance for identifying the application.
            
            If the response is being forwarded through a proxy, the proxy
            application MUST NOT modify the Server response-header. Instead,
            it SHOULD include a Via field (as described in section 14.45).
            
            Note: Revealing the specific software version of the server
            might allow the server machine to become more vulnerable to
            attacks against software that is known to contain security
            holes. Server implementors are encouraged to make this field
            a configurable option.
            </summary>
            <example>Server: CERN/3.0 libwww/2.17</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Vary">
            <summary>
            The Vary field value indicates the set of request-header
            fields that fully determines, while the response is fresh,
            whether a cache is permitted to use the response to reply
            to a subsequent request without revalidation. For uncacheable
            or stale responses, the Vary field value advises the user
            agent about the criteria that were used to select the
            representation. A Vary field value of "*" implies that a
            cache cannot determine from the request headers of a
            subsequent request whether this response is the appropriate
            representation. See section 13.6 for use of the Vary header
            field by caches.
            
            An HTTP/1.1 server SHOULD include a Vary header field with
            any cacheable response that is subject to server-driven
            negotiation. Doing so allows a cache to properly interpret
            future requests on that resource and informs the user agent
            about the presence of negotiation on that resource. A server
            MAY include a Vary header field with a non-cacheable response
            that is subject to server-driven negotiation, since this might
            provide the user agent with useful information about the
            dimensions over which the response varies at the time of
            the response.
            
            A Vary field value consisting of a list of field-names signals
            that the representation selected for the response is based on
            a selection algorithm which considers ONLY the listed request-
            header field values in selecting the most appropriate
            representation. A cache MAY assume that the same selection will
            be made for future requests with the same values for the listed
            field names, for the duration of time for which the response is
            fresh.
            
            The field-names given are not limited to the set of standard
            request-header fields defined by this specification. Field
            names are case-insensitive.
            
            A Vary field value of '*' signals that unspecified parameters
            not limited to the request-headers (e.g., the network address
            of the client), play a role in the selection of the response
            representation. The "*" value MUST NOT be generated by a proxy
            server; it may only be generated by an origin server.
            </summary>
            <example>Vary: *</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.WWWAuthenticate">
            <summary>
            The WWW-Authenticate response-header field MUST be included
            in 401 (Unauthorized) response messages. The field value
            consists of at least one challenge that indicates the
            authentication scheme(s) and parameters applicable to the
            Request-URI.
            
            The HTTP access authentication process is described in 'HTTP
            Authentication: Basic and Digest Access Authentication' [43].
            User agents are advised to take special care in parsing the
            WWW-Authenticate field value as it might contain more than
            one challenge, or if more than one WWW-Authenticate header
            field is provided, the contents of a challenge itself can
            contain a comma-separated list of authentication parameters. 
            </summary>
            <example>WWW-Authenticate: Basic</example>
            <seealso cref="!:http://tools.ietf.org/html/rfc2616"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Refresh">
            <summary>
            Used in redirection, or when a new resource has been created. This
            refresh redirects after 5 seconds. This is a proprietary, non-standard
            header extension introduced by Netscape and supported by most web browsers.
            </summary>
            <example>Refresh: 5; url=http://www.w3.org/pub/WWW/People.html </example>
            <seealso cref="!:http://en.wikipedia.org/wiki/List_of_HTTP_header_fields"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.SetCookie">
            <summary>
            Set a HTTP cookie.
            </summary>
            <example>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</example>
            <seealso cref="!:http://en.wikipedia.org/wiki/HTTP_cookie"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.AccessControlAllowOrigin">
            <summary>
            Access-Control-Allow-Origin.
            </summary>
            <example>Access-Control-Allow-Origin: *</example>
            <seealso cref="!:http://en.wikipedia.org/wiki/Cross-origin_resource_sharing"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.AccessControlAllowMethods">
            <summary>
            Access-Control-Allow-Methods.
            </summary>
            <example>Access-Control-Allow-Methods: GET, PUT, POST, DELETE</example>
            <seealso cref="!:http://en.wikipedia.org/wiki/Cross-origin_resource_sharing"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.AccessControlAllowHeaders">
            <summary>
            Access-Control-Allow-Headers.
            </summary>
            <example>Access-Control-Allow-Headers: Content-Type</example>
            <seealso cref="!:http://en.wikipedia.org/wiki/Cross-origin_resource_sharing"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.AccessControlMaxAge">
            <summary>
            The Access-Control-Max-Age response header indicates how long the results
            of a preflight request (that is the information contained in the
            Access-Control-Allow-Methods and Access-Control-Allow-Headers headers)
            can be cached.
            </summary>
            <example>Access-Control-Max-Age: delta-seconds</example>
            <seealso cref="!:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.XLocationAfterAuth">
            <summary>
            Stores the original HTTP path and redirects to it after authentication.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField)">
            <summary>
            Compares two AHTTPHeaderFields for equality.
            </summary>
            <param name="AHTTPHeaderField">An AHTTPHeaderField to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.JSONExtensions">
            <summary>
            Extension methods to parse JSON.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger">
            <summary>
            A HTTP client logger.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger">
            <summary>
            A wrapper class to manage HTTP API event subscriptions
            for logging purposes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger.LoggingPath">
            <summary>
            The logging path.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger.Context">
            <summary>
            The context of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger.LogEventName">
            <summary>
            The name of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger.SubscribeToEventDelegate">
            <summary>
            A delegate called whenever the event is subscriped to.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger.UnsubscribeFromEventDelegate">
            <summary>
            A delegate called whenever the subscription of the event is stopped.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger.#ctor(System.String,System.String,System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientRequestLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientRequestLogHandler})">
            <summary>
            Create a new log event for the linked HTTP API event.
            </summary>
            <param name="LoggingPath">The logging path.</param>
            <param name="Context">The context of the event.</param>
            <param name="LogEventName">The name of the event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger.RegisterLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate)">
            <summary>
            Register the given log target and delegate combination.
            </summary>
            <param name="LogTarget">A log target.</param>
            <param name="HTTPRequestDelegate">A delegate to call.</param>
            <returns>A HTTP request logger.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger.Subscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Subscribe the given log target to the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger.IsSubscribed(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Return the subscription status of the given log target.
            </summary>
            <param name="LogTarget">A log target.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger.Unsubscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Unsubscribe the given log target from the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger">
            <summary>
            A wrapper class to manage HTTP API event subscriptions
            for logging purposes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger.LoggingPath">
            <summary>
            The logging path.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger.Context">
            <summary>
            The context of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger.LogEventName">
            <summary>
            The name of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger.SubscribeToEventDelegate">
            <summary>
            A delegate called whenever the event is subscriped to.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger.UnsubscribeFromEventDelegate">
            <summary>
            A delegate called whenever the subscription of the event is stopped.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger.#ctor(System.String,System.String,System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientResponseLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientResponseLogHandler})">
            <summary>
            Create a new log event for the linked HTTP API event.
            </summary>
            <param name="LoggingPath">The logging path.</param>
            <param name="Context">The context of the event.</param>
            <param name="LogEventName">The name of the event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger.RegisterLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate)">
            <summary>
            Register the given log target and delegate combination.
            </summary>
            <param name="LogTarget">A log target.</param>
            <param name="HTTPResponseDelegate">A delegate to call.</param>
            <returns>A HTTP response logger.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger.Subscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Subscribe the given log target to the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger.IsSubscribed(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Return the subscription status of the given log target.
            </summary>
            <param name="LogTarget">A log target.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger.Unsubscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Unsubscribe the given log target from the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClient">
            <summary>
            The HTTP client of this logger.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.DisableLogging">
            <summary>
            Whether to disable HTTP client logging.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPClient,System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.LogfileCreatorDelegate)">
            <summary>
            Create a new HTTP client logger using the given logging delegates.
            </summary>
            <param name="HTTPClient">A HTTP client.</param>
            <param name="LoggingPath">The logging path.</param>
            <param name="Context">A context of this API.</param>
            
            <param name="LogHTTPRequest_toConsole">A delegate to log incoming HTTP requests to console.</param>
            <param name="LogHTTPResponse_toConsole">A delegate to log HTTP requests/responses to console.</param>
            <param name="LogHTTPRequest_toDisc">A delegate to log incoming HTTP requests to disc.</param>
            <param name="LogHTTPResponse_toDisc">A delegate to log HTTP requests/responses to disc.</param>
            
            <param name="LogHTTPRequest_toNetwork">A delegate to log incoming HTTP requests to a network target.</param>
            <param name="LogHTTPResponse_toNetwork">A delegate to log HTTP requests/responses to a network target.</param>
            <param name="LogHTTPRequest_toHTTPSSE">A delegate to log incoming HTTP requests to a HTTP server sent events source.</param>
            <param name="LogHTTPResponse_toHTTPSSE">A delegate to log HTTP requests/responses to a HTTP server sent events source.</param>
            
            <param name="LogHTTPError_toConsole">A delegate to log HTTP errors to console.</param>
            <param name="LogHTTPError_toDisc">A delegate to log HTTP errors to disc.</param>
            <param name="LogHTTPError_toNetwork">A delegate to log HTTP errors to a network target.</param>
            <param name="LogHTTPError_toHTTPSSE">A delegate to log HTTP errors to a HTTP server sent events source.</param>
            
            <param name="LogfileCreator">A delegate to create a log file from the given context and log file name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.RegisterEvent(System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientRequestLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientRequestLogHandler},System.String[])">
            <summary>
            Register a log event for the linked HTTP API event.
            </summary>
            <param name="LogEventName">The name of the log event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
            <param name="GroupTags">An array of log event groups the given log event name is part of.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.RegisterEvent(System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientResponseLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientResponseLogHandler},System.String[])">
            <summary>
            Register a log event for the linked HTTP API event.
            </summary>
            <param name="LogEventName">The name of the log event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
            <param name="GroupTags">An array of log event groups the given log event name is part of.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger">
            <summary>
            A HTTP API logger.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger">
            <summary>
            A wrapper class to manage HTTP API event subscriptions
            for logging purposes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger.Context">
            <summary>
            The context of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger.LogEventName">
            <summary>
            The name of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger.SubscribeToEventDelegate">
            <summary>
            A delegate called whenever the event is subscriped to.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger.UnsubscribeFromEventDelegate">
            <summary>
            A delegate called whenever the subscription of the event is stopped.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger.#ctor(System.String,System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.RequestLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.RequestLogHandler})">
            <summary>
            Create a new log event for the linked HTTP API event.
            </summary>
            <param name="Context">The context of the event.</param>
            <param name="LogEventName">The name of the event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger.RegisterLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate)">
            <summary>
            Register the given log target and delegate combination.
            </summary>
            <param name="LogTarget">A log target.</param>
            <param name="HTTPRequestDelegate">A delegate to call.</param>
            <returns>A HTTP request logger.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger.Subscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Subscribe the given log target to the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger.IsSubscribed(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Return the subscription status of the given log target.
            </summary>
            <param name="LogTarget">A log target.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger.Unsubscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Unsubscribe the given log target from the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2">
            <summary>
            A wrapper class to manage HTTP API event subscriptions
            for logging purposes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2.Context">
            <summary>
            The context of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2.LogEventName">
            <summary>
            The name of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2.SubscribeToEventDelegate">
            <summary>
            A delegate called whenever the event is subscriped to.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2.UnsubscribeFromEventDelegate">
            <summary>
            A delegate called whenever the subscription of the event is stopped.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2.#ctor(System.String,System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler})">
            <summary>
            Create a new log event for the linked HTTP API event.
            </summary>
            <param name="Context">The context of the event.</param>
            <param name="LogEventName">The name of the event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2.RegisterLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate)">
            <summary>
            Register the given log target and delegate combination.
            </summary>
            <param name="LogTarget">A log target.</param>
            <param name="HTTPRequestDelegate">A delegate to call.</param>
            <returns>A HTTP request logger.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2.Subscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Subscribe the given log target to the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2.IsSubscribed(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Return the subscription status of the given log target.
            </summary>
            <param name="LogTarget">A log target.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2.Unsubscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Unsubscribe the given log target from the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger">
            <summary>
            A wrapper class to manage HTTP API event subscriptions
            for logging purposes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger.Context">
            <summary>
            The context of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger.LogEventName">
            <summary>
            The name of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger.SubscribeToEventDelegate">
            <summary>
            A delegate called whenever the event is subscriped to.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger.UnsubscribeFromEventDelegate">
            <summary>
            A delegate called whenever the subscription of the event is stopped.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger.#ctor(System.String,System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.AccessLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.AccessLogHandler})">
            <summary>
            Create a new log event for the linked HTTP API event.
            </summary>
            <param name="Context">The context of the event.</param>
            <param name="LogEventName">The name of the event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger.RegisterLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate)">
            <summary>
            Register the given log target and delegate combination.
            </summary>
            <param name="LogTarget">A log target.</param>
            <param name="HTTPResponseDelegate">A delegate to call.</param>
            <returns>A HTTP response logger.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger.Subscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Subscribe the given log target to the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger.IsSubscribed(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Return the subscription status of the given log target.
            </summary>
            <param name="LogTarget">A log target.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger.Unsubscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Unsubscribe the given log target from the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2">
            <summary>
            A wrapper class to manage HTTP API event subscriptions
            for logging purposes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2.Context">
            <summary>
            The context of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2.LogEventName">
            <summary>
            The name of the event to be logged.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2.SubscribeToEventDelegate">
            <summary>
            A delegate called whenever the event is subscriped to.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2.UnsubscribeFromEventDelegate">
            <summary>
            A delegate called whenever the subscription of the event is stopped.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2.#ctor(System.String,System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler})">
            <summary>
            Create a new log event for the linked HTTP API event.
            </summary>
            <param name="Context">The context of the event.</param>
            <param name="LogEventName">The name of the event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2.RegisterLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate)">
            <summary>
            Register the given log target and delegate combination.
            </summary>
            <param name="LogTarget">A log target.</param>
            <param name="HTTPResponseDelegate">A delegate to call.</param>
            <returns>A HTTP response logger.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2.Subscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Subscribe the given log target to the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2.IsSubscribed(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Return the subscription status of the given log target.
            </summary>
            <param name="LogTarget">A log target.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2.Unsubscribe(org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Unsubscribe the given log target from the linked event.
            </summary>
            <param name="LogTarget">A log target.</param>
            <returns>True, if successful; false else.</returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServer">
            <summary>
            The HTTP server of this logger.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer,System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.LogfileCreatorDelegate)">
            <summary>
            Create a new HTTP API logger using the given logging delegates.
            </summary>
            <param name="HTTPServer">A HTTP server.</param>
            <param name="LoggingPath">The logging path.</param>
            <param name="Context">A context of this API.</param>
            
            <param name="LogHTTPRequest_toConsole">A delegate to log incoming HTTP requests to console.</param>
            <param name="LogHTTPResponse_toConsole">A delegate to log HTTP requests/responses to console.</param>
            <param name="LogHTTPRequest_toDisc">A delegate to log incoming HTTP requests to disc.</param>
            <param name="LogHTTPResponse_toDisc">A delegate to log HTTP requests/responses to disc.</param>
            
            <param name="LogHTTPRequest_toNetwork">A delegate to log incoming HTTP requests to a network target.</param>
            <param name="LogHTTPResponse_toNetwork">A delegate to log HTTP requests/responses to a network target.</param>
            <param name="LogHTTPRequest_toHTTPSSE">A delegate to log incoming HTTP requests to a HTTP server sent events source.</param>
            <param name="LogHTTPResponse_toHTTPSSE">A delegate to log HTTP requests/responses to a HTTP server sent events source.</param>
            
            <param name="LogHTTPError_toConsole">A delegate to log HTTP errors to console.</param>
            <param name="LogHTTPError_toDisc">A delegate to log HTTP errors to disc.</param>
            <param name="LogHTTPError_toNetwork">A delegate to log HTTP errors to a network target.</param>
            <param name="LogHTTPError_toHTTPSSE">A delegate to log HTTP errors to a HTTP server sent events source.</param>
            
            <param name="LogfileCreator">A delegate to create a log file from the given context and log file name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.RegisterEvent(System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.RequestLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.RequestLogHandler},System.String[])">
            <summary>
            Register a log event for the linked HTTP API event.
            </summary>
            <param name="LogEventName">The name of the log event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
            <param name="GroupTags">An array of log event groups the given log event name is part of.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.RegisterEvent2(System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler},System.String[])">
            <summary>
            Register a log event for the linked HTTP API event.
            </summary>
            <param name="LogEventName">The name of the log event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
            <param name="GroupTags">An array of log event groups the given log event name is part of.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.RegisterEvent(System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.AccessLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.AccessLogHandler},System.String[])">
            <summary>
            Register a log event for the linked HTTP API event.
            </summary>
            <param name="LogEventName">The name of the log event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
            <param name="GroupTags">An array of log event groups the given log event name is part of.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.RegisterEvent2(System.String,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler},System.String[])">
            <summary>
            Register a log event for the linked HTTP API event.
            </summary>
            <param name="LogEventName">The name of the log event.</param>
            <param name="SubscribeToEventDelegate">A delegate for subscribing to the linked event.</param>
            <param name="UnsubscribeFromEventDelegate">A delegate for subscribing from the linked event.</param>
            <param name="GroupTags">An array of log event groups the given log event name is part of.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKeyIdExtensions">
            <summary>
            Extension methods for API key identifications.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKeyIdExtensions.IsNullOrEmpty(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id})">
            <summary>
            Indicates whether this API key identifications is null or empty.
            </summary>
            <param name="APIKey">An API key identifications.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKeyIdExtensions.IsNotNullOrEmpty(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id})">
            <summary>
            Indicates whether this API key identifications is NOT null or empty.
            </summary>
            <param name="APIKey">An API key identifications.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id">
            <summary>
            An API key.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.InternalId">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id._random">
            <summary>
            Private non-cryptographic random number generator.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.IsNullOrEmpty">
            <summary>
            Indicates whether this identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.IsNotNullOrEmpty">
            <summary>
            Indicates whether this identification is NOT null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.Length">
            <summary>
            The length of the API key identificator.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.#ctor(System.String)">
            <summary>
            Create a new API key identification based on the given string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.Random(System.Nullable{System.UInt16})">
            <summary>
            Create a random API key identification.
            </summary>
            <param name="Length">The expected length of the organization identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.Parse(System.String)">
            <summary>
            Parse the given string as an API key identification.
            </summary>
            <param name="Text">A text-representation of an API key identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.TryParse(System.String)">
            <summary>
            Try to parse the given string as an API key identification.
            </summary>
            <param name="Text">A text-representation of an API key identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id@)">
            <summary>
            Try to parse the given string as an API key identification.
            </summary>
            <param name="Text">A text-representation of an API key identification.</param>
            <param name="APIKeyId">The parsed API key identification.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.Clone">
            <summary>
            Clone this API key identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="APIKeyIdId1">An API key identification.</param>
            <param name="APIKeyIdId2">Another API key identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="APIKeyIdId1">An API key identification.</param>
            <param name="APIKeyIdId2">Another API key identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="APIKeyIdId1">An API key identification.</param>
            <param name="APIKeyIdId2">Another API key identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="APIKeyIdId1">An API key identification.</param>
            <param name="APIKeyIdId2">Another API key identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="APIKeyIdId1">An API key identification.</param>
            <param name="APIKeyIdId2">Another API key identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="APIKeyIdId1">An API key identification.</param>
            <param name="APIKeyIdId2">Another API key identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="APIKeyId">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id)">
            <summary>
            Compares two API key identifications for equality.
            </summary>
            <param name="APIKeyId">An API key identification to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.GetHashCode">
            <summary>
            Return the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.APIKey_Id.ToString">
            <summary>
            Return a text-representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTokenAuthentication">
            <summary>
            A HTTP token authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTokenAuthentication.Token">
            <summary>
            The username.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTokenAuthentication.HTTPCredentialType">
            <summary>
            The type of the HTTP authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTokenAuthentication.DebugView">
            <summary>
            Return a debug representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTokenAuthentication.#ctor(System.String)">
            <summary>
            Create the credentials based on a base64 encoded string which comes from a HTTP header Authentication:
            </summary>
            <param name="Token">The token.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTokenAuthentication.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTokenAuthentication@)">
            <summary>
            Try to parse the given text.
            </summary>
            <param name="Text">A text representation of a HTTP basic authentication header.</param>
            <param name="TokenAuthentication">The parsed HTTP basic authentication header.</param>
            <returns>true, when the parsing was successful, else false.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTokenAuthentication.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBearerAuthentication">
            <summary>
            A HTTP Bearer authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBearerAuthentication.Token">
            <summary>
            The authentication token.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBearerAuthentication.HTTPCredentialType">
            <summary>
            The type of the HTTP authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBearerAuthentication.DebugView">
            <summary>
            Return a debug representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBearerAuthentication.#ctor(System.String)">
            <summary>
            Create the credentials based on a string.
            </summary>
            <param name="Token">The authentication token.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBearerAuthentication.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBearerAuthentication@)">
            <summary>
            Try to parse the given text.
            </summary>
            <param name="Text">A text representation of a HTTP Bearer authentication header.</param>
            <param name="BearerAuthentication">The parsed HTTP Bearer authentication header.</param>
            <returns>true, when the parsing was successful, else false.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBearerAuthentication.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServerExtensions.AddJSONEventSource(org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,System.UInt32,System.Nullable{System.TimeSpan},System.Boolean,System.String,System.Func{System.String,System.DateTime,System.String},System.String)">
            <summary>
            Add a HTTP Sever Sent Events source.
            </summary>
            <param name="EventIdentification">The unique identification of the event source.</param>
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="EnableLogging">Enables storing and reloading events </param>
            <param name="LogfilePrefix">A prefix for the log file names or locations.</param>
            <param name="LogfileName">A delegate to create a filename for storing and reloading events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServerExtensions.AddJSONEventSource(org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.UInt32,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{Newtonsoft.Json.Linq.JObject},System.Boolean},System.Nullable{System.TimeSpan},System.Boolean,System.String,System.Func{System.String,System.DateTime,System.String},System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate)">
            <summary>
            Add a HTTP Sever Sent Events source and a method call back for the given URL template.
            </summary>
            <param name="EventIdentification">The unique identification of the event source.</param>
            <param name="URLTemplate">The URL template.</param>
            
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="IncludeFilterAtRuntime">Include this events within the HTTP SSE output. Can e.g. be used to filter events by HTTP users.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="EnableLogging">Enables storing and reloading events </param>
            <param name="LogfilePrefix">A prefix for the log file names or locations.</param>
            <param name="LogfileName">A delegate to create a filename for storing and reloading events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
            
            <param name="Hostname">The HTTP host.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            
            <param name="URIAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            
            <param name="DefaultErrorHandler">The default error handler.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.ServerCertificateSelector">
            <summary>
            The optional delegate to select a SSL/TLS server certificate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.ClientCertificateValidator">
            <summary>
            The optional delegate to verify the SSL/TLS client certificate used for authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.ClientCertificateSelector">
            <summary>
            The optional delegate to select the SSL/TLS client certificate used for authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.AllowedTLSProtocols">
            <summary>
            The SSL/TLS protocol(s) allowed for this connection.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.IsStarted">
            <summary>
            Is the server already started?
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.NumberOfClients">
            <summary>
            The current number of attached TCP clients.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.AddEventSource``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,System.UInt32,System.Nullable{System.TimeSpan},System.Func{``0,System.String},System.Func{System.String,``0},System.Boolean,System.String,System.Func{System.String,System.DateTime,System.String},System.String)">
            <summary>
            Add a HTTP Sever Sent Events source.
            </summary>
            <param name="EventIdentification">The unique identification of the event source.</param>
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="DataSerializer">A delegate to serialize the stored events.</param>
            <param name="DataDeserializer">A delegate to deserialize stored events.</param>
            <param name="EnableLogging">Enables storing and reloading events </param>
            <param name="LogfilePrefix">A prefix for the log file names or locations.</param>
            <param name="LogfileName">A delegate to create a filename for storing and reloading events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.AddEventSource``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.UInt32,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{``0},System.Boolean},System.Nullable{System.TimeSpan},System.Func{``0,System.String},System.Func{System.String,``0},System.Boolean,System.String,System.Func{System.String,System.DateTime,System.String},System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate)">
            <summary>
            Add a HTTP Sever Sent Events source and a method call back for the given URL template.
            </summary>
            <param name="EventIdentification">The unique identification of the event source.</param>
            <param name="URLTemplate">The URL template.</param>
            
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="IncludeFilterAtRuntime">Include this events within the HTTP SSE output. Can e.g. be used to filter events by HTTP users.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="DataSerializer">A delegate to serialize the stored events.</param>
            <param name="DataDeserializer">A delegate to deserialize stored events.</param>
            <param name="EnableLogging">Enables storing and reloading events </param>
            <param name="LogfilePrefix">A prefix for the log file names or locations.</param>
            <param name="LogfileName">A delegate to create a filename for storing and reloading events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
            
            <param name="Hostname">The HTTP host.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            
            <param name="URIAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            
            <param name="DefaultErrorHandler">The default error handler.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.Get(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.Get``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.TryGet(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource@)">
            <summary>
            Try to return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
            <param name="EventSource">The event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.TryGet``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource{``0}@)">
            <summary>
            Try to return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
            <param name="EventSource">The event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.EventSources(System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource,System.Boolean})">
            <summary>
            Return a filtered enumeration of all event sources.
            </summary>
            <param name="IncludeEventSource">An event source filter delegate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer.EventSources``1(System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource,System.Boolean})">
            <summary>
            Return a filtered enumeration of all event sources.
            </summary>
            <param name="IncludeEventSource">An event source filter delegate.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions">
            <summary>
            Extensions methods for HTTP loggers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultConsoleLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger)">
            <summary>
            Register the default console logger.
            </summary>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultConsoleLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger)">
            <summary>
            Register the default console logger.
            </summary>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultConsoleLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger)">
            <summary>
            Register the default console logger.
            </summary>
            <param name="HTTPClientRequestLogger">A HTTP request logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultConsoleLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger)">
            <summary>
            Register the default console logger.
            </summary>
            <param name="HTTPClientResponseLogger">A HTTP response logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultDiscLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger)">
            <summary>
            Register the default disc logger.
            </summary>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultDiscLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger)">
            <summary>
            Register the default disc logger.
            </summary>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultDiscLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientRequestLogger,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger)">
            <summary>
            Register the default disc logger.
            </summary>
            <param name="HTTPClientRequestLogger">A HTTP request logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultDiscLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger.HTTPClientResponseLogger,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger)">
            <summary>
            Register the default disc logger.
            </summary>
            <param name="HTTPClientResponseLogger">A HTTP response logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultConsoleLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger)">
            <summary>
            Register the default console logger.
            </summary>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultConsoleLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger)">
            <summary>
            Register the default console logger.
            </summary>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultDiscLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerRequestLogger2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger)">
            <summary>
            Register the default disc logger.
            </summary>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPLoggerExtensions.RegisterDefaultDiscLogTarget(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger.HTTPServerResponseLogger2,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServerLogger)">
            <summary>
            Register the default disc logger.
            </summary>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger">
            <summary>
            A HTTP API logger.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.Default_LogHTTPRequest_toConsole(System.String,System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            A default delegate for logging incoming HTTP requests to console.
            </summary>
            <param name="Context">The context of the log request.</param>
            <param name="LogEventName">The name of the log event.</param>
            <param name="Request">The HTTP request to log.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.Default_LogHTTPResponse_toConsole(System.String,System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse)">
            <summary>
            A default delegate for logging HTTP requests/-responses to console.
            </summary>
            <param name="Context">The context of the log request.</param>
            <param name="LogEventName">The name of the log event.</param>
            <param name="Request">The HTTP request to log.</param>
            <param name="Response">The HTTP response to log.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.Default_LogHTTPRequest_toDisc(System.String,System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            A default delegate for logging incoming HTTP requests to disc.
            </summary>
            <param name="Context">The context of the log request.</param>
            <param name="LogEventName">The name of the log event.</param>
            <param name="Request">The HTTP request to log.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.Default_LogHTTPResponse_toDisc(System.String,System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse)">
            <summary>
            A default delegate for logging HTTP requests/-responses to disc.
            </summary>
            <param name="Context">The context of the log request.</param>
            <param name="LogEventName">The name of the log event.</param>
            <param name="Request">The HTTP request to log.</param>
            <param name="Response">The HTTP response to log.</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.MaxRetries">
            <summary>
            The maximum number of retries to write to a logfile.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.MaxWaitingForALock">
            <summary>
            Maximum waiting time to enter a lock around a logfile.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.LogfileCreator">
            <summary>
            A delegate for the default ToDisc logger returning a
            valid logfile name based on the given log event name.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.LoggingPath">
            <summary>
            The logging path.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.Context">
            <summary>
            The context of this HTTP logger.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.#ctor(System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLoggerDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.LogfileCreatorDelegate)">
            <summary>
            Create a new HTTP API logger using the given logging delegates.
            </summary>
            <param name="LoggingPath">The logging path.</param>
            <param name="Context">A context of this API.</param>
            
            <param name="LogHTTPRequest_toConsole">A delegate to log incoming HTTP requests to console.</param>
            <param name="LogHTTPResponse_toConsole">A delegate to log HTTP requests/responses to console.</param>
            <param name="LogHTTPRequest_toDisc">A delegate to log incoming HTTP requests to disc.</param>
            <param name="LogHTTPResponse_toDisc">A delegate to log HTTP requests/responses to disc.</param>
            
            <param name="LogHTTPRequest_toNetwork">A delegate to log incoming HTTP requests to a network target.</param>
            <param name="LogHTTPResponse_toNetwork">A delegate to log HTTP requests/responses to a network target.</param>
            <param name="LogHTTPRequest_toHTTPSSE">A delegate to log incoming HTTP requests to a HTTP server sent events source.</param>
            <param name="LogHTTPResponse_toHTTPSSE">A delegate to log HTTP requests/responses to a HTTP server sent events source.</param>
            
            <param name="LogHTTPError_toConsole">A delegate to log HTTP errors to console.</param>
            <param name="LogHTTPError_toDisc">A delegate to log HTTP errors to disc.</param>
            <param name="LogHTTPError_toNetwork">A delegate to log HTTP errors to a network target.</param>
            <param name="LogHTTPError_toHTTPSSE">A delegate to log HTTP errors to a HTTP server sent events source.</param>
            
            <param name="LogfileCreator">A delegate to create a log file from the given context and log file name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.Debug(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Start debugging the given log event.
            </summary>
            <param name="LogEventOrGroupName">A log event of group name.</param>
            <param name="LogTarget">The log target.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPLogger.Undebug(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets)">
            <summary>
            Stop debugging the given log event.
            </summary>
            <param name="LogEventOrGroupName">A log event of group name.</param>
            <param name="LogTarget">The log target.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets">
            <summary>
            A WWCP HTTP API log target.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets.Console">
            <summary>
            Log to console
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets.HTTPSSE">
            <summary>
            HTTP Server Side Events
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets.Disc">
            <summary>
            Log to disc
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.LogTargets.Network">
            <summary>
            Log via network.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestExtensions">
            <summary>
            Extension methods for HTTP requests.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestExtensions.Reply(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Create a new HTTP response builder for the given request.
            </summary>
            <param name="HTTPRequest">A HTTP request.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest">
            <summary>
            A HTTP request.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.HTTPServer">
            <summary>
            The HTTP server of this request.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.FakeURLPrefix">
            <summary>
            Add this prefix to the URL before sending the request.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.BestMatchingAcceptType">
            <summary>
            The best matching accept type.
            Set by the HTTP server.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.HTTPMethod">
            <summary>
            The HTTP method.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Path">
            <summary>
            The minimal URL (this means e.g. without the query string).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.ParsedURLParameters">
            <summary>
            The parsed URL parameters of the best matching URL template.
            Set by the HTTP server.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.QueryString">
            <summary>
            The HTTP query string.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.ProtocolName">
            <summary>
            The HTTP protocol name field.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.ProtocolVersion">
            <summary>
            The HTTP protocol version.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.EntireRequestHeader">
            <summary>
            Construct the entire HTTP request header.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Accept">
            <summary>
            The http content types accepted by the client.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Authorization">
            <summary>
            The HTTP basic authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Cookies">
            <summary>
            HTTP cookies.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.DNT">
            <summary>
            Do Not Track
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.X_Real_IP">
            <summary>
            Intermediary HTTP proxies might include this field to
            indicate the real IP address of the HTTP client.
            </summary>
            <example>X-Real-IP: 95.91.73.30</example>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.X_Forwarded_For">
            <summary>
            Intermediary HTTP proxies might include this field to
            indicate the real IP address of the HTTP client.
            </summary>
            <example>X-Forwarded-For: 95.91.73.30</example>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.API_Key">
            <summary>
            An optional API key for authentication.
            </summary>
            <example>API-Key: vfsf87wefh8743tzfgw9f489fh9fgs9z9z237hd208du79ehcv86egfsrf</example>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.X_Portal">
            <summary>
            This is a non-standard HTTP header to idicate that the intended
            HTTP portal is calling. By this a special HTTP content type processing
            might be implemented, which is different from the processing of other
            HTTP client requests.
            </summary>
            <example>X-Portal: true</example>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.#ctor(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource,org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,System.String,System.Byte[],System.IO.Stream,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2,System.UInt32,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Create a new http request header based on the given string representation.
            </summary>
            <param name="Timestamp">The timestamp of the request.</param>
            <param name="HTTPSource">The HTTP source.</param>
            <param name="LocalSocket">The local TCP/IP socket.</param>
            <param name="RemoteSocket">The remote TCP/IP socket.</param>
            <param name="HTTPServer">The HTTP server who has received this request.</param>
            <param name="HTTPHeader">A valid string representation of a http request header.</param>
            <param name="HTTPBody">The HTTP body as an array of bytes.</param>
            <param name="HTTPBodyStream">The HTTP body as an stream of bytes.</param>
            
            <param name="HTTPBodyReceiveBufferSize">The size of the HTTP body receive buffer.</param>
            <param name="CancellationToken">A token to cancel the HTTP request processing.</param>
            <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Create a new HTTP request based on the given HTTP request.
            (e.g. upgrade a HTTPRequest to a HTTPRequest&lt;TContent&gt;)
            </summary>
            <param name="Request">A HTTP request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest@,System.Nullable{System.DateTime},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Parse the given text as a HTTP request.
            </summary>
            <param name="Text">A text representation of a HTTP request.</param>
            <param name="Request">The parsed HTTP request.</param>
            
            <param name="Timestamp">The optional timestamp of the request.</param>
            <param name="HTTPSource">The optional remote TCP socket of the request.</param>
            <param name="LocalSocket">The optional local TCP socket of the request.</param>
            <param name="RemoteSocket">The optional remote TCP socket of the request.</param>
            <param name="HTTPServer">The optional HTTP server who has received this request.</param>
            
            <param name="CancellationToken">A token to cancel the HTTP request processing.</param>
            <param name="EventTrackingId">The optional event tracking identification of the request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.TryParse(System.String,System.Byte[],org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest@,System.Nullable{System.DateTime},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Parse the given text as a HTTP request.
            </summary>
            <param name="Text">A text representation of a HTTP request.</param>
            <param name="Body">The body of the HTTP request.</param>
            <param name="Request">The parsed HTTP request.</param>
            
            <param name="Timestamp">The optional timestamp of the request.</param>
            <param name="HTTPSource">The optional remote TCP socket of the request.</param>
            <param name="LocalSocket">The optional local TCP socket of the request.</param>
            <param name="RemoteSocket">The optional remote TCP socket of the request.</param>
            <param name="HTTPServer">The optional HTTP server who has received this request.</param>
            
            <param name="CancellationToken">A token to cancel the HTTP request processing.</param>
            <param name="EventTrackingId">The optional event tracking identification of the request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.TryParse(System.String,System.IO.Stream,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest@,System.Nullable{System.DateTime},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Parse the given text as a HTTP request.
            </summary>
            <param name="Text">A text representation of a HTTP request.</param>
            <param name="Body">The body of the HTTP request.</param>
            <param name="Request">The parsed HTTP request.</param>
            
            <param name="Timestamp">The optional timestamp of the request.</param>
            <param name="HTTPSource">The optional remote TCP socket of the request.</param>
            <param name="LocalSocket">The optional local TCP socket of the request.</param>
            <param name="HTTPServer">The optional HTTP server who has received this request.</param>
            
            <param name="CancellationToken">A token to cancel the HTTP request processing.</param>
            <param name="EventTrackingId">The optional event tracking identification of the request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.TryParse(System.Collections.Generic.IEnumerable{System.String},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest@,System.Nullable{System.DateTime},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Parse the given text as a HTTP request.
            </summary>
            <param name="Lines">The lines of the text representation of a HTTP request.</param>
            <param name="Request">The parsed HTTP request.</param>
            
            <param name="Timestamp">The optional timestamp of the request.</param>
            <param name="HTTPSource">The optional remote TCP socket of the request.</param>
            <param name="LocalSocket">The optional local TCp socket of the request.</param>
            <param name="RemoteSocket">The optional remote TCP socket of the request.</param>
            <param name="HTTPServer">The optional HTTP server who has received this request.</param>
            
            <param name="CancellationToken">A token to cancel the HTTP request processing.</param>
            <param name="EventTrackingId">The optional event tracking identification of the request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.TryParse(System.Collections.Generic.IEnumerable{System.String},System.Byte[],org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest@,System.Nullable{System.DateTime},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Parse the given text as a HTTP request.
            </summary>
            <param name="Lines">The lines of the text representation of a HTTP request.</param>
            <param name="Body">The body of the HTTP request.</param>
            <param name="Request">The parsed HTTP request.</param>
            
            <param name="Timestamp">The optional timestamp of the request.</param>
            <param name="HTTPSource">The optional remote TCP socket of the request.</param>
            <param name="LocalSocket">The optional local TCp socket of the request.</param>
            <param name="RemoteSocket">The optional remote TCP socket of the request.</param>
            <param name="HTTPServer">The optional HTTP server who has received this request.</param>
            
            <param name="CancellationToken">A token to cancel the HTTP request processing.</param>
            <param name="EventTrackingId">The optional event tracking identification of the request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.TryParse(System.Collections.Generic.IEnumerable{System.String},System.IO.Stream,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest@,System.Nullable{System.DateTime},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Parse the given text as a HTTP request.
            </summary>
            <param name="Lines">The lines of the text representation of a HTTP request.</param>
            <param name="Body">The body of the HTTP request.</param>
            <param name="Request">The parsed HTTP request.</param>
            
            <param name="Timestamp">The optional timestamp of the request.</param>
            <param name="HTTPSource">The optional remote TCP socket of the request.</param>
            <param name="LocalSocket">The optional local TCp socket of the request.</param>
            <param name="RemoteSocket">The optional remote TCP socket of the request.</param>
            <param name="HTTPServer">The optional HTTP server who has received this request.</param>
            <param name="EventTrackingId">The optional event tracking identification of the request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.TryParse(System.Byte[],org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest@,System.Nullable{System.DateTime},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Parse the given text as a HTTP request.
            </summary>
            <param name="Bytes">The lines of the text representation of a HTTP request.</param>
            <param name="Request">The parsed HTTP request.</param>
            
            <param name="Timestamp">The optional timestamp of the request.</param>
            <param name="HTTPSource">The optional remote TCP socket of the request.</param>
            <param name="LocalSocket">The optional local TCp socket of the request.</param>
            <param name="RemoteSocket">The optional remote TCP socket of the request.</param>
            <param name="HTTPServer">The optional HTTP server who has received this request.</param>
            
            <param name="CancellationToken">A token to cancel the HTTP request processing.</param>
            <param name="EventTrackingId">The optional event tracking identification of the request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.ConvertContent``1(System.Func{System.String,org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate,``0},org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate)">
            <summary>
            Convert the content of the HTTP response body via the given
            content converter delegate.
            </summary>
            <typeparam name="TResult">The type of the converted HTTP response body content.</typeparam>
            <param name="ContentConverter">A delegate to convert the given HTTP response content.</param>
            <param name="OnException">A delegate to call whenever an exception during the conversion occures.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.ConvertContent``1(System.Func{System.Byte[],org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate,``0},org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate)">
            <summary>
            Convert the content of the HTTP response body via the given
            content converter delegate.
            </summary>
            <typeparam name="TResult">The type of the converted HTTP response body content.</typeparam>
            <param name="ContentConverter">A delegate to convert the given HTTP response content.</param>
            <param name="OnException">A delegate to call whenever an exception during the conversion occures.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.ConvertContent``1(System.Func{System.IO.Stream,org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate,``0},org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate)">
            <summary>
            Convert the content of the HTTP response body via the given
            content converter delegate.
            </summary>
            <typeparam name="TResult">The type of the converted HTTP response body content.</typeparam>
            <param name="ContentConverter">A delegate to convert the given HTTP response content.</param>
            <param name="OnException">A delegate to call whenever an exception during the conversion occures.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder">
            <summary>
            A read-write HTTP request header.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.HTTPServer">
            <summary>
            The related HTTP server.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.HTTPMethod">
            <summary>
            The http method.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.Path">
            <summary>
            The minimal path (this means e.g. without the query string).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.QueryString">
            <summary>
            The HTTP query string.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.Accept">
            <summary>
            The http content types accepted by the client.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient)">
            <summary>
            Create a new HTTP request.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Create a new HTTP request.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetURL(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Set the HTTP URL.
            </summary>
            <param name="URL">The new URL.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetHTTPStatusCode(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode)">
            <summary>
            Set the HTTP status code.
            </summary>
            <param name="HTTPStatusCode">A HTTP status code.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetHTTPMethod(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Set the HTTP method.
            </summary>
            <param name="HTTPMethod">The HTTPMethod.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetProtocolName(System.String)">
            <summary>
            Set the protocol name.
            </summary>
            <param name="ProtocolName">The protocol name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetProtocolVersion(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion)">
            <summary>
            Set the protocol version.
            </summary>
            <param name="ProtocolVersion">The protocol version.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetContent(System.Byte[])">
            <summary>
            The HTTP content/body.
            </summary>
            <param name="ByteArray">The HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetContent(System.String)">
            <summary>
            The HTTP content/body.
            </summary>
            <param name="String">The HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetContent(System.IO.Stream)">
            <summary>
            The HTTP content/body as a stream.
            </summary>
            <param name="ContentStream">The HTTP content/body as a stream.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetCacheControl(System.String)">
            <summary>
            Set the HTTP CacheControl header field.
            </summary>
            <param name="CacheControl">CacheControl.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetConnection(System.String)">
            <summary>
            Set the HTTP connection header field.
            </summary>
            <param name="Connection">A connection.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetContentEncoding(System.Text.Encoding)">
            <summary>
            Set the HTTP Content-Encoding header field.
            </summary>
            <param name="ContentEncoding">The encoding of the HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetContentLanguage(System.Collections.Generic.List{System.String})">
            <summary>
            Set the HTTP Content-Languages header field.
            </summary>
            <param name="ContentLanguages">The languages of the HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetContentLength(System.Nullable{System.UInt64})">
            <summary>
            Set the HTTP Content-Length.
            </summary>
            <param name="ContentLength">The length of the HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetContentLocation(System.String)">
            <summary>
            Set the HTTP ContentLocation header field.
            </summary>
            <param name="ContentLocation">ContentLocation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetContentMD5(System.String)">
            <summary>
            Set the HTTP ContentMD5 header field.
            </summary>
            <param name="ContentMD5">ContentMD5.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetContentRange(System.String)">
            <summary>
            Set the HTTP ContentRange header field.
            </summary>
            <param name="ContentRange">ContentRange.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetContentType(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType)">
            <summary>
            Set the HTTP Content-Type header field.
            </summary>
            <param name="ContentType">The type of the HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetDate(System.DateTime)">
            <summary>
            Set the HTTP Date header field.
            </summary>
            <param name="Date">DateTime.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetVia(System.String)">
            <summary>
            Set the HTTP Via header field.
            </summary>
            <param name="Via">Via.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.AddAccept(org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType)">
            <summary>
            Add an AcceptType to the Accept header field.
            </summary>
            <param name="AcceptType">An AcceptType.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.AddAccept(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.Double)">
            <summary>
            Add a HTTPContentType and its quality to the Accept header field.
            </summary>
            <param name="HTTPContentType">A HTTPContentType.</param>
            <param name="Quality">The quality of the HTTPContentType.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetAcceptCharset(System.String)">
            <summary>
            Set the HTTP Accept-Charset header field.
            </summary>
            <param name="AcceptCharset">AcceptCharset.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetAcceptEncoding(System.String)">
            <summary>
            Set the HTTP Accept-Encoding header field.
            </summary>
            <param name="AcceptEncoding">AcceptEncoding.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetAcceptLanguage(System.String)">
            <summary>
            Set the HTTP Accept-Language header field.
            </summary>
            <param name="AcceptLanguage">AcceptLanguage.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetAcceptRanges(System.String)">
            <summary>
            Set the HTTP Accept-Language header field.
            </summary>
            <param name="AcceptRanges">AcceptRanges.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetAuthorization(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBasicAuthentication)">
            <summary>
            Set the HTTP Authorization header field.
            </summary>
            <param name="Authorization">Authorization.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetDepth(System.String)">
            <summary>
            Set the HTTP Depth header field.
            </summary>
            <param name="Depth">Depth.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetExpect(System.String)">
            <summary>
            Set the HTTP Expect header field.
            </summary>
            <param name="Expect">Expect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetFrom(System.String)">
            <summary>
            Set the HTTP From header field.
            </summary>
            <param name="From">From.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetHost(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Set the HTTP Host header field.
            </summary>
            <param name="Host">Host.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetIf(System.String)">
            <summary>
            Set the HTTP If header field.
            </summary>
            <param name="If">If.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetIfMatch(System.String)">
            <summary>
            Set the HTTP If-Match header field.
            </summary>
            <param name="IfMatch">IfMatch.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetIfModifiedSince(System.String)">
            <summary>
            Set the HTTP If-Modified-Since header field.
            </summary>
            <param name="IfModifiedSince">IfModifiedSince.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetIfNoneMatch(System.String)">
            <summary>
            Set the HTTP If-None-Match header field.
            </summary>
            <param name="IfNoneMatch">IfNoneMatch.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetIfRange(System.String)">
            <summary>
            Set the HTTP If-Range header field.
            </summary>
            <param name="IfRange">IfRange.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetIfUnmodifiedSince(System.String)">
            <summary>
            Set the HTTP If-Unmodified-Since header field.
            </summary>
            <param name="IfUnmodifiedSince">IfUnmodifiedSince.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetLockToken(System.String)">
            <summary>
            Set the HTTP LockToken header field.
            </summary>
            <param name="LockToken">LockToken.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetMaxForwards(System.Nullable{System.UInt64})">
            <summary>
            Set the HTTP Max-Forwards header field.
            </summary>
            <param name="MaxForwards">MaxForwards.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetOverwrite(System.String)">
            <summary>
            Set the HTTP Overwrite header field.
            </summary>
            <param name="Overwrite">Overwrite.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetProxyAuthorization(System.String)">
            <summary>
            Set the HTTP Proxy-Authorization header field.
            </summary>
            <param name="ProxyAuthorization">ProxyAuthorization.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetRange(System.String)">
            <summary>
            Set the HTTP Range header field.
            </summary>
            <param name="Range">Range.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetReferer(System.String)">
            <summary>
            Set the HTTP Referer header field.
            </summary>
            <param name="Referer">Referer.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetTE(System.String)">
            <summary>
            Set the HTTP TE header field.
            </summary>
            <param name="TE">TE.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetTimeout(System.Nullable{System.UInt64})">
            <summary>
            Set the HTTP Timeout header field.
            </summary>
            <param name="Timeout">Timeout.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetUserAgent(System.String)">
            <summary>
            Set the HTTP User-Agent header field.
            </summary>
            <param name="UserAgent">UserAgent.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetLastEventId(System.Nullable{System.UInt64})">
            <summary>
            Set the HTTP Last-Event-Id header field.
            </summary>
            <param name="LastEventId">LastEventId.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.SetCookie(System.String)">
            <summary>
            Set the HTTP Cookie header field.
            </summary>
            <param name="Cookie">Cookie.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.PrepareImmutability">
            <summary>
            Prepares the immutability of an HTTP PDU, e.g. calculates
            and set the Content-Length header.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.op_Implicit(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder)~org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest">
            <summary>
            An implicit conversion from a HTTP request builder into a HTTP request.
            </summary>
            <param name="Builder">An HTTP request builder.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder.AsImmutable">
            <summary>
            Converts this HTTPRequestBuilder into an immutable HTTPRequest.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest`1">
            <summary>
            A generic HTTP request.
            </summary>
            <typeparam name="TContent">The type of the HTTP body data.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest`1.Content">
            <summary>
            The parsed content.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest`1.Exception">
            <summary>
            An exception during parsing.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest`1.HasErrors">
            <summary>
            An error during parsing.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest`1.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,`0,System.Boolean,System.Exception)">
            <summary>
            Create a new generic HTTP request.
            </summary>
            <param name="Request">The non-generic HTTP request.</param>
            <param name="Content">The generic HTTP body data.</param>
            <param name="IsFault">Whether there is an error.</param>
            <param name="Exception">An optional exception.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest`1.ConvertContent``1(System.Func{`0,org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate,``0},org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate)">
            <summary>
            Convert the content of the HTTP response body via the given
            content converter delegate.
            </summary>
            <typeparam name="TResult">The type of the converted HTTP response body content.</typeparam>
            <param name="ContentConverter">A delegate to convert the given HTTP response content.</param>
            <param name="OnException">A delegate to call whenever an exception during the conversion occures.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseExtensions">
            <summary>
            Extension methods for HTTP respones.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse`1">
            <summary>
            A helper class to transport HTTP data and its metadata.
            </summary>
            <typeparam name="TContent">The type of the parsed data.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse`1.Content">
            <summary>
            The parsed content.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse`1.Exception">
            <summary>
            An exception during parsing.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse`1.HasErrors">
            <summary>
            An error during parsing.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse`1.ConvertContent``1(System.Func{`0,``0})">
            <summary>
            Convert the content of the HTTP response body via the given
            content converter delegate.
            </summary>
            <typeparam name="TResult">The type of the converted HTTP response body content.</typeparam>
            <param name="ContentConverter">A delegate to convert the given HTTP response content.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse`1.ConvertContent``1(System.Func{`0,org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate,``0},org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate)">
            <summary>
            Convert the content of the HTTP response body via the given
            content converter delegate.
            </summary>
            <typeparam name="TResult">The type of the converted HTTP response body content.</typeparam>
            <param name="ContentConverter">A delegate to convert the given HTTP response content.</param>
            <param name="OnException">A delegate to call whenever an exception during the conversion occures.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse`1.ConvertContent``2(``0,System.Func{``0,`0,org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate,``1},org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate)">
            <summary>
            Convert the content of the HTTP response body via the given
            content converter delegate.
            </summary>
            <typeparam name="TRequest">The type of the converted HTTP request body content.</typeparam>
            <typeparam name="TResult">The type of the converted HTTP response body content.</typeparam>
            <param name="Request">The request leading to this response.</param>
            <param name="ContentConverter">A delegate to convert the given HTTP response content.</param>
            <param name="OnException">A delegate to call whenever an exception during the conversion occures.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse`1.ConvertContent``2(``0,System.Func{``0,`0,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse,org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate,``1},org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate)">
            <summary>
            Convert the content of the HTTP response body via the given
            content converter delegate.
            </summary>
            <typeparam name="TRequest">The type of the converted HTTP request body content.</typeparam>
            <typeparam name="TResult">The type of the converted HTTP response body content.</typeparam>
            <param name="Request">The request leading to this response.</param>
            <param name="ContentConverter">A delegate to convert the given HTTP response content.</param>
            <param name="OnException">A delegate to call whenever an exception during the conversion occures.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse">
            <summary>
            A read-only HTTP response header.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.HTTPRequest">
            <summary>
            The HTTP request for this HTTP response.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.HTTPStatusCode">
            <summary>
            The HTTP status code.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Runtime">
            <summary>
            The runtime of the HTTP request/response pair.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.NumberOfRetries">
            <summary>
            The number of retransmissions of this request.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.#ctor(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource,org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.String,System.Byte[],System.IO.Stream,System.UInt32,System.Object,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,System.Nullable{System.TimeSpan},System.Byte)">
            <summary>
            Parse the given HTTP response header.
            </summary>
            <param name="Timestamp">The timestamp of the response.</param>
            <param name="HTTPRequest">The HTTP request for this HTTP response.</param>
            <param name="HTTPSource">The remote TCP/IP socket.</param>
            <param name="LocalSocket">The local TCP/IP socket.</param>
            <param name="RemoteSocket">The remote TCP/IP socket.</param>
            <param name="HTTPHeader">A valid string representation of a http response header.</param>
            <param name="HTTPBody">The HTTP body as an array of bytes.</param>
            <param name="HTTPBodyStream">The HTTP body as an stream of bytes.</param>
            <param name="HTTPBodyReceiveBufferSize">The size of the HTTP body receive buffer.</param>
            <param name="CancellationToken">A token to cancel the HTTP response processing.</param>
            <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
            <param name="Runtime">The runtime of the HTTP request/response pair.</param>
            <param name="NumberOfRetries">The number of retransmissions of this request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse)">
            <summary>
            Create a new HTTP response based on the given HTTP response.
            (e.g. upgrade a HTTPResponse to a HTTPResponse&lt;TContent&gt;)
            </summary>
            <param name="Response">A HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Byte[],System.Byte,System.Object)">
            <summary>
            Create a new HTTP response.
            </summary>
            <param name="ResponseHeader">The HTTP header of the response.</param>
            <param name="Request">The HTTP request leading to this response.</param>
            <param name="HTTPBody">A HTTP body.</param>
            <param name="NumberOfRetry">The number of retransmissions of this request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.#ctor(System.String,System.Byte[],org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Object)">
            <summary>
            Create a new HTTP response.
            </summary>
            <param name="ResponseHeader">The HTTP header of the response.</param>
            <param name="ResponseBody">The HTTP body of the response.</param>
            <param name="Request">The HTTP request leading to this response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.#ctor(System.String,System.IO.Stream,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.UInt32,System.Object)">
            <summary>
            Create a new HTTP response.
            </summary>
            <param name="ResponseHeader">The HTTP header of the response.</param>
            <param name="ResponseBodyStream">The HTTP body of the response.</param>
            <param name="Request">The HTTP request leading to this response.</param>
            <param name="HTTPBodyReceiveBufferSize">The size of the HTTP body receive buffer.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Parse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Byte[],System.Byte,System.Object)">
            <summary>
            Parse the HTTP response from its text-representation.
            </summary>
            <param name="HTTPResponseHeader">The HTTP header of the response.</param>
            <param name="HTTPRequest">The HTTP request leading to this response.</param>
            <param name="HTTPBody">An optional HTTP body.</param>
            <param name="NumberOfRetry">The number of retransmissions of this request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Parse(System.String,System.Byte[],org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Object)">
            <summary>
            Parse the HTTP response from its text-representation and
            attach the given HTTP body.
            </summary>
            <param name="HTTPResponseHeader">The HTTP header of the response.</param>
            <param name="HTTPResponseBody">The HTTP body of the response.</param>
            <param name="HTTPRequest">The HTTP request leading to this response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Parse(System.String,System.IO.Stream,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Object)">
            <summary>
            Parse the HTTP response from its text-representation and
            attach the given HTTP body.
            </summary>
            <param name="HTTPResponseHeader">The HTTP header of the response.</param>
            <param name="HTTPResponseBody">The HTTP body of the response.</param>
            <param name="HTTPRequest">The HTTP request leading to this response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Parse(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSource},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Parse the given text as a HTTP response.
            </summary>
            <param name="Text">A text representation of a HTTP response.</param>
            <param name="Timestamp">The optional timestamp of the response.</param>
            <param name="HTTPSource">The optional remote TCP socket of the response.</param>
            <param name="LocalSocket">The optional local TCP socket of the response.</param>
            <param name="RemoteSocket">The optional remote TCP socket of the request.</param>
            <param name="EventTrackingId">The optional event tracking identification of the response.</param>
            <param name="Request">The HTTP request for this HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.OK(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 200-OK HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.OK(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 200-OK HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.BadRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 400-BadRequest HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.BadRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 400-BadRequest HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.ServiceUnavailable(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 503-ServiceUnavailable HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.ServiceUnavailable(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 503-ServiceUnavailable HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.FailedDependency(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 424-FailedDependency HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.FailedDependency(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 424-FailedDependency HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.GatewayTimeout(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 504-GatewayTimeout HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.GatewayTimeout(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 504-GatewayTimeout HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.ClientError(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 0-ClientError HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.ClientError(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 0-ClientError HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder">
            <summary>
            A read-write HTTP response header.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.HTTPRequest">
            <summary>
            The correlated HTTP request.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.Timestamp">
            <summary>
            The timestamp of the HTTP response.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.CancellationToken">
            <summary>
            The cancellation token.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.Runtime">
            <summary>
            The runtime of the HTTP request/response pair.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.HTTPHeader">
            <summary>
            The entire HTTP header.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode)">
            <summary>
            Create a new HTTP response.
            </summary>
            <param name="HTTPStatusCode">A HTTP status code</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode)">
            <summary>
            Create a new HTTP response.
            </summary>
            <param name="HTTPRequest">The HTTP request for this response.</param>
            <param name="HTTPStatusCode">A HTTP status code</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.Set(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHeaderField,System.Object)">
            <summary>
            Set a HTTP header field.
            A field value of NULL will remove the field from the header.
            </summary>
            <param name="HeaderField">The header field.</param>
            <param name="Value">The value. NULL will remove the field from the header.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.Set(System.String,System.Object)">
            <summary>
            Set a HTTP header field.
            A field value of NULL will remove the field from the header.
            </summary>
            <param name="HeaderField">The header field.</param>
            <param name="Value">The value. NULL will remove the field from the header.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.op_Implicit(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder)~org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse">
            <summary>
            An implicit conversion of a HTTPResponseBuilder into a HTTPResponse.
            </summary>
            <param name="HTTPResponseBuilder">A HTTP response builder.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetHTTPStatusCode(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode)">
            <summary>
            Set the HTTP status code.
            </summary>
            <param name="HTTPStatusCode">A HTTP status code.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetProtocolName(System.String)">
            <summary>
            Set the protocol name.
            </summary>
            <param name="ProtocolName">The protocol name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetProtocolVersion(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPVersion)">
            <summary>
            Set the protocol version.
            </summary>
            <param name="ProtocolVersion">The protocol version.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetContent(System.Byte[])">
            <summary>
            The HTTP content/body.
            </summary>
            <param name="ByteArray">The HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetContent(System.String)">
            <summary>
            The HTTP content/body.
            </summary>
            <param name="String">The HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetContent(System.IO.Stream)">
            <summary>
            The HTTP content/body as a stream.
            </summary>
            <param name="ContentStream">The HTTP content/body as a stream.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetCacheControl(System.String)">
            <summary>
            Set the HTTP CacheControl.
            </summary>
            <param name="CacheControl">CacheControl.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetConnection(System.String)">
            <summary>
            Set the HTTP connection.
            </summary>
            <param name="Connection">A connection.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetContentEncoding(System.Text.Encoding)">
            <summary>
            Set the HTTP Content-Encoding.
            </summary>
            <param name="ContentEncoding">The encoding of the HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetContentLanguage(System.Collections.Generic.List{System.String})">
            <summary>
            Set the HTTP Content-Languages.
            </summary>
            <param name="ContentLanguages">The languages of the HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetContentLength(System.Nullable{System.UInt64})">
            <summary>
            Set the HTTP Content-Length.
            </summary>
            <param name="ContentLength">The length of the HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetContentLocation(System.String)">
            <summary>
            Set the HTTP ContentLocation.
            </summary>
            <param name="ContentLocation">ContentLocation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetContentMD5(System.String)">
            <summary>
            Set the HTTP ContentMD5.
            </summary>
            <param name="ContentMD5">ContentMD5.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetContentRange(System.String)">
            <summary>
            Set the HTTP ContentRange.
            </summary>
            <param name="ContentRange">ContentRange.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetContentType(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType)">
            <summary>
            Set the HTTP Content-Type.
            </summary>
            <param name="ContentType">The type of the HTTP content/body.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetDate(System.DateTime)">
            <summary>
            Set the HTTP Date.
            </summary>
            <param name="Date">DateTime.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.SetVia(System.String)">
            <summary>
            Set the HTTP Via.
            </summary>
            <param name="Via">Via.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.ClientError(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 0-ClientError HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.ClientError(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 0-ClientError HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.OK(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 200-OK HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.OK(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 200-OK HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.BadRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 400-BadRequest HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.BadRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 400-BadRequest HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.ServiceUnavailable(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 503-ServiceUnavailable HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.ServiceUnavailable(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 503-ServiceUnavailable HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.FailedDependency(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 424-FailedDependency HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.FailedDependency(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 424-FailedDependency HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.GatewayTimeout(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 504-GatewayTimeout HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.GatewayTimeout(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder})">
            <summary>
            Create a new 504-GatewayTimeout HTTP response and apply the given delegate.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="Configurator">A delegate to configure the HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.PrepareImmutability">
            <summary>
            Prepares the immutability of an HTTP PDU, e.g. calculates
            and set the Content-Length header.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder.AsImmutable">
            <summary>
            Converts this HTTPResponseBuilder into an immutable HTTPResponse.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType">
            <summary>
            A single HTTP accept type.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType.ContentType">
            <summary>
            The accepted content type.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType.Quality">
            <summary>
            A value between 0..1; default is 1.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.Double)">
            <summary>
            Create a new HTTP accept header field.
            </summary>
            <param name="HTTPContentType">The accepted content type.</param>
            <param name="Quality">The preference of the content type.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType.#ctor(System.String)">
            <summary>
            Parse the string representation of a HTTP accept header field.
            </summary>
            <param name="AcceptString"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="AcceptType">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType)">
            <summary>
            Compares two AcceptType for equality.
            </summary>
            <param name="AcceptType">An AcceptType to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptType.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptTypes">
            <summary>
            A list of HTTP accept types.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptTypes.BestMatchingContentType(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType[])">
            <summary>
            Will return the best matching content type OR the first given!
            </summary>
            <param name="AvailableContentTypes"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AcceptTypes.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes">
            <summary>
            Different authentication types for HTTP authentication.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes.None">
            <summary>
            No authentication required.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes.Basic">
            <summary>
            Basic username+password authentication required.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes.Bearer">
            <summary>
            Bearer token authentication required.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes.Digest">
            <summary>
            Digest authentication required.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes.Mutual">
            <summary>
            Mutual authentication required.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBasicAuthentication">
            <summary>
            A HTTP basic authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBasicAuthentication.Username">
            <summary>
            The username.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBasicAuthentication.Password">
            <summary>
            The password.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBasicAuthentication.HTTPCredentialType">
            <summary>
            The type of the HTTP authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBasicAuthentication.DebugView">
            <summary>
            Return a debug representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBasicAuthentication.#ctor(System.String,System.String)">
            <summary>
            Create the credentials based on a base64 encoded string which comes from a HTTP header Authentication:
            </summary>
            <param name="Username">The username.</param>
            <param name="Password">The password.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBasicAuthentication.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBasicAuthentication@)">
            <summary>
            Try to parse the given text.
            </summary>
            <param name="Text">A text representation of a HTTP basic authentication header.</param>
            <param name="BasicAuthentication">The parsed HTTP basic authentication header.</param>
            <returns>true, when the parsing was successful, else false.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPBasicAuthentication.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods">
            <summary>
            Supported HTTP methods, but only used for HTTP mapping attributes!
            Internally the HTTPMethod class is used.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.DELETE">
            <summary>
            Delete the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.GET">
            <summary>
            Return the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.HEAD">
            <summary>
            Return only the headers (not including the body) of the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.OPTIONS">
            <summary>
            Return a list of valid HTTP verbs for the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.PATCH">
            <summary>
            Patch the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.TRAVERSE">
            <summary>
            Traverse the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.FILTER">
            <summary>
            Similar to a GET request, but with an additional filter methods within the http body.
            This can be implemented via a JavaScript function within the HTTP body.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.COUNT">
            <summary>
            Counts the number of elements which would be returned by a GET or FILTER request.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.COMPOSE">
            <summary>
            Composes a new resource (e.g. send a html form to compose a new resource).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.CREATE">
            <summary>
            Creates a new resource (a replacement for PUT and POST).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.ADD">
            <summary>
            Add a new resource to a collection of resources (a replacement for PUT and POST).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.UPDATE">
            <summary>
            Update a resource (a replacement for PUT).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.EDIT">
            <summary>
            Edits a resource, e.g. return a HTML page for editing.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.MONITOR">
            <summary>
            Monitors a resource or collection resource for modifications using an eventstream.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.MAPREDUCE">
            <summary>
            Maps all elements of a collection resource and may reduce this to a second data structure.
            This can be implemented via two JavaScript functions within the HTTP body.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.SUBSCRIBE">
            <summary>
            Subscribe an URI to receive notifications from this resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.UNSUBSCRIBE">
            <summary>
            Unsubscribe an URI to receive notifications from this resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.NOTIFY">
            <summary>
            Notify a subscriber of an URI about notifications from a resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods.CHECK">
            <summary>
            Check a resource.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod">
            <summary>
            HTTP methods
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.MethodName">
            <summary>
            The name of the HTTP method.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.IsSafe">
            <summary>
            IsSafe
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.IsIdempotent">
            <summary>
            This HTTP methods has no side-effects for N > 0 identical
            requests, as it is the same as for a single request.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.Description">
            <summary>
            The description of this HTTP method.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.IsNullOrEmpty">
            <summary>
            Indicates whether this HTTP method is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.Length">
            <summary>
            The length of the HTTP method.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new HTTP method based on the given parameters.
            </summary>
            <param name="MethodName">The name of the HTTP method.</param>
            <param name="IsSafe"></param>
            <param name="IsIdempotent">This HTTP methods has no side-effects for N > 0 identical requests, as it is the same as for a single request.</param>
            <param name="Description">The description of this HTTP method.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.Create(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new HTTP method based on the given parameters.
            </summary>
            <param name="MethodName">The name of the HTTP method.</param>
            <param name="IsSafe"></param>
            <param name="IsIdempotent">This HTTP methods has no side-effects for N > 0 identical requests, as it is the same as for a single request.</param>
            <param name="Description">The description of this HTTP method.</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.DELETE">
            <summary>
            Delete the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.GET">
            <summary>
            Return the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.HEAD">
            <summary>
            Return only the headers (not including the body) of the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.OPTIONS">
            <summary>
            Return a list of valid HTTP verbs for the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.SEARCH">
            <summary>
            Similar to SEARCH, searches for matching items, but might filter or sort those items differently.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.EXISTS">
            <summary>
            Similar to GET, checks wether a resource exists, but only returns 'true' or 'false'.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.COUNT">
            <summary>
            Counts the number of elements in a resource collection.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.FILTER">
            <summary>
            Similar to GET, but with an additional filter methods within the http body.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.STATUS">
            <summary>
            Returns dynamic status information on a single resource or an entire resource collection.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.CREATE">
            <summary>
            Creates a new resource. Within a resource collection the unique
            identification of the new resource will be chosen by the server.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.ADD">
            <summary>
            Adds a new resource to a resource collection. It will fail when
            a unique identification of the resource is missing or already
            exists on the server.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.ADDIFNOTEXISTS">
            <summary>
            Adds a new resource to a resource collection. The request will be silently
            ignored when the unique identification of the resource already exists on
            the server.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.PATCH">
            <summary>
            Patch the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.ANNOUNCE">
            <summary>
            Announce the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.TRAVERSE">
            <summary>
            Traverse the given resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.QUERY">
            <summary>
            Query a resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.COMPOSE">
            <summary>
            Composes a new resource (e.g. send a html form to compose a new resource)
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.SET">
            <summary>
            SET the value of a resource (a replacement for PUT and POST)
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.CHOWN">
            <summary>
            Change the owner of a resource
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.AUTH">
            <summary>
            Authenticate the given user/resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.DEAUTH">
            <summary>
            Deauthenticate the given user/resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.IMPERSONATE">
            <summary>
            Impersonate (become/switch to) the given user/resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.DEPERSONATE">
            <summary>
            Depersonate (switch back) from the given user/resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.UPDATE">
            <summary>
            Update a resource (a replacement for PUT)
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.EDIT">
            <summary>
            Edits a resource, e.g. return a HTML page for editing.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.MONITOR">
            <summary>
            Monitors a resource or collection resource for modifications using an eventstream.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.MAPREDUCE">
            <summary>
            Maps all elements of a collection resource and may reduce this to a second data structure.
            This can be implemented via two JavaScript functions within the HTTP body.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.SUBSCRIBE">
            <summary>
            Subscribe an URI to receive notifications from this resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.UNSUBSCRIBE">
            <summary>
            Unsubscribe an URI to receive notifications from this resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.NOTIFY">
            <summary>
            Notify a subscriber of an URI about notifications from a resource.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.CHECK">
            <summary>
            Check a resource.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.ParseEnum(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods)">
            <summary>
            Tries to find the appropriate HTTPMethod for the given HTTPMethods.
            </summary>
            <param name="HTTPMethodsEnum">A HTTPMethod code as string</param>
            <returns>A HTTPMethod</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.ParseString(System.String)">
            <summary>
            Tries to find the appropriate HTTPMethod for the given string representation.
            </summary>
            <param name="MethodNameAsString">A string representation of a HTTPMethod.</param>
            <returns>A HTTPMethod.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.TryParseEnum(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod@)">
            <summary>
            Tries to find the appropriate HTTPMethod for the given HTTPMethods.
            </summary>
            <param name="HTTPMethodEnum">A HTTP method.</param>
            <param name="HTTPMethod">The parsed HTTP method.</param>
            <returns>true or false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.TryParseString(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod@)">
            <summary>
            Tries to find the appropriate HTTPMethod for the given string.
            </summary>
            <param name="MethodName">A HTTP method name.</param>
            <param name="HTTPMethod">The parsed HTTP method.</param>
            <returns>true or false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPMethod1">A HTTP method.</param>
            <param name="HTTPMethod2">Another HTTP method.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPMethod1">A HTTP method.</param>
            <param name="HTTPMethod2">Another HTTP method.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPMethod1">A HTTP method.</param>
            <param name="HTTPMethod2">Another HTTP method.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPMethod1">A HTTP method.</param>
            <param name="HTTPMethod2">Another HTTP method.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPMethod1">A HTTP method.</param>
            <param name="HTTPMethod2">Another HTTP method.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPMethod1">A HTTP method.</param>
            <param name="HTTPMethod2">Another HTTP method.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPMethod">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Compares two HTTPMethod for equality.
            </summary>
            <param name="HTTPMethod">A HTTPMethod to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryStringExtensions">
            <summary>
            Extension methods for the HTTP QueryString class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryStringExtensions.ParseFromTimestampFilter(org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString)">
            <summary>
            Parse optional from-timestamp filter...
            </summary>
            <param name="QueryString">A HTTP query string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryStringExtensions.ParseToTimestampFilter(org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString)">
            <summary>
            Parse optional to-timestamp filter...
            </summary>
            <param name="QueryString">A HTTP query string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryStringExtensions.ParseFromToTimestampFilters(org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString,System.Nullable{System.DateTime}@,System.Nullable{System.DateTime}@)">
            <summary>
            Parse optional from-/to-timestamp filters...
            </summary>
            <param name="QueryString">A HTTP query string.</param>
            <param name="FromTimestamp">The optional 'from' query parameter.</param>
            <param name="ToTimestamp">The optional 'to' query parameter.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString">
            <summary>
            A HTTP Query String.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.#ctor(System.String)">
            <summary>
            Create a new query string based on the optional given string repesentation.
            </summary>
            <param name="Text">An optional text to parse.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.New">
            <summary>
            Return a new empty query string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.Parse(System.String)">
            <summary>
             Parse the given string repesentation of a HTTP Query String.
            </summary>
            <param name="Text">The text to parse.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.Add(System.String,System.String)">
            <summary>
            Add the given key value pair to the query string.
            </summary>
            <param name="Key">The key.</param>
            <param name="Value">The value associated with the key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add the given key value pairs to the query string.
            </summary>
            <param name="Key">The key.</param>
            <param name="Values">The values associated with the key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.Remove(System.String)">
            <summary>
            Remove a key values pair from the query string.
            </summary>
            <param name="Key">The key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.Remove(System.String,System.String)">
            <summary>
            Remove the given key value pair from the query string.
            </summary>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.Remove(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove the given key value pairs from the query string.
            </summary>
            <param name="Key">The key.</param>
            <param name="Values">The values associated with the key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.CreateStringFilter``1(System.String,System.Func{``0,System.String,System.Boolean})">
            <summary>
            Create a filter based on the given HTTP query parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ParameterName">The name of the query parameter.</param>
            <param name="FilterDelegate">A filter delegate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.GetBoolean(System.String)">
            <summary>
            Get an optional Boolean.
            </summary>
            <param name="ParameterName">The name of the HTTP query paramerter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.GetBoolean(System.String,System.Boolean)">
            <summary>
            Get a Boolean, or the given default value.
            </summary>
            <param name="ParameterName">The name of the HTTP query paramerter.</param>
            <param name="DefaultValue">The default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.GetDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get a timestamp from a HTTP query parameter.
            </summary>
            <param name="ParameterName">The name of the query parameter.</param>
            <param name="DefaultValue">An optional default timestamp.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.TryGetDateTime(System.String)">
            <summary>
            Try to get a timestamp from a HTTP query parameter.
            </summary>
            <param name="ParameterName">The name of the query parameter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.TryGetDateTime(System.String,System.DateTime@)">
            <summary>
            Try to get a timestamp from a HTTP query parameter.
            </summary>
            <param name="ParameterName">The name of the query parameter.</param>
            <param name="Timestamp">The parsed timestamp.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.CreateDateTimeFilter``1(System.String,System.Func{``0,System.DateTime,System.Boolean})">
            <summary>
            Create a timestamp filter based on the given HTTP query parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ParameterName">The name of the query parameter.</param>
            <param name="FilterDelegate">A filter delegate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.QueryString.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType">
            <summary>
            HTTP Keep-Alive response header property.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType.Timeout">
            <summary>
            The timeout till the next request.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType.MaxNumberOfRequests">
            <summary>
            The maximum number of requests within this connection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType.#ctor(System.String)">
            <summary>
            Parse the string representation of a HTTP accept header field.
            </summary>
            <param name="AcceptString"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="KeepAliveType">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType)">
            <summary>
            Compares two KeepAliveType for equality.
            </summary>
            <param name="KeepAliveType">An KeepAliveType to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.KeepAliveType.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.RequestLogHandler">
            <summary>
            The delegate for the HTTP request log.
            </summary>
            <param name="Timestamp">The timestamp of the incoming request.</param>
            <param name="HTTPServer">The sending HTTP server.</param>
            <param name="Request">The incoming request.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler">
            <summary>
            The delegate for the HTTP request log.
            </summary>
            <param name="Timestamp">The timestamp of the incoming request.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The incoming request.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AccessLogHandler">
            <summary>
            The delegate for the HTTP access log.
            </summary>
            <param name="Timestamp">The timestamp of the incoming request.</param>
            <param name="HTTPServer">The sending HTTP server.</param>
            <param name="Request">The incoming request.</param>
            <param name="Response">The outgoing response.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler">
            <summary>
            The delegate for the HTTP access log.
            </summary>
            <param name="Timestamp">The timestamp of the incoming request.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The incoming request.</param>
            <param name="Response">The outgoing response.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.ErrorLogHandler">
            <summary>
            The delegate for the HTTP error log.
            </summary>
            <param name="Timestamp">The timestamp of the incoming request.</param>
            <param name="HTTPServer">The sending HTTP server.</param>
            <param name="Request">The incoming request.</param>
            <param name="Response">The outgoing response.</param>
            <param name="Error">The occured error.</param>
            <param name="LastException">The last occured exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPErrorLogHandler">
            <summary>
            The delegate for the HTTP error log.
            </summary>
            <param name="Timestamp">The timestamp of the incoming request.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The incoming request.</param>
            <param name="Response">The outgoing response.</param>
            <param name="Error">The occured error.</param>
            <param name="LastException">The last occured exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientRequestLogHandler">
            <summary>
            The delegate for logging the HTTP request send by a HTTP client.
            </summary>
            <param name="Timestamp">The timestamp of the outgoing HTTP request.</param>
            <param name="HTTPClient">The HTTP client sending the HTTP request.</param>
            <param name="Request">The outgoing HTTP request.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientResponseLogHandler">
            <summary>
            The delegate for logging the HTTP response received by a HTTP client.
            </summary>
            <param name="Timestamp">The timestamp of the incoming HTTP response.</param>
            <param name="HTTPClient">The HTTP client receiving the HTTP request.</param>
            <param name="Request">The outgoing HTTP request.</param>
            <param name="Response">The incoming HTTP response.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate">
            <summary>
            A HTTP delegate.
            </summary>
            <param name="Request">The HTTP request.</param>
            <returns>A HTTP response task.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication">
            <summary>
            A HTTP delegate for HTTP authentication.
            </summary>
            <param name="Request">The HTTP request.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStandardHandlers">
            <summary>
            Standard handlers for HTTP servers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStandardHandlers.RegisterRAWRequestHandler(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod})">
            <summary>
            Return the RAW request header.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStandardHandlers.RegisterMovedTemporarilyHandler(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Register a MovedTemporarily handler.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStandardHandlers.RegisterResourcesFile(org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Reflection.Assembly,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.String)">
            <summary>
            Returns internal resources embedded within the given assembly.
            </summary>
            <param name="HTTPServer">A HTTP server.</param>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="URLTemplate">An URL template.</param>
            <param name="ResourceAssembly">The assembly where the resources are located.</param>
            <param name="ResourceFilename">The path to the file within the assembly.</param>
            <param name="ResponseContentType">Set the HTTP MIME content-type of the file. If null try to autodetect the content type based on the filename extention.</param>
            <param name="CacheControl">Set the HTTP cache control response header.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStandardHandlers.RegisterResourcesFolder(org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.String,System.Reflection.Assembly,System.String,System.String,System.String,System.String)">
            <summary>
            Returns internal resources embedded within the given assembly.
            </summary>
            <param name="HTTPServer">A HTTP server.</param>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="URLTemplate">An URL template.</param>
            <param name="ResourcePath">The path to the file within the assembly.</param>
            <param name="ResourceAssembly">Optionally the assembly where the resources are located (default: the calling assembly).</param>
            <param name="DefaultFilename">The default file to load.</param>
            <param name="HTTPRealm">An optional realm for HTTP basic authentication.</param>
            <param name="HTTPLogin">An optional login for HTTP basic authentication.</param>
            <param name="HTTPPassword">An optional password for HTTP basic authentication.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStandardHandlers.RegisterFilesystemFile(org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Func{System.String[],System.String},System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.String)">
            <summary>
            Returns a resource from the given file system location.
            </summary>
            <param name="HTTPServer">A HTTP server.</param>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="URLTemplate">An URL template.</param>
            <param name="ResourceFilenameBuilder">The path to the file within the assembly.</param>
            <param name="DefaultFile">If an error occures, return this file.</param>
            <param name="ResponseContentType">Set the HTTP MIME content-type of the file. If null try to autodetect the content type based on the filename extention.</param>
            <param name="CacheControl">Set the HTTP cache control response header.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStandardHandlers.RegisterFilesystemFolder(org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Func{System.String[],System.String},System.String)">
            <summary>
            Returns resources from the given file system location.
            </summary>
            <param name="HTTPServer">A HTTP server.</param>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="URLTemplate">An URL template.</param>
            <param name="ResourcePath">The path to the file within the assembly.</param>
            <param name="DefaultFilename">The default file to load.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStandardHandlers.RegisterWatchedFileSystemFolder(org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.String)">
            <summary>
            Returns resources from the given file system location.
            </summary>
            <param name="HTTPServer">A HTTP server.</param>
            <param name="URLTemplate">An URL template.</param>
            <param name="DefaultFilename">The default file to load.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStandardHandlers.RegisterWatchedFileSystemFolder(org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.String)">
            <summary>
            Returns resources from the given file system location.
            </summary>
            <param name="HTTPServer">A HTTP server.</param>
            <param name="URLTemplate">An URL template.</param>
            <param name="DefaultFilename">The default file to load.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2">
            <summary>
            A multitenant HTTP/1.1 server.
            </summary>
            <typeparam name="T">The type of a collection of tenants.</typeparam>
            <typeparam name="U">The type of the tenants.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.DefaultServerName">
            <summary>
            The default HTTP servername, used whenever
            no HTTP Host-header had been given.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.HTTPSecurity">
            <summary>
            An associated HTTP security object.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.DNSClient">
            <summary>
            The DNS defines which DNS servers to use.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.ServerCertificateSelector">
            <summary>
            The optional delegate to select a SSL/TLS server certificate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.ClientCertificateValidator">
            <summary>
            The optional delegate to verify the SSL/TLS client certificate used for authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.ClientCertificateSelector">
            <summary>
            The optional delegate to select the SSL/TLS client certificate used for authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.AllowedTLSProtocols">
            <summary>
            The SSL/TLS protocol(s) allowed for this connection.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.IsStarted">
            <summary>
            Is the server already started?
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.NumberOfClients">
            <summary>
            The current number of attached TCP clients.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.RequestLog">
            <summary>
            An event called whenever a HTTP request came in.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.ResponseLog">
            <summary>
            An event called whenever a HTTP request could successfully be processed.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.ErrorLog">
            <summary>
            An event called whenever a HTTP request resulted in an error.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.#ctor(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.RemoteCertificateValidationCallback,System.Security.Authentication.SslProtocols,System.String,System.Threading.ThreadPriority,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Boolean,System.Nullable{System.TimeSpan},System.UInt32,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean)">
            <summary>
            Initialize the multitenant HTTP server using the given parameters.
            </summary>
            <param name="TCPPort">The TCP port to listen on.</param>
            <param name="DefaultServerName">The default HTTP servername, used whenever no HTTP Host-header has been given.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            
            <param name="DNSClient">The DNS client to use.</param>
            <param name="Autostart">Start the HTTP server thread immediately (default: no).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer)">
            <summary>
            Initialize the multitenant HTTP server using the given parameters.
            </summary>
            <param name="HTTPServer">An existing non-multitenant HTTP server.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.GetAllTenants(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Return all tenants available for the given hostname.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.TryGetTenants(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,`0@)">
             <summary>
            Try to return all tenants available for the given hostname.
             </summary>
             <param name="Hostname">The HTTP hostname.</param>
             <param name="Tenants">A tenant.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.TryAddTenants(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,`0)">
             <summary>
            Try to return all tenants available for the given hostname.
             </summary>
             <param name="Hostname">The HTTP hostname.</param>
             <param name="Tenants">A tenant.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.RemoveTenants(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,`0)">
             <summary>
            Try to return all tenants available for the given hostname.
             </summary>
             <param name="Hostname">The HTTP hostname.</param>
             <param name="Tenants">A tenant.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.Redirect(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Add a URL based method redirect for the given URL template.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplate">The URL template.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            <param name="URLTarget">The target URL of the redirect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.Redirect(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Add a URL based method redirect for the given URL template.
            </summary>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplate">The URL template.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            <param name="URLTarget">The target URL of the redirect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.AddMethodCallback(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement)">
            <summary>
            Add a method callback for the given URL template.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplate">The URL template.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            <param name="ContentTypeAuthentication">Whether this method needs explicit HTTP content type authentication or not.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handler.</param>
            <param name="HTTPDelegate">The method to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.AddMethodCallback(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement)">
            <summary>
            Add a method callback for the given URL template.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplates">An enumeration of URL templates.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            <param name="ContentTypeAuthentication">Whether this method needs explicit HTTP content type authentication or not.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handler.</param>
            <param name="HTTPDelegate">The method to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.AddMethodCallback(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement)">
            <summary>
            Add a method callback for the given URL template.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplate">The URL template.</param>
            <param name="HTTPContentTypes">An enumeration of HTTP content types.</param>
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            <param name="ContentTypeAuthentication">Whether this method needs explicit HTTP content type authentication or not.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handler.</param>
            <param name="HTTPDelegate">The method to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.AddMethodCallback(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement)">
            <summary>
            Add a method callback for the given URL template.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplates">An enumeration of URL templates.</param>
            <param name="HTTPContentTypes">An enumeration of HTTP content types.</param>
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            <param name="ContentTypeAuthentication">Whether this method needs explicit HTTP content type authentication or not.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handler.</param>
            <param name="HTTPDelegate">The method to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.GetHandlers(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType[],org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType},System.Action{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Call the best matching method handler for the given HTTP request.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.InvokeHandler(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Call the best matching method handler for the given HTTP request.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.AddEventSource``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,System.UInt32,System.Nullable{System.TimeSpan},System.Func{``0,System.String},System.Func{System.String,``0},System.Boolean,System.String,System.Func{System.String,System.DateTime,System.String},System.String)">
            <summary>
            Add a HTTP Sever Sent Events source.
            </summary>
            <param name="EventIdentification">The unique identification of the event source.</param>
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="DataSerializer">A delegate to serialize the stored events.</param>
            <param name="DataDeserializer">A delegate to deserialize stored events.</param>
            <param name="EnableLogging">Enables storing and reloading events </param>
            <param name="LogfilePrefix">A prefix for the log file names or locations.</param>
            <param name="LogfileName">A delegate to create a filename for storing and reloading events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.AddEventSource``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.UInt32,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{``0},System.Boolean},System.Nullable{System.TimeSpan},System.Func{``0,System.String},System.Func{System.String,``0},System.Boolean,System.String,System.Func{System.String,System.DateTime,System.String},System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate)">
            <summary>
            Add a HTTP Sever Sent Events source and a method call back for the given URL template.
            </summary>
            <param name="EventIdentification">The unique identification of the event source.</param>
            <param name="URLTemplate">The URL template.</param>
            
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="IncludeFilterAtRuntime">Include this events within the HTTP SSE output. Can e.g. be used to filter events by HTTP users.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="DataSerializer">A delegate to serialize the stored events.</param>
            <param name="DataDeserializer">A delegate to deserialize stored events.</param>
            <param name="EnableLogging">Enables storing and reloading events </param>
            <param name="LogfilePrefix">A prefix for the log file names or locations.</param>
            <param name="LogfileName">A delegate to create a filename for storing and reloading events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
            
            <param name="Hostname">The HTTP host.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            
            <param name="DefaultErrorHandler">The default error handler.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.Get(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.Get``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.TryGet(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource@)">
            <summary>
            Try to return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
            <param name="EventSource">The event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.TryGet``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource{``0}@)">
            <summary>
            Try to return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
            <param name="EventSource">The event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.EventSources(System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource,System.Boolean})">
            <summary>
            Return a filtered enumeration of all event sources.
            </summary>
            <param name="IncludeEventSource">An event source filter delegate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.EventSources``1(System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource,System.Boolean})">
            <summary>
            Return a filtered enumeration of all event sources.
            </summary>
            <param name="IncludeEventSource">An event source filter delegate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer`2.GetErrorHandler(System.String,System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode)">
            <summary>
            Return the best matching error handler for the given parameters.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer">
            <summary>
            A HTTP/1.1 server.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.DefaultHTTPServerName">
            <summary>
            The default HTTP server name.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.DefaultHTTPServerPort">
            <summary>
            The default HTTP server TCP port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.DefaultServerName">
            <summary>
            The default HTTP servername, used whenever
            no HTTP Host-header had been given.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.HTTPSecurity">
            <summary>
            An associated HTTP security object.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.RequestLog">
            <summary>
            An event called whenever a HTTP request came in.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.ResponseLog">
            <summary>
            An event called whenever a HTTP request could successfully be processed.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.ErrorLog">
            <summary>
            An event called whenever a HTTP request resulted in an error.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.#ctor(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.RemoteCertificateValidationCallback,System.Nullable{System.Security.Authentication.SslProtocols},System.String,System.Nullable{System.Threading.ThreadPriority},System.Nullable{System.Boolean},org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.UInt32},org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean)">
            <summary>
            Initialize the HTTP server using the given parameters.
            </summary>
            <param name="TCPPort">The TCP port to listen on.</param>
            <param name="DefaultServerName">The default HTTP servername, used whenever no HTTP Host-header has been given.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            
            <param name="DNSClient">The DNS client to use.</param>
            <param name="Autostart">Start the HTTP server thread immediately (default: no).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.Redirect(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Add a URL based method redirect for the given URL template.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplate">The URL template.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            <param name="URLTarget">The target URL of the redirect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.Redirect(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Add a URL based method redirect for the given URL template.
            </summary>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplate">The URL template.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            <param name="URLTarget">The target URL of the redirect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.AddHandler(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement)">
            <summary>
            Add a method callback for the given URL template.
            </summary>
            <param name="HTTPDelegate">A delegate called for each incoming HTTP request.</param>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="URLTemplate">The URL template.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            <param name="ContentTypeAuthentication">Whether this method needs explicit HTTP content type authentication or not.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handler.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.AddMethodCallback(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement)">
            <summary>
            Add a method callback for the given URL template.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplate">The URL template.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            <param name="ContentTypeAuthentication">Whether this method needs explicit HTTP content type authentication or not.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handler.</param>
            <param name="HTTPDelegate">The method to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.AddMethodCallback(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement)">
            <summary>
            Add a method callback for the given URL template.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplates">An enumeration of URL templates.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            <param name="HostAuthentication">Whether this method needs explicit host authentication or not.</param>
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            <param name="ContentTypeAuthentication">Whether this method needs explicit HTTP content type authentication or not.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handler.</param>
            <param name="HTTPDelegate">The method to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.AddMethodCallback(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement)">
            <summary>
            Add a method callback for the given URL template.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplate">The URL template.</param>
            <param name="HTTPContentTypes">An enumeration of HTTP content types.</param>
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            <param name="ContentTypeAuthentication">Whether this method needs explicit HTTP content type authentication or not.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handler.</param>
            <param name="HTTPDelegate">The method to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.AddMethodCallback(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement)">
            <summary>
            Add a method callback for the given URL template.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="URLTemplates">An enumeration of URL templates.</param>
            <param name="HTTPContentTypes">An enumeration of HTTP content types.</param>
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            <param name="ContentTypeAuthentication">Whether this method needs explicit HTTP content type authentication or not.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handler.</param>
            <param name="HTTPDelegate">The method to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.ReplaceHandler(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate)">
            <summary>
            Add a method callback for the given URL template.
            </summary>
            <param name="HTTPDelegate">A delegate called for each incoming HTTP request.</param>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="URLTemplate">The URL template.</param>
            <param name="HTTPMethod">The HTTP method.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            <param name="ContentTypeAuthentication">Whether this method needs explicit HTTP content type authentication or not.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handler.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.GetHandlers(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Return the best matching method handler for the given parameters.
            </summary>
            <param name="Request">A HTTP request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.GetHandlers(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType[],org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType},System.Action{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Return the best matching method handler for the given parameters.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.InvokeHandler(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Call the best matching method handler for the given HTTP request.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.AddEventSource``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,System.UInt32,System.Nullable{System.TimeSpan},System.Func{``0,System.String},System.Func{System.String,``0},System.Boolean,System.String,System.Func{System.String,System.DateTime,System.String},System.String)">
            <summary>
            Add a HTTP Sever Sent Events source.
            </summary>
            <param name="EventIdentification">The unique identification of the event source.</param>
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="DataSerializer">A delegate to serialize the stored events.</param>
            <param name="DataDeserializer">A delegate to deserialize stored events.</param>
            <param name="EnableLogging">Whether to enable event logging.</param>
            <param name="LogfilePrefix">The prefix of the logfile names.</param>
            <param name="LogfileName">A delegate to create a filename for storing and reloading events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.AddEventSource``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.UInt32,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{``0},System.Boolean},System.Nullable{System.TimeSpan},System.Func{``0,System.String},System.Func{System.String,``0},System.Boolean,System.String,System.Func{System.String,System.DateTime,System.String},System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate)">
            <summary>
            Add a HTTP Sever Sent Events source and a method call back for the given URL template.
            </summary>
            <param name="EventIdentification">The unique identification of the event source.</param>
            <param name="URLTemplate">The URL template.</param>
            
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="IncludeFilterAtRuntime">Include this events within the HTTP SSE output. Can e.g. be used to filter events by HTTP users.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="DataSerializer">A delegate to serialize the stored events.</param>
            <param name="DataDeserializer">A delegate to deserialize stored events.</param>
            <param name="EnableLogging">Whether to enable event logging.</param>
            <param name="LogfilePrefix">The prefix of the logfile names.</param>
            <param name="LogfileName">A delegate to create a filename for storing and reloading events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
            
            <param name="Hostname">The HTTP host.</param>
            <param name="HttpMethod">The HTTP method.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            
            <param name="URLAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            
            <param name="DefaultErrorHandler">The default error handler.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.Get(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.Get``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.TryGet(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource@)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
            <param name="EventSource">The event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.TryGet``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource{``0}@)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
            <param name="EventSource">The event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.EventSources(System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource,System.Boolean})">
            <summary>
            Return a filtered enumeration of all event sources.
            </summary>
            <param name="IncludeEventSource">An event source filter delegate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.EventSources``1(System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource,System.Boolean})">
            <summary>
            Return a filtered enumeration of all event sources.
            </summary>
            <param name="IncludeEventSource">An event source filter delegate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer.GetErrorHandler(System.String,System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode)">
            <summary>
            Return the best matching error handler for the given parameters.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AuthenticationAttribute">
            <summary>
            The generic HTTP authentication attribute.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AuthenticationAttribute.AuthenticationType">
            <summary>
            The authentication type(s).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AuthenticationAttribute.Realm">
            <summary>
            The HTTP realm.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AuthenticationAttribute.#ctor">
            <summary>
            The generic HTTP authentication attribute.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AuthenticationAttribute.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes)">
            <summary>
            The generic HTTP authentication attribute.
            </summary>
            <param name="AuthenticationType">The authentication type(s).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AuthenticationAttribute.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes,System.String)">
            <summary>
            The generic HTTP authentication attribute including a realm.
            </summary>
            <param name="AuthenticationType">The authentication type(s).</param>
            <param name="Realm">The HTTP realm.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.NoAuthenticationAttribute">
            <summary>
            No HTTP authentication required.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.NoAuthenticationAttribute.#ctor">
            <summary>
            No HTTP authentication required.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.OptionalAuthenticationAttribute">
            <summary>
            Optional authentication possible.
            </summary>
            <seealso cref="!:http://tools.ietf.org/html/draft-oiwa-httpbis-auth-extension-00#section-3"/>
            <remarks>Servers MAY send HTTP successful responses (response code 200, 206 and others) containing the Optional-WWW-Authenticate header as a replacement of a 401 response when it is an authentication-initializing response.  The Optional-WWW-Authenticate header MUST NOT be contained in 401 responses.</remarks>
            <example>HTTP/1.1 200 OK\r\nOptional-WWW-Authenticate: Basic realm="xxxx"</example>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.OptionalAuthenticationAttribute.#ctor">
            <summary>
            Optional authentication possible.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.OptionalAuthenticationAttribute.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes)">
            <summary>
            Optional authentication possible.
            </summary>
            <param name="AuthenticationType">The authentication type(s).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.OptionalAuthenticationAttribute.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes,System.String)">
            <summary>
            Optional authentication possible.
            </summary>
            <param name="AuthenticationType">The authentication type(s).</param>
            <param name="Realm">The HTTP realm.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.ForceAuthenticationAttribute">
            <summary>
            HTTP authentication required.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.ForceAuthenticationAttribute.#ctor">
            <summary>
            HTTP authentication required.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.ForceAuthenticationAttribute.#ctor(System.String)">
            <summary>
            HTTP authentication required.
            </summary>
            <param name="Realm">The HTTP realm.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.ForceAuthenticationAttribute.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthenticationTypes,System.String)">
            <summary>
            HTTP authentication required.
            </summary>
            <param name="AuthenticationType">The authentication type(s).</param>
            <param name="Realm">The HTTP realm.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventMappingAttribute">
            <summary>
            Mapps a HTTP event request onto a .NET method.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventMappingAttribute.EventIdentification">
            <summary>
            The internal identification of the HTTP event.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventMappingAttribute.UriTemplate">
            <summary>
            The URI template of this HTTP event mapping.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventMappingAttribute.HTTPMethod">
            <summary>
            The HTTP method to use.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventMappingAttribute.MaxNumberOfCachedEvents">
            <summary>
            Maximum number of cached events.
            Zero means infinite.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventMappingAttribute.RetryIntervall">
            <summary>
            Retry intervall.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventMappingAttribute.IsSharedEventSource">
            <summary>
            The event source may be accessed via multiple URI templates.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventMappingAttribute.#ctor(System.String,System.String,System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            Creates a new HTTP event mapping.
            </summary>
            <param name="EventIdentification">The internal identification of the HTTP event.</param>
            <param name="UriTemplate">The URI template of this HTTP event mapping.</param>
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events (0 means infinite).</param>
            <param name="RetryIntervallSeconds">The retry intervall in seconds.</param>
            <param name="IsSharedEventSource">The event source may be accessed via multiple URI templates.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventMappingAttribute.#ctor(System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods,System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            Creates a new HTTP event mapping.
            </summary>
            <param name="EventIdentification">The internal identification of the HTTP event.</param>
            <param name="UriTemplate">The URI template of this HTTP event mapping.</param>
            <param name="HTTPMethod">The HTTP method to use.</param>
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events (0 means infinite).</param>
            <param name="RetryIntervallSeconds">The retry intervall in seconds.</param>
            <param name="IsSharedEventSource">The event source may be accessed via multiple URI templates.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMappingAttribute">
            <summary>
            Mapps a HTTP request onto a .NET method.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMappingAttribute.HTTPMethod">
            <summary>
            The HTTP method of this HTTP mapping.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMappingAttribute.UriTemplate">
            <summary>
            The URI template of this HTTP mapping.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMappingAttribute.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,System.String)">
            <summary>
            Generates a new HTTP mapping.
            </summary>
            <param name="HTTPMethod">The HTTP method of this HTTP mapping.</param>
            <param name="UriTemplate">The URI template of this HTTP mapping.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMappingAttribute.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethods,System.String)">
            <summary>
            Generates a new HTTP mapping.
            </summary>
            <param name="HTTPMethod">The HTTP method of this HTTP mapping.</param>
            <param name="UriTemplate">The URI template of this HTTP mapping.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMappingAttribute.#ctor(System.String,System.String)">
            <summary>
            Generates a new HTTP mapping.
            </summary>
            <param name="HTTPMethodString">The HTTP method of this HTTP mapping.</param>
            <param name="UriTemplate">The URI template of this HTTP mapping.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResourcesMappingAttribute">
            <summary>
            Mapps a HTTP request onto embedded resources.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResourcesMappingAttribute.UriTemplate">
            <summary>
            The URI template.
            </summary>  
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResourcesMappingAttribute.ResourcesPath">
            <summary>
            The embedded resources path.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResourcesMappingAttribute.DefaultFile">
            <summary>
            The embedded resources path.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResourcesMappingAttribute.AllowDirectoryListing">
            <summary>
            The embedded resources path.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResourcesMappingAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Generates a new HTTP mapping.
            </summary>
            <param name="UriTemplate">The URI template.</param>
            <param name="ResourcesPath">The embedded resources path.</param>
            <param name="DefaultFile">The default file to load if a path was requested.</param>
            <param name="AllowDirectoryListing">Allow a directory listing if a path was requested.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPErrors">
            <summary>
            HTTP errors.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPErrors.HTTPErrorResponse_old(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode,System.String)">
            <summary>
            Return a HTTP error response using the best-matching content type.
            </summary>
            <param name="HTTPRequest">The HTTP request.</param>
            <param name="StatusCode">A HTTP status code.</param>
            <param name="Reasons">Optional application side reasons for this error.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTools">
            <summary>
            HTTP tools.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTools.MovedPermanently(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Return a HTTP response redirecting to the given location permanently.
            </summary>
            <param name="HTTPRequest">The HTTP request.</param>
            <param name="Location">The location of the redirect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTools.MovedTemporarily(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Return a HTTP response redirecting to the given location temporarily.
            </summary>
            <param name="HTTPRequest">The HTTP request.</param>
            <param name="Location">The location of the redirect.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPTools.URLDecode(System.String)">
            <summary>
            Converts a string that has been encoded for transmission in a URL into a decoded string.
            </summary>
            <param name="Input">An URL encoded string.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResult`1">
            <summary>
            A structure to hold a result and an error of an operation.
            </summary>
            <typeparam name="TData">The type of the result.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResult`1.Error">
            <summary>
            The HTTPResponse when an error occured.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResult`1.Data">
            <summary>
            The result of an operation.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResult`1.ValidData">
            <summary>
            The result of an operation.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResult`1.ETag">
            <summary>
            The current ETag as state or revision of the resource.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResult`1.HasErrors">
            <summary>
            The HTTP result contains errors.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResult`1.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse.Builder,System.String)">
            <summary>
            Create a new HTTPResult when an error occurred.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResult`1.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPStatusCode,System.String,System.String)">
            <summary>
            Create a new HTTPResult when an error occurred.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSecurity.Verify">
            <summary>
            A username + password verifier.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSecurity.#ctor(System.Func{System.String,System.String,System.Boolean})">
            <summary>
            Create a new HTTP security object.
            </summary>
            <param name="Verify">A username + password verifier.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogEvent">
            <summary>
            An async event notifying about HTTP requests.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogEvent.#ctor">
            <summary>
            Create a new async event notifying about incoming HTTP requests.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogEvent.InvokeAsync(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Call all subscribers sequentially.
            </summary>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogEvent.WhenAny(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Nullable{System.TimeSpan})">
            <summary>
            Call all subscribers in parallel and wait for any to complete.
            </summary>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
            <param name="Timeout">A timeout for this operation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogEvent.WhenFirst``1(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,System.Func{``0,System.Boolean},System.Nullable{System.TimeSpan},System.Func{System.TimeSpan,``0})">
            <summary>
            Call all subscribers in parallel and wait for all to complete.
            </summary>
            <typeparam name="T">The type of the results.</typeparam>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
            <param name="VerifyResult">A delegate to verify and filter results.</param>
            <param name="Timeout">A timeout for this operation.</param>
            <param name="DefaultResult">A default result in case of errors or a timeout.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogEvent.WhenAll(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Call all subscribers in parallel and wait for all to complete.
            </summary>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogEvent">
            <summary>
            An async event notifying about HTTP responses.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogEvent.#ctor">
            <summary>
            Create a new async event notifying about HTTP responses.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogEvent.InvokeAsync(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse)">
            <summary>
            Call all subscribers sequentially.
            </summary>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
            <param name="Response">The HTTP response.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogEvent.WhenAny(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse,System.Nullable{System.TimeSpan})">
            <summary>
            Call all subscribers in parallel and wait for any to complete.
            </summary>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
            <param name="Response">The HTTP response.</param>
            <param name="Timeout">A timeout for this operation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogEvent.WhenFirst``1(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse,System.Func{``0,System.Boolean},System.Nullable{System.TimeSpan},System.Func{System.TimeSpan,``0})">
            <summary>
            Call all subscribers in parallel and wait for all to complete.
            </summary>
            <typeparam name="T">The type of the results.</typeparam>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
            <param name="Response">The HTTP response.</param>
            <param name="VerifyResult">A delegate to verify and filter results.</param>
            <param name="Timeout">A timeout for this operation.</param>
            <param name="DefaultResult">A default result in case of errors or a timeout.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogEvent.WhenAll(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse)">
            <summary>
            Call all subscribers in parallel and wait for all to complete.
            </summary>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
            <param name="Response">The HTTP response.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPErrorLogEvent">
            <summary>
            An async event notifying about HTTP errors.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPErrorLogEvent.#ctor">
            <summary>
            Create a new async event notifying about HTTP errors.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPErrorLogEvent.InvokeAsync(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse,System.String,System.Exception)">
            <summary>
            Call all subscribers sequentially.
            </summary>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
            <param name="Response">The HTTP response.</param>
            <param name="Error">An error message.</param>
            <param name="LastException">The last exception occured.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPErrorLogEvent.WhenAny(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse,System.String,System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            Call all subscribers in parallel and wait for any to complete.
            </summary>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
            <param name="Response">The HTTP response.</param>
            <param name="Error">An error message.</param>
            <param name="LastException">The last exception occured.</param>
            <param name="Timeout">A timeout for this operation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPErrorLogEvent.WhenFirst``1(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse,System.String,System.Exception,System.Func{``0,System.Boolean},System.Nullable{System.TimeSpan},System.Func{System.TimeSpan,``0})">
            <summary>
            Call all subscribers in parallel and wait for all to complete.
            </summary>
            <typeparam name="T">The type of the results.</typeparam>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
            <param name="Response">The HTTP response.</param>
            <param name="Error">An error message.</param>
            <param name="LastException">The last exception occured.</param>
            <param name="VerifyResult">A delegate to verify and filter results.</param>
            <param name="Timeout">A timeout for this operation.</param>
            <param name="DefaultResult">A default result in case of errors or a timeout.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPErrorLogEvent.WhenAll(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse,System.String,System.Exception)">
            <summary>
            Call all subscribers in parallel and wait for all to complete.
            </summary>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="HTTPAPI">The sending HTTP API.</param>
            <param name="Request">The HTTP request.</param>
            <param name="Response">The HTTP response.</param>
            <param name="Error">An error message.</param>
            <param name="LastException">The last exception occured.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI">
            <summary>
            A HTTP API.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.US">
            <summary>
            ASCII unit/cell separator
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.RS">
            <summary>
            ASCII record/row separator
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.GS">
            <summary>
            ASCII group separator
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI._Random">
            <summary>
            Internal non-cryptographic random number generator.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.DefaultHTTPServerName">
            <summary>
            The default HTTP server name.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.DefaultHTTPServiceName">
            <summary>
            The default HTTP service name.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.DefaultHTTPServerPort">
            <summary>
            The default HTTP server port.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.DefaultURLPathPrefix">
            <summary>
            The default HTTP URL path prefix.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.HTTPRoot">
            <summary>
            The HTTP root for embedded ressources.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.DefaultMaintenanceEvery">
            <summary>
            The default maintenance interval.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.totalRAM_PerformanceCounter">
            <summary>
            The performance counter to measure the total RAM usage.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.totalCPU_PerformanceCounter">
            <summary>
            The performance counter to measure the total CPU usage.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.HTTPServer">
            <summary>
            The HTTP server of the API.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.Hostname">
            <summary>
            The HTTP hostname for all URIs within this API.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.ServiceName">
            <summary>
            The name of the HTTP API service.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.ExternalDNSName">
            <summary>
            The offical URL/DNS name of this service, e.g. for sending e-mails.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.URLPathPrefix">
            <summary>
            The optional URL path prefix, used when defining URL templates.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.BasePath">
            <summary>
            When the API is served from an optional subdirectory path.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.DefaultRequestTimeout">
            <summary>
            The default request timeout for incoming HTTP requests.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.APIVersionHash">
            <summary>
            The API version hash (git commit hash value).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.SystemId">
            <summary>
            The unqiue identification of this HTTP API instance.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.HTMLTemplate">
            <summary>
            An optional HTML template.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.ReloadFinished">
            <summary>
            Whether the reload of the system is finished.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.MaintenanceEvery">
            <summary>
            The maintenance interval.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.DisableMaintenanceTasks">
            <summary>
            Disable all maintenance tasks.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.IsDevelopment">
            <summary>
            This HTTP API runs in development mode.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.DevelopmentServers">
            <summary>
            The enumeration of server names which will imply to run this service in development mode.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.DisableLogging">
            <summary>
            Disable any logging.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.LoggingPath">
            <summary>
            The path for all logfiles.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.HTTPLogger">
            <summary>
            The CPO client (HTTP client) logger.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.RequestLog">
            <summary>
            An event called whenever a HTTP request came in.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.ResponseLog">
            <summary>
            An event called whenever a HTTP request could successfully be processed.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.ErrorLog">
            <summary>
            An event called whenever a HTTP request resulted in an error.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.#ctor(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.String,System.String,Newtonsoft.Json.Linq.JObject,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Nullable{System.Security.Authentication.SslProtocols},System.String,System.Nullable{System.Threading.ThreadPriority},System.Nullable{System.Boolean},org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.UInt32},System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.LogfileCreatorDelegate,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean)">
            <summary>
            Create a new HTTP API.
            </summary>
            <param name="HTTPHostname">The HTTP hostname for all URLs within this API.</param>
            <param name="ExternalDNSName">The offical URL/DNS name of this service, e.g. for sending e-mails.</param>
            <param name="HTTPServerPort">A TCP port to listen on.</param>
            <param name="BasePath">When the API is served from an optional subdirectory path.</param>
            <param name="HTTPServerName">The default HTTP servername, used whenever no HTTP Host-header has been given.</param>
            
            <param name="URLPathPrefix">A common prefix for all URLs.</param>
            <param name="HTTPServiceName">The name of the HTTP service.</param>
            <param name="HTMLTemplate">An optional HTML template.</param>
            <param name="APIVersionHashes">The API version hashes (git commit hash values).</param>
            
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            
            <param name="DisableMaintenanceTasks">Disable all maintenance tasks.</param>
            <param name="MaintenanceInitialDelay">The initial delay of the maintenance tasks.</param>
            <param name="MaintenanceEvery">The maintenance intervall.</param>
            
            <param name="DisableWardenTasks">Disable all warden tasks.</param>
            <param name="WardenInitialDelay">The initial delay of the warden tasks.</param>
            <param name="WardenCheckEvery">The warden intervall.</param>
            
            <param name="IsDevelopment">This HTTP API runs in development mode.</param>
            <param name="DevelopmentServers">An enumeration of server names which will imply to run this service in development mode.</param>
            <param name="DisableLogging">Disable any logging.</param>
            <param name="LoggingPath">The path for all logfiles.</param>
            <param name="LogfileName">The name of the logfile.</param>
            <param name="LogfileCreator">A delegate for creating the name of the logfile for this API.</param>
            <param name="DNSClient">The DNS client of the API.</param>
            <param name="Autostart">Whether to start the API automatically.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.String,Newtonsoft.Json.Linq.JObject,System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.LogfileCreatorDelegate,System.Boolean)">
            <summary>
            Create a new HTTP API.
            </summary>
            <param name="HTTPServer">A HTTP server.</param>
            <param name="HTTPHostname">An optional HTTP hostname.</param>
            <param name="ExternalDNSName">The offical URL/DNS name of this service, e.g. for sending e-mails.</param>
            <param name="HTTPServiceName">An optional name of the HTTP API service.</param>
            <param name="BasePath">When the API is served from an optional subdirectory path.</param>
            
            <param name="URLPathPrefix">An optional URL path prefix, used when defining URL templates.</param>
            <param name="HTMLTemplate">An optional HTML template.</param>
            <param name="APIVersionHashes">The API version hashes (git commit hash values).</param>
            
            <param name="DisableMaintenanceTasks">Disable all maintenance tasks.</param>
            <param name="MaintenanceInitialDelay">The initial delay of the maintenance tasks.</param>
            <param name="MaintenanceEvery">The maintenance intervall.</param>
            
            <param name="DisableWardenTasks">Disable all warden tasks.</param>
            <param name="WardenInitialDelay">The initial delay of the warden tasks.</param>
            <param name="WardenCheckEvery">The warden intervall.</param>
            
            <param name="IsDevelopment">This HTTP API runs in development mode.</param>
            <param name="DevelopmentServers">An enumeration of server names which will imply to run this service in development mode.</param>
            <param name="DisableLogging">Disable the log file.</param>
            <param name="LoggingPath">The path for all logfiles.</param>
            <param name="LogfileName">The name of the logfile.</param>
            <param name="LogfileCreator">A delegate for creating the name of the logfile for this API.</param>
            <param name="Autostart">Whether to start the API automatically.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.AddEventSource``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,System.UInt32,System.Nullable{System.TimeSpan},System.Func{``0,System.String},System.Func{System.String,``0},System.Boolean,System.String,System.Func{System.String,System.DateTime,System.String},System.String)">
            <summary>
            Add a HTTP Sever Sent Events source.
            </summary>
            <param name="EventIdentification">The unique identification of the event source.</param>
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="DataSerializer">A delegate to serialize the stored events.</param>
            <param name="DataDeserializer">A delegate to deserialize stored events.</param>
            <param name="EnableLogging">Enables storing and reloading events </param>
            <param name="LogfilePrefix">A prefix for the log file names or locations.</param>
            <param name="LogfileName">A delegate to create a filename for storing and reloading events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.AddEventSource``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.UInt32,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{``0},System.Boolean},System.Nullable{System.TimeSpan},System.Func{``0,System.String},System.Func{System.String,``0},System.Boolean,System.String,System.Func{System.String,System.DateTime,System.String},System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate)">
            <summary>
            Add a HTTP Sever Sent Events source and a method call back for the given URI template.
            </summary>
            <param name="EventIdentification">The unique identification of the event source.</param>
            <param name="URITemplate">The URI template.</param>
            
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="IncludeFilterAtRuntime">Include this events within the HTTP SSE output. Can e.g. be used to filter events by HTTP users.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="DataSerializer">A delegate to serialize the stored events.</param>
            <param name="DataDeserializer">A delegate to deserialize stored events.</param>
            <param name="EnableLogging">Whether to enable event logging.</param>
            <param name="LogfilePrefix">The prefix of the logfile names.</param>
            <param name="LogfileName">A delegate to create a filename for storing and reloading events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
            
            <param name="Hostname">The HTTP host.</param>
            <param name="HttpMethod">The HTTP method.</param>
            <param name="HTTPContentType">The HTTP content type.</param>
            
            <param name="URIAuthentication">Whether this method needs explicit uri authentication or not.</param>
            <param name="HTTPMethodAuthentication">Whether this method needs explicit HTTP method authentication or not.</param>
            
            <param name="DefaultErrorHandler">The default error handler.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.Get(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.Get``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.TryGet(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource@)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
            <param name="EventSource">The event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.TryGet``1(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource{``0}@)">
            <summary>
            Return the event source identified by the given event source identification.
            </summary>
            <param name="EventSourceIdentification">A string to identify an event source.</param>
            <param name="EventSource">The event source.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.EventSources(System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource,System.Boolean})">
            <summary>
            Return a filtered enumeration of all event sources.
            </summary>
            <param name="IncludeEventSource">An event source filter delegate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAPI.EventSources``1(System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource,System.Boolean})">
            <summary>
            Return a filtered enumeration of all event sources.
            </summary>
            <param name="IncludeEventSource">An event source filter delegate.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.ContentTypeNode">
            <summary>
            A URL node which stores some childnodes and a callback
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.ContentTypeNode.HTTPContentType">
            <summary>
            The HTTP content type for this service.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.ContentTypeNode.HTTPContentTypeAuthentication">
            <summary>
            This and all subordinated nodes demand an explicit HTTP content type authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.ContentTypeNode.HTTPRequestLogger">
            <summary>
            A HTTP request logger.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.ContentTypeNode.HTTPResponseLogger">
            <summary>
            A HTTP response logger.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.ContentTypeNode.DefaultErrorHandler">
            <summary>
            A general error handling method.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.ContentTypeNode.ErrorHandlers">
            <summary>
            Error handling methods for specific http status codes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.ContentTypeNode.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPDelegate,org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement)">
            <summary>
            Creates a new HTTP ContentTypeNode.
            </summary>
            <param name="HTTPContentType">The http content type for this service.</param>
            <param name="HTTPContentTypeAuthentication">This and all subordinated nodes demand an explicit HTTP content type authentication.</param>
            <param name="HTTPRequestLogger">A HTTP request logger.</param>
            <param name="RequestHandler">The default delegate to call for any request to this URI template.</param>
            <param name="HTTPResponseLogger">A HTTP response logger.</param>
            <param name="DefaultErrorHandler">The default error handling delegate.</param>
            <param name="AllowReplacement">How to handle duplicate URI handlers.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.ContentTypeNode.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode">
            <summary>
            A node which stores information for maintaining multiple http hostnames.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode._URINodes">
            <summary>
            A mapping from URIs to URINodes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode.Hostname">
            <summary>
            The hostname for this (virtual) http service.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode.URIs">
            <summary>
            Return all defined URIs.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode.URLNodes">
            <summary>
            Return all URI nodes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Creates a new hostname node.
            </summary>
            <param name="Hostname">The hostname(s) for this (virtual) http service.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode.Contains(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Determines whether the given URI template is defined.
            </summary>
            <param name="URITemplate">An URI template.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode.Get(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath)">
            <summary>
            Return the URI node for the given URI template.
            </summary>
            <param name="URITemplate">An URI template.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode.TryGet(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node@)">
            <summary>
            Return the URI node for the given URI template.
            </summary>
            <param name="URITemplate">An URI template.</param>
            <param name="URINode">The attached URI node.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode.GetEnumerator">
            <summary>
            Return all URI nodes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return all URI nodes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HostnameNode.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1">
            <summary>
            A single HTTP event.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.Id">
            <summary>
            The identification of the event.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.Subevent">
            <summary>
            The subevent identification of the event.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.Timestamp">
            <summary>
            The timestamp of the event.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.Data">
            <summary>
            The attached data of the event.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.SerializedHeader">
            <summary>
            A text-representation of the attached data of the event.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.SerializedData">
            <summary>
            A text-representation of the attached data of the event.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.#ctor(System.UInt64,`0,System.String,System.String)">
            <summary>
            Create a new HTTP event based on the given parameters.
            </summary>
            <param name="Id">The id of the event.</param>
            <param name="Data">The attached data of the event.</param>
            <param name="SerializedHeader">The HTTP SSE header of the attached data of the event.</param>
            <param name="SerializedData">A text-representation of the attached data of the event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.#ctor(System.UInt64,System.DateTime,`0,System.String,System.String)">
            <summary>
            Create a new HTTP event based on the given parameters.
            </summary>
            <param name="Id">The id of the event.</param>
            <param name="Timestamp">The timestamp of the event.</param>
            <param name="Data">The attached data of the event.</param>
            <param name="SerializedHeader">The HTTP SSE header of the attached data of the event.</param>
            <param name="SerializedData">A text-representation of the attached data of the event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.#ctor(System.UInt64,System.String,`0,System.String,System.String)">
            <summary>
            Create a new HTTP event based on the given parameters.
            </summary>
            <param name="Id">The id of the event.</param>
            <param name="Subevent">The subevent.</param>
            <param name="Data">The attached data of the event.</param>
            <param name="SerializedHeader">The HTTP SSE header of the attached data of the event.</param>
            <param name="SerializedData">A text-representation of the attached data of the event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.#ctor(System.UInt64,System.DateTime,System.String,`0,System.String,System.String)">
            <summary>
            Create a new HTTP event based on the given parameters.
            </summary>
            <param name="Id">The id of the event.</param>
            <param name="Timestamp">The timestamp of the event.</param>
            <param name="Subevent">The subevent.</param>
            <param name="Data">The attached data of the event.</param>
            <param name="SerializedHeader">The HTTP SSE header of the attached data of the event.</param>
            <param name="SerializedData">A text-representation of the attached data of the event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEvent1">A HTTP event.</param>
            <param name="HTTPEvent2">Another HTTP event.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEvent1">A HTTP event.</param>
            <param name="HTTPEvent2">Another HTTP event.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEvent1">A HTTP event.</param>
            <param name="HTTPEvent2">Another HTTP event.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEvent1">A HTTP event.</param>
            <param name="HTTPEvent2">Another HTTP event.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEvent1">A HTTP event.</param>
            <param name="HTTPEvent2">Another HTTP event.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEvent1">A HTTP event.</param>
            <param name="HTTPEvent2">Another HTTP event.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0})">
            <summary>
            Compares two HTTP events for equality.
            </summary>
            <param name="HTTPEvent">A HTTP event to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEvent">Another HTTP event.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEvent`1.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1">
            <summary>
            A HTTP event source.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.US">
            <summary>
            ASCII unit/cell separator
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.RS">
            <summary>
            ASCII record/row separator
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.GS">
            <summary>
            ASCII group separator
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.EventIdentification">
            <summary>
            The internal identification of the HTTP event.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.MaxNumberOfCachedEvents">
            <summary>
            Maximum number of cached events.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.RetryIntervall">
            <summary>
            The retry intervall of this HTTP event.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.LogfileName">
            <summary>
            The delegate to create a filename for storing and reloading events.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,System.UInt64,System.Nullable{System.TimeSpan},System.Func{`0,System.String},System.Func{System.String,`0},System.Boolean,System.Func{System.String,System.DateTime,System.String},System.String)">
            <summary>
            Create a new HTTP event source.
            </summary>
            <param name="EventIdentification">The internal identification of the HTTP event.</param>
            <param name="MaxNumberOfCachedEvents">Maximum number of cached events.</param>
            <param name="RetryIntervall">The retry intervall.</param>
            <param name="DataSerializer">A delegate to serialize the stored events.</param>
            <param name="DataDeserializer">A delegate to deserialize stored events.</param>
            <param name="EnableLogging">Whether to enable event logging.</param>
            <param name="LogfileName">A delegate to create a filename for storing events.</param>
            <param name="LogfileReloadSearchPattern">The logfile search pattern for reloading events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.SubmitEvent(`0)">
            <summary>
            Submit a new event.
            </summary>
            <param name="Data">The attached event data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.SubmitEvent(System.DateTime,`0)">
            <summary>
            Submit a new subevent with a timestamp.
            </summary>
            <param name="Timestamp">The timestamp of the event.</param>
            <param name="Data">The attached event data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.SubmitEvent(System.String,`0)">
            <summary>
            Submit a new event.
            </summary>
            <param name="SubEvent">A subevent identification.</param>
            <param name="Data">The attached event data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.SubmitEvent(System.String,System.DateTime,`0)">
            <summary>
            Submit a new subevent with a timestamp.
            </summary>
            <param name="SubEvent">A subevent identification.</param>
            <param name="Timestamp">The timestamp of the event.</param>
            <param name="Data">The attached event data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.GetAllEventsGreater(System.Nullable{System.UInt64})">
            <summary>
            Get a list of events filtered by the event id.
            </summary>
            <param name="LastEventId">The Last-Event-Id header value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.GetAllEventsSince(System.DateTime)">
            <summary>
            Get a list of events filtered by a minimal timestamp.
            </summary>
            <param name="Timestamp">The earlierst timestamp of the events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode">
            <summary>
            A URL node which stores some childnodes and a callback
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode._ContentTypeNodes">
            <summary>
            A mapping from HTTPContentTypes to HTTPContentTypeNodes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.HTTPMethod">
            <summary>
            The http method for this service.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.AllowReplacement">
            <summary>
            Whether this HTTP method node HTTP handler can be replaced/overwritten.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.HTTPRequestLogger">
            <summary>
            A HTTP request logger.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.HTTPMethodAuthentication">
            <summary>
            This and all subordinated nodes demand an explicit HTTP method authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.RequestHandler">
            <summary>
            A HTTP delegate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.DefaultErrorHandler">
            <summary>
            A general error handling method.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.ErrorHandlers">
            <summary>
            Error handling methods for specific http status codes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.HTTPResponseLogger">
            <summary>
            A HTTP response logger.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.ContentTypes">
            <summary>
            Return all defined HTTP content types.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.ContentTypeNodes">
            <summary>
            Return all HTTP content type nodes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication)">
            <summary>
            Creates a new HTTPMethodNode.
            </summary>
            <param name="HTTPMethod">The http method for this service.</param>
            <param name="HTTPMethodAuthentication">This and all subordinated nodes demand an explicit HTTP method authentication.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.Contains(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType)">
            <summary>
            Determines whether the given HTTP content type is defined.
            </summary>
            <param name="ContentType">A HTTP content type.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.Get(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType)">
            <summary>
            Return the HTTP content type node for the given HTTP content type.
            </summary>
            <param name="ContentType">A HTTP content type.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.TryGet(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.HTTP.ContentTypeNode@)">
            <summary>
            Return the HTTP content type node for the given HTTP content type.
            </summary>
            <param name="ContentType">A HTTP content type.</param>
            <param name="ContentTypeNode">The attached HTTP content type node.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.GetEnumerator">
            <summary>
            Return all HTTP method nodes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return all HTTP method nodes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id">
            <summary>
            The unique identification of a HTTP Event Source.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.InternalId">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.IsNullOrEmpty">
            <summary>
            Indicates whether this identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.Length">
            <summary>
            The length of the HTTP Event Source identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.#ctor(System.String)">
            <summary>
            Create a new HTTP Event Source identification based on the given string.
            </summary>
            <param name="String">The string representation of the HTTP Event Source identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.Parse(System.String)">
            <summary>
            Parse the given string as a HTTP Event Source identification.
            </summary>
            <param name="Text">A text representation of a HTTP Event Source identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.TryParse(System.String)">
            <summary>
            Try to parse the given string as a HTTP Event Source identification.
            </summary>
            <param name="Text">A text representation of a HTTP Event Source identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id@)">
            <summary>
            Try to parse the given string as a HTTP Event Source identification.
            </summary>
            <param name="Text">A text representation of a HTTP Event Source identification.</param>
            <param name="HTTPEventSourceId">The parsed HTTP Event Source identification.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.Clone">
            <summary>
            Clone this HTTP Event Source identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.op_Equality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEventSourceId1">A HTTP Event Source identification.</param>
            <param name="HTTPEventSourceId2">Another HTTP Event Source identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEventSourceId1">A HTTP Event Source identification.</param>
            <param name="HTTPEventSourceId2">Another HTTP Event Source identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEventSourceId1">A HTTP Event Source identification.</param>
            <param name="HTTPEventSourceId2">Another HTTP Event Source identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEventSourceId1">A HTTP Event Source identification.</param>
            <param name="HTTPEventSourceId2">Another HTTP Event Source identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEventSourceId1">A HTTP Event Source identification.</param>
            <param name="HTTPEventSourceId2">Another HTTP Event Source identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEventSourceId1">A HTTP Event Source identification.</param>
            <param name="HTTPEventSourceId2">Another HTTP Event Source identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.CompareTo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="HTTPEventSourceId">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.Equals(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id)">
            <summary>
            Compares two HTTP Event Source identifications for equality.
            </summary>
            <param name="HTTPEventSourceId">An HTTP Event Source identification to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPEventSource_Id.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource`1.GetAllEventsGreater(System.Nullable{System.UInt64})">
            <summary>
            Get a list of events filtered by the event id.
            </summary>
            <param name="LastEventId">The Last-Event-Id header value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.IHTTPEventSource`1.GetAllEventsSince(System.DateTime)">
            <summary>
            Get a list of events filtered by a minimal timestamp.
            </summary>
            <param name="Timestamp">The earlierst timestamp of the events.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.URLReplacement">
            <summary>
            How to handle duplicate URL handlers.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node">
            <summary>
            A URL node which stores some childnodes and a callback
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node._HTTPMethodNodes">
            <summary>
            A mapping from HTTPMethods to HTTPMethodNodes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.URITemplate">
            <summary>
            The URL template for this service.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.URLRegex">
            <summary>
            The URI regex for this service.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.ParameterCount">
            <summary>
            The number of parameters within this URLNode for shorting best-matching URLs.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.SortLength">
            <summary>
            The lenght of the minimalized URL template for shorting best-matching URLs.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.HTTPRequestLogger">
            <summary>
            A HTTP request logger.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.URIAuthentication">
            <summary>
            This and all subordinated nodes demand an explicit URI authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.RequestHandler">
            <summary>
            A HTTP delegate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.DefaultErrorHandler">
            <summary>
            A general error handling method.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.ErrorHandlers">
            <summary>
            Error handling methods for specific http status codes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.HTTPResponseLogger">
            <summary>
            A HTTP response logger.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.HTTPMethods">
            <summary>
            Return all defined HTTP methods.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.HTTPMethodNodes">
            <summary>
            Return all HTTP method nodes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPAuthentication)">
            <summary>
            Creates a new URLNode.
            </summary>
            <param name="URITemplate">The URI template for this service.</param>
            <param name="URIAuthentication">This and all subordinated nodes demand an explicit URI authentication.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.Contains(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Determines whether the given HTTP method is defined.
            </summary>
            <param name="Method">A HTTP method.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.Get(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod)">
            <summary>
            Return the HTTP method node for the given HTTP method.
            </summary>
            <param name="Method">A HTTP method.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.TryGet(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethodNode@)">
            <summary>
            Return the HTTP method node for the given HTTP method.
            </summary>
            <param name="Method">A HTTP method.</param>
            <param name="MethodNode">The attached HTTP method node.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.GetEnumerator">
            <summary>
            Return all HTTP method nodes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return all HTTP method nodes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.URL_Node.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSemantics">
            <summary>
            HTTP tokens and well-known.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSemantics.LogEvents">
            <summary>
            Logfile...
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSemantics.CALLBACK">
            <summary>
            A token for a 'callback' parameter within the HTTP query string.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSemantics.SKIP">
            <summary>
            A token for a 'skip' parameter within the HTTP query string.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPSemantics.TAKE">
            <summary>
            A token for a 'take' parameter within the HTTP query string.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate">
            <summary>
            A delegate to calculate the delay between transmission retries.
            </summary>
            <param name="RetryCount">The retry counter.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient">
            <summary>
            An abstract base class for all HTTP clients.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.DefaultHTTPUserAgent">
            <summary>
            The default HTTP user agent.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.DefaultRemotePort">
            <summary>
            The default remote TCP port to connect to.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.DefaultRequestTimeout">
            <summary>
            The default timeout for upstream queries.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.DefaultTransmissionRetryDelay">
            <summary>
            The default delay between transmission retries.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.DefaultMaxNumberOfRetries">
            <summary>
            The default number of maximum transmission retries.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.RemoteURL">
            <summary>
            The remote URL of the HTTP endpoint to connect to.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.VirtualHostname">
            <summary>
            The virtual HTTP hostname to connect to.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.Description">
            <summary>
            An optional description of this HTTP client.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.RemoteCertificateValidator">
            <summary>
            The remote SSL/TLS certificate validator.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.ClientCertificateSelector">
            <summary>
            A delegate to select a TLS client certificate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.ClientCert">
            <summary>
            The SSL/TLS client certificate to use of HTTP authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.HTTPUserAgent">
            <summary>
            The HTTP user agent identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.RequestTimeout">
            <summary>
            The timeout for upstream requests.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.TransmissionRetryDelay">
            <summary>
            The delay between transmission retries.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.MaxNumberOfRetries">
            <summary>
            The maximum number of retries when communicationg with the remote OICP service.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.UseHTTPPipelining">
            <summary>
            Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.HTTPLogger">
            <summary>
            The CPO client (HTTP client) logger.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.DNSClient">
            <summary>
            The DNS client defines which DNS servers to use.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.RemoteIPAddress">
            <summary>
            The IP Address to connect to.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.RemotePort">
            <summary>
            The IP port to connect to.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.OnException">
            <summary>
            An event fired whenever an exception occured.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.OnHTTPErrorDelegate">
            <summary>
            A delegate called whenever a HTTP error occured.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.OnHTTPError">
            <summary>
            An event fired whenever a HTTP error occured.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new abstract HTTP client.
            </summary>
            <param name="RemoteURL">The remote URL of the HTTP endpoint to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this HTTP client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.CreateRequest(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPMethod,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder})">
            <summary>
            Create a new HTTP request.
            </summary>
            <param name="HTTPMethod">A HTTP method.</param>
            <param name="HTTPPath">An URL.</param>
            <param name="BuilderAction">A delegate to configure the new HTTP request builder.</param>
            <returns>A new HTTPRequest object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.Execute(System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest},org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientResponseLogHandler,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,System.Nullable{System.TimeSpan},System.Byte)">
            <summary>
            Execute the given HTTP request and return its result.
            </summary>
            <param name="HTTPRequestDelegate">A delegate for producing a HTTP request for a given HTTP client.</param>
            <param name="RequestLogDelegate">A delegate for logging the HTTP request.</param>
            <param name="ResponseLogDelegate">A delegate for logging the HTTP request/response.</param>
            
            <param name="CancellationToken">A cancellation token.</param>
            <param name="EventTrackingId"></param>
            <param name="RequestTimeout">An optional HTTP request timeout.</param>
            <param name="NumberOfRetry">The number of retransmissions of this request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.Execute(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest,org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientResponseLogHandler,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,System.Nullable{System.TimeSpan},System.Byte)">
            <summary>
            Execute the given HTTP request and return its result.
            </summary>
            <param name="Request">A HTTP request.</param>
            <param name="RequestLogDelegate">A delegate for logging the HTTP request.</param>
            <param name="ResponseLogDelegate">A delegate for logging the HTTP request/response.</param>
            
            <param name="CancellationToken">A cancellation token.</param>
            <param name="EventTrackingId"></param>
            <param name="RequestTimeout">An optional timeout.</param>
            <param name="NumberOfRetry">The number of retransmissions of this request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.SendHTTPError(System.DateTime,System.Object,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse)">
            <summary>
            Notify that an HTTP error occured.
            </summary>
            <param name="Timestamp">The timestamp of the error received.</param>
            <param name="Sender">The sender of this error message.</param>
            <param name="HttpResponse">The HTTP response related to this error message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.SendException(System.DateTime,System.Object,System.Exception)">
            <summary>
            Notify that an exception occured.
            </summary>
            <param name="Timestamp">The timestamp of the exception.</param>
            <param name="Sender">The sender of this exception.</param>
            <param name="Exception">The exception itself.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.Dispose">
            <summary>
            Dispose this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AHTTPClient.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AJSONClient">
            <summary>
            An abstract HTTP/JSON client.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AJSONClient.DefaultHTTPUserAgent">
            <summary>
            The default HTTP user agent.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.HTTP.AJSONClient.DefaultURLPathPrefix">
            <summary>
            The default URL path prefix.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.HTTP.AJSONClient.OnSOAPErrorDelegate">
            <summary>
            A delegate called whenever a JSON error occured.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.HTTP.AJSONClient.OnJSONError">
            <summary>
            An event fired whenever a JSON error occured.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AJSONClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new abstract HTTP/JSON client.
            </summary>
            <param name="RemoteURL">The remote URL of the OICP HTTP endpoint to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AJSONClient.Query``1(Newtonsoft.Json.Linq.JObject,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{Newtonsoft.Json.Linq.JObject},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Func{System.DateTime,System.Object,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{Newtonsoft.Json.Linq.JObject},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Func{System.DateTime,System.Object,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Func{System.DateTime,System.Object,System.Exception,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder},org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientResponseLogHandler,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,System.Nullable{System.TimeSpan},System.Byte)">
            <summary>
            Create a new JSON request task.
            </summary>
            <typeparam name="T">The type of the return data structure.</typeparam>
            <param name="JSONRequest">The JSON request.</param>
            <param name="OnSuccess">The delegate to call for every successful result.</param>
            <param name="OnJSONFault">The delegate to call whenever a JSON fault occured.</param>
            <param name="OnHTTPError">The delegate to call whenever a HTTP error occured.</param>
            <param name="OnException">The delegate to call whenever an exception occured.</param>
            <param name="RequestTimeout">An optional timeout of the HTTP client [default 60 sec.]</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.HTTP.AJSONClient.SendJSONError(System.DateTime,System.Object,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Notify that a JSON error occured.
            </summary>
            <param name="Timestamp">The timestamp of the error received.</param>
            <param name="Sender">The sender of this error message.</param>
            <param name="JSON">The JSON fault/error.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCacheEntry">
            <summary>
            A DNS cache entry.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCacheEntry.RefreshTime">
            <summary>
            The timestamp of the last refresh.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCacheEntry.EndOfLife">
            <summary>
            The timestamp when this entry gets invalidated.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCacheEntry.DNSInfo">
            <summary>
            The cached DNS information.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCacheEntry.#ctor(System.DateTime,System.DateTime,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSInfo)">
            <summary>
            Create a new DNS cache entry.
            </summary>
            <param name="RefreshTime">The timestamp of the last refresh.</param>
            <param name="EndOfLife">The timestamp when this entry gets invalidated.</param>
            <param name="DNSInfo">The cached DNS information.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCache">
            <summary>
            A cache for DNS entries.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCache.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Create a new DNS cache.
            </summary>
            <param name="CleanUpEvery">How often to remove outdated entries from DNS cache.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCache.Add(System.String,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSInfo)">
            <summary>
            Add the given DNS information to the DNS cache.
            </summary>
            <param name="Domainname">The domain name.</param>
            <param name="DNSInformation">The DNS information to add.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCache.Add(System.String,org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.DNS.ADNSResourceRecord[])">
            <summary>
            Add the given DNS resource record to the DNS cache.
            </summary>
            <param name="Domainname">The domain name.</param>
            <param name="Origin">The origin of the DNS resource record.</param>
            <param name="ResourceRecords">The DNS resource records to add.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCache.GetDNSInfo(System.String)">
            <summary>
            Get the cached DNS information from the DNS cache.
            </summary>
            <param name="DomainName">The domain name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSCache.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSQuery">
            <summary>
            A DNS query.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSQuery.QueryTypes">
            <summary>
            The query types (resource record types).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSQuery.QueryClass">
            <summary>
            The query class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSQuery.#ctor(System.String)">
            <summary>
            Create a new DNS query.
            </summary>
            <param name="DomainName">The domain name to query.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSQuery.#ctor(System.String,System.UInt16[])">
            <summary>
            Create a new DNS query.
            </summary>
            <param name="DomainName">The domain name to query.</param>
            <param name="DNSResourceRecordTypes">The DNS resource record types to query.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSQuery.#ctor(System.String,System.Boolean,System.UInt16[])">
            <summary>
            Create a new DNS query.
            </summary>
            <param name="DomainName">The domain name to query.</param>
            <param name="RecursionDesired">Whether recursion is desired or not.</param>
            <param name="ResourceRecordTypes">The DNS resource record types to query.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSResponseCodes">
            <summary>
            Query Result/Response Codes
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.A">
            <summary>
            A - DNS Resource Record
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.DNS.A.TypeId">
            <summary>
            The type Id of this DNS resource record.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.DNS.A.IPv4Address">
            <summary>
            The IPv4 address.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.A.#ctor(System.IO.Stream)">
            <summary>
            Parse a DNS A resource record from the given stream.
            </summary>
            <param name="Stream">A stream of bytes.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.A.#ctor(System.String,System.IO.Stream)">
            <summary>
            Parse a DNS A resource record from the given stream.
            </summary>
            <param name="Name">The DNS name.</param>
            <param name="Stream">A stream of bytes.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.A.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSQueryClasses,System.TimeSpan,org.GraphDefined.Vanaheimr.Hermod.IPv4Address)">
            <summary>
            Create a new DNS A resource record.
            </summary>
            <param name="Name">The DNS name.</param>
            <param name="Class">The DNS class.</param>
            <param name="TimeToLive">The timestamp when this resource records gets invalidated.</param>
            <param name="IPv4Address">The IPv4 address of this resource record.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient">
            <summary>
            A DNS client.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.DNSServers">
            <summary>
            The DNS servers used by this DNS client.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.QueryTimeout">
            <summary>
            The DNS query timeout.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.RecursionDesired">
            <summary>
            Whether DNS recursion is desired.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress)">
            <summary>
            Create a new DNS resolver client.
            </summary>
            <param name="DNSServer">The DNS server to query.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Create a new DNS resolver client.
            </summary>
            <param name="DNSServer">The DNS server to query.</param>
            <param name="Port">The IP port of the DNS server to query.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.IIPAddress})">
            <summary>
            Create a new DNS resolver client.
            </summary>
            <param name="DNSServers">A list of DNS servers to query.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.IIPAddress},org.GraphDefined.Vanaheimr.Hermod.IPPort)" -->
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Create a new DNS resolver client.
            </summary>
            <param name="SearchForIPv4DNSServers">If yes, the DNS client will query a list of DNS servers from the IPv4 network configuration.</param>
            <param name="SearchForIPv6DNSServers">If yes, the DNS client will query a list of DNS servers from the IPv6 network configuration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},System.Boolean,System.Boolean)">
            <summary>
            Create a new DNS resolver client.
            </summary>
            <param name="ManualDNSServers">A list of manually configured DNS servers to query.</param>
            <param name="SearchForIPv4DNSServers">If yes, the DNS client will query a list of DNS servers from the IPv4 network configuration.</param>
            <param name="SearchForIPv6DNSServers">If yes, the DNS client will query a list of DNS servers from the IPv6 network configuration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.AddToCache(System.String,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSInfo)">
            <summary>
            Add a DNS cache entry.
            </summary>
            <param name="DomainName">The domain name.</param>
            <param name="DNSInformation">The DNS information</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.AddToCache(System.String,org.GraphDefined.Vanaheimr.Hermod.DNS.A)">
            <summary>
            Add a DNS cache entry.
            </summary>
            <param name="DomainName">The domain name.</param>
            <param name="ARecord">A DNS record</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSInfo.Origin">
            <summary>
            The source of the DNS information.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.DNSQueryClasses">
            <summary>
            Query Class or Scope
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.CNAME">
            <summary>
            CNAME - DNS Resource Record
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.AAAA">
            <summary>
            AAAA - DNS Resource Record
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.SSHFP">
            <summary>
            SSH Fingerprint - DNS Resource Record
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.NS">
            <summary>
            NS - DNS Resource Record
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.MINFO">
            <summary>
            MINFO - DNS Resource Record
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.PTR">
            <summary>
            PTR - DNS Resource Record
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.TXT">
            <summary>
            TXT - DNS Resource Record
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.MX">
            <summary>
            MailExchange Resource Record
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.ADNSResourceRecord">
            <summary>
            Base Resource Record class for objects returned in 
            answers, authorities and additional record DNS responses. 
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.DNS.ADNSResourceRecord.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.DNS.SOA">
            <summary>
            Start of Authority Resource Record
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.ChangeMethods">
            <summary>
            Change methods.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.ChangeMethods.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.ChangeMethods.Replace">
            <summary>
            Replace
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.IEventSender">
            <summary>
            The common interface of all event senders.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IEventSender.Id">
            <summary>
            The identification of the event sender.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.JSON_IO">
            <summary>
            JSON I/O.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.JSON_IO.ToJSON(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,System.String)">
            <summary>
            Return a JSON representation of the given IP address.
            </summary>
            <param name="IIPAddress">An identificator.</param>
            <param name="JPropertyKey">The name of the JSON property key to use.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.AReadOnlyLocalRemoteSockets">
            <summary>
            An abstract local/remote socket combination.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.AReadOnlyLocalRemoteSockets.LocalIPAddress">
            <summary>
            The local IP address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.AReadOnlyLocalRemoteSockets.LocalPort">
            <summary>
            The local IP port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.AReadOnlyLocalRemoteSockets.LocalSocket">
            <summary>
            The local socket.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.AReadOnlyLocalRemoteSockets.RemoteIPAddress">
            <summary>
            The remote IP address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.AReadOnlyLocalRemoteSockets.RemotePort">
            <summary>
            The remote IP port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.AReadOnlyLocalRemoteSockets.RemoteSocket">
            <summary>
            The remote socket.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.AReadOnlyLocalRemoteSockets.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket)">
            <summary>
            Create a new abstract local/remote socket combination.
            </summary>
            <param name="LocalSocket">The local socket.</param>
            <param name="RemoteSocket">The remote socket.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.AReadOnlyLocalRemoteSockets.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.AReadOnlyLocalRemoteSockets.Dispose">
            <summary>
            Dispose this packet.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.IICMPClient">
            <summary>
            The common interface of all ICMP clients.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.IICMPClient.Ping(System.String,System.UInt32,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.TestRunResultDelegate,System.Nullable{System.UInt16},System.UInt16,System.String,System.Byte,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Ping the given DNS hostname.
            </summary>
            <param name="Hostname">A DNS hostname.</param>
            <param name="NumberOfTests">The number of pings.</param>
            <param name="Timeout">The timeout of each ping.</param>
            <param name="ResultHandler">A delegate called for each ping result.</param>
            <param name="Identifier">The ICMP identifier.</param>
            <param name="SequenceStartValue">The ICMP echo request start value.</param>
            <param name="TestData">The ICMP echo request test data.</param>
            <param name="TTL">The time-to-live of the underlying IP packet.</param>
            <param name="DNSClient">An optional DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.IICMPClient.Ping(org.GraphDefined.Vanaheimr.Hermod.IPv4Address,System.UInt32,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.TestRunResultDelegate,System.Nullable{System.UInt16},System.UInt16,System.String,System.Byte)">
            <summary>
            Ping the given IPv4 address.
            </summary>
            <param name="IPv4Address">An IPv4 address.</param>
            <param name="NumberOfTests">The number of pings.</param>
            <param name="Timeout">The timeout of each ping.</param>
            <param name="ResultHandler">A delegate called for each ping result.</param>
            <param name="Identifier">The ICMP identifier.</param>
            <param name="SequenceStartValue">The ICMP echo request start value.</param>
            <param name="TestData">The ICMP echo request test data.</param>
            <param name="TTL">The time-to-live of the underlying IP packet.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.IICMPClient.Ping(org.GraphDefined.Vanaheimr.Hermod.IPv6Address,System.UInt32,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.TestRunResultDelegate,System.Nullable{System.UInt16},System.UInt16,System.String,System.Byte)">
            <summary>
            Ping the given IPv6 address.
            </summary>
            <param name="IPv6Address">An IPv6 address.</param>
            <param name="NumberOfTests">The number of pings.</param>
            <param name="Timeout">The timeout of each ping.</param>
            <param name="ResultHandler">A delegate called for each ping result.</param>
            <param name="Identifier">The ICMP identifier.</param>
            <param name="SequenceStartValue">The ICMP echo request start value.</param>
            <param name="TestData">The ICMP echo request test data.</param>
            <param name="TTL">The time-to-live of the underlying IP packet.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors">
            <summary>
            ICMP results/errors.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors.Success">
            <summary>
            Success / No error(s).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors.DNSError">
            <summary>
            DNS error(s).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors.SendError">
            <summary>
            The ping(s) could not be sent.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors.Timeout">
            <summary>
            A timeout occured.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors.TTLExceeded">
            <summary>
            The time-to-live of the underlying IP packet was exceeded.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors.Unreachable">
            <summary>
            The host or network was unreachable.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors.InvalidReply">
            <summary>
            Invalid reply/replies.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors.Mixed">
            <summary>
            Mixed result(s).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors.Unknown">
            <summary>
            Unknown result(s).
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult">
            <summary>
            A single ping result.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.Runtime">
            <summary>
            The runtime of the ping.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.Error">
            <summary>
            The result or error of the ping.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.#ctor(System.TimeSpan,org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPErrors)">
            <summary>
            Create a new single ping result.
            </summary>
            <param name="Runtime">The runtime of the ping.</param>
            <param name="Error">The result or error of the ping.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.Clone">
            <summary>
            Clone this ping result.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.op_Equality(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult,org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="pingResult1">A ping result.</param>
            <param name="pingResult2">Another ping result.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult,org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="pingResult1">A ping result.</param>
            <param name="pingResult2">Another ping result.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult,org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="pingResult1">A ping result.</param>
            <param name="pingResult2">Another ping result.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult,org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="pingResult1">A ping result.</param>
            <param name="pingResult2">Another ping result.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult,org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="pingResult1">A ping result.</param>
            <param name="pingResult2">Another ping result.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult,org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="pingResult1">A ping result.</param>
            <param name="pingResult2">Another ping result.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.CompareTo(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="pingResult">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.Equals(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult)">
            <summary>
            Compares two ping results for equality.
            </summary>
            <param name="pingResult">A ping result to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.GetHashCode">
            <summary>
            Return the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult.ToString">
            <summary>
            Return a text-representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults">
            <summary>
            A collection of ping results.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.Success">
            <summary>
            Whether the ping succeeded.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.Error">
            <summary>
            The common result or error.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.Results">
            <summary>
            The enumeration of results or errors.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.NumberOfReplies">
            <summary>
            The number of "good" results.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.Paketloss">
            <summary>
            The number of lost packets.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.Min">
            <summary>
            The minimum round trip time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.Avg">
            <summary>
            The average round trip time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.StdDev">
            <summary>
            The standard deviation of the round trip time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.Max">
            <summary>
            The maximum round trip time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.Timeout">
            <summary>
            The common timeout of all pings.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.Runtime">
            <summary>
            The overall runtime of all pings.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResult},System.TimeSpan,System.TimeSpan)">
            <summary>
            A collection of ping results.
            </summary>
            <param name="PingResults">An enumeration of results or errors.</param>
            <param name="Timeout">The common timeout of all pings.</param>
            <param name="Runtime">The overall runtime of all pings.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.PingResults.ToString">
            <summary>
            Return a text-representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.TestRunResultDelegate">
            <summary>
            A delegate called for each test run result.
            </summary>
            <param name="TestRunId">The unique identification of the current test run.</param>
            <param name="NuberOfTests">The overall number of test runs.</param>
            <param name="Result">The result of the current test run.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPClient">
            <summary>
            The ICMP Client.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPClient.DNSClient">
            <summary>
            The DNS client to use.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.TestRunResultDelegate,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new ICMP client.
            </summary>
            <param name="ResultHandler">A delegate called for each ping result.</param>
            <param name="DNSClient">An optional DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPClient.Ping(System.String,System.UInt32,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.TestRunResultDelegate,System.Nullable{System.UInt16},System.UInt16,System.String,System.Byte,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Ping the given DNS hostname.
            </summary>
            <param name="Hostname">A DNS hostname.</param>
            <param name="NumberOfTests">The number of pings.</param>
            <param name="Timeout">The timeout of each ping.</param>
            <param name="ResultHandler">A delegate called for each ping result.</param>
            <param name="Identifier">The ICMP identifier.</param>
            <param name="SequenceStartValue">The ICMP echo request start value.</param>
            <param name="TestData">The ICMP echo request test data.</param>
            <param name="TTL">The time-to-live of the underlying IP packet.</param>
            <param name="DNSClient">An optional DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPClient.Ping(org.GraphDefined.Vanaheimr.Hermod.IPv4Address,System.UInt32,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.TestRunResultDelegate,System.Nullable{System.UInt16},System.UInt16,System.String,System.Byte)">
            <summary>
            Ping the given IPv4 address.
            </summary>
            <param name="IPv4Address">An IPv4 address.</param>
            <param name="NumberOfTests">The number of test runs/pings.</param>
            <param name="Timeout">The timeout of each ping.</param>
            <param name="ResultHandler">A delegate called for each ping result.</param>
            <param name="Identifier">The ICMP identifier.</param>
            <param name="SequenceStartValue">The ICMP echo request start value.</param>
            <param name="TestData">The ICMP echo request test data.</param>
            <param name="TTL">The time-to-live of the underlying IP packet.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPClient.Ping(org.GraphDefined.Vanaheimr.Hermod.IPv6Address,System.UInt32,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.TestRunResultDelegate,System.Nullable{System.UInt16},System.UInt16,System.String,System.Byte)">
            <summary>
            Ping the given IPv6 address.
            </summary>
            <param name="IPv6Address">An IPv6 address.</param>
            <param name="NumberOfTests">The number of pings.</param>
            <param name="Timeout">The timeout of each ping.</param>
            <param name="ResultHandler">A delegate called for each ping result.</param>
            <param name="Identifier">The ICMP identifier.</param>
            <param name="SequenceStartValue">The ICMP echo request start value.</param>
            <param name="TestData">The ICMP echo request test data.</param>
            <param name="TTL">The time-to-live of the underlying IP packet.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPDestinationUnreachable">
            <summary>
            The ICMP Destination Unreachable
            </summary>
            <seealso cref="!:https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol"/>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPParameterProblem">
            <summary>
            The ICMP Time Exceeded message.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPSourceQuench">
            <summary>
            The ICMP Time Exceeded message.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPTimeExceeded">
            <summary>
            The ICMP Time Exceeded message.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPRedirect">
            <summary>
            The ICMP Redirect
            </summary>
            <seealso cref="!:https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol"/>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPRedirect.Create(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPRedirect.CodeEnum,org.GraphDefined.Vanaheimr.Hermod.IPv4Address,System.Byte[],org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket{org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPRedirect})">
            <summary>
            Create a new ICMP redirect packet.
            </summary>
            <param name="Code">The ICMP redirect code.</param>
            <param name="GatewayInternetAddress">IPv4 address.</param>
            <param name="Data">IP header and first 8 bytes of original datagram's data.</param>
            <param name="ICMPPacket">ICMP packet.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPEchoReply">
            <summary>
            The ICMP Echo Reply
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPEchoRequest">
            <summary>
            The ICMP Echo Request
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket`1">
            <summary>
            A generic ICMP packet.
            </summary>
            <typeparam name="TICMPMessage">The type of the ICMP message.</typeparam>
            <seealso cref="!:https://www.rfc-editor.org/rfc/rfc792.html"/>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket`1.Payload">
            <summary>
            The ICMP message.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket`1.#ctor(System.Byte,System.Byte,System.UInt16,`0,org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.IPv4Packet)">
            <summary>
            Create a new generic ICMP packet.
            </summary>
            <param name="Type">The ICMP message type.</param>
            <param name="Code">The ICMP code.</param>
            <param name="Checksum">The ICMP checksum.</param>
            <param name="Payload">The ICMP payload.</param>
            <param name="IPv4Packet">The optional transporting IPv4 packet.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket">
            <summary>
            An ICMP packet.
            </summary>
            <seealso cref="!:https://www.rfc-editor.org/rfc/rfc792.html"/>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket.Type">
            <summary>
            The ICMP message type.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket.Code">
            <summary>
            The ICMP code.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket.Checksum">
            <summary>
            The ICMP checksum.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket.PayloadBytes">
            <summary>
            The binary ICMP payload.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket.IPv4Packet">
            <summary>
            The optional transporting IPv4 packet.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket.#ctor(System.Byte,System.Byte,System.UInt16,System.Byte[],org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.IPv4Packet)">
            <summary>
            Create a new generic ICMP packet.
            </summary>
            <param name="Type">The ICMP message type.</param>
            <param name="Code">The ICMP code.</param>
            <param name="Checksum">The ICMP checksum.</param>
            <param name="PayloadBytes">The binary ICMP payload.</param>
            <param name="IPv4Packet">The optional transporting IPv4 packet.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket.TryParse(org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.IPv4Packet,org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket@,System.Byte)">
            <summary>
            Try to parse the ICMP packet embedded within the given IPv4 packet.
            </summary>
            <param name="IPv4Packet">An IPv4 packet.</param>
            <param name="ICMPPacket">The parsed ICMP packet.</param>
            <param name="Offset">The offset of the ICMP pakcet within the array of bytes.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket.TryParse(System.Byte[],org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.ICMPPacket@,System.Byte,org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.IPv4Packet)">
            <summary>
            Try to parse the given ICMP packet.
            </summary>
            <param name="Packet">An array of bytes to parse.</param>
            <param name="ICMPPacket">The parsed ICMP packet.</param>
            <param name="Offset">The offset of the ICMP pakcet within the array of bytes.</param>
            <param name="IPv4Packet"></param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.RawIP.ICMP.IPv4Packet">
            <summary>
            IPv4 Packet (RFC 791)
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder">
            <summary>
            A delegate to generate a connection identification.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Timestamp">The timestamp of the event.</param>
            <param name="LocalSocket">The local TCP/IP socket.</param>
            <param name="RemoteSocket">The remote TCP/IP socket.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder">
            <summary>
            A delegate to generate a thread name for a connection.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Timestamp">The timestamp of the event.</param>
            <param name="LocalSocket">The local TCP/IP socket.</param>
            <param name="RemoteSocket">The remote TCP/IP socket.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder">
            <summary>
            A delegate to generate a thread priority for a connection.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Timestamp">The timestamp of the event.</param>
            <param name="LocalSocket">The local TCP/IP socket.</param>
            <param name="RemoteSocket">The remote TCP/IP socket.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionClosedBy">
            <summary>
            Whether the connection was closed by the client or the server.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionClosedBy.Client">
            <summary>
            The connection was closed by the client.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionClosedBy.Server">
            <summary>
            The connection was closed by the server.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionClosedBy.Admin">
            <summary>
            The connection was closed by an admin.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionClosedBy.FilterRule">
            <summary>
            The connection was closed by a filter rule.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers">
            <summary>
            An abstract TCP service allowing to attach multiple TCP servers on different IP sockets.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers._TCPServers">
            <summary>
            The internal TCP servers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.DNSClient">
            <summary>
            The DNS defines which DNS servers to use.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ServerCertificateSelector">
            <summary>
            The optional delegate to select a SSL/TLS server certificate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ClientCertificateValidator">
            <summary>
            The optional delegate to verify the SSL/TLS client certificate used for authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ClientCertificateSelector">
            <summary>
            The optional delegate to select the SSL/TLS client certificate used for authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.AllowedTLSProtocols">
            <summary>
            The SSL/TLS protocol(s) allowed for this connection.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ServiceName">
            <summary>
            The service banner transmitted to a TCP client
            after connection initialization.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ServiceBanner">
            <summary>
            The service banner transmitted to a TCP client
            after connection initialization.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ServerThreadName">
            <summary>
            The name of the TCP service threads.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ServerThreadPriority">
            <summary>
            The priority of the TCP service threads.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ServerThreadIsBackground">
            <summary>
            Weather the TCP service threads are background or not (default: yes).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ConnectionIdBuilder">
            <summary>
            A delegate to build a connection identification based on IP socket information.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ConnectionThreadsNameBuilder">
            <summary>
            A delegate to set the name of the TCP connection threads.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ConnectionThreadsPriorityBuilder">
            <summary>
            A delegate to set the priority of the TCP connection threads.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ConnectionThreadsAreBackground">
            <summary>
            Whether the TCP connection threads are background threads or not (default: yes).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.ConnectionTimeout">
            <summary>
            The TCP client timeout for all incoming client connections.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.MaxClientConnections">
            <summary>
            The maximum number of concurrent TCP client connections (default: 4096).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.IsStarted">
            <summary>
            Is the server already started?
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.NumberOfClients">
            <summary>
            The current number of attached TCP clients.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.OnStarted">
            <summary>
            An event fired whenever the TCP servers instance was started.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.OnTCPSocketAttached">
            <summary>
            An event fired whenever a new TCP socket was attached.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.OnNewConnection">
            <summary>
            An event fired whenever a new TCP connection was opened.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.OnExceptionOccured">
            <summary>
            An event fired whenever an exception occured.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.OnConnectionClosed">
            <summary>
            An event fired whenever a new TCP connection was closed.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.OnTCPSocketDetached">
            <summary>
            An event fired whenever a new TCP socket was detached.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.OnCompleted">
            <summary>
            An event fired whenever the TCP servers instance was stopped.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ATCPServers.#ctor(System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.RemoteCertificateValidationCallback,System.Nullable{System.Security.Authentication.SslProtocols},System.String,System.Nullable{System.Threading.ThreadPriority},System.Nullable{System.Boolean},org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.UInt32},org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean)">
            <summary>
            Create a new TCP service allowing to attach multiple TCP servers on different IP sockets.
            </summary>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            <param name="ServiceBanner">The service banner transmitted to a TCP client after connection initialization.</param>
            
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            
            <param name="ServerThreadName">An optional name of the TCP server threads.</param>
            <param name="ServerThreadPriority">An optional priority of the TCP server threads (default: AboveNormal).</param>
            <param name="ServerThreadIsBackground">Whether the TCP server threads are a background thread or not (default: yes).</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            
            <param name="DNSClient">The DNS client to use.</param>
            <param name="Autostart">Start the TCP server threads immediately (default: no).</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPSocketAttachedHandler">
            <summary>
            TCP socket attached delegate.
            </summary>
            <param name="TCPServer">The sender of this event.</param>
            <param name="Timestamp">The timestamp of the TCP socket attached event.</param>
            <param name="TCPSocket">The new TCP socket.</param>
            <param name="Message">An optional message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.NewConnectionHandler">
            <summary>
            New connection delegate.
            </summary>
            <param name="TCPServer">The sender of this event.</param>
            <param name="Timestamp">The timestamp of the new TCP connection event.</param>
            <param name="RemoteSocket">The remote TCP/IP socket.</param>
            <param name="ConnectionId">The identification of this connection.</param>
            <param name="TCPConnection">The new TCP connection.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ConnectionClosedHandler">
            <summary>
            Connection closed delegate.
            </summary>
            <param name="TCPServer">The sender of this event.</param>
            <param name="Timestamp">The timestamp of the event.</param>
            <param name="RemoteSocket">The remote TCP/IP socket.</param>
            <param name="ConnectionId">The identification of this connection.</param>
            <param name="ClosedBy">Whether the connection was closed by the client or the server.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPSocketDetachedHandler">
            <summary>
            TCP socket detached delegate.
            </summary>
            <param name="TCPServer">The sender of this event.</param>
            <param name="Timestamp">The timestamp of the TCP socket detached event.</param>
            <param name="TCPSocket">The TCP socket.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.SocketExtensions">
            <summary>
            Extension methods for sockets.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPClient">
            <summary>
            A TCP client.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPClient.DNSClient">
            <summary>
            The default DNS server.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TLSUsage,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPClient.ValidateRemoteCertificateDelegate,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Create a new TCPClient connecting to a remote service using an IP address.
            </summary>
            <param name="ConnectionTimeout">The timeout connecting to the remote service.</param>
            <param name="AutoConnect">Connect to the TCP service automatically on startup. Default is false.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPClient.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TLSUsage,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPClient.ValidateRemoteCertificateDelegate,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean)">
            <summary>
            Create a new TCPClient connecting to a remote service using DNS SRV records.
            </summary>
            <param name="RemoteHost">The optional DNS name of the remote service to connect to.</param>
            <param name="ServiceName">The optional DNS SRV service name of the remote service to connect to.</param>
            <param name="UseIPv4">Whether to use IPv4 as networking protocol.</param>
            <param name="UseIPv6">Whether to use IPv6 as networking protocol.</param>
            <param name="PreferIPv6">Prefer IPv6 (instead of IPv4) as networking protocol.</param>
            <param name="ConnectionTimeout">The timeout connecting to the remote service.</param>
            <param name="DNSClient">An optional DNS client used to resolve DNS names.</param>
            <param name="AutoConnect">Connect to the TCP service automatically on startup. Default is false.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPClient.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.IPPort,System.Boolean,System.Boolean,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TLSUsage,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPClient.ValidateRemoteCertificateDelegate,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            
            </summary>
            <param name="RemoteHost"></param>
            <param name="RemotePort"></param>
            <param name="UseIPv4">Whether to use IPv4 as networking protocol.</param>
            <param name="UseIPv6">Whether to use IPv6 as networking protocol.</param>
            <param name="PreferIPv6">Prefer IPv6 (instead of IPv4) as networking protocol.</param>
            <param name="UseTLS">Whether Transport Layer Security should be used or not.</param>
            <param name="ValidateServerCertificate">A callback for validating the remote server certificate.</param>
            <param name="ConnectionTimeout">The timeout connecting to the remote service.</param>
            <param name="DNSClient">An optional DNS client used to resolve DNS names.</param>
            <param name="AutoConnect">Connect to the TCP service automatically on startup. Default is false.</param>
            <param name="CancellationToken"></param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection">
            <summary>
            An abstract class for all TCP connections.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.TCPServer">
            <summary>
            The associated TCP server.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.TCPClient">
            <summary>
            The associated TCP client.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.NetworkStream">
            <summary>
            The underlying network stream.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.ServerCertificate">
            <summary>
            An optional SSL/TLS server certificate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.ClientCertificate">
            <summary>
            The optional HTTP client certificate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.TLSProtocols">
            <summary>
            The SSL/TLS protocol(s) to use.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.SSLStream">
            <summary>
            The underlying SSL/TLS stream.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.ServerTimestamp">
            <summary>
            The timestamp of the packet.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.ConnectionId">
            <summary>
            The TCP connection identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.IsConnected">
            <summary>
            Check if the client is still connected to the server.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.DataAvailable">
            <summary>
            Gets a value that indicates whether data is available
            on the System.Net.Sockets.NetworkStream to be read.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.ReadTimeout">
            <summary>
            Gets or sets the amount of time, that a read operation
            blocks waiting for data. On default the read operation does not time out.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.NoDelay">
            <summary>
            Gets or sets a value that disables a delay when send or receive
            buffers are not full.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.KeepAlive">
            <summary>
            The connection is keepalive
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.StopRequested">
            <summary>
            Server was requested to stop.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.#ctor(org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer,System.Net.Sockets.TcpClient,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Authentication.SslProtocols,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Create a new TCP connection.
            </summary>
            <param name="TCPServer">A TCP server.</param>
            <param name="TCPClient">A TCP client.</param>
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.Read(System.UInt16,System.UInt32)">
            <summary>
            Read a byte value from the TCP connection.
            </summary>
            <param name="SleepingTimeMS">When no data is currently available wait at least this amount of time [milliseconds].</param>
            <param name="MaxInitialWaitingTimeMS">When no data is currently available wait at most this amount of time [milliseconds].</param>
            <returns>The read byte OR 0x00 if nothing could be read.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.TryRead(System.Byte@,System.UInt16,System.UInt32)">
            <summary>
            Try to read a byte value from the TCP connection.
            </summary>
            <param name="Byte">The byte value OR 0x00 if nothing could be read.</param>
            <param name="SleepingTimeMS">When no data is currently available wait at least this amount of time [milliseconds].</param>
            <param name="MaxInitialWaitingTimeMS">When no data is currently available wait at most this amount of time [milliseconds].</param>
            <returns>True, if the byte value is valid; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.Read(System.Byte[],System.UInt16,System.UInt32)">
            <summary>
            Read multiple byte values from the TCP connection into the given buffer.
            </summary>
            <param name="Buffer">An array of byte values.</param>
            <param name="SleepingTimeMS">When no data is currently available wait at least this amount of time [milliseconds].</param>
            <param name="MaxInitialWaitingTimeMS">When no data is currently available wait at most this amount of time [milliseconds].</param>
            <returns>The number of read bytes.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.ReadString(System.Int32,System.Text.Encoding,System.UInt16,System.UInt32)">
            <summary>
            Read a string value from the TCP connection.
            </summary>
            <param name="MaxLength">The maximal length of the string.</param>
            <param name="Encoding">The character encoding of the string (default: UTF8).</param>
            <param name="SleepingTimeMS">When no data is currently available wait at least this amount of time [milliseconds].</param>
            <param name="MaxInitialWaitingTimeMS">When no data is currently available wait at most this amount of time [milliseconds].</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.ReadLine(System.Int32,System.Text.Encoding,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Read a line from the TCP connection.
            </summary>
            <param name="MaxLength">The maximal length of the string.</param>
            <param name="Encoding">The character encoding of the string (default: UTF8).</param>
            <param name="SleepingTime">When no data is currently available wait at least this amount of time [5ms].</param>
            <param name="MaxInitialWaitingTime">When no data is currently available wait at most this amount of time [500ms].</param>
            <param name="__ReadTimeout">The read timeout [20sec].</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.WriteToResponseStream(System.String)">
            <summary>
            Writes some UTF-8 text to the underlying stream.
            </summary>
            <param name="UTF8Text">Some UTF-8 text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.WriteLineToResponseStream(System.String)">
            <summary>
            Writes some UTF-8 text to the underlying stream.
            </summary>
            <param name="UTF8Text">Some UTF-8 text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.WriteToResponseStream(System.Byte)">
            <summary>
            Writes the given byte to the underlying stream.
            </summary>
            <param name="Byte">A single byte.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.WriteToResponseStream(System.Byte[])">
            <summary>
            Writes the given byte array to the underlying stream.
            </summary>
            <param name="ByteArray">An array of bytes.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.WriteToResponseStream(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Reads the given input stream and writes its content to the underlying stream.
            </summary>
            <param name="InputStream">A data source.</param>
            <param name="ReadTimeout">A read timeout on the source.</param>
            <param name="BufferSize">The buffer size for reading.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.Flush">
            <summary>
            Flush all streams.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.Close(org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionClosedBy)">
            <summary>
            Close this TCP connection.
            </summary>
            <param name="ClosedBy">Whether the connection was closed by the client or the server.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection.Dispose">
            <summary>
            Dispose this packet.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer">
            <summary>
            A multi-threaded Styx arrow sender that listens on a TCP
            socket and notifies about incoming TCP connections.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.__DefaultServiceName">
            <summary>
            The default TCP service name.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.__DefaultServiceBanner">
            <summary>
            The default TCP service banner.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.__DefaultServerThreadName">
            <summary>
            The default server thread name.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.__DefaultMaxClientConnections">
            <summary>
            The default maximum number of concurrent TCP client connections.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.__DefaultConnectionTimeout">
            <summary>
            The default TCP client timeout for all incoming client connections.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ServiceName">
            <summary>
            The TCP service name shown e.g. on service startup.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.IPAddress">
            <summary>
            Gets the IPAddress on which the TCP server listens.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.Port">
            <summary>
            Gets the port on which the TCP server listens.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.IPSocket">
            <summary>
            Gets the IP socket on which the TCP server listens.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ServerCertificate">
            <summary>
            The optional SSL/TLS certificate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ClientCertificateRequired">
            <summary>
            Whether SSL/TLS client certification is required.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.CheckCertificateRevocation">
            <summary>
            Whether SSL/TLS client certificate revokation should be verified.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ServiceBanner">
            <summary>
            The TCP service banner transmitted to a TCP client
            at connection initialization.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ServerThreadName">
            <summary>
            The optional name of the TCP server thread.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ServerThreadPriority">
            <summary>
            The optional priority of the TCP server thread.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ServerThreadIsBackground">
            <summary>
            Whether the TCP server thread is a background thread or not.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ConnectionIdBuilder">
            <summary>
            A delegate to build a connection identification based on IP socket information.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ConnectionThreadsNameBuilder">
            <summary>
            A delegate to set the name of the TCP connection threads.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ConnectionThreadsPriorityBuilder">
            <summary>
            A delegate to set the priority of the TCP connection threads.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ConnectionThreadsAreBackground">
            <summary>
            Whether the TCP server thread is a background thread or not.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ConnectionTimeout">
            <summary>
            The TCP client timeout for all incoming client connections.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.MaxClientConnections">
            <summary>
            The maximum number of concurrent TCP client connections (default: 4096).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.NumberOfClients">
            <summary>
            The current number of connected clients
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.IsRunning">
            <summary>
            True while the TCPServer is listening for new clients
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.StopRequested">
            <summary>
            The TCPServer was requested to stop and will no
            longer accept new client connections
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.OnStarted">
            <summary>
            An event fired whenever the TCP servers instance was started.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.OnNewConnection">
            <summary>
            An event fired whenever a new TCP connection was opened.
            If this event closes the TCP connection the OnNotification event will never be fired!
            Therefore you can use this event for filtering connection initiation requests.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.OnNotification">
            <summary>
            An event fired whenever a new TCP connection was opened.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.OnExceptionOccured">
            <summary>
            An event fired whenever an exception occured.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.OnConnectionClosed">
            <summary>
            An event fired whenever a new TCP connection was closed.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.OnCompleted">
            <summary>
            An event fired whenever the TCP servers instance was stopped.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Authentication.SslProtocols,System.String,System.String,System.String,System.Threading.ThreadPriority,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Boolean,System.Nullable{System.TimeSpan},System.UInt32,System.Boolean)">
            <summary>
            Initialize the TCP server using IPAddress.Any and the given parameters.
            </summary>
            <param name="Port">The listening port</param>
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            <param name="ServiceBanner">The TCP service banner.</param>
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            <param name="Autostart">Start the TCP server thread immediately (default: no).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Authentication.SslProtocols,System.String,System.String,System.String,System.Threading.ThreadPriority,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Boolean,System.Nullable{System.TimeSpan},System.UInt32,System.Boolean)">
            <summary>
            Initialize the TCP server using the given parameters.
            </summary>
            <param name="IIPAddress">The listening IP address(es)</param>
            <param name="Port">The listening port</param>
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            <param name="ServiceBanner">The TCP service banner.</param>
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            <param name="Autostart">Start the TCP server thread immediately (default: no).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Authentication.SslProtocols,System.String,System.String,System.String,System.Threading.ThreadPriority,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Boolean,System.Nullable{System.TimeSpan},System.UInt32,System.Boolean)">
            <summary>
            Initialize the TCP server using IPAddress.Any and the given parameters.
            </summary>
            <param name="IPSocket">The IP socket to listen.</param>
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            <param name="ServiceBanner">The TCP service banner.</param>
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            <param name="Autostart">Start the TCP server thread immediately (default: no).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.SendNewConnection(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.IPSocket,System.String,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPConnection)">
            <summary>
            Send a "new connection" event.
            </summary>
            <param name="ServerTimestamp">The timestamp of the request.</param>
            <param name="RemoteSocket">The remote socket that was closed.</param>
            <param name="ConnectionId">The internal connection identification.</param>
            <param name="TCPConnection">The connection itself.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.SendConnectionClosed(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.IPSocket,System.String,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionClosedBy)">
            <summary>
            Send a "connection closed" event.
            </summary>
            <param name="ServerTimestamp">The timestamp of the event.</param>
            <param name="RemoteSocket">The remote socket that was closed.</param>
            <param name="ConnectionId">The internal connection identification.</param>
            <param name="ClosedBy">Whether it was closed by us or by the client.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.Start">
            <summary>
            Start the TCPServer thread
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.Start(System.TimeSpan,System.Boolean)">
            <summary>
            Start the TCP receiver after a little delay.
            </summary>
            <param name="Delay">The delay.</param>
            <param name="InBackground">Whether to wait on the main thread or in a background thread.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.Start(System.UInt32)">
            <summary>
            Start the TCPServer thread
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.Shutdown(System.String,System.Boolean)">
            <summary>
            Shutdown the TCP listener.
            </summary>
            <param name="Wait">Wait until the server finally shutted down.</param>
            <param name="Message">An optional shutdown message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.StopAndWait">
            <summary>
            Stop the TCPServer and wait until all connections are closed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPServer.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets">
            <summary>
            An abstract class for all TCP streams and UDP packets.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets.LocalIPAddress">
            <summary>
            The local IP address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets.LocalPort">
            <summary>
            The local IP port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets.LocalSocket">
            <summary>
            The local socket.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets.RemoteIPAddress">
            <summary>
            The remote IP address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets.RemotePort">
            <summary>
            The remote IP port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets.RemoteSocket">
            <summary>
            The remote socket.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets.#ctor">
            <summary>
            Create a new abstract ALocalRemoteSockets.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket)">
            <summary>
            Create a new abstract ALocalRemoteSockets.
            </summary>
            <param name="LocalSocket">The local socket of this UDP packet.</param>
            <param name="RemoteSocket">The remote socket of this UDP packet.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets.Dispose">
            <summary>
            Dispose this packet.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Sockets.ALocalRemoteSockets.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.NetworkingHelpers">
            <summary>
            Networking address helpers.
            </summary>    
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.IPAddressHelper">
            <summary>
            IP address helpers.
            </summary>    
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPAddressHelper.Build(System.Byte[])">
            <summary>
            Create a new IIPAddress based on the given byte array representation.
            </summary>
            <param name="ByteArray">A byte representation of an IPAddress.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPAddressHelper.Build(System.Net.IPAddress)">
            <summary>
            Create a new IIPAddress based on the given System.Net.IPAddress.
            </summary>
            <param name="IPAddress">A System.Net.IPAddress.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPAddressHelper.Parse(System.String)">
            <summary>
            Parsed the given string representation into a new IIPAddress.
            </summary>
            <param name="IPAddressString">An IPAddress string representation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPAddressHelper.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.IIPAddress@)">
            <summary>
            Parsed the given string representation into a new IIPAddress.
            </summary>
            <param name="IPAddressString">A string representation of an IP address.</param>
            <param name="IPAddress">The parsed IP address.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.ILocalSocket">
            <summary>
            The local socket is "this side" of a socket connection.
            It is a combination of a local IP address and a local port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.ILocalSocket.LocalIPAddress">
            <summary>
            The local IP address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.ILocalSocket.LocalPort">
            <summary>
            The local port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.ILocalSocket.LocalSocket">
            <summary>
            The local socket.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.PriorityList`1">
            <summary>
            A new priority list.
            </summary>
            <typeparam name="T">The type of the items within the priority list.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.PriorityList`1.#ctor">
            <summary>
            Create a new priority list.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.PriorityList`1.Add(`0)">
            <summary>
            Add a new service to the priority list.
            </summary>
            <param name="Service">A service.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.PriorityList`1.WhenAll``1(System.Func{`0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Run every service in priority order and wait until all services are done.
            </summary>
            <typeparam name="T2">The type of the work results.</typeparam>
            <param name="Work">A work to do.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.PriorityList`1.WhenFirst``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean},System.TimeSpan,System.Action{System.Exception},System.Func{System.TimeSpan,``0})">
            <summary>
            Run every service in priority order and wait until all services are done.
            </summary>
            <typeparam name="T2">The type of the work results.</typeparam>
            <param name="Work">A work to do.</param>
            <param name="VerifyResult">A delegate to verify and filter results.</param>
            <param name="Timeout">A timeout.</param>
            <param name="DefaultResult">A default result in case of errors or a timeout.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.PriorityList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator iterating through the priority list.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.PriorityList`1.GetEnumerator">
            <summary>
            Returns an enumerator iterating through the priority list.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Signature">
            <summary>
            An Open Data signature.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Signature.JSONLDContext">
            <summary>
            The JSON-LD context of this object.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Signature.InputFormat">
            <summary>
            The input format of the data to sign.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Signature.Algorithm">
            <summary>
            The crypto algorithm used to calculate the signature.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Signature.OutputFormat">
            <summary>
            The output format of the signature.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Signature.Value">
            <summary>
            The value of the signature.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Signature.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new Open Data signature.
            </summary>
            <param name="InputFormat">The input format of the data to sign.</param>
            <param name="Algorithm">The crypto algorithm used to calculate the signature.</param>
            <param name="OutputFormat">The output format of the signature.</param>
            <param name="Value">The value of the signature.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Signature.ToJSON(System.Boolean)">
            <summary>
            Return a JSON representation of this object.
            </summary>
            <param name="Embedded">Whether this data is embedded into another data structure.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Signature.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1">
            <summary>
            A list of timestamped status entries.
            </summary>
            <typeparam name="T">The type of the status entries.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.DefaultMaxStatusListSize">
            <summary>
            The maximum size of the status history.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.CurrentStatus">
            <summary>
            The current status entry.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.CurrentValue">
            <summary>
            The current status value.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.NextStatus">
            <summary>
            The next status entry.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.MaxStatusHistorySize">
            <summary>
            The maximum number of stored status entries.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.OnStatusChangedDelegate">
            <summary>
            A delegate called whenever the current status changed.
            </summary>
            <param name="Timestamp">The timestamp when this change was detected.</param>
            <param name="EventTrackingId">An event tracking identification for correlating this request with other events.</param>
            <param name="StatusSchedule">The status schedule.</param>
            <param name="OldStatus">The old timestamped status.</param>
            <param name="NewStatus">The new timestamped status.</param>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.OnStatusChanged">
            <summary>
            An event fired whenever the current status changed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.#ctor(System.UInt16)">
            <summary>
            Create a new status schedule.
            </summary>
            <param name="MaxStatusListSize">The maximum number of stored status entries.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.#ctor(`0,System.UInt16)">
            <summary>
            Create a new status schedule.
            </summary>
            <param name="InitialValue">An initial value.</param>
            <param name="MaxStatusListSize">The maximum number of stored status entries.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},System.UInt16)">
            <summary>
            Create a new status schedule.
            </summary>
            <param name="InitialValue">An initial timestamped value.</param>
            <param name="MaxStatusListSize">The maximum number of stored status entries.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.UInt16)">
            <summary>
            Create a new status schedule.
            </summary>
            <param name="InitialValues">Initial values.</param>
            <param name="MaxStatusListSize">The maximum number of stored status entries.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Timestamped{`0}},System.UInt16)">
            <summary>
            Create a new status schedule.
            </summary>
            <param name="InitialValues">Initial timestamped values.</param>
            <param name="MaxStatusListSize">The maximum number of stored status entries.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.Insert(`0)">
            <summary>
            Insert a new status entry.
            </summary>
            <param name="NewStatus">A new status.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.Insert(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Insert a new status entry.
            </summary>
            <param name="NewTimestampedStatus">A new timestamped status.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.Insert(`0,System.DateTime)">
            <summary>
            Insert a new status entry.
            </summary>
            <param name="Value">The value of the new status entry.</param>
            <param name="Timestamp">The timestamp of the new status entry.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.Insert(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Timestamped{`0}})">
            <summary>
            Insert the given enumeration of status entries.
            </summary>
            <param name="StatusList">An enumeration of status entries.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.Set(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Timestamped{`0}},org.GraphDefined.Vanaheimr.Hermod.ChangeMethods)">
            <summary>
            Set the given enumeration of status entries.
            </summary>
            <param name="StatusList">An enumeration of status entries.</param>
            <param name="ChangeMethod">A change method.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.Replace(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Timestamped{`0}})">
            <summary>
            Insert the given enumeration of status entries.
            </summary>
            <param name="StatusList">An enumeration of status entries.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.GetEnumerator">
            <summary>
            Return a status enumerator.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return a status enumerator.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.StatusSchedule`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.MyNetworkStream">
            <summary>
            Provides the underlying stream of data for network access.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.MyNetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            Initializes a new NetworkStream for the given IP socket having the given IP socket ownership.
            </summary>
            <param name="Socket">The IP socket that the NetworkStream will use to send and receive data.</param>
            <param name="OwnsSocket">Whether the NetworkStream will take ownership of the IP socket.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.MyNetworkStream.Socket">
            <summary>
            The underlying IP socket.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.JSON.JSONClient">
            <summary>
            A specialized HTTP client for JSON transport.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.JSON.JSONClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new specialized HTTP client for the JavaScript Object Notation (JSON).
            </summary>
            <param name="RemoteURL">The remote URL of the OICP HTTP endpoint to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_1.NS">
            <summary>
            SOAP v1.1 XML Namespace
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_1.NS.SOAPEnvelope">
            <summary>
            The namespace for the XML SOAP v1.1 envelope.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_1.NS.SOAPAdressing">
            <summary>
            SOAP Adressing extentions.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_1.SOAPClient">
            <summary>
            A specialized HTTP client for the Simple Object Access Protocol (SOAP) v1.1.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_1.SOAPClient.DefaultHTTPUserAgent">
            <summary>
            The default HTTP/SOAP user agent.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_1.SOAPClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.Tuple{System.String,System.String},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new specialized HTTP client for the Simple Object Access Protocol (SOAP) v1.1.
            </summary>
            <param name="RemoteURL">The remote URL of the OICP HTTP endpoint to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="URLPathPrefix">An optional default URL path prefix.</param>
            <param name="WSSLoginPassword">The WebService-Security username/password.</param>
            <param name="HTTPContentType">The HTTP content type to use.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_1.SOAPClient.Query``1(System.Xml.Linq.XElement,System.String,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{System.Xml.Linq.XElement},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Func{System.DateTime,System.Object,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{System.Xml.Linq.XElement},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Func{System.DateTime,System.Object,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Func{System.DateTime,System.Object,System.Exception,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder},org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.Xml.Linq.XNamespace,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,System.Nullable{System.TimeSpan},System.Byte)">
            <summary>
            Create a new SOAP query task.
            </summary>
            <typeparam name="T">The type of the return data structure.</typeparam>
            <param name="QueryXML">The SOAP query XML.</param>
            <param name="SOAPAction">The SOAP action.</param>
            <param name="OnSuccess">The delegate to call for every successful result.</param>
            <param name="OnSOAPFault">The delegate to call whenever a SOAP fault occured.</param>
            <param name="OnHTTPError">The delegate to call whenever a HTTP error occured.</param>
            <param name="OnException">The delegate to call whenever an exception occured.</param>
            <param name="RequestTimeout">An optional timeout of the HTTP client [default 60 sec.]</param>
            <param name="NumberOfRetry">The number of retransmissions of this request.</param>
            <returns>The data structured after it had been processed by the OnSuccess delegate, or a fault.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_2.NS">
            <summary>
            SOAP v1.2 XML Namespace
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_2.NS.SOAPEnvelope">
            <summary>
            The namespace for the XML SOAP v1.2 envelope.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_2.NS.SOAPAdressing">
            <summary>
            SOAP Adressing extentions.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_2.SOAPClient">
            <summary>
            A specialized HTTP client for the Simple Object Access Protocol (SOAP) v1.2.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_2.SOAPClient.DefaultHTTPUserAgent">
            <summary>
            The default HTTP/SOAP user agent.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_2.SOAPClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.Boolean,System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.Tuple{System.String,System.String},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new specialized HTTP client for the Simple Object Access Protocol (SOAP) v1.2.
            </summary>
            <param name="RemoteURL">The remote URL of the OICP HTTP endpoint to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this CPO client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="URLPathPrefix">An optional default URL path prefix.</param>
            <param name="WSSLoginPassword">The WebService-Security username/password.</param>
            <param name="HTTPContentType">The HTTP content type to use.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.v1_2.SOAPClient.Query``1(System.Xml.Linq.XElement,System.String,System.Func{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{System.Xml.Linq.XElement},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Func{System.DateTime,System.Object,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{System.Xml.Linq.XElement},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Func{System.DateTime,System.Object,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Func{System.DateTime,System.Object,System.Exception,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPResponse{``0}},System.Action{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest.Builder},org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientRequestLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.ClientResponseLogHandler,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.Xml.Linq.XNamespace,System.Nullable{System.Threading.CancellationToken},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,System.Nullable{System.TimeSpan},System.Byte)">
            <summary>
            Create a new SOAP query task.
            </summary>
            <typeparam name="T">The type of the return data structure.</typeparam>
            <param name="QueryXML">The SOAP query XML.</param>
            <param name="SOAPAction">The SOAP action.</param>
            <param name="OnSuccess">The delegate to call for every successful result.</param>
            <param name="OnSOAPFault">The delegate to call whenever a SOAP fault occured.</param>
            <param name="OnHTTPError">The delegate to call whenever a HTTP error occured.</param>
            <param name="OnException">The delegate to call whenever an exception occured.</param>
            <param name="RequestTimeout">An optional timeout of the HTTP client [default 60 sec.]</param>
            <param name="NumberOfRetry">The number of retransmissions of this request.</param>
            <returns>The data structured after it had been processed by the OnSuccess delegate, or a fault.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer">
            <summary>
            A HTTP/SOAP/XML server API.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.DefaultHTTPServerName">
            <summary>
            The default HTTP/SOAP/XML server name.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.DefaultHTTPServerPort">
            <summary>
            The default HTTP/SOAP/XML server TCP port.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.DefaultURLPrefix">
            <summary>
            The default HTTP/SOAP/XML server URL prefix.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.DefaultContentType">
            <summary>
            The default HTTP/SOAP/XML content type.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.DefaultRequestTimeout">
            <summary>
            The default request timeout.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.SOAPServer">
            <summary>
            The HTTP/SOAP server.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.URLPrefix">
            <summary>
            The common URL prefix for this HTTP/SOAP service.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.DNSClient">
            <summary>
            The DNS client used by this server.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.IPPorts">
            <summary>
            All TCP ports this SOAP server listens on.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.HTTPLogger">
            <summary>
            The SOAP server logger.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.RequestLog">
            <summary>
            An event called whenever a HTTP request came in.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.ResponseLog">
            <summary>
            An event called whenever a HTTP request could successfully be processed.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.ErrorLog">
            <summary>
            An event called whenever a HTTP request resulted in an error.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.#ctor(System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean)">
            <summary>
            Initialize a new HTTP server for the HTTP/SOAP/XML Server API using IPAddress.Any.
            </summary>
            <param name="HTTPServerName">An optional identification string for the HTTP server.</param>
            <param name="TCPPort">An optional TCP port for the HTTP server.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            
            <param name="URLPrefix">An optional prefix for the HTTP URIs.</param>
            <param name="SOAPContentType">The HTTP content type for SOAP messages.</param>
            <param name="DNSClient">An optional DNS client to use.</param>
            <param name="RegisterHTTPRootService">Register HTTP root services for sending a notice to clients connecting via HTML or plain text.</param>
            <param name="AutoStart">Start the server immediately.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.#ctor(System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},System.String,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Authentication.SslProtocols,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean)">
            <summary>
            Initialize a new HTTP server for the HTTP/SOAP/XML Server API using IPAddress.Any.
            </summary>
            <param name="HTTPServerName">An optional identification string for the HTTP server.</param>
            <param name="TCPPort">An optional TCP port for the HTTP server.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            <param name="URLPrefix">An optional prefix for the HTTP URIs.</param>
            <param name="SOAPContentType">The HTTP content type for SOAP messages.</param>
            <param name="DNSClient">An optional DNS client to use.</param>
            <param name="RegisterHTTPRootService">Register HTTP root services for sending a notice to clients connecting via HTML or plain text.</param>
            <param name="AutoStart">Start the server immediately.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.#ctor(org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPServer,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath})">
            <summary>
            Use the given HTTP server for the HTTP/SOAP/XML Server API.
            </summary>
            <param name="SOAPServer">A SOAP server.</param>
            <param name="URLPrefix">An optional URL prefix for the SOAP URI templates.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.Start">
            <summary>
            Start the SOAP API.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPServer.Shutdown(System.String,System.Boolean)">
            <summary>
            Stop the SOAP API.
            </summary>
            <param name="Message">An optional shutdown message.</param>
            <param name="Wait">Wait for a clean shutdown of the API.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPClient">
            <summary>
            An abstract HTTP/SOAP client.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPClient.DefaultHTTPUserAgent">
            <summary>
            The default HTTP user agent.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPClient.DefaultURLPathPrefix">
            <summary>
            The default URL path prefix.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPClient.URLPathPrefix">
            <summary>
            The default URL path prefix.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPClient.WSSLoginPassword">
            <summary>
            The WebService-Security username/password.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPClient.HTTPContentType">
            <summary>
            The HTTP content type to use.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPClient.OnSOAPErrorDelegate">
            <summary>
            A delegate called whenever a SOAP error occured.
            </summary>
            <param name="Timestamp">The timestamp of the error.</param>
            <param name="Sender">The sender of the error.</param>
            <param name="SOAPXML">The SOAP error message.</param>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPClient.OnSOAPError">
            <summary>
            An event fired whenever a SOAP error occured.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPClient.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.URL,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname},System.String,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath},System.Tuple{System.String,System.String},org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.HTTP.TransmissionRetryDelayDelegate,System.Nullable{System.UInt16},System.Boolean,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPClientLogger,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new abstract HTTP/SOAP client.
            </summary>
            <param name="RemoteURL">The remote URL of the HTTP endpoint to connect to.</param>
            <param name="VirtualHostname">An optional HTTP virtual hostname.</param>
            <param name="Description">An optional description of this HTTP/SOAP client.</param>
            <param name="RemoteCertificateValidator">The remote SSL/TLS certificate validator.</param>
            <param name="ClientCertificateSelector">A delegate to select a TLS client certificate.</param>
            <param name="ClientCert">The SSL/TLS client certificate to use of HTTP authentication.</param>
            <param name="HTTPUserAgent">The HTTP user agent identification.</param>
            <param name="URLPathPrefix">An optional default URL path prefix.</param>
            <param name="WSSLoginPassword">The WebService-Security username/password.</param>
            <param name="HTTPContentType">The HTTP content type to use.</param>
            <param name="RequestTimeout">An optional request timeout.</param>
            <param name="TransmissionRetryDelay">The delay between transmission retries.</param>
            <param name="MaxNumberOfRetries">The maximum number of transmission retries for HTTP request.</param>
            <param name="UseHTTPPipelining">Whether to pipeline multiple HTTP request through a single HTTP/TCP connection.</param>
            <param name="HTTPLogger">A HTTP logger.</param>
            <param name="DNSClient">The DNS client to use.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.ASOAPClient.SendSOAPError(System.DateTime,System.Object,System.Xml.Linq.XElement)">
            <summary>
            Notify that an HTTP error occured.
            </summary>
            <param name="Timestamp">The timestamp of the error received.</param>
            <param name="Sender">The sender of this error message.</param>
            <param name="SOAPXML">The SOAP fault/error.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatch">
            <summary>
            A SOAP dispach.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatch.Description">
            <summary>
            A description for this SOAP dispatch.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatch.Matcher">
            <summary>
            A delegate to check if this dispatch applies.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatch.BodyDelegate">
            <summary>
            A HTTP/SOAP delegate to invoke this dispatch.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatch.HeaderAndBodyDelegate">
            <summary>
            A HTTP/SOAP delegate to invoke this dispatch.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatch.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPMatch,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPBodyDelegate)">
            <summary>
            Create a new SOAP dispatch.
            </summary>
            <param name="Description">A description for this SOAP dispatch.</param>
            <param name="Matcher">A delegate to check if this dispatch applies.</param>
            <param name="BodyDelegate">A HTTP/SOAP delegate to invoke this dispatch.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatch.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPMatch,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPHeaderAndBodyDelegate)">
            <summary>
            Create a new SOAP dispatch.
            </summary>
            <param name="Description">A description for this SOAP dispatch.</param>
            <param name="Matcher">A delegate to check if this dispatch applies.</param>
            <param name="HeaderAndBodyDelegate">A HTTP/SOAP delegate to invoke this dispatch.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatch.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPBodyDelegate">
            <summary>
            A HTTP delegate.
            </summary>
            <param name="Request">The HTTP request.</param>
            <param name="SOAPBody">The parsed SOAP/XML request body.</param>
            <returns>A HTTP response task.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPHeaderAndBodyDelegate">
            <summary>
            A HTTP delegate.
            </summary>
            <param name="Request">The HTTP request.</param>
            <param name="SOAPHeader">The parsed SOAP/XML request header.</param>
            <param name="SOAPBody">The parsed SOAP/XML request body.</param>
            <returns>A HTTP response task.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPMatch">
            <summary>
            A delegate for checking if a given XML matches.
            </summary>
            <param name="SOAPXML">A XML.</param>
            <returns>The matching XML (sub-)element.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatcher">
            <summary>
            A SOAP dispatcher.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatcher.URITemplate">
            <summary>
            The URI template of this SOAP endpoint.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatcher.SOAPContentType">
            <summary>
            The HTTP content type the SOAP/XML request will be send.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatcher.SOAPDispatches">
            <summary>
            All registeres SOAP dispatches.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatcher.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType)">
            <summary>
            Create a new SOAP dispatcher.
            </summary>
            <param name="URITemplate">The URI template of the SOAP dispatcher.</param>
            <param name="SOAPContentType">The HTTP content type the SOAP/XML request will be send.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatcher.RegisterSOAPDelegate(System.String,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPMatch,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPBodyDelegate)">
            <summary>
            Register a SOAP delegate.
            </summary>
            <param name="Description">A description of this SOAP delegate.</param>
            <param name="SOAPMatch">A delegate to check whether this dispatcher matches the given XML.</param>
            <param name="SOAPBodyDelegate">A delegate to process a matching SOAP request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatcher.RegisterSOAPDelegate(System.String,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPMatch,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPHeaderAndBodyDelegate)">
            <summary>
            Register a SOAP delegate.
            </summary>
            <param name="Description">A description of this SOAP delegate.</param>
            <param name="SOAPMatch">A delegate to check whether this dispatcher matches the given XML.</param>
            <param name="SOAPHeaderAndBodyDelegate">A delegate to process a matching SOAP request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatcher.Invoke(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Invoke this SOAP endpoint and choose a matching dispatcher.
            </summary>
            <param name="Request">A HTTP request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatcher.EndpointTextInfo(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPRequest)">
            <summary>
            Return a short information text about this endpoint.
            </summary>
            <param name="Request">A HTTP request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPDispatcher.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPServer">
            <summary>
            A HTTP/SOAP/XML server.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPServer.DefaultSOAPContentType">
            <summary>
            The default HTTP content type used for all SOAP requests/responses.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPServer.HTTPServer">
            <summary>
            The underlying HTTP server.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPServer.SOAPContentType">
            <summary>
            The SOAP XML HTTP content type.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPServer.SOAPDispatchers">
            <summary>
            All registered SOAP dispatchers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPServer.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPPort,System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.RemoteCertificateValidationCallback,System.Security.Authentication.SslProtocols,System.String,System.Threading.ThreadPriority,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.UInt32},org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean)">
            <summary>
            Initialize the SOAP server using the given parameters.
            </summary>
            <param name="TCPPort">An IP port to listen on.</param>
            <param name="DefaultServerName">The default HTTP servername, used whenever no HTTP Host-header has been given.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            
            <param name="SOAPContentType">The default HTTP content type used for all SOAP requests/responses.</param>
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            <param name="DNSClient">The DNS client to use.</param>
            <param name="Autostart">Start the HTTP server thread immediately (default: no).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPServer.#ctor(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPServer,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPContentType)">
            <summary>
            Initialize the SOAP server using the given parameters.
            </summary>
            <param name="HTTPServer">The underlying HTTP server.</param>
            <param name="SOAPContentType">The default HTTP content type used for all SOAP requests/responses.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPServer.RegisterSOAPDelegate(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.String,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPMatch,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPBodyDelegate)">
            <summary>
            Register a SOAP delegate.
            </summary>
            <param name="Hostname">The HTTP Hostname.</param>
            <param name="URITemplate">The URI template.</param>
            <param name="Description">A description of this SOAP delegate.</param>
            <param name="SOAPMatch">A delegate to check whether this dispatcher matches the given XML.</param>
            <param name="SOAPBodyDelegate">A delegate to process a matching SOAP request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPServer.RegisterSOAPDelegate(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPPath,System.String,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPMatch,org.GraphDefined.Vanaheimr.Hermod.SOAP.SOAPHeaderAndBodyDelegate)">
            <summary>
            Register a SOAP delegate.
            </summary>
            <param name="Hostname">The HTTP hostname.</param>
            <param name="URITemplate">The URI template.</param>
            <param name="Description">A description of this SOAP delegate.</param>
            <param name="SOAPMatch">A delegate to check whether this dispatcher matches the given XML.</param>
            <param name="SOAPHeaderAndBodyDelegate">A delegate to process a matching SOAP request.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.MIME.Ext.findSequence(System.Byte[],System.Int32,System.Byte[])">
            <summary>Looks for the next occurrence of a sequence in a byte array</summary>
            <param name="array">Array that will be scanned</param>
            <param name="start">Index in the array at which scanning will begin</param>
            <param name="sequence">Sequence the array will be scanned for</param>
            <returns>
              The index of the next occurrence of the sequence of -1 if not found
            </returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail">
            <summary>
            An E-Mail builder.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.MailText">
            <summary>
            The E-Mail as enumeration of strings.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.MailHeaders">
            <summary>
            The E-Mail header as enumeration of strings.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.MailBody">
            <summary>
            The E-Mail body as enumeration of strings.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.ContentType">
            <summary>
            The content type of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.ContentDescription">
            <summary>
            A short text to decripte the content of the e-mail body(part).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.ContentDisposition">
            <summary>
            Content-Disposition
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.#ctor">
            <summary>
            Parse the e-mail from the given text lines.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.EMail,System.Func{System.String,System.Boolean})">
            <summary>
            Parse the e-mail from the given e-mail.
            </summary>
            <param name="EMail">An e-mail.</param>
            <param name="MailTextFilter">A filter delegate for filtering e-mail headers.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Parse the e-mail from the given text lines.
            </summary>
            <param name="MailText">The E-Mail as an enumeration of strings.</param>
            <param name="MailTextFilter">A filter delegate for filtering e-mail headers.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Create a new e-mail.
            </summary>
            <param name="MailHeaders">The E-Mail headers.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.AddEMailHeader(System.String,System.String)">
            <summary>
            Adds a key-value pair to the e-mail header.
            For well-known headers, e.g. FROM, TO, ... simple validations checks are performed.
            </summary>
            <remarks>For an e-mail the order of the header lines is often important! Keys are NOT unique, e.g. RECEIVED!</remarks>
            <param name="Key">The property key.</param>
            <param name="Value">The property value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.GetEMailHeader(System.String)">
            <summary>
            Get the E-Mail header value for the given key.
            </summary>
            <param name="Key">An E-Mail header key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.RemoveEMailHeader(System.String)">
            <summary>
            Removes a key-value pair from the e-mail header.
            </summary>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.RemoveEMailHeader(System.String,System.String)">
            <summary>
            Removes a key-value pair from the e-mail header.
            </summary>
            <param name="Key">The property key.</param>
            <param name="Value">The property value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail.RemoveEMailHeader(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Boolean})">
            <summary>
            Removes a key-value pair from the e-mail header.
            </summary>
            <param name="IncludeKeyValuePairs">The e-mail headers to include.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop">
            <summary>
            An e-mail envelop.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop.RemoteSocket">
            <summary>
            The remote socket of the incoming SMTP connection.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop.MailFrom">
            <summary>
            The sender(s) of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop.RcptTo">
            <summary>
            The receiver(s) of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop.Mail">
            <summary>
            The embedded e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop.EventTrackingId">
            <summary>
            The event tracking identification of this e-mail.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Create a new e-mail envelop based on the given
            e-mail builder data.
            </summary>
            <param name="MailBuilder">An e-mail builder.</param>
            <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.EMail,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Create a new e-mail envelop based on the given e-mail.
            </summary>
            <param name="EMail">An e-mail.</param>
            <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList,org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList,org.GraphDefined.Vanaheimr.Hermod.Mail.EMail,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Create a new e-mail envelop based on the given sender
            and receiver addresses and the e-mail builder data.
            </summary>
            <param name="MailFrom">The sender(s) of the e-mail.</param>
            <param name="RcptTo">The receiver(s) of the e-mail.</param>
            <param name="EMail">An e-mail.</param>
            <param name="RemoteSocket">The remote socket of the incoming SMTP connection.</param>
            <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList,org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList,org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder,System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPSocket},org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Create a new e-mail envelop based on the given sender
            and receiver addresses and the e-mail builder data.
            </summary>
            <param name="MailFrom">The sender(s) of the e-mail.</param>
            <param name="RcptTo">The receiver(s) of the e-mail.</param>
            <param name="MailBuilder">An e-mail builder.</param>
            <param name="RemoteSocket">The remote socket of the incoming SMTP connection.</param>
            <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder">
            <summary>
            An e-mail builder.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.From">
            <summary>
            The sender of this e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.To">
            <summary>
            The receivers of this e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.ReplyTo">
            <summary>
            The receivers of any reply on this e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.Cc">
            <summary>
            Additional receivers of this e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.Bcc">
            <summary>
            Additional but hidden receivers of this e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.Subject">
            <summary>
            The subject of this e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.Date">
            <summary>
            The sending timestamp of this e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.MessageId">
            <summary>
            The unique message identification of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.SecurityLevel">
            <summary>
            The security level of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.SymmetricKeyAlgorithm">
            <summary>
            The symmetric key algorithm to use.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.HashAlgorithm">
            <summary>
            The hash algorithm to use.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.CompressionAlgorithm">
            <summary>
            The compression algorithm to use.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.Passphrase">
            <summary>
            The passphrase.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.Body">
            <summary>
            The e-mail body.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.AsImmutable">
            <summary>
            Convert this e-mail builder to an immutable e-mail.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.#ctor">
            <summary>
            Create a new e-mail builder.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.EMail)">
            <summary>
            Parse the e-mail from the given e-mail.
            </summary>
            <param name="EMail">An e-mail.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parse the e-mail from the given text lines.
            </summary>
            <param name="MailText">The E-Mail as an enumeration of strings.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.AddAttachment``1(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart)">
            <summary>
            Add an attachment to this e-mail.
            </summary>
            <param name="EMailBodypart">An attachment.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder._EncodeBodyparts">
            <summary>
            Encode all nested e-mail body parts.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder.EncodeBodyparts">
            <summary>
            Encode this and all nested e-mail body parts.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail">
            <summary>
            A e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.From">
            <summary>
            The sender of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.To">
            <summary>
            The receivers of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.Cc">
            <summary>
            Additional receivers of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.Bcc">
            <summary>
            Hidden receivers of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.ReplyTo">
            <summary>
            The receivers of any reply on this e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.Subject">
            <summary>
            The subject of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.Date">
            <summary>
            The sending timestamp of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.MessageId">
            <summary>
            The unique message identification of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.Header">
            <summary>
            The E-Mail header as enumeration of strings.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.Body">
            <summary>
            The e-mail body.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.ToText">
            <summary>
            Return a string representation of this e-mail.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parse an e-mail from the given enumeration of strings.
            </summary>
            <param name="MailText">An enumeration of strings.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder)">
            <summary>
            Create a new e-mail based on the given e-mail builder.
            </summary>
            <param name="MailBuilder">An e-mail builder.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parse an e-mail from the given enumeration of strings.
            </summary>
            <param name="MailText">An enumeration of strings.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMail.GetEMailHeader(System.String)">
            <summary>
            Get the e-mail header value for the given key.
            </summary>
            <param name="Key">An e-mail header key.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentDispositions">
            <summary>
            An enumeration of conent dispositions.
            </summary>
            <seealso cref="!:http://www.iana.org/go/rfc2183"/>
            <seealso cref="!:http://www.iana.org/assignments/cont-disp/cont-disp.xhtml"/>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentDispositions.inline">
            <summary>
            The content of the e-mail is inlined and displayed automatically.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentDispositions.attachment">
            <summary>
            The content of the e-mail is an attachment .
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentTransferEncoding2.Default">
            <summary>
            The default encoding (aka no encoding at all).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentTransferEncoding2.SevenBit">
            <summary>
            The 7bit content transfer encoding.
            </summary>
            <remarks>
            This encoding should be restricted to textual content
            in the US-ASCII range.
            </remarks>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentTransferEncoding2.EightBit">
            <summary>
            The 8bit content transfer encoding.
            </summary>
            <remarks>
            This encoding should be restricted to textual content
            outside of the US-ASCII range but may not be supported
            by all transport services such as older SMTP servers
            that do not support the 8BITMIME extension.
            </remarks>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentTransferEncoding2.Binary">
            <summary>
            The binary content transfer encoding.
            </summary>
            <remarks>
            This encoding is simply unencoded binary data. Typically not
            supported by standard message transport services such as SMTP.
            </remarks>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentTransferEncoding2.Base64">
            <summary>
            The base64 content transfer encoding.
            <seealso cref="!:MimeKit.Encodings.Base64Encoder"/>.
            </summary>
            <remarks>
            This encoding is typically used for encoding binary data
            or textual content in a largely 8bit charset encoding and
            is supported by all message transport services.
            </remarks>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentTransferEncoding2.QuotedPrintable">
            <summary>
            The quoted printable content transfer encoding.
            <seealso cref="!:MimeKit.Encodings.QuotedPrintableEncoder"/>.
            </summary>
            <remarks>
            This encoding is used for textual content that is in a charset
            that has a minority of characters outside of the US-ASCII range
            (such as ISO-8859-1 and other single-byte charset encodings) and
            is supported by all message transport services.
            </remarks>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentTransferEncoding2.UUEncode">
            <summary>
            The uuencode content transfer encoding.
            <seealso cref="!:MimeKit.Encodings.UUEncoder"/>.
            </summary>
            <remarks>
            This is an obsolete encoding meant for encoding binary
            data and has largely been superceeded by <see cref="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ContentTransferEncoding2.Base64"/>.
            </remarks>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress">
            <summary>
            A e-mail address with owner name and optional cryptographic keys.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.JSONLDContext">
            <summary>
            The JSON-LD context of this object.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.OwnerName">
            <summary>
            The name of the owner of the e-mail address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.Address">
            <summary>
            The e-mail address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.SecretKeyRing">
            <summary>
            The secret key ring for the given e-mail address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.PublicKeyRing">
            <summary>
            The public key ring for the given e-mail address.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress,Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Create a new e-mail address.
            </summary>
            <param name="SimpleEMailAddress">A simple e-mail address.</param>
            <param name="SecretKeyRing">The secret key ring for an e-mail address.</param>
            <param name="PublicKeyRing">The public key ring for an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.#ctor(System.String,Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Create a new e-mail address.
            </summary>
            <param name="SimpleEMailAddressString">A string representation of a simple e-mail address.</param>
            <param name="SecretKeyRing">The secret key ring for an e-mail address.</param>
            <param name="PublicKeyRing">The public key ring for an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress,Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Create a new e-mail address.
            </summary>
            <param name="OwnerName">The name of the owner of the e-mail address.</param>
            <param name="SimpleEMailAddress">A simple e-mail address.</param>
            <param name="SecretKeyRing">The secret key ring for an e-mail address.</param>
            <param name="PublicKeyRing">The public key ring for an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.#ctor(System.String,System.String,Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Create a new e-mail address.
            </summary>
            <param name="OwnerName">The name of the owner of the e-mail address.</param>
            <param name="SimpleEMailAddressString">A string representation of a simple e-mail address.</param>
            <param name="SecretKeyRing">The public key ring for an e-mail address.</param>
            <param name="PublicKeyRing">The secret key ring for an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Create a new e-mail address.
            </summary>
            <param name="SimpleEMailAddress">A simple e-mail address.</param>
            <param name="PublicKeyRing">The public key ring for an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.#ctor(System.String,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Create a new e-mail address.
            </summary>
            <param name="SimpleEMailAddressString">A string representation of a simple e-mail address.</param>
            <param name="PublicKeyRing">The public key ring for an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Create a new e-mail address.
            </summary>
            <param name="OwnerName">The name of the owner of the e-mail address.</param>
            <param name="SimpleEMailAddress">A simple e-mail address.</param>
            <param name="PublicKeyRing">The public key ring for an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.#ctor(System.String,System.String,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Create a new e-mail address.
            </summary>
            <param name="OwnerName">The name of the owner of the e-mail address.</param>
            <param name="SimpleEMailAddressString">A string representation of a simple e-mail address.</param>
            <param name="PublicKeyRing">The secret key ring for an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.op_Implicit(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)~org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress">
            <summary>
            Implicitly convert a SimpleEMailAddress into an EMailAddress.
            </summary>
            <param name="SimpleEMailAddress">A simple e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.Parse(System.String)">
            <summary>
            Parse the given e-mail address.
            </summary>
            <param name="EMailAddressString">A text representation of an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.Parse(System.String,System.String)">
            <summary>
            Parse the given e-mail address.
            </summary>
            <param name="OwnerName">The name of the owner of the e-mail address.</param>
            <param name="EMailAddress">The text representation of an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.ToJSON(System.Boolean)">
            <summary>
            Return a JSON representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.op_Equality(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EMailAddress1">A EMailAddress.</param>
            <param name="EMailAddress2">Another EMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EMailAddress1">A EMailAddress.</param>
            <param name="EMailAddress2">Another EMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EMailAddress1">A EMailAddress.</param>
            <param name="EMailAddress2">Another EMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EMailAddress1">A EMailAddress.</param>
            <param name="EMailAddress2">Another EMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EMailAddress1">A EMailAddress.</param>
            <param name="EMailAddress2">Another EMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EMailAddress1">A EMailAddress.</param>
            <param name="EMailAddress2">Another EMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.CompareTo(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EMailAddress">A EMailAddress to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.Equals(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress)">
            <summary>
            Compares two EMailAddresss for equality.
            </summary>
            <param name="EMailAddress">A EMailAddress to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList">
            <summary>
            A list of e-mail addresses with owner names and cryptographic keys.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList.Length">
            <summary>
            The number of stored e-mail addresses.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress[])">
            <summary>
            Create a new e-mail address list.
            </summary>
            <param name="EMailAddressList">A list of e-mail addresses.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList.Add(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress[])">
            <summary>
            Add new e-mail addresses to the e-mail address list.
            </summary>
            <param name="EMailAddresses">A list of e-mail addresses.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList.Add(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress})">
            <summary>
            Add new e-mail addresses to the e-mail address list.
            </summary>
            <param name="EMailAddresses">An enumeration of e-mail addresses.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList.Add(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList)">
            <summary>
            Add another e-mail address list to the e-mail address list.
            </summary>
            <param name="EMailAddressList">A e-mail addresses list.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList.op_Implicit(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress)~org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList">
            <summary>
            Implicitly convert a SimpleEMailAddress into an EMailAddress.
            </summary>
            <param name="EMailAddress">An e-mail address.</param>
            <returns>A new e-mail address list.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList.op_Implicit(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)~org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList">
            <summary>
            Implicitly convert a SimpleEMailAddress into an EMailAddressList.
            </summary>
            <param name="SimpleEMailAddress">A simple e-mail address.</param>
            <returns>A new e-mail address list.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList.GetEnumerator">
            <summary>
            Return an enumerator for the list of e-mail addresses.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumerator for the list of e-mail addresses.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressList.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder">
            <summary>
            A list of e-mail addresses with owner names and cryptographic keys.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.Length">
            <summary>
            The number of stored e-mail addresses.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress})">
            <summary>
            Create a new e-mail address list.
            </summary>
            <param name="EMailAddressList">A list of e-mail addresses.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.Add(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress[])">
            <summary>
            Add new e-mail addresses to the e-mail address list.
            </summary>
            <param name="EMailAddresses">A list of e-mail addresses.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.Add(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress})">
            <summary>
            Add new e-mail addresses to the e-mail address list.
            </summary>
            <param name="EMailAddresses">An enumeration of e-mail addresses.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.Add(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder)">
            <summary>
            Add another e-mail address list to the e-mail address list.
            </summary>
            <param name="EMailAddressListBuilder">A e-mail addresses list.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.Clear">
            <summary>
            Removes all e-mail addresses from the list.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.op_Implicit(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddress)~org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder">
            <summary>
            Implicitly convert a SimpleEMailAddress into an EMailAddress.
            </summary>
            <param name="EMailAddress">An e-mail address.</param>
            <returns>A new e-mail address list.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.op_Implicit(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)~org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder">
            <summary>
            Implicitly convert a SimpleEMailAddress into an EMailAddressListBuilder.
            </summary>
            <param name="SimpleEMailAddress">A simple e-mail address.</param>
            <returns>A new e-mail address list.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.GetEnumerator">
            <summary>
            Return an enumerator for the list of e-mail addresses.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumerator for the list of e-mail addresses.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailAddressListBuilder.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart">
            <summary>
            A part of an e-mail body.
            </summary>
            <remarks>More or less an embedded e-mail for its own.</remarks>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart.Content">
            <summary>
            The content of this e-mail body.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart.NestedBodyparts">
            <summary>
            The nested e-mail body parts.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart})">
            <summary>
            Create a new e-mail bodypart.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart.#ctor(System.Func{org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail,org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType},System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new e-mail bodypart.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parse the e-mail from the given text lines.
            </summary>
            <param name="MailText">The E-Mail as an enumeration of strings.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart.ToText(System.Boolean)">
            <summary>
            Return a text-serialization of this e-mail body part.
            </summary>
            <param name="IncludeHeaders">Whether to include the e-mail headers.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBodypart.ToString">
            <summary>
            Return a text-representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBuilderExtensionMethods">
            <summary>
            Extension methods for e-mail builders.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBuilderExtensionMethods.AddAttachment``1(``0,System.Byte[],System.String,org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentTypes,System.String)">
            <summary>
            Adds the given array of bytes as a file attachment to the given e-mail.
            </summary>
            <typeparam name="T">The type of the e-mail builder.</typeparam>
            <param name="MailBuilder">An e-mail builder.</param>
            <param name="ByteArray">An array of bytes as file attachment.</param>
            <param name="Filename">The name of the file within the e-mail attachment.</param>
            <param name="ContentType">The content type of the file within the e-mail attachment.</param>
            <param name="ContentLanguage">The content language of the file within the e-mail attachment.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBuilderExtensionMethods.AddAttachment``1(``0,System.IO.Stream,System.String,org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentTypes,System.String)">
            <summary>
            Adds the given file as an attachment to the given e-mail.
            </summary>
            <typeparam name="T">The type of the e-mail builder.</typeparam>
            <param name="MailBuilder">An e-mail builder.</param>
            <param name="FileStream">The file attachment as a stream of bytes.</param>
            <param name="Filename">The name of the file to add.</param>
            <param name="ContentType">The content type of the file to add.</param>
            <param name="ContentLanguage">The content language of the file to add.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailBuilderExtensionMethods.AddAttachment``1(org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMailBuilder,System.IO.FileInfo,org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentTypes,System.String)">
            <summary>
            Adds the given file as an attachment to the given e-mail.
            </summary>
            <typeparam name="T">The type of the e-mail builder.</typeparam>
            <param name="MailBuilder">An e-mail builder.</param>
            <param name="FileInfo">The file to add.</param>
            <param name="ContentType">The content type of the file to add.</param>
            <param name="ContentLanguage">The content language of the file to add.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailSecurity">
            <summary>
            The security level of an e-mail.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailSecurity.none">
            <summary>
            Do not use any security features.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailSecurity.autosign">
            <summary>
            Choose wether to sign the e-mail automagically.
            Will not fail if signing is not possible.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailSecurity.sign">
            <summary>
            Signing the e-mail is mandatory.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailSecurity.auto">
            <summary>
            Choose wether to sign and encrypt the e-mail automagically.
            Will not fail if signing and encryption is not possible.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.EMailSecurity.encrypt">
            <summary>
            Signing and encrypting the e-mail is mandatory.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId">
            <summary>
            A unique mailinglist identification.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.ListIdRegularExpression">
            <summary>
            A regular expression to validate a List-Id e-mail header field.
            Mailinglist &lt;list@example.org&gt;
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.Name">
            <summary>
            The name of the mailing list.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.Identification">
            <summary>
            The unique identification of the mailing list.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.Value">
            <summary>
            The string value of a mailing list identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.#ctor(System.String)">
            <summary>
            Create a new unique mailinglist identification.
            </summary>
            <param name="ListId"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.Parse(System.String)">
            <summary>
            Parse an e-mail message identification from a string.
            </summary>
            <param name="EMailAddress">A string representation of a simple e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.Mail.ListId@)">
            <summary>
            Try to parse an e-mail message identification from a string.
            </summary>
            <param name="ListIdString">A string representation of a simple e-mail address.</param>
            <param name="ListId">The parsed e-mail message identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.op_Equality(org.GraphDefined.Vanaheimr.Hermod.Mail.ListId,org.GraphDefined.Vanaheimr.Hermod.Mail.ListId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ListId1">A ListId.</param>
            <param name="ListId2">Another ListId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.Mail.ListId,org.GraphDefined.Vanaheimr.Hermod.Mail.ListId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ListId1">A ListId.</param>
            <param name="ListId2">Another ListId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.Mail.ListId,org.GraphDefined.Vanaheimr.Hermod.Mail.ListId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ListId1">A ListId.</param>
            <param name="ListId2">Another ListId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.Mail.ListId,org.GraphDefined.Vanaheimr.Hermod.Mail.ListId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ListId1">A ListId.</param>
            <param name="ListId2">Another ListId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.Mail.ListId,org.GraphDefined.Vanaheimr.Hermod.Mail.ListId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ListId1">A ListId.</param>
            <param name="ListId2">Another ListId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.Mail.ListId,org.GraphDefined.Vanaheimr.Hermod.Mail.ListId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ListId1">A ListId.</param>
            <param name="ListId2">Another ListId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.CompareTo(org.GraphDefined.Vanaheimr.Hermod.Mail.ListId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ListId">A ListId to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.Equals(org.GraphDefined.Vanaheimr.Hermod.Mail.ListId)">
            <summary>
            Compares two ListIds for equality.
            </summary>
            <param name="ListId">A ListId to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.ListId.ToString">
            <summary>
            Returns a formated string representation of this object.
            </summary>
            <returns>A formated string representation of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id">
            <summary>
            A unique identification of an e-mail message.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.RandomPart">
            <summary>
            The random part of an e-mail message identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.DomainPart">
            <summary>
            The domain part of an e-mail message identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.IsNullOrEmpty">
            <summary>
            Indicates whether this identification is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.Length">
            <summary>
            The length of the e-mail message identificator.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.#ctor(System.String,System.String)">
            <summary>
            Create a new unique e-mail message identification.
            </summary>
            <param name="RandomPart">The random part of an e-mail message identification.</param>
            <param name="DomainPart">The domain part of an e-mail message identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.Parse(System.String)">
            <summary>
            Parse the given string as an e-mail message identification.
            </summary>
            <param name="Text">A text representation of an e-mail message identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.Parse(System.String,System.String)">
            <summary>
            Parse the given string as an e-mail message identification.
            </summary>
            <param name="RandomPart">The random part of an e-mail message identification.</param>
            <param name="DomainPart">The domain part of an e-mail message identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.TryParse(System.String)">
            <summary>
            Try to parse the given string as an e-mail message identification.
            </summary>
            <param name="Text">A text representation of an e-mail message identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.TryParse(System.String,System.String)">
            <summary>
            Try to parse the given string as an e-mail message identification.
            </summary>
            <param name="RandomPart">The random part of an e-mail message identification.</param>
            <param name="DomainPart">The domain part of an e-mail message identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id@)">
            <summary>
            Try to parse the given string as an e-mail message identification.
            </summary>
            <param name="Text">A text representation of an e-mail message identification.</param>
            <param name="MessageId">The parsed e-mail message identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.TryParse(System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id@)">
            <summary>
            Try to parse the given string as an e-mail message identification.
            </summary>
            <param name="RandomPart">The random part of an e-mail message identification.</param>
            <param name="DomainPart">The domain part of an e-mail message identification.</param>
            <param name="MessageId">The parsed e-mail message identification.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.Clone">
            <summary>
            Clone this e-mail message identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.op_Equality(org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id,org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="MessageId1">A message identification.</param>
            <param name="MessageId2">Another message identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id,org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="MessageId1">A message identification.</param>
            <param name="MessageId2">Another message identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id,org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="MessageId1">A message identification.</param>
            <param name="MessageId2">Another message identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id,org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="MessageId1">A message identification.</param>
            <param name="MessageId2">Another message identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id,org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="MessageId1">A message identification.</param>
            <param name="MessageId2">Another message identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id,org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="MessageId1">A message identification.</param>
            <param name="MessageId2">Another message identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.CompareTo(org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="MessageId">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.Equals(org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id)">
            <summary>
            Compares two MessageIds for equality.
            </summary>
            <param name="MessageId">A message identification to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.Message_Id.ToString">
            <summary>
            Returns a formated string representation of this object.
            </summary>
            <returns>A formated string representation of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType">
            <summary>
            A e-mail content type with all of its sub-information.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType.ContentType">
            <summary>
            The content type.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType.CharSet">
            <summary>
            The character set.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType.MIMEBoundary">
            <summary>
            The MIME boundary.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType.MicAlg">
            <summary>
            MicAlg part. Used e.g. for PGP/GPG.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType.Protocol">
            <summary>
            Protocol part. Used e.g. for PGP/GPG.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail,org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentTypes)">
            <summary>
            Create a new e-mail content type.
            </summary>
            <param name="ContentType">The content type.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.AbstractEMail,System.String)">
            <summary>
            Create a new e-mail content type by parsing the given string.
            </summary>
            <param name="ContentTypeString"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType.GenerateMIMEBoundary">
            <summary>
            Generate a valid MIME boundary, if it does not exist.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.MailContentType.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress">
            <summary>
            A simple e-mail address.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.SimpleEMail_RegEx">
            <summary>
            A regular expression to validate a simple e-mail address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.User">
            <summary>
            The user of a simple e-mail address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.Domain">
            <summary>
            The domain of a simple e-mail address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.IsNullOrEmpty">
            <summary>
            Indicates whether this e-mail address is null or empty.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.Length">
            <summary>
            The length of the tag identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.Value">
            <summary>
            The string value of a simple e-mail address.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.#ctor(System.String,System.String)">
            <summary>
            Create a new simple e-mail address.
            </summary>
            <param name="User">The user part of an email address.</param>
            <param name="Domain">The domain part of an emaul address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.Parse(System.String)">
            <summary>
            Parse the given string as an e-mail address.
            </summary>
            <param name="Text">A text representation of an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.TryParse(System.String)">
            <summary>
            Try to parse the given string as an e-mail address.
            </summary>
            <param name="Text">A text representation of an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress@)">
            <summary>
            Try to parse the given string as an e-mail address.
            </summary>
            <param name="Text">A text representation of an e-mail address.</param>
            <param name="EMailAddress">The parsed e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.IsValid(System.String)">
            <summary>
            Checks if the given string is a valid e-mail address.
            </summary>
            <param name="Text">A text representation of an e-mail address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.op_Equality(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SimpleEMailAddress1">A SimpleEMailAddress.</param>
            <param name="SimpleEMailAddress2">Another SimpleEMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SimpleEMailAddress1">A SimpleEMailAddress.</param>
            <param name="SimpleEMailAddress2">Another SimpleEMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SimpleEMailAddress1">A SimpleEMailAddress.</param>
            <param name="SimpleEMailAddress2">Another SimpleEMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SimpleEMailAddress1">A SimpleEMailAddress.</param>
            <param name="SimpleEMailAddress2">Another SimpleEMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SimpleEMailAddress1">A SimpleEMailAddress.</param>
            <param name="SimpleEMailAddress2">Another SimpleEMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress,org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SimpleEMailAddress1">A SimpleEMailAddress.</param>
            <param name="SimpleEMailAddress2">Another SimpleEMailAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.CompareTo(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SimpleEMailAddress">A SimpleEMailAddress to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.Equals(org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress)">
            <summary>
            Compares two SimpleEMailAddresss for equality.
            </summary>
            <param name="SimpleEMailAddress">A SimpleEMailAddress to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.SimpleEMailAddress.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.HTMLEMailBuilder">
            <summary>
            A HTML e-mail builder.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.HTMLEMailBuilder.HTMLText">
            <summary>
            The HTML body of the e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.HTMLEMailBuilder.PlainText">
            <summary>
            An alternative plaintext body of the e-mail.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.HTMLEMailBuilder.#ctor(System.String,System.String)">
            <summary>
            Create a new HTML e-mail builder.
            </summary>
            <param name="HTMLMail">The HTML mail.</param>
            <param name="PlainTextMail">An alternative plain text mail.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.HTMLEMailBuilder._EncodeBodyparts">
            <summary>
            Encode all information to a valid e-mail body.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.HTMLEMailBuilder.op_Implicit(org.GraphDefined.Vanaheimr.Hermod.Mail.HTMLEMailBuilder)~org.GraphDefined.Vanaheimr.Hermod.Mail.EMail">
            <summary>
            An implicit conversion of a HTTPEMailBuilder into an EMail.
            </summary>
            <param name="HTMLEMailBuilder">A HTML e-mail builder.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.MailinglistEMailBuilder">
            <summary>
            A mailinglist e-mail builder.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.MailinglistEMailBuilder.ListId">
            <summary>
            The unique identification of the mailinglist.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.MailinglistEMailBuilder.ListPost">
            <summary>
            The e-mail address of the mailinglist for posting new e-mails.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.MailinglistEMailBuilder.#ctor">
            <summary>
            Create a new mailinglist e-mail builder.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.MailinglistEMailBuilder.#ctor(org.GraphDefined.Vanaheimr.Hermod.Mail.EMail)">
            <summary>
            Parse the e-mail from the given e-mail.
            </summary>
            <param name="EMail">An e-mail.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.MailinglistEMailBuilder.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parse the e-mail from the given text lines.
            </summary>
            <param name="MailText">The E-Mail as an enumeration of strings.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.MailinglistEMailBuilder.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Mail.TextEMailBuilder">
            <summary>
            A TEXT e-mail builder.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.TextEMailBuilder.Text">
            <summary>
            The body of the text e-mail.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Mail.TextEMailBuilder.ContentLanguage">
            <summary>
            The language of the e-mail body.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Mail.TextEMailBuilder.#ctor">
            <summary>
            Create a new TEXT e-mail builder.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.IIPAddress">
            <summary> 
            A common interface for all kinds of Internet protocol addresses.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IIPAddress.Length">
            <summary>
            The length of the IP Address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IIPAddress.IsMulticast">
            <summary>
            Whether the IP address is an IPv4 multicast address.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IIPAddress.GetBytes">
            <summary>
            Return a byte array representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IIPAddress.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IIPAddress.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.IPv6Address">
            <summary>
            An IPv6 address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.Length">
            <summary>
            The length of an IPv6Address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.IsMulticast">
            <summary>
            Whether the IP address is an IPv6 multicast address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.InterfaceId">
            <summary>
            The interface identification for local IPv6 addresses, e.g. .
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.#ctor(System.Net.IPAddress)">
            <summary>
            Generates a new IPv6Address.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.#ctor(System.Byte[],System.String)">
            <summary>
            Generates a new IPv6Address.
            </summary>
            <param name="ByteArray">The IPv6 as byte array.</param>
            <param name="InterfaceId">An optional interface identification for the scope of the IPv6 address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.#ctor(System.IO.Stream)">
            <summary>
            Reads a new IPv6Address from the given stream of bytes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.Any">
            <summary>
            The IPv6.Any / ::0 address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.Localhost">
            <summary>
            The IPv6 localhost / ::1
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.Parse(System.String)">
            <summary>
            Parsed the given string representation into a new IPv6Address.
            </summary>
            <param name="IPv6AddressString">An IPv6Address string representation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.TryParse(System.String)">
            <summary>
            Parsed the given string representation into a new IPv6Address.
            </summary>
            <param name="IPv6AddressString">An IPv6Address string representation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.IPv6Address@)">
            <summary>
            Parsed the given string representation into a new IPv6Address.
            </summary>
            <param name="IPv6AddressString">An IPv6Address string representation.</param>
            <param name="IPv6Address">The parsed IPv6 address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.op_Implicit(org.GraphDefined.Vanaheimr.Hermod.IPv6Address)~System.Net.IPAddress">
            <summary>
            Convert this IPv6 address into a System.Net.IPAddress.
            </summary>
            <param name="IPv6Address">The IPv6 address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.op_Equality(org.GraphDefined.Vanaheimr.Hermod.IPv6Address,org.GraphDefined.Vanaheimr.Hermod.IPv6Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPv6Address1">A IPv6 address.</param>
            <param name="IPv6Address2">Another IPv6 address.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.IPv6Address,org.GraphDefined.Vanaheimr.Hermod.IPv6Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPv6Address1">A IPv6 address.</param>
            <param name="IPv6Address2">Another IPv6 address.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.CompareTo(org.GraphDefined.Vanaheimr.Hermod.IPv6Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPv6Address">An IPv6 address to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.CompareTo(org.GraphDefined.Vanaheimr.Hermod.IIPAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IIPAddress">An ip address to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.Equals(org.GraphDefined.Vanaheimr.Hermod.IPv6Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPv6Address">An IPv6 address to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.Equals(org.GraphDefined.Vanaheimr.Hermod.IIPAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IIPAddress">An IIPAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv6Address.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.IPPort">
            <summary>
            An Internet Protocol Layer 4 Port.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.IPPort._random">
            <summary>
            Private non-cryptographic random number generator.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.#ctor(System.UInt16)">
            <summary>
            Create a new Internet Protocol Layer 4 Port.
            </summary>
            <param name="Port">An Internet Protocol layer 4 port number.</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.IPPort.SSH">
            <summary>
            SSH.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.IPPort.TELNET">
            <summary>
            TELNET.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.IPPort.SMTP">
            <summary>
            SMTP.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.IPPort.DNS">
            <summary>
            DNS.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.IPPort.HTTP">
            <summary>
            HTTP.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.IPPort.HTTPS">
            <summary>
            HTTPS.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPPort.Random">
            <summary>
            Create a new random Internet Protocol Layer 4 Port.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.Parse(System.UInt16)">
            <summary>
            Parse the given numeric representation of an IP port.
            </summary>
            <param name="Number">A numeric representation of an IP port to parse.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.Parse(System.Int32)">
            <summary>
            Parse the given numeric representation of an IP port.
            </summary>
            <param name="Number">A numeric representation of an IP port to parse.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.TryParse(System.UInt16)">
            <summary>
            Try to parse the given numeric representation of an IP port.
            </summary>
            <param name="Number">A numeric representation of an IP port to parse.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.TryParse(System.Int32)">
            <summary>
            Try to parse the given numeric representation of an IP port.
            </summary>
            <param name="Number">A numeric representation of an IP port to parse.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.TryParse(System.UInt16,org.GraphDefined.Vanaheimr.Hermod.IPPort@)">
            <summary>
            Try to parse the given numeric representation of an IP port.
            </summary>
            <param name="Number">A numeric representation of an IP port to parse.</param>
            <param name="IPPort">The parsed IP port.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.TryParse(System.Int32,org.GraphDefined.Vanaheimr.Hermod.IPPort@)">
            <summary>
            Try to parse the given numeric representation of an IP port.
            </summary>
            <param name="Number">A numeric representation of an IP port to parse.</param>
            <param name="IPPort">The parsed IP port.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.Parse(System.String)">
            <summary>
            Parse the given text representation of an IP port.
            </summary>
            <param name="String">A text representation of an IP port to parse.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.TryParse(System.String)">
            <summary>
            Try to parse the given text representation of an IP port.
            </summary>
            <param name="String">A text representation of an IP port to parse.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.IPPort@)">
            <summary>
            Try to parse the given text representation of an IP port.
            </summary>
            <param name="String">A text representation of an IP port to parse.</param>
            <param name="IPPort">The parsed IP port.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPPort.Clone">
            <summary>
            Clone this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.ToUInt16">
            <summary>
            Returns a numeric representation of an IP port.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.ToInt32">
            <summary>
            Returns a numeric representation of an IP port.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.op_Equality(org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPPort1">An IP port.</param>
            <param name="IPPort2">Another IP port.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPPort1">An IP port.</param>
            <param name="IPPort2">Another IP port.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPPort1">An IP port.</param>
            <param name="IPPort2">Another IP port.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPPort1">An IP port.</param>
            <param name="IPPort2">Another IP port.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPPort1">An IP port.</param>
            <param name="IPPort2">Another IP port.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPPort1">An IP port.</param>
            <param name="IPPort2">Another IP port.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.CompareTo(org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPPort">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.Equals(org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPPort">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPPort.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.IPv4Address">
            <summary>
            An IPv4 address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.Length">
            <summary>
            The length of an IPv4Address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.IsMulticast">
            <summary>
            Whether the IP address is an IPv4 multicast address.
            224.0.0.0 - 239.255.255.255
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.#ctor(System.Net.IPAddress)">
            <summary>
            Generates a new IPv4Address based on the given System.Net.IPAddress.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.#ctor(System.Int32)">
            <summary>
            Generates a new IPv4Address based on the given Int32 representation.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.#ctor(System.UInt32)">
            <summary>
            Generates a new IPv4Address based on the given UInt32 representation.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Generates a new IPv4Address based on the given bytes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.#ctor(System.Byte[])">
            <summary>
            Generates a new IPv4Address based on the given byte array representation.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.#ctor(System.IO.Stream)">
            <summary>
            Reads a new IPv4Address from the given stream of bytes.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.#ctor(System.String)">
            <summary>
            Generates a new IPv4Address based on the given string representation.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.Any">
            <summary>
            The IPv4.Any / 0.0.0.0 address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.Localhost">
            <summary>
            The IPv4 localhost / 127.0.0.1
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.Broadcast">
            <summary>
            The IPv4 broadcast / 255.255.255.255
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.Parse(System.String)">
            <summary>
            Parsed the given string representation into a new IPv4Address.
            </summary>
            <param name="IPv4AddressString">An IPv4Address string representation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.Parse(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Parsed the given string representation into a new IPv4Address.
            </summary>
            <param name="IPv4AddressString">An IPv4Address string representation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.TryParse(System.String)">
            <summary>
            Parsed the given string representation into a new IPv4Address.
            </summary>
            <param name="IPv4AddressString">An IPv4Address string representation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.TryParse(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname)">
            <summary>
            Parsed the given string representation into a new IPv4Address.
            </summary>
            <param name="IPv4AddressString">An IPv4Address string representation.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.IPv4Address@)">
            <summary>
            Parsed the given string representation into a new IPv4Address.
            </summary>
            <param name="IPv4AddressString">An IPv4Address string representation.</param>
            <param name="IPv4Address">The parsed IPv4 address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.TryParse(org.GraphDefined.Vanaheimr.Hermod.HTTP.HTTPHostname,org.GraphDefined.Vanaheimr.Hermod.IPv4Address@)">
            <summary>
            Parsed the given string representation into a new IPv4Address.
            </summary>
            <param name="IPv4AddressString">An IPv4Address string representation.</param>
            <param name="IPv4Address">The parsed IPv4 address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.op_Implicit(org.GraphDefined.Vanaheimr.Hermod.IPv4Address)~System.Net.IPAddress">
            <summary>
            Convert this IPv4 address into a System.Net.IPAddress.
            </summary>
            <param name="IPv4Address">The IPv4 address.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.op_Equality(org.GraphDefined.Vanaheimr.Hermod.IPv4Address,org.GraphDefined.Vanaheimr.Hermod.IPv4Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPv4Address1">A IPv4Address.</param>
            <param name="IPv4Address2">Another IPv4Address.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.IPv4Address,org.GraphDefined.Vanaheimr.Hermod.IPv4Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPv4Address1">A IPv4Address.</param>
            <param name="IPv4Address2">Another IPv4Address.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.CompareTo(org.GraphDefined.Vanaheimr.Hermod.IPv4Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPv4Address">An IPv4 address to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.CompareTo(org.GraphDefined.Vanaheimr.Hermod.IIPAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IIPAddress">An ip address to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.Equals(org.GraphDefined.Vanaheimr.Hermod.IPv4Address)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPv4Address">An IPv4 address to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.Equals(org.GraphDefined.Vanaheimr.Hermod.IIPAddress)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IIPAddress">An IIPAddress.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPv4Address.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.IPSocket">
            <summary>
            An IP socket is a combination of an IP address and a layer4 port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPSocket.IPAddress">
            <summary>
            The IP address of this IP socket.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IPSocket.Port">
            <summary>
            The port of this IP socket.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Generates a new IPSocket based on the given IPAddress and IPPort.
            </summary>
            <param name="IPAddress">The IPAdress of the socket.</param>
            <param name="Port">The port of the socket.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.Parse(System.String)">
            <summary>
            Parse the given text representation of an IP socket.
            </summary>
            <param name="Text">A text representation of an IP socket.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.TryParse(System.String)">
            <summary>
            Parse the given text representation of an IP socket.
            </summary>
            <param name="Text">A text representation of an IP socket.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.TryParse(System.String,org.GraphDefined.Vanaheimr.Hermod.IPSocket@)">
            <summary>
            Parse the given text representation of an IP socket.
            </summary>
            <param name="Text">A text representation of an IP socket.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.LocalhostV4(org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            A socket on IPv4 localhost and the given port.
            </summary>
            <param name="Port">The IP port.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.LocalhostV6(org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            A socket on IPv6 localhost and the given port.
            </summary>
            <param name="Port">The IP port.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.op_Equality(org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPSocket1">An IP socket.</param>
            <param name="IPSocket2">Another IP socket.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.op_Inequality(org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPSocket1">An IP socket.</param>
            <param name="IPSocket2">Another IP socket.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.op_LessThan(org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPSocket1">An IP socket.</param>
            <param name="IPSocket2">Another IP socket.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPSocket1">An IP socket.</param>
            <param name="IPSocket2">Another IP socket.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.op_GreaterThan(org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPSocket1">An IP socket.</param>
            <param name="IPSocket2">Another IP socket.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPSocket1">An IP socket.</param>
            <param name="IPSocket2">Another IP socket.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.CompareTo(org.GraphDefined.Vanaheimr.Hermod.IPSocket)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPSocket">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.Equals(org.GraphDefined.Vanaheimr.Hermod.IPSocket)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPSocket">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IPSocket.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.IRemoteSocket">
            <summary>
            The remote socket is the "other side" of a socket connection.
            It is a combination of a remote IP address and a remote port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IRemoteSocket.RemoteIPAddress">
            <summary>
            The remote IP address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IRemoteSocket.RemotePort">
            <summary>
            The remote port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IRemoteSocket.RemoteSocket">
            <summary>
            The remote socket.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVServer">
            <summary>
            A TCP service accepting incoming UTF8 encoded
            comma-separated values with 0x00, 0x0a (\n) or
            0x0d 0x0a (\r\n) end-of-line characters.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVServer.__DefaultServiceBanner">
            <summary>
            The default service banner.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVServer.DefaultSplitCharacters">
            <summary>
            The default array of delimiters to split the incoming CSV line into individual elements.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVServer.SplitCharacters">
            <summary>
            The characters to split the incoming CSV text lines.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVServer.OnNewDataHandler">
            <summary>
            A delegate called whenever new data hab been received.
            </summary>
            <param name="ConnectionId">The unique identification of the TCP connection.</param>
            <param name="Timestamp">The current server timestamp.</param>
            <param name="CSVData">The CSV data.</param>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVServer.OnNewData">
            <summary>
            An event called whenever new data hab been received.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVServer.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Authentication.SslProtocols,System.String,System.String,System.Collections.Generic.IEnumerable{System.Char},System.String,System.Threading.ThreadPriority,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Boolean,System.Nullable{System.TimeSpan},System.UInt32,System.Boolean)">
            <summary>
            Initialize the TCP server using IPAddress.Any and the given parameters.
            </summary>
            <param name="TCPPort">The listening port</param>
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="SplitCharacters">An array of delimiters to split the incoming CSV line into individual elements.</param>
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            <param name="Autostart">Start the TCP server thread immediately (default: no).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVServer.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,org.GraphDefined.Vanaheimr.Hermod.IPPort,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Authentication.SslProtocols,System.String,System.String,System.Collections.Generic.IEnumerable{System.Char},System.String,System.Threading.ThreadPriority,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Boolean,System.Nullable{System.TimeSpan},System.UInt32,System.Boolean)">
            <summary>
            Initialize the TCP server using the given parameters.
            </summary>
            <param name="IIPAddress">The listening IP address(es)</param>
            <param name="Port">The listening port</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="SplitCharacters">An enumeration of delimiters to split the incoming CSV line into individual elements.</param>
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            <param name="Autostart">Start the TCP/CSV server thread immediately (default: no).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVServer.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Security.Authentication.SslProtocols,System.String,System.String,System.Collections.Generic.IEnumerable{System.Char},System.String,System.Threading.ThreadPriority,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Boolean,System.Nullable{System.TimeSpan},System.UInt32,System.Boolean)">
            <summary>
            Initialize the TCP server using IPAddress.Any and the given parameters.
            </summary>
            <param name="IPSocket">The IP socket to listen.</param>
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="SplitCharacters">An enumeration of delimiters to split the incoming CSV line into individual elements.</param>
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            <param name="Autostart">Start the TCP server thread immediately (default: no).</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVCommandProcessor">
            <summary>
            A TCP service accepting incoming CSV lines
            with ending 0x00 or 0x0d 0x0a (\r\n) characters.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVProcessor">
            <summary>
            This processor will accept incoming TCP connections and
            decode the transmitted data to UTF8 encoded comma-separated
            text lines with 0x00, 0x0a (\n) or 0x0d 0x0a (\r\n)
            end-of-line characters.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVProcessor.SplitCharacters">
            <summary>
            The characters to split the incoming CSV text lines.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.Services.CSV.TCPCSVProcessor.#ctor(System.Char[])">
            <summary>
            This processor will accept incoming TCP connections and
            decode the transmitted data to UTF8 encoded comma-separated
            text lines with 0x00, 0x0a (\n) or 0x0d 0x0a (\r\n)
            end-of-line characters.
            </summary>
            <param name="SplitCharacters">The characters to split the incoming CSV text lines.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.CSV.SplitUDPPacketArrowExtension.SplitUDPPacket``1(org.GraphDefined.Vanaheimr.Styx.Arrows.IArrowSender{org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Split an UDP packet having multiple messages
            into an enumeration of UDP packets.
            </summary>
            <typeparam name="T">The type of the UDP messages.</typeparam>
            <param name="In">The arrow sender.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.CSV.SplitUDPPacketArrow`1">
            <summary>
            Split an UDP packet having multiple messages
            into an enumeration of UDP packets.
            </summary>
            <typeparam name="T">The type of the UDP messages.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.CSV.UDPCSVReceiver">
            <summary>
            A Styx arrow sender that listens on an UDP socket and
            notifies about incoming UDP packets which will be
            converted to UTF-8, then splitted by EoL-delimiters
            and finally splitted by the given CSV delimiters.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.CSV.UDPCSVReceiver.Splitter">
            <summary>
            The delimiters for splitting a line into
            multiple CSV elements.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.CSV.UDPCSVReceiver.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPPort,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.ThreadPriority,System.Boolean,System.Func{org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{System.Collections.Generic.IEnumerable{System.String}},System.String},System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Create a new UDP/CSV receiver using IPAddress.Any and the given parameters.
            </summary>
            <param name="Port">The port to listen.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="Splitter">An array of delimiters to split the incoming CSV line into individual elements.</param>
            <param name="ReceiverThreadName">The optional name of the UDP receiver thread.</param>
            <param name="ReceiverThreadPriority">The optional priority of the UDP receiver thread.</param>
            <param name="ReceiverThreadIsBackground">Whether the UDP receiver thread is a background thread or not.</param>
            <param name="PacketThreadsNameCreator">An optional delegate to set the name of the UDP packet threads.</param>
            <param name="PacketThreadsPriority">The optional priority of the UDP packet threads.</param>
            <param name="PacketThreadsAreBackground">Whether the UDP packet threads are background threads or not.</param>
            <param name="Autostart">Start the UDP receiver thread immediately.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.CSV.UDPCSVReceiver.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,org.GraphDefined.Vanaheimr.Hermod.IPPort,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.ThreadPriority,System.Boolean,System.Func{org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{System.Collections.Generic.IEnumerable{System.String}},System.String},System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Create a new UDP/CSV receiver listening on the given IP address and port.
            </summary>
            <param name="IPAddress">The IP address to listen.</param>
            <param name="Port">The port to listen.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="Splitter">An array of delimiters to split the incoming CSV line into individual elements.</param>
            <param name="ReceiverThreadName">The optional name of the UDP receiver thread.</param>
            <param name="ReceiverThreadPriority">The optional priority of the UDP receiver thread.</param>
            <param name="ReceiverThreadIsBackground">Whether the UDP receiver thread is a background thread or not.</param>
            <param name="PacketThreadsNameCreator">An optional delegate to set the name of the UDP packet threads.</param>
            <param name="PacketThreadsPriority">The optional priority of the UDP packet threads.</param>
            <param name="PacketThreadsAreBackground">Whether the UDP packet threads are background threads or not.</param>
            <param name="Autostart">Start the UDP receiver thread immediately.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.CSV.UDPCSVReceiver.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPSocket,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.ThreadPriority,System.Boolean,System.Func{org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{System.Collections.Generic.IEnumerable{System.String}},System.String},System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Create a new UDP/CSV receiver listening on the given IP socket.
            </summary>
            <param name="IPSocket">The IP socket to listen.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="Splitter">An array of delimiters to split the incoming CSV line into individual elements.</param>
            <param name="ReceiverThreadName">The optional name of the UDP receiver thread.</param>
            <param name="ReceiverThreadPriority">The optional priority of the UDP receiver thread.</param>
            <param name="ReceiverThreadIsBackground">Whether the UDP receiver thread is a background thread or not.</param>
            <param name="PacketThreadsNameCreator">An optional delegate to set the name of the UDP packet threads.</param>
            <param name="PacketThreadsPriority">The optional priority of the UDP packet threads.</param>
            <param name="PacketThreadsAreBackground">Whether the UDP packet threads are background threads or not.</param>
            <param name="Autostart">Start the UDP receiver thread immediately.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities">
            <summary>
            Capabilities supported by an SMTP server, which are read as part of the response
            to an HELO/EHLO command that is issued during the connection phase.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.None">
            <summary>
            The server does not support any additional extensions.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.Size">
            <summary>
            The server supports the SIZE extension (rfc1870) and may have a maximum
            message size limitation.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.Dsn">
            <summary>
            The server supports the DSN extension (rfc1891), allowing clients to
            specify which (if any) recipients they would like to receive delivery
            notifications for.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.EnhancedStatusCodes">
            <summary>
            The server supports the ENHANCEDSTATUSCODES extension (rfc2034).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.Authentication">
            <summary>
            The server supports the AUTH extension (rfc2554), allowing clients to
            authenticate via supported SASL mechanisms.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.EightBitMime">
            <summary>
            The server supports the 8BITMIME extension (rfc2821), allowing clients
            to send messages using the "8bit" Content-Transfer-Encoding.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.Pipelining">
            <summary>
            The server supports the PIPELINING extension (rfc2920), allowing clients
            to send multiple commands at once in order to reduce round-trip latency.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.BinaryMime">
            <summary>
            The server supports the BINARYMIME extension (rfc3030).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.Chunking">
            <summary>
            The server supports the CHUNKING extension (rfc3030), allowing clients
            to upload messages in chunks.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.StartTLS">
            <summary>
            The server supports the STARTTLS extension (rfc3207), allowing clients
            to switch to an encrypted SSL/TLS connection after connecting.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.SMTP.SmtpCapabilities.UTF8">
            <summary>
            The server supports the SMTPUTF8 extension (rfc6531).
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPClientException">
            <summary>
            An SMTP exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPClientException.#ctor(System.String)">
            <summary>
            Create a new SMTP exception.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPClientException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new SMTP exception.
            </summary>
            <param name="Message">The exception message.</param>
            <param name="InnerException">An optional inner exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.NullMailer">
            <summary>
            A SMTP client for NOT sending, but logging e-mails.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.NullMailer.#ctor">
            <summary>
            Create a new SMTP client for NOT sending, but logging e-mails.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.NullMailer.EMails">
            <summary>
            An enumeration of all sent e-mails.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPClient">
            <summary>
            A SMTP client for sending e-mails.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPClient.LocalDomain">
            <summary>
            The local domain is used in the HELO or EHLO commands sent to
            the SMTP server. If left unset, the local IP address will be
            used instead.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPClient.Login">
            <summary>
            A login name which can be used for SMTP authentication.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPClient.Password">
            <summary>
            The password for the login name, which both will be used
            for SMTP authentication.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPClient.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.IPPort,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TLSUsage,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.TCPClient.ValidateRemoteCertificateDelegate,System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Create a new SMTP client for sending e-mails.
            </summary>
            <param name="RemoteHost"></param>
            <param name="RemotePort"></param>
            <param name="Login"></param>
            <param name="Password"></param>
            <param name="LocalDomain"></param>
            <param name="UseIPv4">Whether to use IPv4 as networking protocol.</param>
            <param name="UseIPv6">Whether to use IPv6 as networking protocol.</param>
            <param name="PreferIPv6">Prefer IPv6 (instead of IPv4) as networking protocol.</param>
            <param name="UseTLS">Whether Transport Layer Security should be used or not.</param>
            <param name="ValidateServerCertificate">A callback for validating the remote server certificate.</param>
            <param name="ConnectionTimeout">The timeout connecting to the remote service.</param>
            <param name="DNSClient">An optional DNS client used to resolve DNS names.</param>
            <param name="AutoConnect">Connect to the TCP service automatically on startup. Default is false.</param>
            <param name="CancellationToken"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPClient.Send(org.GraphDefined.Vanaheimr.Hermod.Mail.EMail,System.Byte,System.Nullable{System.TimeSpan})">
            <summary>
            Send the given e-mail.
            </summary>
            <param name="EMail">An e-mail.</param>
            <param name="NumberOfRetries">The number of retries to send the given e-mail.</param>
            <param name="RequestTimeout">The request timeout for sending the given e-mail.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPClient.Send(org.GraphDefined.Vanaheimr.Hermod.Mail.EMailEnvelop,System.Byte,System.Nullable{System.TimeSpan})">
            <summary>
            Send the given e-mail envelop.
            </summary>
            <param name="EMailEnvelop">An e-mail envelop.</param>
            <param name="NumberOfRetries">The number of retries to send the given e-mail.</param>
            <param name="RequestTimeout">The request timeout for sending the given e-mail.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPExtendedResponse">
            <summary>
            An extended SMTP responses.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPExtendedResponse.MoreDataAvailable">
            <summary>
            True, if more result lines are available.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPExtendedResponse.#ctor(org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPStatusCode,System.String,System.Boolean)">
            <summary>
            Create a new SMTP response.
            </summary>
            <param name="StatusCode">The SMTP status code.</param>
            <param name="Response">The SMTP response text.</param>
            <param name="MoreDataAvailable">True, if more result lines are available.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPExtendedResponse.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPResponse">
            <summary>
            A SMTP response.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPResponse.StatusCode">
            <summary>
            The SMTP status code.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPResponse.Response">
            <summary>
            The SMTP response text.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPResponse.#ctor(org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPStatusCode,System.String)">
            <summary>
            Create a new SMTP response.
            </summary>
            <param name="StatusCode">The SMTP status code.</param>
            <param name="Response">The SMTP response text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPResponse.ToString">
            <summary>
            Returns a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.InternalRequestLogHandler">
            <summary>
            The delegate for the SMTP request log.
            </summary>
            <param name="SMTPProcessor">The sending SMTP processor.</param>
            <param name="ServerTimestamp">The timestamp of the incoming request.</param>
            <param name="EMail">The incoming e-mail.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.InternalAccessLogHandler">
            <summary>
            The delegate for the SMTP request log.
            </summary>
            <param name="SMTPProcessor">The sending SMTP processor.</param>
            <param name="ServerTimestamp">The timestamp of the incoming request.</param>
            <param name="EMail">The incoming e-mail.</param>
            <param name="Response">The outgoing response.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPAccessLogHandler">
            <summary>
            The delegate for the SMTP access log.
            </summary>
            <param name="SMTPServer">The sending SMTP server.</param>
            <param name="ServerTimestamp">The timestamp of the incoming request.</param>
            <param name="EMail">The incoming e-mail.</param>
            <param name="Response">The outgoing response.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.InternalErrorLogHandler">
            <summary>
            The delegate for the SMTP error log.
            </summary>
            <param name="SMTPProcessor">The sending SMTP processor.</param>
            <param name="ServerTimestamp">The timestamp of the incoming request.</param>
            <param name="SMTPCommand">The SMTP command.</param>
            <param name="EMail">The incoming e-mail.</param>
            <param name="Response">The outgoing response.</param>
            <param name="Error">The occured error.</param>
            <param name="LastException">The last occured exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPErrorLogHandler">
            <summary>
            The delegate for the SMTP error log.
            </summary>
            <param name="SMTPServer">The sending SMTP server.</param>
            <param name="ServerTimestamp">The timestamp of the incoming request.</param>
            <param name="SMTPCommand">The SMTP command.</param>
            <param name="EMail">The incoming e-mail.</param>
            <param name="Response">The outgoing response.</param>
            <param name="Error">The occured error.</param>
            <param name="LastException">The last occured exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPDelegate">
            <summary>
            A SMTP delegate.
            </summary>
            <param name="EMail">The incoming e-mail.</param>
            <returns>A SMTP response.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPConnection">
            <summary>
            Accept incoming SMTP TCP connections and
            decode the transmitted data as E-Mails.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPConnection.DefaultServerName">
            <summary>
            The default SMTP servername.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPConnection.AllowStartTLS">
            <summary>
            Allow to start SSL/TLS via the 'STARTTLS' SMTP command.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPConnection.TLSEnabled">
            <summary>
            TLS was enabled for this SMTP connection.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPConnection.ErrorLog">
            <summary>
            An event called whenever a request resulted in an error.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPConnection.#ctor(System.String,System.Boolean)">
            <summary>
            This processor will accept incoming SMTP TCP connections and
            decode the transmitted data as SMTP requests.
            </summary>
            <param name="DefaultServername">The default SMTP servername.</param>
            <param name="AllowStartTLS">>Allow to start SSL/TLS via the 'STARTTLS' SMTP command.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPServer">
            <summary>
            A SMTP server.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPServer.DefaultServerName">
            <summary>
            The default SMTP servername.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPServer.ErrorLog">
            <summary>
            An event called whenever a request resulted in an error.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPServer.#ctor(System.Nullable{org.GraphDefined.Vanaheimr.Hermod.IPPort},System.String,System.String,org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP.ServerCertificateSelectorDelegate,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.RemoteCertificateValidationCallback,System.Security.Authentication.SslProtocols,System.Nullable{System.Boolean},System.String,System.Threading.ThreadPriority,System.Boolean,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionIdBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsNameBuilder,org.GraphDefined.Vanaheimr.Hermod.Sockets.ConnectionThreadsPriorityBuilder,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.UInt32},org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Boolean)">
            <summary>
            Initialize the SMTP server using the given parameters.
            </summary>
            <param name="TCPPort"></param>
            <param name="DefaultServerName">The default SMTP servername.</param>
            <param name="ServiceName">The TCP service name shown e.g. on service startup.</param>
            <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
            <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
            <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
            <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
            <param name="AllowStartTLS">Allow to start SSL/TLS via the 'STARTTLS' SMTP command.</param>
            <param name="ServerThreadName">The optional name of the TCP server thread.</param>
            <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
            <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
            <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
            <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
            <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
            <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
            <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
            <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
            <param name="DNSClient">The DNS client to use.</param>
            <param name="Autostart">Start the SMTP server thread immediately (default: no).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPServer.LogError(System.DateTime,System.String,org.GraphDefined.Vanaheimr.Hermod.Mail.EMail,org.GraphDefined.Vanaheimr.Hermod.SMTP.SMTPExtendedResponse,System.String,System.Exception)">
            <summary>
            Log an error during request processing.
            </summary>
            <param name="ServerTimestamp">The timestamp of the incoming request.</param>
            <param name="EMail">The incoming request.</param>
            <param name="SMTPCommand">The SMTP command.</param>
            <param name="Response">The outgoing response.</param>
            <param name="Error">The occured error.</param>
            <param name="LastException">The last occured exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.UDP.IUDPReceiver`1">
            <summary>
            A generic UDP receiver interface.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPMulticastSenderArrow`1">
            <summary>
            The UDPMulticastSenderArrow sends the incoming message
            to the given IP multicast group.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPMulticastSenderArrow`1.HopCount">
            <summary>
            The IPv6 hop-count or IPv4 time-to-live field
            of the outgoing IP multicast packets.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPMulticastSenderArrow`1.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.IPPort,System.Byte)">
            <summary>
            The UDPMulticastSenderArrow sends the incoming message
            to the given IP multicast group.
            </summary>
            <param name="MulticastAddress">The multicast address to join.</param>
            <param name="IPPort">The outgoing IP port to use.</param>
            <param name="HopCount">The IPv6 hop-count or IPv4 time-to-live field of the outgoing IP multicast packets.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPMulticastSenderArrow`1.ProcessArrow(`0)">
            <summary>
            Accepts a message of type S from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <param name="MessageIn">The message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPMulticastSenderArrow`1.Close">
            <summary>
            Close the multicast socket.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket`1">
            <summary>
            A generic UDP packet.
            </summary>
            <typeparam name="TData">The type of the message/payload.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket`1.UDPReceiver">
            <summary>
            The associated UDP receiver.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket`1.ServerTimestamp">
            <summary>
            The timestamp of the packet arrival at the UDP receiver.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket`1.Payload">
            <summary>
            The message/payload of the UDP packet.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket`1.#ctor(org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver{`0},System.DateTime,org.GraphDefined.Vanaheimr.Hermod.IPSocket,org.GraphDefined.Vanaheimr.Hermod.IPSocket,`0)">
            <summary>
            Create a new UDP packet.
            </summary>
            <param name="ServerTimestamp">The timestamp of the packet arrival  at the UDP receiver.</param>
            <param name="LocalSocket">The local/receiving IP socket of the UDP packet.</param>
            <param name="RemoteSocket">The remote  IP socket of the UDP packet.</param>
            <param name="Payload">The message/payload of the UDP packet.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket`1.ToString">
            <summary>
            Return a text representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1">
            <summary>
            A Styx arrow sender that listens on an UDP
            socket and notifies about incoming UDP packets.
            </summary>
            <typeparam name="TData">The type of the Styx arrows to send.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.IPAddress">
            <summary>
            Gets the IPAddress on which the UDP receiver listens.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.IsMulticast">
            <summary>
            Whether this UDP receiver is listening
            on a multicast IP address or not.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.Port">
            <summary>
            Gets the port on which the UDP receiver listens.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.IPSocket">
            <summary>
            Gets the IP socket on which the UDP receiver listens.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.ReceiverThreadName">
            <summary>
            The name of the UDP receiver thread.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.ReceiverThreadPriority">
            <summary>
            The priority of the UDP receiver thread.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.ReceiverThreadIsBackground">
            <summary>
            Whether the UDP receiver thread is a background thread or not.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.PacketThreadsPriority">
            <summary>
            The priority of the UDP packet threads.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.PacketThreadsAreBackground">
            <summary>
            Whether the UDP packet threads are background threads or not.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.BufferSize">
            <summary>
            The size of the receive buffer.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.ReceiveTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time in milliseconds
            after which a synchronous Socket.Receive(...) call will time out.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.IsRunning">
            <summary>
            True while the server is listening for new clients
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.StopRequested">
            <summary>
            The server was requested to stop and will no
            longer accept new client connections
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.OnStarted">
            <summary>
            An event fired when the UDP receiver started.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.OnNotification">
            <summary>
            An event fired for every incoming UDP packet.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.OnExceptionOccured">
            <summary>
            An event fired whenever an exception occured.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.OnCompleted">
            <summary>
            An event fired when the UDP receiver stopped.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.MapperDelegate">
            <summary>
            A delegate to transform the incoming UDP packets into custom data structures.
            </summary>
            <param name="UDPReceiver">The UDP receiver.</param>
            <param name="Timestamp">The server timestamp of the UDP packet.</param>
            <param name="LocalSocket">The local UDP socket.</param>
            <param name="RemoteSocket">The remote UDP socket.</param>
            <param name="Payload">The payload of the UDP packet.</param>
            <returns>The payload/message of the UDP packet transformed into custom data structures.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.MapReduceDelegate">
            <summary>
            A delegate to transform the incoming UDP packets into custom data structures.
            </summary>
            <param name="UDPReceiver">The UDP receiver.</param>
            <param name="Timestamp">The server timestamp of the UDP packet.</param>
            <param name="LocalSocket">The local UDP socket.</param>
            <param name="RemoteSocket">The remote UDP socket.</param>
            <param name="Payload">The payload of the UDP packet.</param>
            <returns>The payload/message of the UDP packet transformed into custom data structures.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPPort,System.String,org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver{`0}.MapperDelegate,System.String,System.Threading.ThreadPriority,System.Boolean,System.Func{org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{`0},System.String},System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Create a new UDP receiver using IPAddress.Any and the given parameters.
            </summary>
            <param name="Port">The port to listen.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="Mapper">A delegate to transform the incoming UDP packets into custom data structures.</param>
            <param name="ReceiverThreadName">The optional name of the UDP receiver thread.</param>
            <param name="ReceiverThreadPriority">The optional priority of the UDP receiver thread.</param>
            <param name="ReceiverThreadIsBackground">Whether the UDP receiver thread is a background thread or not.</param>
            <param name="PacketThreadsNameCreator">An optional delegate to set the name of the UDP packet threads.</param>
            <param name="PacketThreadsPriority">The optional priority of the UDP packet threads.</param>
            <param name="PacketThreadsAreBackground">Whether the UDP packet threads are background threads or not.</param>
            <param name="Autostart">Start the UDP receiver thread immediately.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPSocket,System.String,org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver{`0}.MapperDelegate,org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver{`0}.MapReduceDelegate,System.String,System.Threading.ThreadPriority,System.Boolean,System.Func{org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{`0},System.String},System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Create a new UDP receiver listening on the given IP address and port.
            </summary>
            <param name="IPSocket">The IP socket to listen.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="Mapper">A delegate to transform the incoming UDP packets into custom data structures.</param>
            <param name="ReceiverThreadName">The optional name of the UDP receiver thread.</param>
            <param name="ReceiverThreadPriority">The optional priority of the UDP receiver thread.</param>
            <param name="ReceiverThreadIsBackground">Whether the UDP receiver thread is a background thread or not.</param>
            <param name="PacketThreadsNameCreator">An optional delegate to set the name of the UDP packet threads.</param>
            <param name="PacketThreadsPriority">The optional priority of the UDP packet threads.</param>
            <param name="PacketThreadsAreBackground">Whether the UDP packet threads are background threads or not.</param>
            <param name="Autostart">Start the UDP receiver thread immediately.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,org.GraphDefined.Vanaheimr.Hermod.IPPort,System.String,org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver{`0}.MapperDelegate,System.String,System.Threading.ThreadPriority,System.Boolean,System.Func{org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{`0},System.String},System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Create a new UDP receiver listening on the given IP socket.
            </summary>
            <param name="IPAddress">The IP address to listen.</param>
            <param name="Port">The port to listen.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="Mapper">A delegate to transform the incoming UDP packets into custom data structures.</param>
            <param name="ReceiverThreadName">The optional name of the UDP receiver thread.</param>
            <param name="ReceiverThreadPriority">The optional priority of the UDP receiver thread.</param>
            <param name="ReceiverThreadIsBackground">Whether the UDP receiver thread is a background thread or not.</param>
            <param name="PacketThreadsNameCreator">An optional delegate to set the name of the UDP packet threads.</param>
            <param name="PacketThreadsPriority">The optional priority of the UDP packet threads.</param>
            <param name="PacketThreadsAreBackground">Whether the UDP packet threads are background threads or not.</param>
            <param name="Autostart">Start the UDP receiver thread immediately.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.Start">
            <summary>
            Start the UDP receiver.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.Start(System.TimeSpan,System.Boolean)">
            <summary>
            Start the UDP receiver after a little delay.
            </summary>
            <param name="Delay">The delay.</param>
            <param name="InBackground">Whether to wait on the main thread or in a background thread.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver`1.Shutdown(System.String,System.Boolean)">
            <summary>
            Shutdown the UDP receiver.
            </summary>
            <param name="Message">An optional shutdown message.</param>
            <param name="Wait">Wait until the server finally shutted down.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver">
            <summary>
            A Styx arrow sender that listens on an UDP socket
            and notifies about incoming UDP packets.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPPort,System.String,org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver{System.Byte[]}.MapperDelegate,System.String,System.Threading.ThreadPriority,System.Boolean,System.Func{org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{System.Byte[]},System.String},System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Create a new UDP receiver using IPAddress.Any and the given parameters.
            </summary>
            <param name="Port">The port to listen.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="Mapper">A delegate to transform the incoming UDP packets into custom data structures.</param>
            <param name="ReceiverThreadName">The optional name of the UDP receiver thread.</param>
            <param name="ReceiverThreadPriority">The optional priority of the UDP receiver thread.</param>
            <param name="ReceiverThreadIsBackground">Whether the UDP receiver thread is a background thread or not.</param>
            <param name="PacketThreadsNameCreator">An optional delegate to set the name of the UDP packet threads.</param>
            <param name="PacketThreadsPriority">The optional priority of the UDP packet threads.</param>
            <param name="PacketThreadsAreBackground">Whether the UDP packet threads are background threads or not.</param>
            <param name="Autostart">Start the UDP receiver thread immediately.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver.#ctor(org.GraphDefined.Vanaheimr.Hermod.IPSocket,System.String,org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver{System.Byte[]}.MapperDelegate,System.String,System.Threading.ThreadPriority,System.Boolean,System.Func{org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{System.Byte[]},System.String},System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Create a new UDP receiver listening on the given IP address and port.
            </summary>
            <param name="IPSocket">The IP socket to listen.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="Mapper">A delegate to transform the incoming UDP packets into custom data structures.</param>
            <param name="ReceiverThreadName">The optional name of the UDP receiver thread.</param>
            <param name="ReceiverThreadPriority">The optional priority of the UDP receiver thread.</param>
            <param name="ReceiverThreadIsBackground">Whether the UDP receiver thread is a background thread or not.</param>
            <param name="PacketThreadsNameCreator">An optional delegate to set the name of the UDP packet threads.</param>
            <param name="PacketThreadsPriority">The optional priority of the UDP packet threads.</param>
            <param name="PacketThreadsAreBackground">Whether the UDP packet threads are background threads or not.</param>
            <param name="Autostart">Start the UDP receiver thread immediately.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,org.GraphDefined.Vanaheimr.Hermod.IPPort,System.String,org.GraphDefined.Vanaheimr.Hermod.UDP.UDPReceiver{System.Byte[]}.MapperDelegate,System.String,System.Threading.ThreadPriority,System.Boolean,System.Func{org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{System.Byte[]},System.String},System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Create a new UDP receiver listening on the given IP socket.
            </summary>
            <param name="IPAddress">The IP address to listen.</param>
            <param name="Port">The port to listen.</param>
            <param name="ServiceBanner">Service banner.</param>
            <param name="Mapper">A delegate to transform the incoming UDP packets into custom data structures.</param>
            <param name="ReceiverThreadName">The optional name of the UDP receiver thread.</param>
            <param name="ReceiverThreadPriority">The optional priority of the UDP receiver thread.</param>
            <param name="ReceiverThreadIsBackground">Whether the UDP receiver thread is a background thread or not.</param>
            <param name="PacketThreadsNameCreator">An optional delegate to set the name of the UDP packet threads.</param>
            <param name="PacketThreadsPriority">The optional priority of the UDP packet threads.</param>
            <param name="PacketThreadsAreBackground">Whether the UDP packet threads are background threads or not.</param>
            <param name="Autostart">Start the UDP receiver thread immediately.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender">
            <summary>
            A generic UDP sender acceptiong Vanaheimr Stxy arrows
            in order to send them through the internet.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender.#ctor(System.String,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Create a new UDP sender.
            </summary>
            <param name="Hostname">The hostname to send the UDP data.</param>
            <param name="Port">The IP port to send the UDP data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender.#ctor(org.GraphDefined.Vanaheimr.Hermod.IIPAddress,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Create a new UDP sender.
            </summary>
            <param name="IPAddress">The IP address to send the UDP data.</param>
            <param name="Port">The IP port to send the UDP data.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1">
            <summary>
            A generic UDP sender acceptiong Vanaheimr Stxy arrows
            in order to send them through the internet.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.Hostname">
            <summary>
            The hostname to send the UDP data.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.IPAddress">
            <summary>
            The IP address to send the UDP data.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.Port">
            <summary>
            The IP port to send the UDP data.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.IPSocket">
            <summary>
            The IP socket to send the UDP data.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.UDPSocketFlags">
            <summary>
            Specifies socket send behaviors.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.#ctor(System.Func{`0,System.Byte[]})">
            <summary>
            Create a new UDPSender.
            </summary>
            <param name="MessageProcessor">A delegate to tranform the message into an array of bytes.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.#ctor(System.Func{`0,System.Byte[]},org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Create a new UDPSender.
            </summary>
            <param name="MessageProcessor">A delegate to tranform the message into an array of bytes.</param>
            <param name="Port">The IP port to send the UDP data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.#ctor(System.Func{`0,System.Byte[]},System.String,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Create a new UDPSender.
            </summary>
            <param name="MessageProcessor">A delegate to tranform the message into an array of bytes.</param>
            <param name="Hostname">The hostname to send the UDP data.</param>
            <param name="Port">The IP port to send the UDP data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.#ctor(System.Func{`0,System.Byte[]},org.GraphDefined.Vanaheimr.Hermod.IIPAddress,org.GraphDefined.Vanaheimr.Hermod.IPPort)">
            <summary>
            Create a new UDPSender.
            </summary>
            <param name="MessageProcessor">A delegate to tranform the message into an array of bytes.</param>
            <param name="IPAddress">The IP address to send the UDP data.</param>
            <param name="Port">The IP port to send the UDP data.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.Send(`0)">
            <summary>
            Send the given message to the predefined remote host.
            </summary>
            <param name="Message">The message to send.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.org#GraphDefined#Vanaheimr#Styx#Arrows#IArrowReceiver{T}#ProcessArrow(`0)">
            <summary>
            Send the given message to the predefined remote host.
            </summary>
            <param name="Message">The message to send.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.Send(org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{`0})">
            <summary>
            Send the given UDP packet to the remote host specified within the UDP packet.
            </summary>
            <param name="UDPPacket">The UDP packet to send.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.org#GraphDefined#Vanaheimr#Styx#Arrows#IArrowReceiver{org#GraphDefined#Vanaheimr#Hermod#UDP#UDPPacket{T}}#ProcessArrow(org.GraphDefined.Vanaheimr.Hermod.UDP.UDPPacket{`0})">
            <summary>
            Send the given UDP packet to the remote host specified within the UDP packet.
            </summary>
            <param name="UDPPacket">The UDP packet to send.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.ProcessExceptionOccured(System.Object,System.DateTime,System.Exception)">
            <summary>
            An error occured at the arrow sender.
            </summary>
            <param name="Sender">The sender of this error message.</param>
            <param name="Timestamp">The timestamp of the exception.</param>
            <param name="ExceptionMessage">The exception leading to this error.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.ProcessCompleted(System.Object,System.DateTime,System.String)">
            <summary>
            Close the UDP socket, as no more data will be send.
            </summary>
            <param name="Sender">The sender of this completed message.</param>
            <param name="Timestamp">The timestamp of the shutdown.</param>
            <param name="Message">An optional completion message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.UDP.UDPSender`1.Close">
            <summary>
            Close this UDP client.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.IServer">
            <summary>
            A generic server interface.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IServer.IsRunning">
            <summary>
            The server is running and ready for serving requests.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IServer.IPAddress">
            <summary>
            The listening IP address.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IServer.Port">
            <summary>
            The listening IP port.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IServer.IPSocket">
            <summary>
            The listening IP socket.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IServer.Start">
            <summary>
            Star the server.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IServer.Start(System.TimeSpan,System.Boolean)">
            <summary>
            Start the server after a little delay.
            </summary>
            <param name="Delay">The delay.</param>
            <param name="InBackground">Whether to wait on the main thread or in a background thread.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.IServer.Shutdown(System.String,System.Boolean)">
            <summary>
            Shutdown the server.
            </summary>
            <param name="Message">An optional shutdown message.</param>
            <param name="Wait">Wait until the server finally shutted down.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Hermod.IServer.StopRequested">
            <summary>
            The shutdown of the server was requested.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.ByteOrder.Little">
            <summary>
            Specifies Little-endian.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.ByteOrder.Big">
            <summary>
            Specifies Big-endian.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame">
            <summary>
            A web socket frame.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Opcodes">
            <summary>
            Web socket frame opcodes.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Opcodes.Continuation">
            <summary>
            Equivalent to numeric value 0. Indicates continuation frame.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Opcodes.Text">
            <summary>
            Equivalent to numeric value 1. Indicates text frame.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Opcodes.Binary">
            <summary>
            Equivalent to numeric value 2. Indicates binary frame.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Opcodes.Close">
            <summary>
            Equivalent to numeric value 8. Indicates connection close frame.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Opcodes.Ping">
            <summary>
            Equivalent to numeric value 9. Indicates ping frame.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Opcodes.Pong">
            <summary>
            Equivalent to numeric value 10. Indicates pong frame.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Fin.More">
            <summary>
            Equivalent to numeric value 0. Indicates more frames of a message follow.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Fin.Final">
            <summary>
            Equivalent to numeric value 1. Indicates the final frame of a message.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Rsv.Off">
            <summary>
            Equivalent to numeric value 0. Indicates zero.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Rsv.On">
            <summary>
            Equivalent to numeric value 1. Indicates non-zero.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.MaskStatus.Off">
            <summary>
            Equivalent to numeric value 0. Indicates not masked.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.MaskStatus.On">
            <summary>
            Equivalent to numeric value 1. Indicates masked.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.#ctor(org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Fin,org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.MaskStatus,System.Byte[],org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Opcodes,System.Byte[],org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Rsv,org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Rsv,org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketFrame.Rsv)">
            <summary>
            Create a new web socket frame.
            </summary>
            <param name="FIN">Whether this frame is the final frame of a larger fragmented frame.</param>
            <param name="Mask">The status of the frame mask.</param>
            <param name="MaskingKey">The masking key.</param>
            <param name="Opcode">The opcode.</param>
            <param name="Payload">The payload.</param>
            <param name="Rsv1">Reserved 1</param>
            <param name="Rsv2">Reserved 2</param>
            <param name="Rsv3">Reserved 3</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketConnection">
            <summary>
            A web socket connection.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WSRequestLogHandler">
            <summary>
            The delegate for the WebSocket request log.
            </summary>
            <param name="Timestamp">The timestamp of the incoming request.</param>
            <param name="WebSocketServer">The sending WebSocket server.</param>
            <param name="Request">The incoming request.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WSResponseLogHandler">
            <summary>
            The delegate for the WebSocket response log.
            </summary>
            <param name="Timestamp">The timestamp of the incoming request.</param>
            <param name="WebSocketServer">The sending WebSocket server.</param>
            <param name="Request">The incoming WebSocket request.</param>
            <param name="Response">The outgoing WebSocket response.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Hermod.WebSocket.WebSocketServer">
            <summary>
            A WebSocket server.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Warden.RunCheckDelegate">
            <summary>
            A delegate for checking whether it is time to run a serive check.
            </summary>
            <param name="Timestamp">The current timestamp.</param>
            <param name="ServiceProperties">Some properties which might enable or disable service checks.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Warden.TimeCheckDelegate">
            <summary>
            A delegate for checking whether it is time to run a serive check.
            </summary>
            <param name="Timestamp">The current timestamp.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Warden.PropertyCheckDelegate">
            <summary>
            A delegate for checking whether to run a serive check.
            </summary>
            <param name="ServiceProperties">Some properties which might enable or disable service checks.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Warden.ServiceCheckDelegate">
            <summary>
            A delegate representing a warden service check.
            </summary>
            <param name="Timestamp">The current timestamp.</param>
            <param name="DNSClient">An optional DNS client for warden checks requiring network access.</param>
            <param name="Entity">An entity to check.</param>
            <param name="CancellationToken">A cancellation token.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Warden.ServiceCheckDelegate`1">
            <summary>
            A delegate representing a warden service check.
            </summary>
            <param name="Timestamp">The current timestamp.</param>
            <param name="DNSClient">An optional DNS client for warden checks requiring network access.</param>
            <param name="Entity">An entity to check.</param>
            <param name="CancellationToken">A cancellation token.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Warden.IWardenCheck">
            <summary>
            The common interface of all Warden checks.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.IWardenCheck.RunCheck">
            <summary>
            A delegate for checking whether it is time to run a serive check.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.IWardenCheck.SleepTime">
            <summary>
            An additional sleeping time after every check.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.IWardenCheck.Entity">
            <summary>
            An entity to check.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.IWardenCheck.LastRun">
            <summary>
            The timestamp of the last run.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Warden.IWardenCheck.Run(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Threading.CancellationToken)">
            <summary>
            Run this Warden check.
            </summary>
            <param name="CommonTimestamp">The common timestamp of all current/parallel Warden checks.</param>
            <param name="DNSClient">The DNS client to use.</param>
            <param name="CancellationToken">The cancellation token to use.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Warden.IWardenCheck`1">
            <summary>
            The common generic interface of all Warden checks.
            </summary>
            <typeparam name="TResult">The type of the Warden check result.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.IWardenCheck`1.ResultConsumers">
            <summary>
            An array of Warden check result consumers.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Warden.Warden">
            <summary>
            A warden for service checking and monitoring.
            </summary>
            <summary>
            A warden for service checking and monitoring.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Warden.Warden.DefaultInitialDelay">
            <summary>
            The default initial delay before the first Warden checks will be run.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Warden.Warden.DefaultCheckEvery">
            <summary>
            The default delay between the runs of the Warden check timer.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.Warden.AllWardenChecks">
            <summary>
            An enumeration of all Warden checks.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.Warden.WardenCheckProperties">
            <summary>
            The Warden check properties.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.Warden.CheckEvery">
            <summary>
            Run the warden checks every...
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.Warden.InitialDelay">
            <summary>
            The initial start-up delay.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.Warden.DNSClient">
            <summary>
            An optional DNS client for warden checks requiring network access.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Warden.Warden.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient)">
            <summary>
            Create a new warden.
            </summary>
            <param name="InitialDelay">The initial start-up delay.</param>
            <param name="CheckEvery">Run the warden checks every...</param>
            <param name="DNSClient">An optional DNS client for warden checks requiring network access.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.Warden.WardenCheck`1.RunCheck">
            <summary>
            A delegate for checking whether it is time to run a serive check.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.Warden.WardenCheck`1.SleepTime">
            <summary>
            An additional sleeping time after every check.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.Warden.WardenCheck`1.Entity">
            <summary>
            An entity to check.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Warden.Warden.WardenCheck`1.LastRun">
            <summary>
            The timestamp of the last run.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Warden.Warden.WardenCheck`1.Run(System.DateTime,org.GraphDefined.Vanaheimr.Hermod.DNS.DNSClient,System.Threading.CancellationToken)">
            <summary>
            Run this Warden check.
            </summary>
            <param name="CommonTimestamp">The common timestamp of all current/parallel Warden checks.</param>
            <param name="DNSClient">The DNS client to use.</param>
            <param name="CancellationToken">The cancellation token to use.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Warden.WardenExtensions">
            <summary>
            Extensions methods for service checking and monitoring.
            </summary>
        </member>
    </members>
</doc>
